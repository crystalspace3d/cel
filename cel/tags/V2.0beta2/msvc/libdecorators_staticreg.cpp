// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_decorators[] =
"<?xml version=\"1.0\"?>"
"<!-- decorators.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>cel.decorators.executionlimit</name>"
"        <implementation>celExecutionLimitDecorator</implementation>"
"        <description>CEL Decorator: Limits the number of executions of child node</description>"
"      </class>"
"      "
"      <class>"
"        <name>cel.decorators.loop</name>"
"        <implementation>celLoopDecorator</implementation>"
"        <description>CEL Decorator: Repeats the child execution</description>"
"      </class>"
"      "
"      <class>"
"        <name>cel.decorators.negatereturn</name>"
"        <implementation>celNegateReturnDecorator</implementation>"
"        <description>CEL Decorator: Returns the opposite of the child node</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef celExecutionLimitDecorator_FACTORY_REGISTER_DEFINED 
  #define celExecutionLimitDecorator_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celExecutionLimitDecorator) 
  #endif
  #ifndef celLoopDecorator_FACTORY_REGISTER_DEFINED 
  #define celLoopDecorator_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celLoopDecorator) 
  #endif
  #ifndef celNegateReturnDecorator_FACTORY_REGISTER_DEFINED 
  #define celNegateReturnDecorator_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celNegateReturnDecorator) 
  #endif

class decorators
{
SCF_REGISTER_STATIC_LIBRARY(decorators,metainfo_decorators)
  #ifndef celExecutionLimitDecorator_FACTORY_REGISTERED 
  #define celExecutionLimitDecorator_FACTORY_REGISTERED 
    celExecutionLimitDecorator_StaticInit celExecutionLimitDecorator_static_init__; 
  #endif
  #ifndef celLoopDecorator_FACTORY_REGISTERED 
  #define celLoopDecorator_FACTORY_REGISTERED 
    celLoopDecorator_StaticInit celLoopDecorator_static_init__; 
  #endif
  #ifndef celNegateReturnDecorator_FACTORY_REGISTERED 
  #define celNegateReturnDecorator_FACTORY_REGISTERED 
    celNegateReturnDecorator_StaticInit celNegateReturnDecorator_static_init__; 
  #endif
public:
 decorators();
};
decorators::decorators() {}

}
