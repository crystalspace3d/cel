// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_pfdynmove[] =
"<?xml version=\"1.0\"?>"
"<!-- pfdynmove.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>cel.pcfactory.dynsys</name>"
"        <implementation>celPfDynamicSystem</implementation>"
"	<description>CEL Dynamic System Class Factory</description>"
"	<requires>"
"	  <class>cel.physicallayer</class>"
"	</requires>"
"      </class>"
"      <class>"
"        <name>cel.pcfactory.dynbody</name>"
"        <implementation>celPfDynamicBody</implementation>"
"	<description>CEL Dynamic Body Class Factory</description>"
"	<requires>"
"	  <class>cel.physicallayer</class>"
"	</requires>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef celPfDynamicSystem_FACTORY_REGISTER_DEFINED 
  #define celPfDynamicSystem_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celPfDynamicSystem) 
  #endif
  #ifndef celPfDynamicBody_FACTORY_REGISTER_DEFINED 
  #define celPfDynamicBody_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celPfDynamicBody) 
  #endif

class pfdynmove
{
SCF_REGISTER_STATIC_LIBRARY(pfdynmove,metainfo_pfdynmove)
  #ifndef celPfDynamicSystem_FACTORY_REGISTERED 
  #define celPfDynamicSystem_FACTORY_REGISTERED 
    celPfDynamicSystem_StaticInit celPfDynamicSystem_static_init__; 
  #endif
  #ifndef celPfDynamicBody_FACTORY_REGISTERED 
  #define celPfDynamicBody_FACTORY_REGISTERED 
    celPfDynamicBody_StaticInit celPfDynamicBody_static_init__; 
  #endif
public:
 pfdynmove();
};
pfdynmove::pfdynmove() {}

}
