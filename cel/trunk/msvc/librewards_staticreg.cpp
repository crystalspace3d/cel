// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_rewards[] =
"<?xml version=\"1.0\"?>"
"<!-- rewards.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>cel.rewards.action</name>"
"        <implementation>celActionRewardType</implementation>"
"        <description>CEL Reward: Sends an action to an entity / entity class</description>"
"      </class>"
"      "
"      <class>"
"        <name>cel.rewards.changeproperty</name>"
"        <implementation>celChangePropertyRewardType</implementation>"
"        <description>CEL Reward: Changes the value of a property</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.changeclass</name>"
"        <implementation>celChangeClassRewardType</implementation>"
"        <description>CEL Reward: Changes the class of a entity</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.createentity</name>"
"        <implementation>celCreateEntityRewardType</implementation>"
"        <description>CEL Reward: Creates an entity from a template</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.destroyentity</name>"
"        <implementation>celDestroyEntityRewardType</implementation>"
"        <description>CEL Reward: Destroys an entity</description>"
"      </class>"
"      "
"      <class>"
"        <name>cel.rewards.debugprint</name>"
"        <implementation>celDebugPrintRewardType</implementation>"
"        <description>CEL Reward: Prints a debug message</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.inventory</name>"
"        <implementation>celInventoryRewardType</implementation>"
"        <description>CEL Reward: Manipulates the inventory</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.message</name>"
"        <implementation>celMessageRewardType</implementation>"
"        <description>CEL Reward: Sends a message to an entity</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.cssequence</name>"
"        <implementation>celCsSequenceRewardType</implementation>"
"        <description>CEL Reward: Starts a cs sequence</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.sequence</name>"
"        <implementation>celSequenceRewardType</implementation>"
"        <description>CEL Reward: Starts a sequence</description>"
"      </class>"
""
"      <class>"
"        <name>cel.rewards.sequencefinish</name>"
"        <implementation>celSequenceFinishRewardType</implementation>"
"        <description>CEL Reward: Finishes a sequence</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef celActionRewardType_FACTORY_REGISTER_DEFINED 
  #define celActionRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celActionRewardType) 
  #endif
  #ifndef celChangePropertyRewardType_FACTORY_REGISTER_DEFINED 
  #define celChangePropertyRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celChangePropertyRewardType) 
  #endif
  #ifndef celChangeClassRewardType_FACTORY_REGISTER_DEFINED 
  #define celChangeClassRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celChangeClassRewardType) 
  #endif
  #ifndef celCreateEntityRewardType_FACTORY_REGISTER_DEFINED 
  #define celCreateEntityRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celCreateEntityRewardType) 
  #endif
  #ifndef celDestroyEntityRewardType_FACTORY_REGISTER_DEFINED 
  #define celDestroyEntityRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celDestroyEntityRewardType) 
  #endif
  #ifndef celDebugPrintRewardType_FACTORY_REGISTER_DEFINED 
  #define celDebugPrintRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celDebugPrintRewardType) 
  #endif
  #ifndef celInventoryRewardType_FACTORY_REGISTER_DEFINED 
  #define celInventoryRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celInventoryRewardType) 
  #endif
  #ifndef celMessageRewardType_FACTORY_REGISTER_DEFINED 
  #define celMessageRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celMessageRewardType) 
  #endif
  #ifndef celCsSequenceRewardType_FACTORY_REGISTER_DEFINED 
  #define celCsSequenceRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celCsSequenceRewardType) 
  #endif
  #ifndef celSequenceRewardType_FACTORY_REGISTER_DEFINED 
  #define celSequenceRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celSequenceRewardType) 
  #endif
  #ifndef celSequenceFinishRewardType_FACTORY_REGISTER_DEFINED 
  #define celSequenceFinishRewardType_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celSequenceFinishRewardType) 
  #endif

class rewards
{
SCF_REGISTER_STATIC_LIBRARY(rewards,metainfo_rewards)
  #ifndef celActionRewardType_FACTORY_REGISTERED 
  #define celActionRewardType_FACTORY_REGISTERED 
    celActionRewardType_StaticInit celActionRewardType_static_init__; 
  #endif
  #ifndef celChangePropertyRewardType_FACTORY_REGISTERED 
  #define celChangePropertyRewardType_FACTORY_REGISTERED 
    celChangePropertyRewardType_StaticInit celChangePropertyRewardType_static_init__; 
  #endif
  #ifndef celChangeClassRewardType_FACTORY_REGISTERED 
  #define celChangeClassRewardType_FACTORY_REGISTERED 
    celChangeClassRewardType_StaticInit celChangeClassRewardType_static_init__; 
  #endif
  #ifndef celCreateEntityRewardType_FACTORY_REGISTERED 
  #define celCreateEntityRewardType_FACTORY_REGISTERED 
    celCreateEntityRewardType_StaticInit celCreateEntityRewardType_static_init__; 
  #endif
  #ifndef celDestroyEntityRewardType_FACTORY_REGISTERED 
  #define celDestroyEntityRewardType_FACTORY_REGISTERED 
    celDestroyEntityRewardType_StaticInit celDestroyEntityRewardType_static_init__; 
  #endif
  #ifndef celDebugPrintRewardType_FACTORY_REGISTERED 
  #define celDebugPrintRewardType_FACTORY_REGISTERED 
    celDebugPrintRewardType_StaticInit celDebugPrintRewardType_static_init__; 
  #endif
  #ifndef celInventoryRewardType_FACTORY_REGISTERED 
  #define celInventoryRewardType_FACTORY_REGISTERED 
    celInventoryRewardType_StaticInit celInventoryRewardType_static_init__; 
  #endif
  #ifndef celMessageRewardType_FACTORY_REGISTERED 
  #define celMessageRewardType_FACTORY_REGISTERED 
    celMessageRewardType_StaticInit celMessageRewardType_static_init__; 
  #endif
  #ifndef celCsSequenceRewardType_FACTORY_REGISTERED 
  #define celCsSequenceRewardType_FACTORY_REGISTERED 
    celCsSequenceRewardType_StaticInit celCsSequenceRewardType_static_init__; 
  #endif
  #ifndef celSequenceRewardType_FACTORY_REGISTERED 
  #define celSequenceRewardType_FACTORY_REGISTERED 
    celSequenceRewardType_StaticInit celSequenceRewardType_static_init__; 
  #endif
  #ifndef celSequenceFinishRewardType_FACTORY_REGISTERED 
  #define celSequenceFinishRewardType_FACTORY_REGISTERED 
    celSequenceFinishRewardType_StaticInit celSequenceFinishRewardType_static_init__; 
  #endif
public:
 rewards();
};
rewards::rewards() {}

}
