@c -*-texinfo-*-
@node PropClass Behaviour Tree, PropClass Quest Manager, PropClass Spawn, Property Classes
@subsection Behaviour Tree
@cindex behaviour tree
@cindex @code{iBTNode}
@cindex @code{BTStatus}
@cindex selectors
@cindex leaf nodes
@cindex decorators

@subsubheading Property Class Details

@itemize @bullet
@item @emph{Name}:
@samp{pclogic.behaviourtree}
@item @emph{Factory ID}:
@code{cel.pcfactory.logic.behaviourtree}
@item @emph{Interface}:
@code{iBTNode}
@item @emph{Header}:
@file{include/tools/behaviourtree.h}
@end itemize

@subsubheading General Information

A behaviour tree is an ai tool for designing character behaviours and controlling enitities. A CEL behaviour 
tree can replicate any standard FSM in an intuitive manner. Behaviour trees are responsive and useful for 
programming standard behaviours with fallback plans.

Anybody interested in this tool is highly recommended to visit @url{http://www.AiGameDev.com}, specifically these freely available resources: 
@itemize @bullet
@item
@url{http://aigamedev.com/open/articles/bt-overview/, A Brief Written Overview }
@item
@url{http://aigamedev.com/open/articles/behavior-trees-part1/, A More Detailed Video Series}
@item
@url{http://aigamedev.com/insider/tutorial/second-generation-bt/, 2nd Generation Behaviour Trees}
@end itemize

CEL's behaviour tree is based on the 2nd generation event-driven design.

@subsubheading Nodes

Each node of a CEL behaviour tree must implement the @code{iBTNode} interface. The key methods for designing a behaviour tree are the AddChild and SetName methods. Setting a name for a node can be very useful when debugging trees as the errors reported will name the nodes responsible. 

The basic nodes provided are very descriptive and powerful when used in combination, however, it is possible for developers to create their own nodes if they wish to add unavailable functionality to their tree. The macros @code{CEL_DECLARE_BTNODE(className)} and @code{CEL_IMPLEMENT_BTNODE(className)} can simplify the process. If used, the developer only needs to implement the node's AddChild and Execute methods. Execute returns a BTStatus indicative of the current state of the node. If not using the macros provided, the developer must also implement the node's Initialize, SetStatus, GetStatus and SetName methods.

@subsubheading BTStatus

At any time, behaviour tree nodes must be in one of the following five states:

@itemize @bullet
@item @emph{BT_NOT_STARTED}:
Node has not yet started (or has been reset.)
@item @emph{BT_RUNNING}:
Node is part way through execution, for example it may have begun but until it's children complete it will not.
@item @emph{BT_SUCCESS}:
The node has completed succesfully.
@item @emph{BT_FAIL_CLEAN}:
The node has completed, but failed. This does not mean there has been an error, the tree can still progress as normal.
@item @emph{BT_UNEXPECTED_ERROR}:
Something unexpected occured. Raising this error crashes the tree to prevent further unexpected behaviour.
@end itemize

For more information on the difference between @emph{BT_FAIL_CLEAN} and @emph{BT_UNEXPECTED_ERROR} please see @url{http://aigamedev.com/open/article/hierarchical-logic/termination-status/, this article}.



@subsubheading Selectors (plgSelectors)

A selector is a composite node, it has multiple children that it must decide which to execute. The following 
selectors are available at this time in CEL:

@itemize @bullet
@item
@samp{cel.selectors.default}:Executes children in order until one succeeds. Node itself succeeds if any one child does, or fails cleanly if all children do.
@item
@samp{cel.selectors.sequential}: Executes children in order until one fails (and the selector fails) or all succeed (and the selector succeeds).
@item
@samp{cel.selectors.random}: Executes one child at random. Fails or succeeds as child selected fails or succeeds.
@end itemize


@subsubheading Leaf Nodes (plgBehaviourTree)

The leaf nodes of a behaviour tree are where conditions are evaluated or actions performed. To make use
of CEL rewards, triggers and parameters, the following wrapping classes are available.

@itemize @bullet
@item
@samp{cel.behaviourtree.btaction}: Executes a cel reward.
@item
@samp{cel.behaviourtree.triggerfired}: Checks if a specific cel trigger has fired already. Returns BT_SUCCESS if it has, or BT_FAIL_CLEAN if it has not.
@item
@samp{cel.behaviourtree.parametercheck}: Checks if a parameter equals a value. Returns BT_SUCCESS if it does, or BT_FAIL_CLEAN otherwise.
@end itemize


It is possible to define your own leaf nodes and it is expected that many developers may choose to implement
bespoke conditional nodes for checking game specific data.

@subsubheading Decorators (plgDecorators)

Decorators tend to have only one child (although they are not limited to as such). There purpose is not to 
decide an action to take but to add some functionality to their child node/subtree. A number of decorators
have been implemented as default in CEL, they are:

@itemize @bullet
@item
@samp{cel.decorators.executionlimit}: Limits the number of times its child can be executed. Succeeds if child is executed and completes (either with BT_SUCCESS or BT_FAIL_CLEAN) or, if execution limit has been reached, fails and does not execute child.
@item
@samp{cel.decorators.loop}: Executes the child a set number of times. Fails if child does at any time, succeeds if all iterations of child succeed.
@item
@samp{cel.behaviourtree.negatereturn}: Executes the child and returns the opposite to the child.
@end itemize

Again it is possible to define your own decorators by implementing the iBTNode interace. It is hoped that
as public use of the CEL behaviour tree grows, so will the library of available decorators. Their potential
uses covers a wide spectrum of possibilities and the more available the more powerful the tool becomes. 
 

@subsubheading Construction and Execution
Finally to construct a behaviour tree, each node must be connected to its children using its own 
@code{AddChild (iBTNode* child)} method from the interface @code{iBTNode}. The "root node" property of the propclass must then be set as a @code{csRef<iBTNode>}. 

Alternatively, the behaviour tree can be loaded from XML by setting the propclass property "xml" to a @code{csRef<iDocumentNode>} pointing to the root of the tree in XML and then executing the action "Load BT From XML".

Other properties of the behavioure tree propclass that can be set are the "tree name" and "update rate". The latter being the number of nodes in the tree that will be executed per frame.

Once set up the tree can be started by performing the propclass action "BT Start" and stopped by "BT Interrupt".

An example of constructing or loading a behaviour tree from XML is implemented in appbttest and discussed in the related tutorial (@pxref{Tutorial BTTest}.)



