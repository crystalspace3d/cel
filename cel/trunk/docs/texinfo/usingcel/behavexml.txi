@c -*-texinfo-*-
@node XML Behaviour Layer, , Addons, Using CEL
@section The XML Behaviour Layer
@cindex @sc{xml}
@cindex behaviour layer

One of the predefined behaviour layers in Crystal Entity Layer is the
@sc{xml} behaviour layer. In this behaviour layer @sc{xml} is used a
simple scripting language. This allows one to create game logic using
@sc{xml} that one can embed in a map file.

@subheading Example

The easiest way to describe the basics behind the @sc{xml} behaviour
layer is with an example:

@example
<world>
    <textures>
        <texture name="chair">
            <file>/cellib/images/chair5.gif</file>
        </texture>
    </textures>
    <materials>
        <material name="chair">
	    <texture>chair</texture>
	</material>
    </materials>
    <settings>
        <clearscreen>yes</clearscreen>
    </settings>

    <addon plugin="cel.addons.xmlscripts">
        <script name="chair_clicker">
            <event name="init">
                <var name="counter" value="0" />
            </event>
            <event name="pcbillboard_select">
                <var name="counter" value="?counter+1" />
                <if eval="?counter < 10">
                    <true>
                       <print value="'You clicked '+?counter+' times.'" />
                    </true>
                    <false>
                        <print value="'It is time you stopped clicking!'" />
                    </false>
                </if>
            </event>
        </script>

        <script name="chair_mover">
            <event name="pctimer_wakeup">
                <bb_move x="rand(1)*250000" y="rand(1)*250000" delta="500" />
            </event>
        </script>
    </addon>

    <addon plugin="cel.addons.celentity" entityname="red_chair">
        <propclass name="pc2d.billboard">
            <property name="name" string="red_chair" />
            <property name="materialname" string="chair" />
            <property name="clickable" bool="1" />
            <property name="movable" bool="1" />
            <property name="restack" bool="1" />
            <property name="color" color="1,1,1" />
            <property name="widthpct" float=".7" />
            <property name="heightpct" float=".7" />
        </propclass>
        <behaviour name="chair_clicker" />
    </addon>

    <addon plugin="cel.addons.celentity" entityname="green_chair">
        <propclass name="pc2d.billboard">
            <property name="name" string="green_chair" />
            <property name="materialname" string="chair" />
            <property name="clickable" bool="1" />
            <property name="movable" bool="0" />
            <property name="restack" bool="1" />
            <property name="color" color="0,1,0" />
            <property name="widthpct" float=".7" />
            <property name="heightpct" float=".7" />
            <property name="x" long="100000" />
            <property name="y" long="100000" />
        </propclass>
        <propclass name="pctools.timer">
            <action name="WakeUp">
                    <par name="time" long="500" />
                    <par name="repeat" bool="true" />
            </action>
        </propclass>
        <behaviour name="chair_mover" />
    </addon>
</world>
@end example

To run this example you can put this @sc{xml} file in the current
directory and then do this on Windows:

@example
bootstrap.exe cel.behaviourlayer.xml bootstrap load //this testscript.xml
@end example

Or on GNU/Linux:

@example
./bootstrap cel.behaviourlayer.xml bootstrap load /this testscript.xml
@end example

In this example we create two entities using the @samp{cel.addons.celentity}
addon (@pxref{Addons CelEntity}). The @samp{red_chair} entity just
has one property class which is the @samp{pc2d.billboard} property class.
This property class is designed for simple 2D graphics.
You can use it to build a complete 2D game (like the
Boulderdash game that is included with Crystal Entity Layer) or else you can
use it for @sc{hud} elements in a 3D game. The @samp{green_chair} entity has
a @samp{pc2d.billboard} property class and a @samp{pctools.timer}
(@pxref{PropClass Timer}).

@subheading Scripts

When using the @sc{xml} behaviour layer you basically create @dfn{scripts}.
Every script corresponds to a behaviour for an entity (multiple entities
can use it of course). In this particular example we use the
@samp{cel.addons.xmlscripts} addon (@pxref{Addons XmlScripts}) to create the
two scripts that we will use for the two entities. The @samp{chair_clicker}
script simply waits until the billboard is clicked and increments a counter.
If the counter is less than 10 then it will print out the count. Otherwise it
issues a warning. The @samp{chair_mover} script simply waits until the timer
fires and then it initiates a move of the billboard to another location.
The @samp{bb_move} will make sure the billboard keeps moving gradually
to the desired location (side note, the location system for billboards
uses a coordinate system where 0,0 it top-left and 307200,307200 is
bottom-right, independent of window resolution).

@subheading Events

Every event in a script roughly corresponds with a method call in a normal
programming language. You can make as many events as you want but there are
a few special cases. First there is the @samp{init} event which is called
when the entity with that script is first executed. It is a kind of
constructor. Secondly when the entity gets a message from one of the property
classes this message is also translated to an event. In the example above
the @samp{chair_clicker} script reacted on billboard selection which is
a message from the billboard property class that is named
@samp{pcbillboard_select}. The @samp{chair_mover} script reacted on timer
events which is a message from the timer property class that is named
@samp{pctimer_wakeup}.

@subheading Variables

You can use two kinds of variables in an event. First there are global
variables. To assign a value to such a variable you use:

@example
<var name="variable" value="1000" />
@end example

Note that variables are typed. The following types are possible:
@itemize @bullet
@item @samp{int32} (signed 32-bit integer):
This is recognized by a value like @samp{345} or @samp{-398}.
@item @samp{uint32} (unsigned 32-bit integer):
This is recognized by a value like @samp{345u}.
@item @samp{float} (floating point number):
Possibilities are @samp{342.33} or @samp{-2.33e-33}.
@item @samp{bool} (true or false):
Possible values are @samp{true} or @samp{false}.
@item @samp{vector2} (two dimensional vector):
Written as @samp{[x,y]}.
@item @samp{vector3} (three dimensional vector):
Written as @samp{[x,y,z]}.
@item @samp{string} (a string):
Written as a simple token with no spaces or special tokens (like 'bla321')
or else surrounded by single quotes.
@end itemize

To use a global variable you use the @samp{?} operator like this:

@example
<print value="?variable" />
@end example

You can combine this in complex expressions:

@example
<print value="3.14*(?variable+?othervar)" />
@end example

Global variables have one big advantage: they are persistent. Internally
the @sc{xml} behaviour layer will automatically use a @samp{pcproperties}
property class to store these variables (such a property class will be
created on the entity if it doesn't already exist). This also means you
can set and access variables from other entities (notice how the
@samp{?} operator is combined with the @samp{.} operator to access the
variable from another entity):

@example
<var entity="other_entity" name="variable" value="'some string'" />
<print value="'x in other_entity is equal to '+?other_entity.x" />
@end example

In contrast with global variables you also have local variables. Local
variables don't remember their value and you can't access local variables
from other entities either. On the other hand they are considerably more
performant to work with. Here is how you set and use a local variable:

@example
<lvar name="localvar" value="3.1415" />
<print value="'Our local variable is equal to '+#localvar"/>
@end example

This can become pretty complex. For example take this:

@example
<print value="?#entity.#variable" />
@end example

This will print out the variable which has the name given in the local
variable called @samp{variable} from the entity which has the name given
in the local variable called @samp{entity}.

@subheading Calling Events

Some events (like @samp{init} and messages from property classes) are
automatically called but you can also define your own events and in that
case you need to be able to call them (like you would call functions).
Here is an example on how to call an event:

@example
<call event="myevent" />
@end example

This is the simplest example. In this case we will simply pass control
to the @samp{myevent} event and when that finishes execution will resume
at the operation after the @code{call}.

It is also possible to call an event in another entity. Basically what this
will do is call the event in the script (behaviour) that is attached
to that other entity:

@example
<call entity="other_entities" event="myevent" />
@end example

You can also pass parameters in an event call:

@example
<call event="myevent">
    <par id="parid(x)" value="100" />
    <par id="parid(y)" value="50" />
</call>
@end example

This will pass the @samp{x} and @samp{y} parameters to the event. In the
event you can access these parameters with the @samp{@@} operator like this:

@example
<event name="addsomething">
    <print value="@@x+@@y" />
</event>
@end example

Events can also be used as functions that return a value. In that case
you write the event like this:

@example
<event name="addsomething">
    <return value="@@x+@@y" />
</event>
@end example

Then you can use this function as follows:

@example
<print value="addsomething(x=3,y=5)" />
@end example

You can see how the parameters are passed by name.

It is also possible to call an event in another entity as a function by
using the scope (@samp{::}) operator:

@example
<print value="otherentity::addsomething(x=3,y=5)" />
@end example

A special case for function calling is the @samp{...} operator. If you use
that then the parameters for the function will be the same as the parameters
that called this function. For example:

@example
<event name="process">
    <return value="addsomething(...)*3" />
</event>
@end example

This function will call @samp{addsomething} with the same parameters that
are given to @samp{process} and then multiply the result with 3.

@subheading Arrays

The @sc{xml} behaviour layer supports sparse one and two dimensional arrays.
They are sparse in the sense that only elements that are assigned really
exist and consume memory. So you can put a value in the array at index
5 and one at index 1000000 and the array will be essentially only two items
big. Also the indices don't have to be numeric. You can use any kind of
type. Internally arrays work by concatenating the array name with the index.
For example: @samp{bla['testing',3]} actually corresponds with a normal
variable that is called @samp{bla_testing_3}. So every element in an array
is actually just a normal variable. The array syntax is just syntax to help
you write arrays more easily. Here is an example on how to assign a value
in an array and how to use it:

@example
<lvar name="index" value="1000" />
<var name="bla[#index,3]" value="100" />
<print value="?bla[#index,3]" />
@end example

@subheading Commands

In this section we give a summary of all commands available in the @sc{xml}
behaviour layer:

@subsubheading Debugging and Reporting

@itemize @bullet
@item @samp{reporterror}
Attributes: @samp{message}.
Report an error to the user.
@item @samp{callstack}
Show the callstack of the current executing @sc{xml} script.
@item @samp{variables}
Show the variables of the current executing @sc{xml} script.
@item @samp{traceon}
Enable trace mode. When this is on every time a property or variable
changes it is dumped on standard output.
@item @samp{traceoff}
Disable trace mode.
@item @samp{print}
Attributes: @samp{value}.
Print out the given value on standard output.
@end itemize

@subsubheading Variables and Expressions

@itemize @bullet
@item @samp{var}
Attributes: @samp{entity} (optional), @samp{name}, @samp{value}.
Set a variable for this (or optionally another) entity to the given value.
@item @samp{lvar}
Attributes: @samp{name}, @samp{value}.
Set a local variable to the given value.
@item @samp{expr}
Attributes: @samp{eval}.
Evaluate an expression and do nothing with the result.
@end itemize

@subsubheading Program Flow

@itemize @bullet
@item @samp{if} (attribute version)
Attributes: @samp{eval}, @samp{true}, @samp{false}.
This command evaluates an expression and depending on the result
the respective event handlers are called.
@item @samp{if} (child version)
Attributes: @samp{eval}.
Children: one or both of @samp{true}, @samp{false}.
This command evaluates an expression and depending on the result the code
in the respective child is executed.
@item @samp{if} (inline version)
Attributes: @samp{eval}.
This command evaluates an expression and if the result is true the code
inside the @samp{if} statement will be executed.
@item @samp{while} (attribute version)
Attributes: @samp{eval}, @samp{exec}.
This command evaluates an expression and executes the given handler for
as long as the expression is true.
@item @samp{while} (inline version)
Attributes: @samp{eval}.
This command evaluates an expression and execute the embedded code for
as long as the expression is true.
@item @samp{for} (attribute version)
Attributes: @samp{var}, @samp{start}, @samp{end}, @samp{exec}.
This command loops an integer value from @samp{start} to @samp{end} (inclusive).
Every value is set to @samp{var}. The handler will be called for every
loop instance.
@item @samp{for} (inline version)
Attributes: @samp{var}, @samp{start}, @samp{end}.
This command loops an integer value from @samp{start} to @samp{end} (inclusive).
Every value is set to @samp{var}. The embedded code will be called for
every loop instance.
@item @samp{switch}
Atributes: @samp{eval}.
Children: multiple @samp{case} (attributes @samp{value}, children represents
code to be executed in that case), optional @samp{default} (children
represents code).
Evaluate the given expression and depending on the result execute the
@samp{case} that corresponds with the exact value. If no case matches
then optionally execute the @samp{default} branch.
@item @samp{call}
Attributes: @samp{entity} (optional), @samp{event}.
Children: multiple @samp{par} (attributes @samp{id}, @samp{value}),
optional @samp{inherit}, optional @samp{return} (attributes @samp{var}).
Call an event in this or another entity. The given parameters will be
passed to that event. If @samp{inherit} is given then the parameters
which were given to the current code will also be passed along to the
event. If @samp{return} is given then the return value of the event will
be put in the given variable.
@item @samp{super}
Call the event with the same name of the superclass.
@item @samp{return}
Attributes: @samp{value}.
Return the specified value to the caller of this event.
@item @samp{stop}
Stop the current @sc{xml} script.
@item @samp{quit}
Exit the program.
@end itemize

@subsubheading Entity and Property Class Management

@itemize @bullet
@item @samp{destroyentity} (single version)
Attributes: @samp{name}.
Destroy the entity with the given name.
@item @samp{destroyentity} (class version)
Attributes: @samp{class}.
Destroy all entities with the given class.
@item @samp{createentity} (template version)
Attributes: @samp{template}, @samp{name}.
Children: multiple @samp{par} (attributes @samp{id}, @samp{value}).
Create a named entity from the given template. The parameters are passed
to the template.
@item @samp{createentity} (normal version)
Attributes: @samp{name}, @samp{behaviour}, @samp{layer} (optional).
Create a named entity and assigned it the specified behaviour from either
the default behaviour layer or otherwise the behaviourlayer specified
by the @samp{layer} attribute.
@item @samp{createpropclass}
Attributes: @samp{name}, @samp{entity} (optional), @samp{tag} (optional).
Create a property class for the given entity (or this entity) with a given
tag (or no tag).
@item @samp{destroypropclass}
Attributes: @samp{name}, @samp{tag} (optional).
Destroy the given property class for the current entity.
@item @samp{default}
Attributes: @samp{propclass}
Make the given property class default. This is used by various operations.
@item @samp{property}
Attributes: @samp{propclass} (optional), @samp{id}, @samp{value}.
Set a property on the given property class (or default if not given).
@item @samp{action}
Attributes: @samp{propclass} (optional), @samp{id}.
Children: multiple @samp{par} (attributes @samp{id}, @samp{value}).
Perform an action on the given property class (or default if not given).
@item @samp{class_add}
Attributes: @samp{entity}, @samp{class}.
Add a given class (given as @sc{id}) to the entity.
@item @samp{class_rem}
Attributes: @samp{entity}, @samp{class}.
Remove a given class (given as @sc{id}) from the entity.
@end itemize

@subsubheading Inventory Handling

@itemize @bullet
@item @samp{inventory}
Attributes: @samp{propclass}.
Set the given property class (which should be an inventory property class)
as the default inventory.
@item @samp{inventory_add}
Attributes: @samp{child}.
Add the given child (entity) to the current inventory.
@item @samp{inventory_rem}
Attributes: @samp{child}.
Remove the given child (entity) from the current inventory.
@end itemize

@subsubheading Configuration Handling

@itemize @bullet
@item @samp{config_add}
Attributes: @samp{file}.
Add the given file (@sc{vfs} path) to the config system.
@item @samp{config_rem}
Attributes: @samp{file}.
Remove the given file (@sc{vfs} path) from the config system.
@item @samp{config_set}
Attributes: @samp{key}, @samp{value}.
Set the given configuration key to the value.
@item @samp{config_save}
Save the current configuration.
@end itemize

@subsubheading Navigation and Mesh Selection

@itemize @bullet
@item @samp{hitbeam}
Attributes: @samp{sector}, @samp{start}, @samp{end}, @samp{isectvar},
@samp{entvar}, @samp{meshvar}.
Trace a beam starting in the given sector at the @samp{start} location.
The beam ends at @samp{end}. The three output variables will be set to
the intersection point, the entity that was hit and the mesh that was
hit (useful in case a mesh was hit that has no corresponding entity).
@item @samp{selectentity}
Attributes: @samp{pc}, @samp{screenx}, @samp{screeny}, @samp{maxdist},
@samp{isectvar}, @samp{entvar}.
The given property class should be from a camera property class. Given
the screen location and maximum distance it will try to find the first
entity that is in the way. It will return the intersection point and
resulting entity.
@item @samp{navigationinfo}
Attributes: @samp{navigator}, @samp{successvar}, @samp{anglevar},
@samp{distancevar}, @samp{visiblevar}, @samp{targetvector} (optional),
@samp{targetentity} (optional), @samp{targetnode} (optional).
The navigator represents an entity that wants to navigate somewhere.
This command will fill in the variables with the navigation info to
get from the navigator position to the desired target position (either
a position, entity, or node).
@end itemize

@subsubheading Sound

@itemize @bullet
@item @samp{sound}
Attributes: @samp{name}, @samp{loop} (optional), @samp{volume} (optional),
@samp{mode} (optional).
Play the given sound. @samp{loop} is false by default. @samp{volume} is
1.0 by default and @samp{mode} is 2d by default.
@item @samp{sound_stop}
Attributes: @samp{source}.
Stop playing the specified sound source.
@item @samp{sound_pause}
Attributes: @samp{source}.
Pause playing the specified sound source.
@item @samp{sound_unpause}
Attributes: @samp{source}.
Unpause playing the specified sound source.
@item @samp{sound_restart}
Attributes: @samp{source}.
Restart playing the specified sound source.
@item @samp{sound_volume}
Attributes: @samp{source}, @samp{volume}.
Change the volume of the given sound source.
@item @samp{sound_speed}
Attributes: @samp{source}, @samp{rate}.
Change the speed of the given sound source.
@end itemize

@subsubheading Billboards

@itemize @bullet
@item @samp{bb_movelayer}
Attributes: @samp{layer}, @samp{x}, @samp{y}.
Move the given billboard layer to the absolute location given by @samp{x}
and @samp{y}.
@item @samp{bb_move}
Attributes: @samp{pc} (optional), @samp{x}, @samp{y}, @samp{delta} (optional).
Move the given billboard ot the absolute location given by @samp{x}
and @samp{y}.
@item @samp{bb_tofront}
Attributes: @samp{pc} (optional)
Move the given billboard to the front of the render queue.
@item @samp{bb_toback}
Attributes: @samp{pc} (optional)
Move the given billboard to the back of the render queue.
@item @samp{bb_up}
Attributes: @samp{pc} (optional)
Move the given billboard one up in the render queue.
@item @samp{bb_down}
Attributes: @samp{pc} (optional)
Move the given billboard one down in the render queue.
@end itemize

@subsubheading Various

@itemize @bullet
@item @samp{strsplit}
Attributes: @samp{string}, @samp{left}, @samp{delimiter}, @samp{right}.
Split the given input string in a left and a right part (@samp{left} and
@samp{right} are variable names). The @samp{delimiter} will be used
to decide where to split.
@item @samp{randomize}
Randomize the randomizer.
@item @samp{hidemouse}
Hide the mouse.
@item @samp{showmouse}
Show the mouse.
@end itemize

@subheading Functions

In this section we give a summary of all functions available in the @sc{xml}
behaviour layer:

@subsubheading ID Functions

@itemize @bullet
@item @samp{id( idname )}
Calculate the @sc{id} from the given string.
@item @samp{parid( idname )}
Calculate the @sc{id} from the given string. The substring
@samp{cel.parameter.} is added in front of @samp{idname}.
@item @samp{actid( idname )}
Calculate the @sc{id} from the given string. The substring @samp{cel.action.}
is added in front of @samp{idname}.
@item @samp{propid( idname )}
Calculate the @sc{id} from the given string. The substring
@samp{cel.property.} is added in front of @samp{idname}.
@end itemize

@subsubheading Entity and Property Class Functions

@itemize @bullet
@item @samp{pc( [entity,] pcname )}
Get the given property class from this (or the specified) entity.
@item @samp{pctag( [entity,] pcname, tag )}
Get the given property class with the given tag from this (or the
specified) entity.
@item @samp{property( [pc,] id )}
Get the property from the specified (or default) property class.
@item @samp{hasclass( entity, id )}
Return true if the entity has the given class (specified as @sc{id}).
@item @samp{entname( [entity] )}
Return the name of the current (or given) entity.
@item @samp{ent( [name] )}
Return the current entity or find the entity with the given name.
@end itemize

@subsubheading Variable and Expression Functions

@itemize @bullet
@item @samp{param( id )}
Dereference a parameter (equivalent to @@parname).
@item @samp{if( expression, truevalue, falsevalue )}
Evaluate the given expression and return the @samp{truevalue} in case
that expression is true. Otherwise @samp{falsevalue} is returned. Note
that both expressions will always be evaluated!
@item @samp{testvar( [entity,] variable )}
Test if the variable exists in this (or the specified) entity.
@end itemize

@subsubheading Mathematical Functions

@itemize @bullet
@item @samp{abs( value )}
Calculate the absolute value of the given input. Works for integer and
floating point.
@item @samp{min( value1, value2 )}
Calculate the minimum value of the given inputs. Works for strings, floats,
and integers.
@item @samp{max( value1, value2 )}
Calculate the maximum value of the given inputs. Works for strings, floats,
and integers.
@item @samp{cos( angle )}
Return the cosinus of the given angle (in radians).
@item @samp{sin( angle )}
Return the sinus of the given angle (in radians).
@item @samp{tan( angle )}
Return the tangent of the given angle (in radians).
@item @samp{acos( value )}
Return the arc-cosinus (in radians) of the given value.
@item @samp{asin( value )}
Return the arc-sinus (in radians) of the given value.
@item @samp{atan( value )}
Return the arc-tangent (in radians) of the given value.
@item @samp{sign( value )}
Return 1 if the input is positive, -1 if negative, and 0 otherwise.
This works for integer and floating point.
@item @samp{sqrt( value )}
Return the square root of the given value.
@item @samp{normalize( vector )}
Normalize the given @sc{3d} vector.
@item @samp{sqdist( vector1, vector2 )}
Return the squared distance between vector1 and vector2. Vectors can
be @sc{2d} or @sc{3d}.
@item @samp{intpol( delta, value1, value2 )}
Interpolate the two values with the delta. When delta is 0 then @samp{value1}
is returned. If delta is 1 then @samp{value2} is returned. Otherwise an
interpolated value. This function works for integers, floating point values,
@sc{2d} and @sc{3d} vectors, and colors.
@item @samp{int( value )}
Convert the value to an integer. This works for integers, floating point
numbers, booleans, and strings. In the last case the string will be parsed
as an integer and the resulting value will be returned.
@item @samp{float( value )}
Convert the value to a float point number. This works for integers,
floating point numbers, booleans, and strings. In the last case the string
will be parsed as a floating point and the resulting value will be
returned.
@item @samp{bool( value )}
Convert the value to a boolean. This works for integers, floating point
numbers, booleans, strings, entities, and property classes. The semantic
meaning is that if the value is 0 then false is returned. Otherwise
true. In case of string the input string is parsed and interprested
as a boolean value. The parser understands @samp{0}, @samp{1}, @samp{false},
@samp{true}, @samp{yes}, @samp{no}, @samp{on}, and @samp{off}.
@item @samp{rand( value )}
Return a random number between 0 and the given value (exclusive). If the
input value is an integer then the result will be an integer. If the
input value is a floating point number then the result will also be
floating point.
@item @samp{getyrot( vector1, vector2 )}
Calculate the angle between the two given @sc{3d} vectors.
@item @samp{vecx( vector )}
Get the x component from the given @sc{2d} or @sc{3d} vector.
@item @samp{vecy( vector )}
Get the y component from the given @sc{2d} or @sc{3d} vector.
@item @samp{vecz( vector )}
Get the z component from the given @sc{3d} vector.
@end itemize

@subsubheading String Functions

@itemize @bullet
@item @samp{strsub( string, position, length )}
Calculate the substring of the input string starting at the given
position (positions count at 0) and the specific length.
@item @samp{stridx( string, substring )}
Calculate the first position of the substring in the string. Return -1
if not found (positions start counting at 0).
@item @samp{strlen( string )}
Return the length of the string.
@end itemize

@subsubheading Inventory Functions

@itemize @bullet
@item @samp{inventory_get( index )}
Return the given entity from the current inventory (with index).
@item @samp{inventory_count( )}
Return the number of items in the current inventory.
@item @samp{inventory_in( entity )}
Check if the entity is part of the current inventory.
@item @samp{inventory_inname( name )}
Check if the named entity is part of the current inventory.
@item @samp{inventory_find( entity )}
Find the entity in the current inventory and return the index (or -1
if not found).
@item @samp{inventory_findname( name )}
Find the named entity in the current inventory and return the index (or -1
if not found).
@end itemize

@subsubheading Billboard and Screen Functions

@itemize @bullet
@item @samp{mousex( )}
Return the x mouse position in screen coordinates.
@item @samp{mousey( )}
Return the y mouse position in screen coordinates.
@item @samp{bb_mousex( )}
Return the x mouse position in billboard coordinates.
@item @samp{bb_mousey( )}
Return the y mouse position in billboard coordinates.
@item @samp{scr_width( )}
Return the width of the window or screen in pixels.
@item @samp{scr_height( )}
Return the height of the window or screen in pixels.
@item @samp{bb_testcollide( pc )}
The given property class should be a billboard property class. This function
will test if the given billboard collides with the billboard of this
entity.
@end itemize

@subsubheading File Functions

@itemize @bullet
@item @samp{chdirauto( directory, file )}
Set the current @sc{vfs} directory to the given directory. If the directory
is a @sc{zip} file then the given file will be used to help mount the given
path.
@item @samp{readfile( vararray, file )}
Read the given file from @sc{vfs} and put every line in the input
array. Return the number of lines that were read or -1 in case of error.
@item @samp{writefile( vararray, file, start, stop )}
Write the given file in @sc{vfs} and put the lines starting at @samp{start}
until @samp{stop} in that file.
@end itemize

@subsubheading Key Pair Functions

@itemize @bullet
@item @samp{keynode( sector, node, key [, valuename] )}
Find a named node in the given sector and locate the @samp{key} in that node.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@item @samp{keymeshobj( mesh, key [, valuename] )}
Locate the @samp{key} in the given mesh.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@item @samp{keysector( sector, key [, valuename] )}
Locate the @samp{key} in the given sector.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@item @samp{keymeshfact( meshfact, key [, valuename] )}
Locate the @samp{key} in the given mesh factory.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@item @samp{keytexture( texture, key [, valuename] )}
Locate the @samp{key} in the given texture.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@item @samp{keymaterial( material, key [, valuename] )}
Locate the @samp{key} in the given material.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@item @samp{keylight( light, key [, valuename] )}
Locate the @samp{key} in the given light.
If @samp{valuename} is given then additionally locate the right value.
The result of this function is the value associated with that key (and
valuename).
@end itemize

@subsubheading Sound Functions

@itemize @bullet
@item @samp{sound( name [,loop [,volume [,play [,mode3d] ] ] ] )}
Create a sound source for the given sound name. @samp{loop} is false by
default, @samp{volume} is 1.0 by default, @samp{play} is true by default
(if set to false the sound will not be played but the source is still
created). @samp{mode3d} is set to @sc{2d} by default.
@item @samp{soundpaused( source )}
Return true if the sound source is paused.
@end itemize

@subsubheading Various

@itemize @bullet
@item @samp{rgb( red, green, blue )}
Calculate the color for the given red, green, and blue values (values between
0 and 1).
@item @samp{config( key, default )}
Read the given configuration key from the configuration system. If the key is
not present then the default will be returned.
@item @samp{colred( color )}
Get the red component from the given color.
@item @samp{colgreen( color )}
Get the green component from the given color.
@item @samp{colblue( color )}
Get the blue component from the given color.
@item @samp{getmsg( message )}
Use the translator to translate this message to the default language
of the user.
@end itemize

