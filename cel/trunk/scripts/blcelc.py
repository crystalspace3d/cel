# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import _blcelc
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


import cspace
def fix_args(funct):
    def _inner(self, args):
        if type(args) == tuple:
            args = (self,) + args
        else:
            args = (self, args)
        return funct(*args)
    return _inner

_SetSCFPointer = _blcelc._SetSCFPointer
_GetSCFPointer = _blcelc._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class celWrapPtr(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Ref = _swig_property(_blcelc.celWrapPtr_Ref_get, _blcelc.celWrapPtr_Ref_set)
    Type = _swig_property(_blcelc.celWrapPtr_Type_get)
    Version = _swig_property(_blcelc.celWrapPtr_Version_get, _blcelc.celWrapPtr_Version_set)
    def __init__(self, *args): 
        this = _blcelc.new_celWrapPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celWrapPtr
    __del__ = lambda self : None;
celWrapPtr_swigregister = _blcelc.celWrapPtr_swigregister
celWrapPtr_swigregister(celWrapPtr)

class celInitializer(cspace.csInitializer):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SetupCelPluginDirs = staticmethod(_blcelc.celInitializer_SetupCelPluginDirs)
    _RequestPlugins = staticmethod(_blcelc.celInitializer__RequestPlugins)
    SetupVFS = staticmethod(_blcelc.celInitializer_SetupVFS)
    SetupConfigManager = staticmethod(_blcelc.celInitializer_SetupConfigManager)
    def __init__(self, *args): 
        this = _blcelc.new_celInitializer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celInitializer
    __del__ = lambda self : None;
celInitializer_swigregister = _blcelc.celInitializer_swigregister
celInitializer_swigregister(celInitializer)
celInitializer_SetupCelPluginDirs = _blcelc.celInitializer_SetupCelPluginDirs
celInitializer__RequestPlugins = _blcelc.celInitializer__RequestPlugins
celInitializer_SetupVFS = _blcelc.celInitializer_SetupVFS
celInitializer_SetupConfigManager = _blcelc.celInitializer_SetupConfigManager

class celDataArrayReadOnly(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSize(*args): return _blcelc.celDataArrayReadOnly_GetSize(*args)
    def Get(*args): return _blcelc.celDataArrayReadOnly_Get(*args)
    def Top(*args): return _blcelc.celDataArrayReadOnly_Top(*args)
    def Find(*args): return _blcelc.celDataArrayReadOnly_Find(*args)
    def GetIndex(*args): return _blcelc.celDataArrayReadOnly_GetIndex(*args)
    def IsEmpty(*args): return _blcelc.celDataArrayReadOnly_IsEmpty(*args)
    def GetAll(*args): return _blcelc.celDataArrayReadOnly_GetAll(*args)
    __swig_destroy__ = _blcelc.delete_celDataArrayReadOnly
    __del__ = lambda self : None;
celDataArrayReadOnly_swigregister = _blcelc.celDataArrayReadOnly_swigregister
celDataArrayReadOnly_swigregister(celDataArrayReadOnly)

class celDataArrayChangeElements(celDataArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Get(*args): return _blcelc.celDataArrayChangeElements_Get(*args)
    def Top(*args): return _blcelc.celDataArrayChangeElements_Top(*args)
    __swig_destroy__ = _blcelc.delete_celDataArrayChangeElements
    __del__ = lambda self : None;
celDataArrayChangeElements_swigregister = _blcelc.celDataArrayChangeElements_swigregister
celDataArrayChangeElements_swigregister(celDataArrayChangeElements)

class celDataArrayChangeAll(celDataArrayChangeElements):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetSize(*args): return _blcelc.celDataArrayChangeAll_SetSize(*args)
    def GetExtend(*args): return _blcelc.celDataArrayChangeAll_GetExtend(*args)
    def Put(*args): return _blcelc.celDataArrayChangeAll_Put(*args)
    def Push(*args): return _blcelc.celDataArrayChangeAll_Push(*args)
    def PushSmart(*args): return _blcelc.celDataArrayChangeAll_PushSmart(*args)
    def Pop(*args): return _blcelc.celDataArrayChangeAll_Pop(*args)
    def Insert(*args): return _blcelc.celDataArrayChangeAll_Insert(*args)
    def DeleteAll(*args): return _blcelc.celDataArrayChangeAll_DeleteAll(*args)
    def Truncate(*args): return _blcelc.celDataArrayChangeAll_Truncate(*args)
    def Empty(*args): return _blcelc.celDataArrayChangeAll_Empty(*args)
    def DeleteIndex(*args): return _blcelc.celDataArrayChangeAll_DeleteIndex(*args)
    def DeleteIndexFast(*args): return _blcelc.celDataArrayChangeAll_DeleteIndexFast(*args)
    def Delete(*args): return _blcelc.celDataArrayChangeAll_Delete(*args)
    __swig_destroy__ = _blcelc.delete_celDataArrayChangeAll
    __del__ = lambda self : None;
celDataArrayChangeAll_swigregister = _blcelc.celDataArrayChangeAll_swigregister
celDataArrayChangeAll_swigregister(celDataArrayChangeAll)

CEL_DATA_NONE = _blcelc.CEL_DATA_NONE
CEL_DATA_BOOL = _blcelc.CEL_DATA_BOOL
CEL_DATA_BYTE = _blcelc.CEL_DATA_BYTE
CEL_DATA_WORD = _blcelc.CEL_DATA_WORD
CEL_DATA_LONG = _blcelc.CEL_DATA_LONG
CEL_DATA_UBYTE = _blcelc.CEL_DATA_UBYTE
CEL_DATA_UWORD = _blcelc.CEL_DATA_UWORD
CEL_DATA_ULONG = _blcelc.CEL_DATA_ULONG
CEL_DATA_FLOAT = _blcelc.CEL_DATA_FLOAT
CEL_DATA_VECTOR2 = _blcelc.CEL_DATA_VECTOR2
CEL_DATA_VECTOR3 = _blcelc.CEL_DATA_VECTOR3
CEL_DATA_VECTOR4 = _blcelc.CEL_DATA_VECTOR4
CEL_DATA_STRING = _blcelc.CEL_DATA_STRING
CEL_DATA_PCLASS = _blcelc.CEL_DATA_PCLASS
CEL_DATA_ENTITY = _blcelc.CEL_DATA_ENTITY
CEL_DATA_ACTION = _blcelc.CEL_DATA_ACTION
CEL_DATA_COLOR = _blcelc.CEL_DATA_COLOR
CEL_DATA_COLOR4 = _blcelc.CEL_DATA_COLOR4
CEL_DATA_IBASE = _blcelc.CEL_DATA_IBASE
CEL_DATA_PARAMETER = _blcelc.CEL_DATA_PARAMETER
CEL_DATA_LAST = _blcelc.CEL_DATA_LAST
class celData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_blcelc.celData_type_get, _blcelc.celData_type_set)
    def __init__(self, *args): 
        this = _blcelc.new_celData(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(*args): return _blcelc.celData_assign(*args)
    __swig_destroy__ = _blcelc.delete_celData
    __del__ = lambda self : None;
    def Copy(*args): return _blcelc.celData_Copy(*args)
    def __eq__(*args): return _blcelc.celData___eq__(*args)
    def Clear(*args): return _blcelc.celData_Clear(*args)
    def Set(*args): return _blcelc.celData_Set(*args)
    def SetAction(*args): return _blcelc.celData_SetAction(*args)
    def SetIBase(*args): return _blcelc.celData_SetIBase(*args)
    def SetParameter(*args): return _blcelc.celData_SetParameter(*args)
    value = _swig_property(_blcelc.celData_value_get)
celData_swigregister = _blcelc.celData_swigregister
celData_swigregister(celData)

class celData_value(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bo = _swig_property(_blcelc.celData_value_bo_get, _blcelc.celData_value_bo_set)
    b = _swig_property(_blcelc.celData_value_b_get, _blcelc.celData_value_b_set)
    ub = _swig_property(_blcelc.celData_value_ub_get, _blcelc.celData_value_ub_set)
    w = _swig_property(_blcelc.celData_value_w_get, _blcelc.celData_value_w_set)
    uw = _swig_property(_blcelc.celData_value_uw_get, _blcelc.celData_value_uw_set)
    l = _swig_property(_blcelc.celData_value_l_get, _blcelc.celData_value_l_set)
    ul = _swig_property(_blcelc.celData_value_ul_get, _blcelc.celData_value_ul_set)
    f = _swig_property(_blcelc.celData_value_f_get, _blcelc.celData_value_f_set)
    s = _swig_property(_blcelc.celData_value_s_get, _blcelc.celData_value_s_set)
    pc = _swig_property(_blcelc.celData_value_pc_get, _blcelc.celData_value_pc_set)
    ent = _swig_property(_blcelc.celData_value_ent_get, _blcelc.celData_value_ent_set)
    ibase = _swig_property(_blcelc.celData_value_ibase_get, _blcelc.celData_value_ibase_set)
    par = _swig_property(_blcelc.celData_value_par_get)
    col = _swig_property(_blcelc.celData_value_col_get)
    v = _swig_property(_blcelc.celData_value_v_get)
    def __init__(self, *args): 
        this = _blcelc.new_celData_value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celData_value
    __del__ = lambda self : None;
celData_value_swigregister = _blcelc.celData_value_swigregister
celData_value_swigregister(celData_value)

class celData_value_par(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    parname = _swig_property(_blcelc.celData_value_par_parname_get, _blcelc.celData_value_par_parname_set)
    partype = _swig_property(_blcelc.celData_value_par_partype_get, _blcelc.celData_value_par_partype_set)
    def __init__(self, *args): 
        this = _blcelc.new_celData_value_par(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celData_value_par
    __del__ = lambda self : None;
celData_value_par_swigregister = _blcelc.celData_value_par_swigregister
celData_value_par_swigregister(celData_value_par)

class celData_value_col(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    red = _swig_property(_blcelc.celData_value_col_red_get, _blcelc.celData_value_col_red_set)
    green = _swig_property(_blcelc.celData_value_col_green_get, _blcelc.celData_value_col_green_set)
    blue = _swig_property(_blcelc.celData_value_col_blue_get, _blcelc.celData_value_col_blue_set)
    alpha = _swig_property(_blcelc.celData_value_col_alpha_get, _blcelc.celData_value_col_alpha_set)
    def __init__(self, *args): 
        this = _blcelc.new_celData_value_col(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celData_value_col
    __del__ = lambda self : None;
celData_value_col_swigregister = _blcelc.celData_value_col_swigregister
celData_value_col_swigregister(celData_value_col)

class celData_value_v(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_blcelc.celData_value_v_x_get, _blcelc.celData_value_v_x_set)
    y = _swig_property(_blcelc.celData_value_v_y_get, _blcelc.celData_value_v_y_set)
    z = _swig_property(_blcelc.celData_value_v_z_get, _blcelc.celData_value_v_z_set)
    w = _swig_property(_blcelc.celData_value_v_w_get, _blcelc.celData_value_v_w_set)
    def __init__(self, *args): 
        this = _blcelc.new_celData_value_v(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celData_value_v
    __del__ = lambda self : None;
celData_value_v_swigregister = _blcelc.celData_value_v_swigregister
celData_value_v_swigregister(celData_value_v)

class iCelDataArrayReadOnly(celDataArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _blcelc.delete_iCelDataArrayReadOnly
    __del__ = lambda self : None;
iCelDataArrayReadOnly_swigregister = _blcelc.iCelDataArrayReadOnly_swigregister
iCelDataArrayReadOnly_swigregister(iCelDataArrayReadOnly)

class iCelDataArray(celDataArrayChangeAll):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _blcelc.delete_iCelDataArray
    __del__ = lambda self : None;
iCelDataArray_swigregister = _blcelc.iCelDataArray_swigregister
iCelDataArray_swigregister(iCelDataArray)

class iMessageChannel(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateMessageDispatcher(*args): return _blcelc.iMessageChannel_CreateMessageDispatcher(*args)
    def RemoveMessageDispatcher(*args): return _blcelc.iMessageChannel_RemoveMessageDispatcher(*args)
    def Subscribe(*args): return _blcelc.iMessageChannel_Subscribe(*args)
    def Unsubscribe(*args): return _blcelc.iMessageChannel_Unsubscribe(*args)
    def SendMessage(*args): return _blcelc.iMessageChannel_SendMessage(*args)
    __swig_destroy__ = _blcelc.delete_iMessageChannel
    __del__ = lambda self : None;
iMessageChannel_swigregister = _blcelc.iMessageChannel_swigregister
iMessageChannel_swigregister(iMessageChannel)

class iMessageReceiver(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def ReceiveMessage(*args): return _blcelc.iMessageReceiver_ReceiveMessage(*args)
    __swig_destroy__ = _blcelc.delete_iMessageReceiver
    __del__ = lambda self : None;
iMessageReceiver_swigregister = _blcelc.iMessageReceiver_swigregister
iMessageReceiver_swigregister(iMessageReceiver)

class iMessageSender(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def MessageDispatcherRemoved(*args): return _blcelc.iMessageSender_MessageDispatcherRemoved(*args)
    __swig_destroy__ = _blcelc.delete_iMessageSender
    __del__ = lambda self : None;
iMessageSender_swigregister = _blcelc.iMessageSender_swigregister
iMessageSender_swigregister(iMessageSender)

class iMessageReceiverFilter(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IsValidReceiver(*args): return _blcelc.iMessageReceiverFilter_IsValidReceiver(*args)
    __swig_destroy__ = _blcelc.delete_iMessageReceiverFilter
    __del__ = lambda self : None;
iMessageReceiverFilter_swigregister = _blcelc.iMessageReceiverFilter_swigregister
iMessageReceiverFilter_swigregister(iMessageReceiverFilter)

class iMessageDispatcher(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SendMessage(*args): return _blcelc.iMessageDispatcher_SendMessage(*args)
    scfGetVersion = staticmethod(_blcelc.iMessageDispatcher_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iMessageDispatcher
    __del__ = lambda self : None;
iMessageDispatcher_swigregister = _blcelc.iMessageDispatcher_swigregister
iMessageDispatcher_swigregister(iMessageDispatcher)
iMessageDispatcher_scfGetVersion = _blcelc.iMessageDispatcher_scfGetVersion

class celEntityTemplateParams(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celEntityTemplateParams(*args)
        try: self.this.append(this)
        except: self.this = this
    def Put(*args): return _blcelc.celEntityTemplateParams_Put(*args)
    def GetAll(*args): return _blcelc.celEntityTemplateParams_GetAll(*args)
    def PutUnique(*args): return _blcelc.celEntityTemplateParams_PutUnique(*args)
    def Contains(*args): return _blcelc.celEntityTemplateParams_Contains(*args)
    def In(*args): return _blcelc.celEntityTemplateParams_In(*args)
    def GetElementPointer(*args): return _blcelc.celEntityTemplateParams_GetElementPointer(*args)
    def Get(*args): return _blcelc.celEntityTemplateParams_Get(*args)
    def GetOrCreate(*args): return _blcelc.celEntityTemplateParams_GetOrCreate(*args)
    def Empty(*args): return _blcelc.celEntityTemplateParams_Empty(*args)
    def DeleteAll(*args): return _blcelc.celEntityTemplateParams_DeleteAll(*args)
    def Delete(*args): return _blcelc.celEntityTemplateParams_Delete(*args)
    def GetSize(*args): return _blcelc.celEntityTemplateParams_GetSize(*args)
    def IsEmpty(*args): return _blcelc.celEntityTemplateParams_IsEmpty(*args)
    def __getitem__(*args): return _blcelc.celEntityTemplateParams___getitem__(*args)
    def __delitem__(*args): return _blcelc.celEntityTemplateParams___delitem__(*args)
    def clear(*args): return _blcelc.celEntityTemplateParams_clear(*args)
    def __nonzero__(*args): return _blcelc.celEntityTemplateParams___nonzero__(*args)
    def __setitem__(*args): return _blcelc.celEntityTemplateParams___setitem__(*args)
    def __len__(*args): return _blcelc.celEntityTemplateParams___len__(*args)
    __swig_destroy__ = _blcelc.delete_celEntityTemplateParams
    __del__ = lambda self : None;
celEntityTemplateParams_swigregister = _blcelc.celEntityTemplateParams_swigregister
celEntityTemplateParams_swigregister(celEntityTemplateParams)

class celQuestParams(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celQuestParams(*args)
        try: self.this.append(this)
        except: self.this = this
    def Put(*args): return _blcelc.celQuestParams_Put(*args)
    def GetAll(*args): return _blcelc.celQuestParams_GetAll(*args)
    def PutUnique(*args): return _blcelc.celQuestParams_PutUnique(*args)
    def Contains(*args): return _blcelc.celQuestParams_Contains(*args)
    def In(*args): return _blcelc.celQuestParams_In(*args)
    def GetElementPointer(*args): return _blcelc.celQuestParams_GetElementPointer(*args)
    def Get(*args): return _blcelc.celQuestParams_Get(*args)
    def GetOrCreate(*args): return _blcelc.celQuestParams_GetOrCreate(*args)
    def Empty(*args): return _blcelc.celQuestParams_Empty(*args)
    def DeleteAll(*args): return _blcelc.celQuestParams_DeleteAll(*args)
    def Delete(*args): return _blcelc.celQuestParams_Delete(*args)
    def GetSize(*args): return _blcelc.celQuestParams_GetSize(*args)
    def IsEmpty(*args): return _blcelc.celQuestParams_IsEmpty(*args)
    def __getitem__(*args): return _blcelc.celQuestParams___getitem__(*args)
    def __delitem__(*args): return _blcelc.celQuestParams___delitem__(*args)
    def clear(*args): return _blcelc.celQuestParams_clear(*args)
    def __nonzero__(*args): return _blcelc.celQuestParams___nonzero__(*args)
    def __setitem__(*args): return _blcelc.celQuestParams___setitem__(*args)
    def __len__(*args): return _blcelc.celQuestParams___len__(*args)
    __swig_destroy__ = _blcelc.delete_celQuestParams
    __del__ = lambda self : None;
celQuestParams_swigregister = _blcelc.celQuestParams_swigregister
celQuestParams_swigregister(celQuestParams)

CEL_EVENT_PRE = _blcelc.CEL_EVENT_PRE
CEL_EVENT_VIEW = _blcelc.CEL_EVENT_VIEW
CEL_EVENT_POST = _blcelc.CEL_EVENT_POST
class iCelNewEntityCallback(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def NewEntity(*args): return _blcelc.iCelNewEntityCallback_NewEntity(*args)
    __swig_destroy__ = _blcelc.delete_iCelNewEntityCallback
    __del__ = lambda self : None;
iCelNewEntityCallback_swigregister = _blcelc.iCelNewEntityCallback_swigregister
iCelNewEntityCallback_swigregister(iCelNewEntityCallback)

class iCelEntityRemoveCallback(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RemoveEntity(*args): return _blcelc.iCelEntityRemoveCallback_RemoveEntity(*args)
    __swig_destroy__ = _blcelc.delete_iCelEntityRemoveCallback
    __del__ = lambda self : None;
iCelEntityRemoveCallback_swigregister = _blcelc.iCelEntityRemoveCallback_swigregister
iCelEntityRemoveCallback_swigregister(iCelEntityRemoveCallback)

class iCelTimerListener(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def TickEveryFrame(*args): return _blcelc.iCelTimerListener_TickEveryFrame(*args)
    def TickOnce(*args): return _blcelc.iCelTimerListener_TickOnce(*args)
    __swig_destroy__ = _blcelc.delete_iCelTimerListener
    __del__ = lambda self : None;
iCelTimerListener_swigregister = _blcelc.iCelTimerListener_swigregister
iCelTimerListener_swigregister(iCelTimerListener)

class iCelPlLayer(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateEntityInScope(*args): return _blcelc.iCelPlLayer_CreateEntityInScope(*args)
    def RemoveEntity(*args): return _blcelc.iCelPlLayer_RemoveEntity(*args)
    def RemoveEntities(*args): return _blcelc.iCelPlLayer_RemoveEntities(*args)
    def CreateEntityTemplate(*args): return _blcelc.iCelPlLayer_CreateEntityTemplate(*args)
    def RemoveEntityTemplate(*args): return _blcelc.iCelPlLayer_RemoveEntityTemplate(*args)
    def RemoveEntityTemplates(*args): return _blcelc.iCelPlLayer_RemoveEntityTemplates(*args)
    def FindEntityTemplate(*args): return _blcelc.iCelPlLayer_FindEntityTemplate(*args)
    def GetEntityTemplateCount(*args): return _blcelc.iCelPlLayer_GetEntityTemplateCount(*args)
    def GetEntityTemplate(*args): return _blcelc.iCelPlLayer_GetEntityTemplate(*args)
    def CreateEntity(*args): return _blcelc.iCelPlLayer_CreateEntity(*args)
    def ApplyTemplate(*args): return _blcelc.iCelPlLayer_ApplyTemplate(*args)
    def CreateDataBuffer(*args): return _blcelc.iCelPlLayer_CreateDataBuffer(*args)
    def CreateCompactDataBufferWriter(*args): return _blcelc.iCelPlLayer_CreateCompactDataBufferWriter(*args)
    def CreateCompactDataBufferReader(*args): return _blcelc.iCelPlLayer_CreateCompactDataBufferReader(*args)
    def AttachEntity(*args): return _blcelc.iCelPlLayer_AttachEntity(*args)
    def UnattachEntity(*args): return _blcelc.iCelPlLayer_UnattachEntity(*args)
    def GetEntity(*args): return _blcelc.iCelPlLayer_GetEntity(*args)
    def GetEntityCount(*args): return _blcelc.iCelPlLayer_GetEntityCount(*args)
    def GetEntityByIndex(*args): return _blcelc.iCelPlLayer_GetEntityByIndex(*args)
    def FindEntity(*args): return _blcelc.iCelPlLayer_FindEntity(*args)
    def GetBehaviour(*args): return _blcelc.iCelPlLayer_GetBehaviour(*args)
    def FindAttachedEntity(*args): return _blcelc.iCelPlLayer_FindAttachedEntity(*args)
    def FindNearbyEntities(*args): return _blcelc.iCelPlLayer_FindNearbyEntities(*args)
    def GetHitEntity(*args): return _blcelc.iCelPlLayer_GetHitEntity(*args)
    def CreateEmptyEntityList(*args): return _blcelc.iCelPlLayer_CreateEmptyEntityList(*args)
    def CreateEntityTracker(*args): return _blcelc.iCelPlLayer_CreateEntityTracker(*args)
    def FindEntityTracker(*args): return _blcelc.iCelPlLayer_FindEntityTracker(*args)
    def RemoveEntityTracker(*args): return _blcelc.iCelPlLayer_RemoveEntityTracker(*args)
    def SetEntityAddonAllowed(*args): return _blcelc.iCelPlLayer_SetEntityAddonAllowed(*args)
    def IsEntityAddonAllowed(*args): return _blcelc.iCelPlLayer_IsEntityAddonAllowed(*args)
    def LoadPropertyClassFactory(*args): return _blcelc.iCelPlLayer_LoadPropertyClassFactory(*args)
    def RegisterPropertyClassFactory(*args): return _blcelc.iCelPlLayer_RegisterPropertyClassFactory(*args)
    def UnregisterPropertyClassFactory(*args): return _blcelc.iCelPlLayer_UnregisterPropertyClassFactory(*args)
    def GetPropertyClassFactoryCount(*args): return _blcelc.iCelPlLayer_GetPropertyClassFactoryCount(*args)
    def GetPropertyClassFactory(*args): return _blcelc.iCelPlLayer_GetPropertyClassFactory(*args)
    def FindPropertyClassFactory(*args): return _blcelc.iCelPlLayer_FindPropertyClassFactory(*args)
    def CreatePropertyClass(*args): return _blcelc.iCelPlLayer_CreatePropertyClass(*args)
    def CreateTaggedPropertyClass(*args): return _blcelc.iCelPlLayer_CreateTaggedPropertyClass(*args)
    def RegisterBehaviourLayer(*args): return _blcelc.iCelPlLayer_RegisterBehaviourLayer(*args)
    def UnregisterBehaviourLayer(*args): return _blcelc.iCelPlLayer_UnregisterBehaviourLayer(*args)
    def GetBehaviourLayerCount(*args): return _blcelc.iCelPlLayer_GetBehaviourLayerCount(*args)
    def GetBehaviourLayer(*args): return _blcelc.iCelPlLayer_GetBehaviourLayer(*args)
    def FindBehaviourLayer(*args): return _blcelc.iCelPlLayer_FindBehaviourLayer(*args)
    def Cache(*args): return _blcelc.iCelPlLayer_Cache(*args)
    def Uncache(*args): return _blcelc.iCelPlLayer_Uncache(*args)
    def CleanCache(*args): return _blcelc.iCelPlLayer_CleanCache(*args)
    def FetchStringID(*args): return _blcelc.iCelPlLayer_FetchStringID(*args)
    def FetchString(*args): return _blcelc.iCelPlLayer_FetchString(*args)
    def AddEntityRemoveCallback(*args): return _blcelc.iCelPlLayer_AddEntityRemoveCallback(*args)
    def RemoveEntityRemoveCallback(*args): return _blcelc.iCelPlLayer_RemoveEntityRemoveCallback(*args)
    def AddNewEntityCallback(*args): return _blcelc.iCelPlLayer_AddNewEntityCallback(*args)
    def RemoveNewEntityCallback(*args): return _blcelc.iCelPlLayer_RemoveNewEntityCallback(*args)
    def CallbackEveryFrame(*args): return _blcelc.iCelPlLayer_CallbackEveryFrame(*args)
    def CallbackOnce(*args): return _blcelc.iCelPlLayer_CallbackOnce(*args)
    def RemoveCallbackEveryFrame(*args): return _blcelc.iCelPlLayer_RemoveCallbackEveryFrame(*args)
    def RemoveCallbackOnce(*args): return _blcelc.iCelPlLayer_RemoveCallbackOnce(*args)
    def GetTicksLeft(*args): return _blcelc.iCelPlLayer_GetTicksLeft(*args)
    def AddScope(*args): return _blcelc.iCelPlLayer_AddScope(*args)
    def ResetScope(*args): return _blcelc.iCelPlLayer_ResetScope(*args)
    def GetClassEntitiesList(*args): return _blcelc.iCelPlLayer_GetClassEntitiesList(*args)
    def SendMessage(*args): return _blcelc.iCelPlLayer_SendMessage(*args)
    def QueryMessageSender(*args): return _blcelc.iCelPlLayer_QueryMessageSender(*args)
    EntityTemplateCount = _swig_property(_blcelc.iCelPlLayer_EntityTemplateCount_get, None, None,
                    "iCelPlLayer.EntityTemplateCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelPlLayer::GetEntityTemplateCount()")

    EntityCount = _swig_property(_blcelc.iCelPlLayer_EntityCount_get, None, None,
                    "iCelPlLayer.EntityCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelPlLayer::GetEntityCount()")

    EntityAddonAllowed = _swig_property(_blcelc.iCelPlLayer_EntityAddonAllowed_get, _blcelc.iCelPlLayer_EntityAddonAllowed_set, None,
                    "iCelPlLayer.EntityAddonAllowed -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iCelPlLayer::IsEntityAddonAllowed()\n\tset: void iCelPlLayer::SetEntityAddonAllowed(bool)")


    PropertyClassFactoryCount = _swig_property(_blcelc.iCelPlLayer_PropertyClassFactoryCount_get, None, None,
                    "iCelPlLayer.PropertyClassFactoryCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelPlLayer::GetPropertyClassFactoryCount()")

    BehaviourLayerCount = _swig_property(_blcelc.iCelPlLayer_BehaviourLayerCount_get, None, None,
                    "iCelPlLayer.BehaviourLayerCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelPlLayer::GetBehaviourLayerCount()")

    MessageSender = _swig_property(_blcelc.iCelPlLayer_MessageSender_get, None, None,
                    "iCelPlLayer.MessageSender -> iMessageSender*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iMessageSender* iCelPlLayer::QueryMessageSender()")

    scfGetVersion = staticmethod(_blcelc.iCelPlLayer_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iCelPlLayer
    __del__ = lambda self : None;
    def CreateParameterBlock(self,valdict):
    	"""Create a celVariableParameterBlock from a dict, list or
    	tuple"""
    	parblock = celVariableParameterBlock(len(valdict))
    	for idx,valkey in enumerate(valdict):
    		keyid = self.FetchStringID(valkey)
    		parblock.SetParameterDef (idx,keyid)
    		if type(valdict) == type({}):
    			parblock[keyid] = valdict[valkey]
    	return parblock	
    def GetEntities(self): return iCelEntityPlFakeArray(self)
    def GetEntityTemplates(self): return iCelEntityTemplatePlFakeArray(self)
    def GetPcFactories(self): return iCelPropertyClassFactoryPlFakeArray(self)
    def GetBehaviourLayers(self): return iCelBlLayerPlFakeArray(self)
    EntityTemplates = _swig_property(GetEntityTemplates)
    PcFactories = _swig_property(GetPcFactories)
    BehaviourLayers = _swig_property(GetBehaviourLayers)
    Entities = _swig_property(GetEntities) 
iCelPlLayer_swigregister = _blcelc.iCelPlLayer_swigregister
iCelPlLayer_swigregister(iCelPlLayer)
iCelPlLayer_scfGetVersion = _blcelc.iCelPlLayer_scfGetVersion

class iCelEntityTracker(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iCelEntityTracker_GetName(*args)
    def AddEntity(*args): return _blcelc.iCelEntityTracker_AddEntity(*args)
    def RemoveEntity(*args): return _blcelc.iCelEntityTracker_RemoveEntity(*args)
    def FindNearbyEntities(*args): return _blcelc.iCelEntityTracker_FindNearbyEntities(*args)
    def GetIterator(*args): return _blcelc.iCelEntityTracker_GetIterator(*args)
    def AddEntities(*args): return _blcelc.iCelEntityTracker_AddEntities(*args)
    def RemoveEntities(*args): return _blcelc.iCelEntityTracker_RemoveEntities(*args)
    Name = _swig_property(_blcelc.iCelEntityTracker_Name_get, None, None,
                    "iCelEntityTracker.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelEntityTracker::GetName()")

    Iterator = _swig_property(_blcelc.iCelEntityTracker_Iterator_get, None, None,
                    "iCelEntityTracker.Iterator -> csPtr<iCelEntityIterator>  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csPtr<iCelEntityIterator> iCelEntityTracker::GetIterator()")

    __swig_destroy__ = _blcelc.delete_iCelEntityTracker
    __del__ = lambda self : None;
iCelEntityTracker_swigregister = _blcelc.iCelEntityTracker_swigregister
iCelEntityTracker_swigregister(iCelEntityTracker)

csQueryRegistry_iCelPlLayer = _blcelc.csQueryRegistry_iCelPlLayer
class iCelEntityTemplatePlFakeArray(object):
	def __init__(self,parent): self.parent = parent
	def __contains__(self,obj):
		if self.parent.FindEntityTemplate(obj): return True
		else: return False
	def __repr__(self): return "List of "+str("iCelEntityTemplate")
	def __len__(self): return self.parent.GetEntityTemplateCount()
	def __delitem__(self,val):
		if type(val) == type(""):
			obj = self.parent.FindEntityTemplate(val)
			if obj: return self.parent.RemoveEntityTemplate(obj)
			else: raise IndexError(val+" not in list")
		else: return self.parent.RemoveEntityTemplate(val)
	def __noappend__(self,obj):
		print "Append not supported by this list"
	def content_iterator(self):
		for idx in xrange(len(self)):
			yield self.parent.GetEntityTemplate(idx)
	def __iter__(self): return self.content_iterator()
	def __getitem__(self,val):
		if type(val) == type(""): return self.parent.FindEntityTemplate(val)
		else: return self.parent.GetEntityTemplate(val)
	def append(self,obj): return self.parent.__noappend__(obj)

class iCelEntityPlFakeArray(object):
	def __init__(self,parent): self.parent = parent
	def __contains__(self,obj):
		if self.parent.FindEntity(obj): return True
		else: return False
	def __repr__(self): return "List of "+str("iCelEntity")
	def __len__(self): return self.parent.GetEntityCount()
	def __delitem__(self,val):
		if type(val) == type(""):
			obj = self.parent.FindEntity(val)
			if obj: return self.parent.RemoveEntity(obj)
			else: raise IndexError(val+" not in list")
		else: return self.parent.RemoveEntity(val)
	def __noappend__(self,obj):
		print "Append not supported by this list"
	def content_iterator(self):
		for idx in xrange(len(self)):
			yield self.parent.GetEntityByIndex(idx)
	def __iter__(self): return self.content_iterator()
	def __getitem__(self,val):
		if type(val) == type(""): return self.parent.FindEntity(val)
		else: return self.parent.GetEntityByIndex(val)
	def append(self,obj): return self.parent.__noappend__(obj)

class iCelBlLayerPlFakeArray(object):
	def __init__(self,parent): self.parent = parent
	def __contains__(self,obj):
		if self.parent.FindBehaviourLayer(obj): return True
		else: return False
	def __repr__(self): return "List of "+str("iCelBlLayer")
	def __len__(self): return self.parent.GetBehaviourLayerCount()
	def __delitem__(self,val):
		if type(val) == type(""):
			obj = self.parent.FindBehaviourLayer(val)
			if obj: return self.parent.UnregisterBehaviourLayer(obj)
			else: raise IndexError(val+" not in list")
		else: return self.parent.UnregisterBehaviourLayer(val)
	def __noappend__(self,obj):
		print "Append not supported by this list"
	def content_iterator(self):
		for idx in xrange(len(self)):
			yield self.parent.GetBehaviourLayer(idx)
	def __iter__(self): return self.content_iterator()
	def __getitem__(self,val):
		if type(val) == type(""): return self.parent.FindBehaviourLayer(val)
		else: return self.parent.GetBehaviourLayer(val)
	def append(self,obj): return self.parent.RegisterBehaviourLayer(obj)

class iCelPropertyClassFactoryPlFakeArray(object):
	def __init__(self,parent): self.parent = parent
	def __contains__(self,obj):
		if self.parent.FindPropertyClassFactory(obj): return True
		else: return False
	def __repr__(self): return "List of "+str("iCelPropertyClassFactory")
	def __len__(self): return self.parent.GetPropertyClassFactoryCount()
	def __delitem__(self,val):
		if type(val) == type(""):
			obj = self.parent.FindPropertyClassFactory(val)
			if obj: return self.parent.UnregisterPropertyClassFactory(obj)
			else: raise IndexError(val+" not in list")
		else: return self.parent.UnregisterPropertyClassFactory(val)
	def __noappend__(self,obj):
		print "Append not supported by this list"
	def content_iterator(self):
		for idx in xrange(len(self)):
			yield self.parent.GetPropertyClassFactory(idx)
	def __iter__(self): return self.content_iterator()
	def __getitem__(self,val):
		if type(val) == type(""): return self.parent.FindPropertyClassFactory(val)
		else: return self.parent.GetPropertyClassFactory(val)
	def append(self,obj): return self.parent.LoadPropertyClassFactory(obj)

class iCelEntity(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryObject(*args): return _blcelc.iCelEntity_QueryObject(*args)
    def GetName(*args): return _blcelc.iCelEntity_GetName(*args)
    def SetName(*args): return _blcelc.iCelEntity_SetName(*args)
    def GetID(*args): return _blcelc.iCelEntity_GetID(*args)
    def SetID(*args): return _blcelc.iCelEntity_SetID(*args)
    def SetTemplateNameID(*args): return _blcelc.iCelEntity_SetTemplateNameID(*args)
    def GetTemplateNameID(*args): return _blcelc.iCelEntity_GetTemplateNameID(*args)
    def GetPropertyClassList(*args): return _blcelc.iCelEntity_GetPropertyClassList(*args)
    def SetBehaviour(*args): return _blcelc.iCelEntity_SetBehaviour(*args)
    def GetBehaviour(*args): return _blcelc.iCelEntity_GetBehaviour(*args)
    def AddClass(*args): return _blcelc.iCelEntity_AddClass(*args)
    def RemoveClass(*args): return _blcelc.iCelEntity_RemoveClass(*args)
    def HasClass(*args): return _blcelc.iCelEntity_HasClass(*args)
    def GetClasses(*args): return _blcelc.iCelEntity_GetClasses(*args)
    def QueryMessageChannel(*args): return _blcelc.iCelEntity_QueryMessageChannel(*args)
    def CreateTaggedMessageDispatcher(*args): return _blcelc.iCelEntity_CreateTaggedMessageDispatcher(*args)
    def IsPositional(*args): return _blcelc.iCelEntity_IsPositional(*args)
    def Activate(*args): return _blcelc.iCelEntity_Activate(*args)
    def Deactivate(*args): return _blcelc.iCelEntity_Deactivate(*args)
    def IsActive(*args): return _blcelc.iCelEntity_IsActive(*args)
    def MarkBaseline(*args): return _blcelc.iCelEntity_MarkBaseline(*args)
    def IsModifiedSinceBaseline(*args): return _blcelc.iCelEntity_IsModifiedSinceBaseline(*args)
    def ExistedAtBaseline(*args): return _blcelc.iCelEntity_ExistedAtBaseline(*args)
    def SaveModifications(*args): return _blcelc.iCelEntity_SaveModifications(*args)
    def RestoreModifications(*args): return _blcelc.iCelEntity_RestoreModifications(*args)
    Object = _swig_property(_blcelc.iCelEntity_Object_get, None, None,
                    "iCelEntity.Object -> iObject*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iObject* iCelEntity::QueryObject()")

    Name = _swig_property(_blcelc.iCelEntity_Name_get, _blcelc.iCelEntity_Name_set, None,
                    "iCelEntity.Name -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelEntity::GetName()\n\tset: void iCelEntity::SetName(const char*)")


    ID = _swig_property(_blcelc.iCelEntity_ID_get, _blcelc.iCelEntity_ID_set, None,
                    "iCelEntity.ID -> uint\n\nThis is equivalent to calling the C++ cs methods:\n\tget: uint iCelEntity::GetID()\n\tset: void iCelEntity::SetID(uint)")


    PropertyClassList = _swig_property(_blcelc.iCelEntity_PropertyClassList_get, None, None,
                    "iCelEntity.PropertyClassList -> iCelPropertyClassList*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iCelPropertyClassList* iCelEntity::GetPropertyClassList()")

    Behaviour = _swig_property(_blcelc.iCelEntity_Behaviour_get, _blcelc.iCelEntity_Behaviour_set, None,
                    "iCelEntity.Behaviour -> iCelBehaviour*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelBehaviour* iCelEntity::GetBehaviour()\n\tset: void iCelEntity::SetBehaviour(iCelBehaviour*)")


    Classes = _swig_property(_blcelc.iCelEntity_Classes_get, None, None,
                    "iCelEntity.Classes -> const csSet<csStringID>&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csSet<csStringID>& iCelEntity::GetClasses()")

    MessageChannel = _swig_property(_blcelc.iCelEntity_MessageChannel_get, None, None,
                    "iCelEntity.MessageChannel -> iMessageChannel*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iMessageChannel* iCelEntity::QueryMessageChannel()")

    def CreateBehaviour(*args): return _blcelc.iCelEntity_CreateBehaviour(*args)
    scfGetVersion = staticmethod(_blcelc.iCelEntity_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iCelEntity
    __del__ = lambda self : None;
iCelEntity_swigregister = _blcelc.iCelEntity_swigregister
iCelEntity_swigregister(iCelEntity)
iCelEntity_scfGetVersion = _blcelc.iCelEntity_scfGetVersion

class iCelEntityList(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetCount(*args): return _blcelc.iCelEntityList_GetCount(*args)
    def Get(*args): return _blcelc.iCelEntityList_Get(*args)
    def Add(*args): return _blcelc.iCelEntityList_Add(*args)
    def Remove(*args): return _blcelc.iCelEntityList_Remove(*args)
    def RemoveAll(*args): return _blcelc.iCelEntityList_RemoveAll(*args)
    def Find(*args): return _blcelc.iCelEntityList_Find(*args)
    def FindByName(*args): return _blcelc.iCelEntityList_FindByName(*args)
    def GetIterator(*args): return _blcelc.iCelEntityList_GetIterator(*args)
    Count = _swig_property(_blcelc.iCelEntityList_Count_get, None, None,
                    "iCelEntityList.Count -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelEntityList::GetCount()")

    Iterator = _swig_property(_blcelc.iCelEntityList_Iterator_get, None, None,
                    "iCelEntityList.Iterator -> csPtr<iCelEntityIterator>  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csPtr<iCelEntityIterator> iCelEntityList::GetIterator()")

    def __delitem__(*args): return _blcelc.iCelEntityList___delitem__(*args)
    def __len__(*args): return _blcelc.iCelEntityList___len__(*args)
    def append(*args): return _blcelc.iCelEntityList_append(*args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(*args): return _blcelc.iCelEntityList___getitem__(*args)
    def __contains__(*args): return _blcelc.iCelEntityList___contains__(*args)
    scfGetVersion = staticmethod(_blcelc.iCelEntityList_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iCelEntityList
    __del__ = lambda self : None;
iCelEntityList_swigregister = _blcelc.iCelEntityList_swigregister
iCelEntityList_swigregister(iCelEntityList)
iCelEntityList_scfGetVersion = _blcelc.iCelEntityList_scfGetVersion

class iCelEntityIterator(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Next(*args): return _blcelc.iCelEntityIterator_Next(*args)
    def HasNext(*args): return _blcelc.iCelEntityIterator_HasNext(*args)
    __swig_destroy__ = _blcelc.delete_iCelEntityIterator
    __del__ = lambda self : None;
iCelEntityIterator_swigregister = _blcelc.iCelEntityIterator_swigregister
iCelEntityIterator_swigregister(iCelEntityIterator)

celRegisterPCFactory = _blcelc.celRegisterPCFactory
celCreateEntity = _blcelc.celCreateEntity
scfQueryInterface_iCelEntity = _blcelc.scfQueryInterface_iCelEntity
class iCelEntityTemplate(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryObject(*args): return _blcelc.iCelEntityTemplate_QueryObject(*args)
    def GetName(*args): return _blcelc.iCelEntityTemplate_GetName(*args)
    def SetName(*args): return _blcelc.iCelEntityTemplate_SetName(*args)
    def CreatePropertyClassTemplate(*args): return _blcelc.iCelEntityTemplate_CreatePropertyClassTemplate(*args)
    def FindPropertyClassTemplate(*args): return _blcelc.iCelEntityTemplate_FindPropertyClassTemplate(*args)
    def SetBehaviour(*args): return _blcelc.iCelEntityTemplate_SetBehaviour(*args)
    def GetBehaviourLayer(*args): return _blcelc.iCelEntityTemplate_GetBehaviourLayer(*args)
    def GetBehaviour(*args): return _blcelc.iCelEntityTemplate_GetBehaviour(*args)
    def AddMessage(*args): return _blcelc.iCelEntityTemplate_AddMessage(*args)
    def AddClass(*args): return _blcelc.iCelEntityTemplate_AddClass(*args)
    def RemoveClass(*args): return _blcelc.iCelEntityTemplate_RemoveClass(*args)
    def HasClass(*args): return _blcelc.iCelEntityTemplate_HasClass(*args)
    def GetClasses(*args): return _blcelc.iCelEntityTemplate_GetClasses(*args)
    def Merge(*args): return _blcelc.iCelEntityTemplate_Merge(*args)
    def GetCharacteristics(*args): return _blcelc.iCelEntityTemplate_GetCharacteristics(*args)
    Object = _swig_property(_blcelc.iCelEntityTemplate_Object_get, None, None,
                    "iCelEntityTemplate.Object -> iObject*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iObject* iCelEntityTemplate::QueryObject()")

    Name = _swig_property(_blcelc.iCelEntityTemplate_Name_get, _blcelc.iCelEntityTemplate_Name_set, None,
                    "iCelEntityTemplate.Name -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelEntityTemplate::GetName()\n\tset: void iCelEntityTemplate::SetName(const char*)")


    Behaviour = _swig_property(_blcelc.iCelEntityTemplate_GetBehaviour, fix_args(_blcelc.iCelEntityTemplate_SetBehaviour), None,
                    "iCelEntityTemplate.Behaviour -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelEntityTemplate::GetBehaviour()\n\tset: void iCelEntityTemplate::SetBehaviour(...)")

    BehaviourLayer = _swig_property(_blcelc.iCelEntityTemplate_BehaviourLayer_get, None, None,
                    "iCelEntityTemplate.BehaviourLayer -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelEntityTemplate::GetBehaviourLayer()")

    Classes = _swig_property(_blcelc.iCelEntityTemplate_Classes_get, None, None,
                    "iCelEntityTemplate.Classes -> const csSet<csStringID>&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csSet<csStringID>& iCelEntityTemplate::GetClasses()")

    __swig_destroy__ = _blcelc.delete_iCelEntityTemplate
    __del__ = lambda self : None;
iCelEntityTemplate_swigregister = _blcelc.iCelEntityTemplate_swigregister
iCelEntityTemplate_swigregister(iCelEntityTemplate)
celFindNearbyEntities = _blcelc.celFindNearbyEntities

class iCelPropertyClassTemplate(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetName(*args): return _blcelc.iCelPropertyClassTemplate_SetName(*args)
    def GetName(*args): return _blcelc.iCelPropertyClassTemplate_GetName(*args)
    def SetTag(*args): return _blcelc.iCelPropertyClassTemplate_SetTag(*args)
    def GetTag(*args): return _blcelc.iCelPropertyClassTemplate_GetTag(*args)
    def SetPropertyVariable(*args): return _blcelc.iCelPropertyClassTemplate_SetPropertyVariable(*args)
    def SetProperty(*args): return _blcelc.iCelPropertyClassTemplate_SetProperty(*args)
    def PerformAction(*args): return _blcelc.iCelPropertyClassTemplate_PerformAction(*args)
    Name = _swig_property(_blcelc.iCelPropertyClassTemplate_Name_get, _blcelc.iCelPropertyClassTemplate_Name_set, None,
                    "iCelPropertyClassTemplate.Name -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelPropertyClassTemplate::GetName()\n\tset: void iCelPropertyClassTemplate::SetName(const char*)")


    Tag = _swig_property(_blcelc.iCelPropertyClassTemplate_Tag_get, _blcelc.iCelPropertyClassTemplate_Tag_set, None,
                    "iCelPropertyClassTemplate.Tag -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelPropertyClassTemplate::GetTag()\n\tset: void iCelPropertyClassTemplate::SetTag(const char*)")


    PropertyVariable = _swig_property(None, fix_args(_blcelc.iCelPropertyClassTemplate_SetPropertyVariable), None,
                    "iCelPropertyClassTemplate.PropertyVariable -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelPropertyClassTemplate::getmethod()\n\tset: void iCelPropertyClassTemplate::SetPropertyVariable(...)")

    Property = _swig_property(None, fix_args(_blcelc.iCelPropertyClassTemplate_SetProperty), None,
                    "iCelPropertyClassTemplate.Property -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelPropertyClassTemplate::getmethod()\n\tset: void iCelPropertyClassTemplate::SetProperty(...)")

    __swig_destroy__ = _blcelc.delete_iCelPropertyClassTemplate
    __del__ = lambda self : None;
iCelPropertyClassTemplate_swigregister = _blcelc.iCelPropertyClassTemplate_swigregister
iCelPropertyClassTemplate_swigregister(iCelPropertyClassTemplate)

class iCelBlLayer(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iCelBlLayer_GetName(*args)
    def CreateBehaviour(*args): return _blcelc.iCelBlLayer_CreateBehaviour(*args)
    Name = _swig_property(_blcelc.iCelBlLayer_Name_get, None, None,
                    "iCelBlLayer.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelBlLayer::GetName()")

    scfGetVersion = staticmethod(_blcelc.iCelBlLayer_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iCelBlLayer
    __del__ = lambda self : None;
iCelBlLayer_swigregister = _blcelc.iCelBlLayer_swigregister
iCelBlLayer_swigregister(iCelBlLayer)
iCelBlLayer_scfGetVersion = _blcelc.iCelBlLayer_scfGetVersion

csQueryRegistry_iCelBlLayer = _blcelc.csQueryRegistry_iCelBlLayer
class iCelParameterBlock(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetParameterCount(*args): return _blcelc.iCelParameterBlock_GetParameterCount(*args)
    def GetParameterDef(*args): return _blcelc.iCelParameterBlock_GetParameterDef(*args)
    def GetParameter(*args): return _blcelc.iCelParameterBlock_GetParameter(*args)
    def GetParameterByIndex(*args): return _blcelc.iCelParameterBlock_GetParameterByIndex(*args)
    ParameterCount = _swig_property(_blcelc.iCelParameterBlock_ParameterCount_get, None, None,
                    "iCelParameterBlock.ParameterCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelParameterBlock::GetParameterCount()")

    def GetParameterIDByIndex(*args): return _blcelc.iCelParameterBlock_GetParameterIDByIndex(*args)
    def __contains__(*args): return _blcelc.iCelParameterBlock___contains__(*args)
    def value_iterator(parblock):
    	for idx in xrange(len(parblock)):
    		yield parblock.GetParameterByIndex(idx)
    def key_iterator(parblock):
    	for idx in xrange(len(parblock)):
    		yield parblock.GetParameterIDByIndex(idx)
    def GetParameterValue(self,id):
    	return self.GetParameter(id)
    def __iter__(self):
    	return self.value_iterator()
    def iterkeys(self):
    	return self.key_iterator()
    def __getitem__(self,i):
    	return self.GetParameter(i)
    def keys(self):
    	keys = []
    	for idx in xrange(len(self)):
    		keys.append(self.GetParameterIDByIndex(idx))
    	return keys
    def has_key(self,id):
    	return self.__contains__(id)

    def __setitem__(*args): return _blcelc.iCelParameterBlock___setitem__(*args)
    def __len__(*args): return _blcelc.iCelParameterBlock___len__(*args)
    __swig_destroy__ = _blcelc.delete_iCelParameterBlock
    __del__ = lambda self : None;
iCelParameterBlock_swigregister = _blcelc.iCelParameterBlock_swigregister
iCelParameterBlock_swigregister(iCelParameterBlock)

class iCelBehaviour(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iCelBehaviour_GetName(*args)
    def GetBehaviourLayer(*args): return _blcelc.iCelBehaviour_GetBehaviourLayer(*args)
    Name = _swig_property(_blcelc.iCelBehaviour_Name_get, None, None,
                    "iCelBehaviour.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelBehaviour::GetName()")

    BehaviourLayer = _swig_property(_blcelc.iCelBehaviour_BehaviourLayer_get, None, None,
                    "iCelBehaviour.BehaviourLayer -> iCelBlLayer*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iCelBlLayer* iCelBehaviour::GetBehaviourLayer()")

    def GetPythonObject(*args): return _blcelc.iCelBehaviour_GetPythonObject(*args)
    def SendMessage(*args): return _blcelc.iCelBehaviour_SendMessage(*args)
    def __getattr__(self,attr):
      return getattr(self.GetPythonObject(),attr)
    def __setattr__(self,attr,value):
      return setattr(self.GetPythonObject(),attr,value)

    __swig_destroy__ = _blcelc.delete_iCelBehaviour
    __del__ = lambda self : None;
iCelBehaviour_swigregister = _blcelc.iCelBehaviour_swigregister
iCelBehaviour_swigregister(iCelBehaviour)

class scfVariableParameterBlock(iCelParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.scfVariableParameterBlock_IncRef(*args)
    def DecRef(*args): return _blcelc.scfVariableParameterBlock_DecRef(*args)
    def GetRefCount(*args): return _blcelc.scfVariableParameterBlock_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.scfVariableParameterBlock_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.scfVariableParameterBlock_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.scfVariableParameterBlock_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.scfVariableParameterBlock_GetInterfaceMetadata(*args)
scfVariableParameterBlock_swigregister = _blcelc.scfVariableParameterBlock_swigregister
scfVariableParameterBlock_swigregister(scfVariableParameterBlock)

class scfCombineParameterBlock(iCelParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.scfCombineParameterBlock_IncRef(*args)
    def DecRef(*args): return _blcelc.scfCombineParameterBlock_DecRef(*args)
    def GetRefCount(*args): return _blcelc.scfCombineParameterBlock_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.scfCombineParameterBlock_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.scfCombineParameterBlock_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.scfCombineParameterBlock_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.scfCombineParameterBlock_GetInterfaceMetadata(*args)
scfCombineParameterBlock_swigregister = _blcelc.scfCombineParameterBlock_swigregister
scfCombineParameterBlock_swigregister(scfCombineParameterBlock)

class scfOneParameterBlock(iCelParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.scfOneParameterBlock_IncRef(*args)
    def DecRef(*args): return _blcelc.scfOneParameterBlock_DecRef(*args)
    def GetRefCount(*args): return _blcelc.scfOneParameterBlock_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.scfOneParameterBlock_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.scfOneParameterBlock_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.scfOneParameterBlock_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.scfOneParameterBlock_GetInterfaceMetadata(*args)
scfOneParameterBlock_swigregister = _blcelc.scfOneParameterBlock_swigregister
scfOneParameterBlock_swigregister(scfOneParameterBlock)

class celParSpec(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_blcelc.celParSpec_type_get, _blcelc.celParSpec_type_set)
    id = _swig_property(_blcelc.celParSpec_id_get, _blcelc.celParSpec_id_set)
    value = _swig_property(_blcelc.celParSpec_value_get, _blcelc.celParSpec_value_set)
    def __init__(self, *args): 
        this = _blcelc.new_celParSpec(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celParSpec
    __del__ = lambda self : None;
celParSpec_swigregister = _blcelc.celParSpec_swigregister
celParSpec_swigregister(celParSpec)

class celParameterTools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ParseParams = staticmethod(_blcelc.celParameterTools_ParseParams)
    ToString = staticmethod(_blcelc.celParameterTools_ToString)
    ToLong = staticmethod(_blcelc.celParameterTools_ToLong)
    ToBool = staticmethod(_blcelc.celParameterTools_ToBool)
    ToFloat = staticmethod(_blcelc.celParameterTools_ToFloat)
    ToVector2 = staticmethod(_blcelc.celParameterTools_ToVector2)
    ToVector3 = staticmethod(_blcelc.celParameterTools_ToVector3)
    ToVector4 = staticmethod(_blcelc.celParameterTools_ToVector4)
    ToColor = staticmethod(_blcelc.celParameterTools_ToColor)
    ToColor4 = staticmethod(_blcelc.celParameterTools_ToColor4)
    Convert = staticmethod(_blcelc.celParameterTools_Convert)
    ParseParSpecBlock = staticmethod(_blcelc.celParameterTools_ParseParSpecBlock)
    GetParameterBlock = staticmethod(_blcelc.celParameterTools_GetParameterBlock)
    FillParameterBlock = staticmethod(_blcelc.celParameterTools_FillParameterBlock)
    GetDebugData = staticmethod(_blcelc.celParameterTools_GetDebugData)
    Dump = staticmethod(_blcelc.celParameterTools_Dump)
    def __init__(self, *args): 
        this = _blcelc.new_celParameterTools(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celParameterTools
    __del__ = lambda self : None;
celParameterTools_swigregister = _blcelc.celParameterTools_swigregister
celParameterTools_swigregister(celParameterTools)
celParameterTools_ParseParams = _blcelc.celParameterTools_ParseParams
celParameterTools_ToString = _blcelc.celParameterTools_ToString
celParameterTools_ToLong = _blcelc.celParameterTools_ToLong
celParameterTools_ToBool = _blcelc.celParameterTools_ToBool
celParameterTools_ToFloat = _blcelc.celParameterTools_ToFloat
celParameterTools_ToVector2 = _blcelc.celParameterTools_ToVector2
celParameterTools_ToVector3 = _blcelc.celParameterTools_ToVector3
celParameterTools_ToVector4 = _blcelc.celParameterTools_ToVector4
celParameterTools_ToColor = _blcelc.celParameterTools_ToColor
celParameterTools_ToColor4 = _blcelc.celParameterTools_ToColor4
celParameterTools_Convert = _blcelc.celParameterTools_Convert
celParameterTools_ParseParSpecBlock = _blcelc.celParameterTools_ParseParSpecBlock
celParameterTools_GetParameterBlock = _blcelc.celParameterTools_GetParameterBlock
celParameterTools_FillParameterBlock = _blcelc.celParameterTools_FillParameterBlock
celParameterTools_GetDebugData = _blcelc.celParameterTools_GetDebugData
celParameterTools_Dump = _blcelc.celParameterTools_Dump

class celVariable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_blcelc.celVariable_id_get, _blcelc.celVariable_id_set)
    data = _swig_property(_blcelc.celVariable_data_get, _blcelc.celVariable_data_set)
    def __init__(self, *args): 
        this = _blcelc.new_celVariable(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celVariable
    __del__ = lambda self : None;
celVariable_swigregister = _blcelc.celVariable_swigregister
celVariable_swigregister(celVariable)

class celVariableParameterBlock(scfVariableParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celVariableParameterBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celVariableParameterBlock
    __del__ = lambda self : None;
    def Clear(*args): return _blcelc.celVariableParameterBlock_Clear(*args)
    def AddParameter(*args): return _blcelc.celVariableParameterBlock_AddParameter(*args)
    def SetParameterDef(*args): return _blcelc.celVariableParameterBlock_SetParameterDef(*args)
    def GetParameterCount(*args): return _blcelc.celVariableParameterBlock_GetParameterCount(*args)
    def GetParameterDef(*args): return _blcelc.celVariableParameterBlock_GetParameterDef(*args)
    def GetParameterByIndex(*args): return _blcelc.celVariableParameterBlock_GetParameterByIndex(*args)
    def GetParameter(*args): return _blcelc.celVariableParameterBlock_GetParameter(*args)
    def Merge(*args): return _blcelc.celVariableParameterBlock_Merge(*args)
    ParameterDef = _swig_property(None, fix_args(_blcelc.celVariableParameterBlock_SetParameterDef), None,
                    "celVariableParameterBlock.ParameterDef -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: celVariableParameterBlock::getmethod()\n\tset: void celVariableParameterBlock::SetParameterDef(...)")

    ParameterCount = _swig_property(_blcelc.celVariableParameterBlock_ParameterCount_get, None, None,
                    "celVariableParameterBlock.ParameterCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t celVariableParameterBlock::GetParameterCount()")

celVariableParameterBlock_swigregister = _blcelc.celVariableParameterBlock_swigregister
celVariableParameterBlock_swigregister(celVariableParameterBlock)

class celEntityParameterBlock(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celEntityParameterBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celEntityParameterBlock
    __del__ = lambda self : None;
    def GetParameterCount(*args): return _blcelc.celEntityParameterBlock_GetParameterCount(*args)
    def GetParameterDef(*args): return _blcelc.celEntityParameterBlock_GetParameterDef(*args)
    def GetParameter(*args): return _blcelc.celEntityParameterBlock_GetParameter(*args)
    def GetParameterByIndex(*args): return _blcelc.celEntityParameterBlock_GetParameterByIndex(*args)
celEntityParameterBlock_swigregister = _blcelc.celEntityParameterBlock_swigregister
celEntityParameterBlock_swigregister(celEntityParameterBlock)

class celOneParameterBlock(scfOneParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celOneParameterBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celOneParameterBlock
    __del__ = lambda self : None;
    def SetParameterDef(*args): return _blcelc.celOneParameterBlock_SetParameterDef(*args)
    def GetParameterCount(*args): return _blcelc.celOneParameterBlock_GetParameterCount(*args)
    def GetParameterDef(*args): return _blcelc.celOneParameterBlock_GetParameterDef(*args)
    def GetParameter(*args): return _blcelc.celOneParameterBlock_GetParameter(*args)
    def GetParameterByIndex(*args): return _blcelc.celOneParameterBlock_GetParameterByIndex(*args)
    ParameterDef = _swig_property(None, fix_args(_blcelc.celOneParameterBlock_SetParameterDef), None,
                    "celOneParameterBlock.ParameterDef -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: celOneParameterBlock::getmethod()\n\tset: void celOneParameterBlock::SetParameterDef(...)")

    ParameterCount = _swig_property(_blcelc.celOneParameterBlock_ParameterCount_get, None, None,
                    "celOneParameterBlock.ParameterCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t celOneParameterBlock::GetParameterCount()")

celOneParameterBlock_swigregister = _blcelc.celOneParameterBlock_swigregister
celOneParameterBlock_swigregister(celOneParameterBlock)

class celCombineParameterBlock(scfCombineParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celCombineParameterBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celCombineParameterBlock
    __del__ = lambda self : None;
    def SetParameterBlock1(*args): return _blcelc.celCombineParameterBlock_SetParameterBlock1(*args)
    def SetParameterBlock2(*args): return _blcelc.celCombineParameterBlock_SetParameterBlock2(*args)
    def GetParameterCount(*args): return _blcelc.celCombineParameterBlock_GetParameterCount(*args)
    def GetParameterDef(*args): return _blcelc.celCombineParameterBlock_GetParameterDef(*args)
    def GetParameter(*args): return _blcelc.celCombineParameterBlock_GetParameter(*args)
    def GetParameterByIndex(*args): return _blcelc.celCombineParameterBlock_GetParameterByIndex(*args)
celCombineParameterBlock_swigregister = _blcelc.celCombineParameterBlock_swigregister
celCombineParameterBlock_swigregister(celCombineParameterBlock)

class celParameterMapping(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    source = _swig_property(_blcelc.celParameterMapping_source_get, _blcelc.celParameterMapping_source_set)
    dest = _swig_property(_blcelc.celParameterMapping_dest_get, _blcelc.celParameterMapping_dest_set)
    expression = _swig_property(_blcelc.celParameterMapping_expression_get, _blcelc.celParameterMapping_expression_set)
    def __init__(self, *args): 
        this = _blcelc.new_celParameterMapping(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celParameterMapping
    __del__ = lambda self : None;
celParameterMapping_swigregister = _blcelc.celParameterMapping_swigregister
celParameterMapping_swigregister(celParameterMapping)

class celMappedParameterBlock(celVariableParameterBlock):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celMappedParameterBlock(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celMappedParameterBlock
    __del__ = lambda self : None;
celMappedParameterBlock_swigregister = _blcelc.celMappedParameterBlock_swigregister
celMappedParameterBlock_swigregister(celMappedParameterBlock)

class iCelPropertyClassFactory(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iCelPropertyClassFactory_GetName(*args)
    def CreatePropertyClass(*args): return _blcelc.iCelPropertyClassFactory_CreatePropertyClass(*args)
    Name = _swig_property(_blcelc.iCelPropertyClassFactory_Name_get, None, None,
                    "iCelPropertyClassFactory.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelPropertyClassFactory::GetName()")

    __swig_destroy__ = _blcelc.delete_iCelPropertyClassFactory
    __del__ = lambda self : None;
iCelPropertyClassFactory_swigregister = _blcelc.iCelPropertyClassFactory_swigregister
iCelPropertyClassFactory_swigregister(iCelPropertyClassFactory)

class iCelPositionInfo(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSector(*args): return _blcelc.iCelPositionInfo_GetSector(*args)
    def GetPosition(*args): return _blcelc.iCelPositionInfo_GetPosition(*args)
    def GetMovable(*args): return _blcelc.iCelPositionInfo_GetMovable(*args)
    def GetBoundingRadius(*args): return _blcelc.iCelPositionInfo_GetBoundingRadius(*args)
    __swig_destroy__ = _blcelc.delete_iCelPositionInfo
    __del__ = lambda self : None;
iCelPositionInfo_swigregister = _blcelc.iCelPositionInfo_swigregister
iCelPositionInfo_swigregister(iCelPositionInfo)

class iCelPropertyClass(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetName(*args): return _blcelc.iCelPropertyClass_SetName(*args)
    def GetName(*args): return _blcelc.iCelPropertyClass_GetName(*args)
    def QueryObject(*args): return _blcelc.iCelPropertyClass_QueryObject(*args)
    def SetTag(*args): return _blcelc.iCelPropertyClass_SetTag(*args)
    def GetTag(*args): return _blcelc.iCelPropertyClass_GetTag(*args)
    def GetEntity(*args): return _blcelc.iCelPropertyClass_GetEntity(*args)
    def SetEntity(*args): return _blcelc.iCelPropertyClass_SetEntity(*args)
    def AddPropertyChangeCallback(*args): return _blcelc.iCelPropertyClass_AddPropertyChangeCallback(*args)
    def RemovePropertyChangeCallback(*args): return _blcelc.iCelPropertyClass_RemovePropertyChangeCallback(*args)
    def SetProperty(*args): return _blcelc.iCelPropertyClass_SetProperty(*args)
    def GetPropertyOrActionType(*args): return _blcelc.iCelPropertyClass_GetPropertyOrActionType(*args)
    def IsPropertyReadOnly(*args): return _blcelc.iCelPropertyClass_IsPropertyReadOnly(*args)
    def GetPropertyLongByID(*args): return _blcelc.iCelPropertyClass_GetPropertyLongByID(*args)
    def GetPropertyFloatByID(*args): return _blcelc.iCelPropertyClass_GetPropertyFloatByID(*args)
    def GetPropertyBoolByID(*args): return _blcelc.iCelPropertyClass_GetPropertyBoolByID(*args)
    def GetPropertyStringByID(*args): return _blcelc.iCelPropertyClass_GetPropertyStringByID(*args)
    def GetPropertyVector2ByID(*args): return _blcelc.iCelPropertyClass_GetPropertyVector2ByID(*args)
    def GetPropertyVector3ByID(*args): return _blcelc.iCelPropertyClass_GetPropertyVector3ByID(*args)
    def GetPropertyColorByID(*args): return _blcelc.iCelPropertyClass_GetPropertyColorByID(*args)
    def GetPropertyPClassByID(*args): return _blcelc.iCelPropertyClass_GetPropertyPClassByID(*args)
    def GetPropertyEntityByID(*args): return _blcelc.iCelPropertyClass_GetPropertyEntityByID(*args)
    def GetPropertyIBaseByID(*args): return _blcelc.iCelPropertyClass_GetPropertyIBaseByID(*args)
    def PerformAction(*args): return _blcelc.iCelPropertyClass_PerformAction(*args)
    def GetPropertyAndActionCount(*args): return _blcelc.iCelPropertyClass_GetPropertyAndActionCount(*args)
    def GetPropertyOrActionID(*args): return _blcelc.iCelPropertyClass_GetPropertyOrActionID(*args)
    def GetPropertyOrActionDescription(*args): return _blcelc.iCelPropertyClass_GetPropertyOrActionDescription(*args)
    def PropertyClassesHaveChanged(*args): return _blcelc.iCelPropertyClass_PropertyClassesHaveChanged(*args)
    def GetPersistentData(*args): return _blcelc.iCelPropertyClass_GetPersistentData(*args)
    def SetPersistentData(*args): return _blcelc.iCelPropertyClass_SetPersistentData(*args)
    def QueryPositionInfo(*args): return _blcelc.iCelPropertyClass_QueryPositionInfo(*args)
    def Activate(*args): return _blcelc.iCelPropertyClass_Activate(*args)
    def Deactivate(*args): return _blcelc.iCelPropertyClass_Deactivate(*args)
    def MarkBaseline(*args): return _blcelc.iCelPropertyClass_MarkBaseline(*args)
    def IsModifiedSinceBaseline(*args): return _blcelc.iCelPropertyClass_IsModifiedSinceBaseline(*args)
    def SaveModifications(*args): return _blcelc.iCelPropertyClass_SaveModifications(*args)
    def RestoreModifications(*args): return _blcelc.iCelPropertyClass_RestoreModifications(*args)
    Name = _swig_property(_blcelc.iCelPropertyClass_Name_get, _blcelc.iCelPropertyClass_Name_set, None,
                    "iCelPropertyClass.Name -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelPropertyClass::GetName()\n\tset: void iCelPropertyClass::SetName(const char*)")


    Tag = _swig_property(_blcelc.iCelPropertyClass_Tag_get, _blcelc.iCelPropertyClass_Tag_set, None,
                    "iCelPropertyClass.Tag -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelPropertyClass::GetTag()\n\tset: void iCelPropertyClass::SetTag(const char*)")


    Entity = _swig_property(_blcelc.iCelPropertyClass_Entity_get, _blcelc.iCelPropertyClass_Entity_set, None,
                    "iCelPropertyClass.Entity -> iCelEntity*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelEntity* iCelPropertyClass::GetEntity()\n\tset: void iCelPropertyClass::SetEntity(iCelEntity*)")


    Property = _swig_property(None, fix_args(_blcelc.iCelPropertyClass_SetProperty), None,
                    "iCelPropertyClass.Property -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelPropertyClass::getmethod()\n\tset: void iCelPropertyClass::SetProperty(...)")

    PropertyAndActionCount = _swig_property(_blcelc.iCelPropertyClass_PropertyAndActionCount_get, None, None,
                    "iCelPropertyClass.PropertyAndActionCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelPropertyClass::GetPropertyAndActionCount()")

    def SetPropertyLong(*args): return _blcelc.iCelPropertyClass_SetPropertyLong(*args)
    def SetPropertyFloat(*args): return _blcelc.iCelPropertyClass_SetPropertyFloat(*args)
    def SetPropertyBool(*args): return _blcelc.iCelPropertyClass_SetPropertyBool(*args)
    def SetPropertyString(*args): return _blcelc.iCelPropertyClass_SetPropertyString(*args)
    def SetPropertyVector2(*args): return _blcelc.iCelPropertyClass_SetPropertyVector2(*args)
    def SetPropertyVector3(*args): return _blcelc.iCelPropertyClass_SetPropertyVector3(*args)
    def SetPropertyColor(*args): return _blcelc.iCelPropertyClass_SetPropertyColor(*args)
    def SetPropertyEntity(*args): return _blcelc.iCelPropertyClass_SetPropertyEntity(*args)
    scfGetVersion = staticmethod(_blcelc.iCelPropertyClass_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iCelPropertyClass
    __del__ = lambda self : None;
    def GetterFallback(self,attr):
         raise AttributeError
    def SetterFallback(self,attr,value):
         raise AttributeError

iCelPropertyClass_swigregister = _blcelc.iCelPropertyClass_swigregister
iCelPropertyClass_swigregister(iCelPropertyClass)
iCelPropertyClass_scfGetVersion = _blcelc.iCelPropertyClass_scfGetVersion

class iCelPropertyClassList(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetCount(*args): return _blcelc.iCelPropertyClassList_GetCount(*args)
    def Get(*args): return _blcelc.iCelPropertyClassList_Get(*args)
    def Add(*args): return _blcelc.iCelPropertyClassList_Add(*args)
    def Remove(self,propclass):
      if not (isinstance(propclass,int) or isinstance(propclass,
              iCelPropertyClass)):
        propclass = propclass.QueryInterface(iCelPropertyClass)
      return _blcelc.iCelPropertyClassList_Remove(self,propclass)


    def RemoveByInterface(*args): return _blcelc.iCelPropertyClassList_RemoveByInterface(*args)
    def RemoveByInterfaceAndTag(*args): return _blcelc.iCelPropertyClassList_RemoveByInterfaceAndTag(*args)
    def RemoveAll(*args): return _blcelc.iCelPropertyClassList_RemoveAll(*args)
    def Find(*args): return _blcelc.iCelPropertyClassList_Find(*args)
    def FindByName(*args): return _blcelc.iCelPropertyClassList_FindByName(*args)
    def FindByNameAndTag(*args): return _blcelc.iCelPropertyClassList_FindByNameAndTag(*args)
    Count = _swig_property(_blcelc.iCelPropertyClassList_Count_get, None, None,
                    "iCelPropertyClassList.Count -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelPropertyClassList::GetCount()")

    def FindByInterface(*args): return _blcelc.iCelPropertyClassList_FindByInterface(*args)
    def FindByInterfaceAndTag(*args): return _blcelc.iCelPropertyClassList_FindByInterfaceAndTag(*args)
    def __delitem__(*args): return _blcelc.iCelPropertyClassList___delitem__(*args)
    def __len__(*args): return _blcelc.iCelPropertyClassList___len__(*args)
    def append(*args): return _blcelc.iCelPropertyClassList_append(*args)
    def content_iterator(self):
            for idx in xrange(len(self)):
                    yield self.__getitem__(idx)
    def __iter__(self): return self.content_iterator()  
    def __getitem__(*args): return _blcelc.iCelPropertyClassList___getitem__(*args)
    def __contains__(*args): return _blcelc.iCelPropertyClassList___contains__(*args)
    __swig_destroy__ = _blcelc.delete_iCelPropertyClassList
    __del__ = lambda self : None;
iCelPropertyClassList_swigregister = _blcelc.iCelPropertyClassList_swigregister
iCelPropertyClassList_swigregister(iCelPropertyClassList)

class iPcMechanicsSystem(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetDynamicSystem(*args): return _blcelc.iPcMechanicsSystem_SetDynamicSystem(*args)
    def GetDynamicSystem(*args): return _blcelc.iPcMechanicsSystem_GetDynamicSystem(*args)
    def SetStepTime(*args): return _blcelc.iPcMechanicsSystem_SetStepTime(*args)
    def GetStepTime(*args): return _blcelc.iPcMechanicsSystem_GetStepTime(*args)
    def SetSimulationSpeed(*args): return _blcelc.iPcMechanicsSystem_SetSimulationSpeed(*args)
    def GetSimulationSpeed(*args): return _blcelc.iPcMechanicsSystem_GetSimulationSpeed(*args)
    def SetGravity(*args): return _blcelc.iPcMechanicsSystem_SetGravity(*args)
    def GetGravity(*args): return _blcelc.iPcMechanicsSystem_GetGravity(*args)
    def AddForceDuration(*args): return _blcelc.iPcMechanicsSystem_AddForceDuration(*args)
    def AddForceFrame(*args): return _blcelc.iPcMechanicsSystem_AddForceFrame(*args)
    def AddForceTagged(*args): return _blcelc.iPcMechanicsSystem_AddForceTagged(*args)
    def RemoveForceTagged(*args): return _blcelc.iPcMechanicsSystem_RemoveForceTagged(*args)
    def ClearForces(*args): return _blcelc.iPcMechanicsSystem_ClearForces(*args)
    def ClearAllForces(*args): return _blcelc.iPcMechanicsSystem_ClearAllForces(*args)
    def CreateBody(*args): return _blcelc.iPcMechanicsSystem_CreateBody(*args)
    def RemoveBody(*args): return _blcelc.iPcMechanicsSystem_RemoveBody(*args)
    def AddBodyToGroup(*args): return _blcelc.iPcMechanicsSystem_AddBodyToGroup(*args)
    def RemoveBodyFromGroup(*args): return _blcelc.iPcMechanicsSystem_RemoveBodyFromGroup(*args)
    def CreateJoint(*args): return _blcelc.iPcMechanicsSystem_CreateJoint(*args)
    def RemoveJoint(*args): return _blcelc.iPcMechanicsSystem_RemoveJoint(*args)
    def DisableStepFast(*args): return _blcelc.iPcMechanicsSystem_DisableStepFast(*args)
    def EnableStepFast(*args): return _blcelc.iPcMechanicsSystem_EnableStepFast(*args)
    def EnableQuickStep(*args): return _blcelc.iPcMechanicsSystem_EnableQuickStep(*args)
    DynamicSystem = _swig_property(_blcelc.iPcMechanicsSystem_GetDynamicSystem, fix_args(_blcelc.iPcMechanicsSystem_SetDynamicSystem), None,
                    "iPcMechanicsSystem.DynamicSystem -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMechanicsSystem::GetDynamicSystem()\n\tset: void iPcMechanicsSystem::SetDynamicSystem(...)")

    StepTime = _swig_property(_blcelc.iPcMechanicsSystem_StepTime_get, _blcelc.iPcMechanicsSystem_StepTime_set, None,
                    "iPcMechanicsSystem.StepTime -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsSystem::GetStepTime()\n\tset: void iPcMechanicsSystem::SetStepTime(float)")


    SimulationSpeed = _swig_property(_blcelc.iPcMechanicsSystem_SimulationSpeed_get, _blcelc.iPcMechanicsSystem_SimulationSpeed_set, None,
                    "iPcMechanicsSystem.SimulationSpeed -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsSystem::GetSimulationSpeed()\n\tset: void iPcMechanicsSystem::SetSimulationSpeed(float)")


    Gravity = _swig_property(_blcelc.iPcMechanicsSystem_Gravity_get, _blcelc.iPcMechanicsSystem_Gravity_set, None,
                    "iPcMechanicsSystem.Gravity -> const csVector3\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3 iPcMechanicsSystem::GetGravity()\n\tset: void iPcMechanicsSystem::SetGravity(const csVector3)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMechanicsSystem,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMechanicsSystem_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMechanicsSystem
    __del__ = lambda self : None;
iPcMechanicsSystem_swigregister = _blcelc.iPcMechanicsSystem_swigregister
iPcMechanicsSystem_swigregister(iPcMechanicsSystem)
iPcMechanicsSystem_scfGetVersion = _blcelc.iPcMechanicsSystem_scfGetVersion

class iPcMechanicsObject(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMesh(*args): return _blcelc.iPcMechanicsObject_SetMesh(*args)
    def GetMesh(*args): return _blcelc.iPcMechanicsObject_GetMesh(*args)
    def SetLight(*args): return _blcelc.iPcMechanicsObject_SetLight(*args)
    def GetLight(*args): return _blcelc.iPcMechanicsObject_GetLight(*args)
    def SetCamera(*args): return _blcelc.iPcMechanicsObject_SetCamera(*args)
    def GetCamera(*args): return _blcelc.iPcMechanicsObject_GetCamera(*args)
    def SetMechanicsSystem(*args): return _blcelc.iPcMechanicsObject_SetMechanicsSystem(*args)
    def GetMechanicsSystem(*args): return _blcelc.iPcMechanicsObject_GetMechanicsSystem(*args)
    def GetBody(*args): return _blcelc.iPcMechanicsObject_GetBody(*args)
    def SetBody(*args): return _blcelc.iPcMechanicsObject_SetBody(*args)
    def SetFriction(*args): return _blcelc.iPcMechanicsObject_SetFriction(*args)
    def SetMass(*args): return _blcelc.iPcMechanicsObject_SetMass(*args)
    def SetElasticity(*args): return _blcelc.iPcMechanicsObject_SetElasticity(*args)
    def SetDensity(*args): return _blcelc.iPcMechanicsObject_SetDensity(*args)
    def SetSoftness(*args): return _blcelc.iPcMechanicsObject_SetSoftness(*args)
    def SetLift(*args): return _blcelc.iPcMechanicsObject_SetLift(*args)
    def SetDrag(*args): return _blcelc.iPcMechanicsObject_SetDrag(*args)
    def GetFriction(*args): return _blcelc.iPcMechanicsObject_GetFriction(*args)
    def GetMass(*args): return _blcelc.iPcMechanicsObject_GetMass(*args)
    def GetElasticity(*args): return _blcelc.iPcMechanicsObject_GetElasticity(*args)
    def GetDensity(*args): return _blcelc.iPcMechanicsObject_GetDensity(*args)
    def GetSoftness(*args): return _blcelc.iPcMechanicsObject_GetSoftness(*args)
    def GetLift(*args): return _blcelc.iPcMechanicsObject_GetLift(*args)
    def GetDrag(*args): return _blcelc.iPcMechanicsObject_GetDrag(*args)
    def SetLinearVelocity(*args): return _blcelc.iPcMechanicsObject_SetLinearVelocity(*args)
    def SetAngularVelocity(*args): return _blcelc.iPcMechanicsObject_SetAngularVelocity(*args)
    def GetLinearVelocity(*args): return _blcelc.iPcMechanicsObject_GetLinearVelocity(*args)
    def GetAngularVelocity(*args): return _blcelc.iPcMechanicsObject_GetAngularVelocity(*args)
    def MakeStatic(*args): return _blcelc.iPcMechanicsObject_MakeStatic(*args)
    def IsStatic(*args): return _blcelc.iPcMechanicsObject_IsStatic(*args)
    def SetCollisionCallbackEnabled(*args): return _blcelc.iPcMechanicsObject_SetCollisionCallbackEnabled(*args)
    def IsCollisionCallbackEnabled(*args): return _blcelc.iPcMechanicsObject_IsCollisionCallbackEnabled(*args)
    def AttachColliderBoundingSphere(*args): return _blcelc.iPcMechanicsObject_AttachColliderBoundingSphere(*args)
    def AttachColliderSphere(*args): return _blcelc.iPcMechanicsObject_AttachColliderSphere(*args)
    def AttachColliderCylinder(*args): return _blcelc.iPcMechanicsObject_AttachColliderCylinder(*args)
    def AttachColliderBoundingBox(*args): return _blcelc.iPcMechanicsObject_AttachColliderBoundingBox(*args)
    def AttachColliderBox(*args): return _blcelc.iPcMechanicsObject_AttachColliderBox(*args)
    def AttachColliderPlane(*args): return _blcelc.iPcMechanicsObject_AttachColliderPlane(*args)
    def AttachColliderMesh(*args): return _blcelc.iPcMechanicsObject_AttachColliderMesh(*args)
    def AttachColliderConvexMesh(*args): return _blcelc.iPcMechanicsObject_AttachColliderConvexMesh(*args)
    def AddForceOnce(*args): return _blcelc.iPcMechanicsObject_AddForceOnce(*args)
    def AddForceDuration(*args): return _blcelc.iPcMechanicsObject_AddForceDuration(*args)
    def AddForceFrame(*args): return _blcelc.iPcMechanicsObject_AddForceFrame(*args)
    def AddForceTagged(*args): return _blcelc.iPcMechanicsObject_AddForceTagged(*args)
    def RemoveForceTagged(*args): return _blcelc.iPcMechanicsObject_RemoveForceTagged(*args)
    def ClearForces(*args): return _blcelc.iPcMechanicsObject_ClearForces(*args)
    def AddToGroup(*args): return _blcelc.iPcMechanicsObject_AddToGroup(*args)
    def RemoveFromGroup(*args): return _blcelc.iPcMechanicsObject_RemoveFromGroup(*args)
    def CreateJoint(*args): return _blcelc.iPcMechanicsObject_CreateJoint(*args)
    def LocalToWorld(*args): return _blcelc.iPcMechanicsObject_LocalToWorld(*args)
    def WorldToLocal(*args): return _blcelc.iPcMechanicsObject_WorldToLocal(*args)
    Mesh = _swig_property(_blcelc.iPcMechanicsObject_Mesh_get, _blcelc.iPcMechanicsObject_Mesh_set, None,
                    "iPcMechanicsObject.Mesh -> iPcMesh*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMesh* iPcMechanicsObject::GetMesh()\n\tset: void iPcMechanicsObject::SetMesh(iPcMesh*)")


    Light = _swig_property(_blcelc.iPcMechanicsObject_Light_get, _blcelc.iPcMechanicsObject_Light_set, None,
                    "iPcMechanicsObject.Light -> iPcLight*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLight* iPcMechanicsObject::GetLight()\n\tset: void iPcMechanicsObject::SetLight(iPcLight*)")


    Camera = _swig_property(_blcelc.iPcMechanicsObject_Camera_get, _blcelc.iPcMechanicsObject_Camera_set, None,
                    "iPcMechanicsObject.Camera -> iPcCamera*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcCamera* iPcMechanicsObject::GetCamera()\n\tset: void iPcMechanicsObject::SetCamera(iPcCamera*)")


    MechanicsSystem = _swig_property(_blcelc.iPcMechanicsObject_MechanicsSystem_get, _blcelc.iPcMechanicsObject_MechanicsSystem_set, None,
                    "iPcMechanicsObject.MechanicsSystem -> iPcMechanicsSystem*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMechanicsSystem* iPcMechanicsObject::GetMechanicsSystem()\n\tset: void iPcMechanicsObject::SetMechanicsSystem(iPcMechanicsSystem*)")


    Body = _swig_property(_blcelc.iPcMechanicsObject_Body_get, None, None,
                    "iPcMechanicsObject.Body -> iRigidBody*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iRigidBody* iPcMechanicsObject::GetBody()")

    Friction = _swig_property(_blcelc.iPcMechanicsObject_Friction_get, _blcelc.iPcMechanicsObject_Friction_set, None,
                    "iPcMechanicsObject.Friction -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsObject::GetFriction()\n\tset: void iPcMechanicsObject::SetFriction(float)")


    Mass = _swig_property(_blcelc.iPcMechanicsObject_Mass_get, _blcelc.iPcMechanicsObject_Mass_set, None,
                    "iPcMechanicsObject.Mass -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsObject::GetMass()\n\tset: void iPcMechanicsObject::SetMass(float)")


    Elasticity = _swig_property(_blcelc.iPcMechanicsObject_Elasticity_get, _blcelc.iPcMechanicsObject_Elasticity_set, None,
                    "iPcMechanicsObject.Elasticity -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsObject::GetElasticity()\n\tset: void iPcMechanicsObject::SetElasticity(float)")


    Density = _swig_property(_blcelc.iPcMechanicsObject_Density_get, _blcelc.iPcMechanicsObject_Density_set, None,
                    "iPcMechanicsObject.Density -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsObject::GetDensity()\n\tset: void iPcMechanicsObject::SetDensity(float)")


    Softness = _swig_property(_blcelc.iPcMechanicsObject_Softness_get, _blcelc.iPcMechanicsObject_Softness_set, None,
                    "iPcMechanicsObject.Softness -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsObject::GetSoftness()\n\tset: void iPcMechanicsObject::SetSoftness(float)")


    Lift = _swig_property(_blcelc.iPcMechanicsObject_Lift_get, _blcelc.iPcMechanicsObject_Lift_set, None,
                    "iPcMechanicsObject.Lift -> const csVector3&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3& iPcMechanicsObject::GetLift()\n\tset: void iPcMechanicsObject::SetLift(const csVector3&)")


    Drag = _swig_property(_blcelc.iPcMechanicsObject_Drag_get, _blcelc.iPcMechanicsObject_Drag_set, None,
                    "iPcMechanicsObject.Drag -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsObject::GetDrag()\n\tset: void iPcMechanicsObject::SetDrag(float)")


    LinearVelocity = _swig_property(_blcelc.iPcMechanicsObject_LinearVelocity_get, _blcelc.iPcMechanicsObject_LinearVelocity_set, None,
                    "iPcMechanicsObject.LinearVelocity -> const csVector3\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3 iPcMechanicsObject::GetLinearVelocity()\n\tset: void iPcMechanicsObject::SetLinearVelocity(const csVector3)")


    AngularVelocity = _swig_property(_blcelc.iPcMechanicsObject_AngularVelocity_get, _blcelc.iPcMechanicsObject_AngularVelocity_set, None,
                    "iPcMechanicsObject.AngularVelocity -> const csVector3\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3 iPcMechanicsObject::GetAngularVelocity()\n\tset: void iPcMechanicsObject::SetAngularVelocity(const csVector3)")


    Static = _swig_property(_blcelc.iPcMechanicsObject_Static_get, None, None,
                    "iPcMechanicsObject.Static -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcMechanicsObject::IsStatic()")

    CollisionCallbackEnabled = _swig_property(_blcelc.iPcMechanicsObject_CollisionCallbackEnabled_get, _blcelc.iPcMechanicsObject_CollisionCallbackEnabled_set, None,
                    "iPcMechanicsObject.CollisionCallbackEnabled -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMechanicsObject::IsCollisionCallbackEnabled()\n\tset: void iPcMechanicsObject::SetCollisionCallbackEnabled(bool)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMechanicsObject,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMechanicsObject_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMechanicsObject
    __del__ = lambda self : None;
iPcMechanicsObject_swigregister = _blcelc.iPcMechanicsObject_swigregister
iPcMechanicsObject_swigregister(iPcMechanicsObject)
iPcMechanicsObject_scfGetVersion = _blcelc.iPcMechanicsObject_scfGetVersion

class iPcMechanicsJoint(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetJoint(*args): return _blcelc.iPcMechanicsJoint_GetJoint(*args)
    Joint = _swig_property(_blcelc.iPcMechanicsJoint_Joint_get, None, None,
                    "iPcMechanicsJoint.Joint -> iJoint*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iJoint* iPcMechanicsJoint::GetJoint()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMechanicsJoint,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMechanicsJoint_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMechanicsJoint
    __del__ = lambda self : None;
iPcMechanicsJoint_swigregister = _blcelc.iPcMechanicsJoint_swigregister
iPcMechanicsJoint_swigregister(iPcMechanicsJoint)
iPcMechanicsJoint_scfGetVersion = _blcelc.iPcMechanicsJoint_scfGetVersion

scfQuery_iPcMechanicsSystem = _blcelc.scfQuery_iPcMechanicsSystem
scfQueryPC_iPcMechanicsSystem = _blcelc.scfQueryPC_iPcMechanicsSystem
scfQuery_iPcMechanicsObject = _blcelc.scfQuery_iPcMechanicsObject
scfQueryPC_iPcMechanicsObject = _blcelc.scfQueryPC_iPcMechanicsObject
scfQueryPC_iPcMechanicsJoint = _blcelc.scfQueryPC_iPcMechanicsJoint
scfQuery_iPcMechanicsJoint = _blcelc.scfQuery_iPcMechanicsJoint
class iPcMechanicsThruster(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMechanicsObject(*args): return _blcelc.iPcMechanicsThruster_SetMechanicsObject(*args)
    def GetMechanicsObject(*args): return _blcelc.iPcMechanicsThruster_GetMechanicsObject(*args)
    def SetPosition(*args): return _blcelc.iPcMechanicsThruster_SetPosition(*args)
    def GetPosition(*args): return _blcelc.iPcMechanicsThruster_GetPosition(*args)
    def SetOrientation(*args): return _blcelc.iPcMechanicsThruster_SetOrientation(*args)
    def GetOrientation(*args): return _blcelc.iPcMechanicsThruster_GetOrientation(*args)
    def SetMaxThrust(*args): return _blcelc.iPcMechanicsThruster_SetMaxThrust(*args)
    def GetMaxThrust(*args): return _blcelc.iPcMechanicsThruster_GetMaxThrust(*args)
    def GetThrustForce(*args): return _blcelc.iPcMechanicsThruster_GetThrustForce(*args)
    def AvailableThrust(*args): return _blcelc.iPcMechanicsThruster_AvailableThrust(*args)
    def ThrustChange(*args): return _blcelc.iPcMechanicsThruster_ThrustChange(*args)
    MechanicsObject = _swig_property(_blcelc.iPcMechanicsThruster_MechanicsObject_get, _blcelc.iPcMechanicsThruster_MechanicsObject_set, None,
                    "iPcMechanicsThruster.MechanicsObject -> iPcMechanicsObject*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMechanicsObject* iPcMechanicsThruster::GetMechanicsObject()\n\tset: void iPcMechanicsThruster::SetMechanicsObject(iPcMechanicsObject*)")


    Position = _swig_property(_blcelc.iPcMechanicsThruster_Position_get, _blcelc.iPcMechanicsThruster_Position_set, None,
                    "iPcMechanicsThruster.Position -> const csVector3&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3& iPcMechanicsThruster::GetPosition()\n\tset: void iPcMechanicsThruster::SetPosition(const csVector3&)")


    Orientation = _swig_property(_blcelc.iPcMechanicsThruster_Orientation_get, _blcelc.iPcMechanicsThruster_Orientation_set, None,
                    "iPcMechanicsThruster.Orientation -> const csVector3&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3& iPcMechanicsThruster::GetOrientation()\n\tset: void iPcMechanicsThruster::SetOrientation(const csVector3&)")


    MaxThrust = _swig_property(_blcelc.iPcMechanicsThruster_MaxThrust_get, _blcelc.iPcMechanicsThruster_MaxThrust_set, None,
                    "iPcMechanicsThruster.MaxThrust -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMechanicsThruster::GetMaxThrust()\n\tset: void iPcMechanicsThruster::SetMaxThrust(float)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMechanicsThruster,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMechanicsThruster_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMechanicsThruster
    __del__ = lambda self : None;
iPcMechanicsThruster_swigregister = _blcelc.iPcMechanicsThruster_swigregister
iPcMechanicsThruster_swigregister(iPcMechanicsThruster)
celCreateMechanicsSystem = _blcelc.celCreateMechanicsSystem
celGetSetMechanicsSystem = _blcelc.celGetSetMechanicsSystem
celGetMechanicsSystem = _blcelc.celGetMechanicsSystem
celCreateMechanicsObject = _blcelc.celCreateMechanicsObject
celGetSetMechanicsObject = _blcelc.celGetSetMechanicsObject
celGetMechanicsObject = _blcelc.celGetMechanicsObject
celCreateMechanicsJoint = _blcelc.celCreateMechanicsJoint
celGetSetMechanicsJoint = _blcelc.celGetSetMechanicsJoint
celGetMechanicsJoint = _blcelc.celGetMechanicsJoint
iPcMechanicsThruster_scfGetVersion = _blcelc.iPcMechanicsThruster_scfGetVersion

CEL_AT_NONE = _blcelc.CEL_AT_NONE
CEL_AT_ROTATION = _blcelc.CEL_AT_ROTATION
CEL_AT_TRANSLATION = _blcelc.CEL_AT_TRANSLATION
class iPcMechanicsBalancedGroup(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetType(*args): return _blcelc.iPcMechanicsBalancedGroup_SetType(*args)
    def GetType(*args): return _blcelc.iPcMechanicsBalancedGroup_GetType(*args)
    def AddThruster(*args): return _blcelc.iPcMechanicsBalancedGroup_AddThruster(*args)
    def RemoveThruster(*args): return _blcelc.iPcMechanicsBalancedGroup_RemoveThruster(*args)
    def GetThruster(*args): return _blcelc.iPcMechanicsBalancedGroup_GetThruster(*args)
    def AvailableThrust(*args): return _blcelc.iPcMechanicsBalancedGroup_AvailableThrust(*args)
    def AvailableThrustForce(*args): return _blcelc.iPcMechanicsBalancedGroup_AvailableThrustForce(*args)
    def ChangeThrust(*args): return _blcelc.iPcMechanicsBalancedGroup_ChangeThrust(*args)
    Type = _swig_property(_blcelc.iPcMechanicsBalancedGroup_Type_get, _blcelc.iPcMechanicsBalancedGroup_Type_set, None,
                    "iPcMechanicsBalancedGroup.Type -> celAxisType\n\nThis is equivalent to calling the C++ cs methods:\n\tget: celAxisType iPcMechanicsBalancedGroup::GetType()\n\tset: void iPcMechanicsBalancedGroup::SetType(celAxisType)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMechanicsBalancedGroup,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMechanicsBalancedGroup_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMechanicsBalancedGroup
    __del__ = lambda self : None;
iPcMechanicsBalancedGroup_swigregister = _blcelc.iPcMechanicsBalancedGroup_swigregister
iPcMechanicsBalancedGroup_swigregister(iPcMechanicsBalancedGroup)
iPcMechanicsBalancedGroup_scfGetVersion = _blcelc.iPcMechanicsBalancedGroup_scfGetVersion

class iPcMechanicsThrusterController(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMechanicsObject(*args): return _blcelc.iPcMechanicsThrusterController_SetMechanicsObject(*args)
    def GetMechanicsObject(*args): return _blcelc.iPcMechanicsThrusterController_GetMechanicsObject(*args)
    def AddAxis(*args): return _blcelc.iPcMechanicsThrusterController_AddAxis(*args)
    def GetAxis(*args): return _blcelc.iPcMechanicsThrusterController_GetAxis(*args)
    def GetAxisType(*args): return _blcelc.iPcMechanicsThrusterController_GetAxisType(*args)
    def GetAxisVelocity(*args): return _blcelc.iPcMechanicsThrusterController_GetAxisVelocity(*args)
    def GetAxisMaxForce(*args): return _blcelc.iPcMechanicsThrusterController_GetAxisMaxForce(*args)
    def GetAxisMaxThrust(*args): return _blcelc.iPcMechanicsThrusterController_GetAxisMaxThrust(*args)
    def AddBalancedGroup(*args): return _blcelc.iPcMechanicsThrusterController_AddBalancedGroup(*args)
    def RemoveBalancedGroup(*args): return _blcelc.iPcMechanicsThrusterController_RemoveBalancedGroup(*args)
    def ApplyThrust(*args): return _blcelc.iPcMechanicsThrusterController_ApplyThrust(*args)
    def CancelThrust(*args): return _blcelc.iPcMechanicsThrusterController_CancelThrust(*args)
    MechanicsObject = _swig_property(_blcelc.iPcMechanicsThrusterController_MechanicsObject_get, _blcelc.iPcMechanicsThrusterController_MechanicsObject_set, None,
                    "iPcMechanicsThrusterController.MechanicsObject -> iPcMechanicsObject*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMechanicsObject* iPcMechanicsThrusterController::GetMechanicsObject()\n\tset: void iPcMechanicsThrusterController::SetMechanicsObject(iPcMechanicsObject*)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMechanicsThrusterController,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMechanicsThrusterController_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMechanicsThrusterController
    __del__ = lambda self : None;
iPcMechanicsThrusterController_swigregister = _blcelc.iPcMechanicsThrusterController_swigregister
iPcMechanicsThrusterController_swigregister(iPcMechanicsThrusterController)
iPcMechanicsThrusterController_scfGetVersion = _blcelc.iPcMechanicsThrusterController_scfGetVersion

scfQuery_iPcMechanicsThruster = _blcelc.scfQuery_iPcMechanicsThruster
scfQueryPC_iPcMechanicsThruster = _blcelc.scfQueryPC_iPcMechanicsThruster
scfQuery_iPcMechanicsBalancedGroup = _blcelc.scfQuery_iPcMechanicsBalancedGroup
scfQueryPC_iPcMechanicsBalancedGroup = _blcelc.scfQueryPC_iPcMechanicsBalancedGroup
scfQuery_iPcMechanicsThrusterController = _blcelc.scfQuery_iPcMechanicsThrusterController
scfQueryPC_iPcMechanicsThrusterController = _blcelc.scfQueryPC_iPcMechanicsThrusterController
class iBillboardLayer(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetOffset(*args): return _blcelc.iBillboardLayer_GetOffset(*args)
    def SetOffset(*args): return _blcelc.iBillboardLayer_SetOffset(*args)
    def Move(*args): return _blcelc.iBillboardLayer_Move(*args)
    def GetName(*args): return _blcelc.iBillboardLayer_GetName(*args)
    Name = _swig_property(_blcelc.iBillboardLayer_Name_get, None, None,
                    "iBillboardLayer.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iBillboardLayer::GetName()")

    __swig_destroy__ = _blcelc.delete_iBillboardLayer
    __del__ = lambda self : None;
iBillboardLayer_swigregister = _blcelc.iBillboardLayer_swigregister
iBillboardLayer_swigregister(iBillboardLayer)
celCreateMechanicsThrusterReactionary = _blcelc.celCreateMechanicsThrusterReactionary
celGetSetMechanicsThrusterReactionary = _blcelc.celGetSetMechanicsThrusterReactionary
celGetMechanicsThrusterReactionary = _blcelc.celGetMechanicsThrusterReactionary
celCreateMechanicsBalancedGroup = _blcelc.celCreateMechanicsBalancedGroup
celGetSetMechanicsBalancedGroup = _blcelc.celGetSetMechanicsBalancedGroup
celGetMechanicsBalancedGroup = _blcelc.celGetMechanicsBalancedGroup
celCreateMechanicsThrusterController = _blcelc.celCreateMechanicsThrusterController
celGetSetMechanicsThrusterController = _blcelc.celGetSetMechanicsThrusterController
celGetMechanicsThrusterController = _blcelc.celGetMechanicsThrusterController

class iBillboardEventHandler(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Select(*args): return _blcelc.iBillboardEventHandler_Select(*args)
    def MouseMove(*args): return _blcelc.iBillboardEventHandler_MouseMove(*args)
    def MouseMoveAway(*args): return _blcelc.iBillboardEventHandler_MouseMoveAway(*args)
    def Unselect(*args): return _blcelc.iBillboardEventHandler_Unselect(*args)
    def DoubleClick(*args): return _blcelc.iBillboardEventHandler_DoubleClick(*args)
    __swig_destroy__ = _blcelc.delete_iBillboardEventHandler
    __del__ = lambda self : None;
iBillboardEventHandler_swigregister = _blcelc.iBillboardEventHandler_swigregister
iBillboardEventHandler_swigregister(iBillboardEventHandler)

CEL_BILLBOARD_VISIBLE = _blcelc.CEL_BILLBOARD_VISIBLE
CEL_BILLBOARD_MOVABLE = _blcelc.CEL_BILLBOARD_MOVABLE
CEL_BILLBOARD_CLICKABLE = _blcelc.CEL_BILLBOARD_CLICKABLE
CEL_BILLBOARD_RESTACK = _blcelc.CEL_BILLBOARD_RESTACK
CEL_BILLBOARD_SENDMOVE = _blcelc.CEL_BILLBOARD_SENDMOVE
class iBillboard(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iBillboard_GetName(*args)
    def GetFlags(*args): return _blcelc.iBillboard_GetFlags(*args)
    def SetMaterialName(*args): return _blcelc.iBillboard_SetMaterialName(*args)
    def SetMaterialNameFast(*args): return _blcelc.iBillboard_SetMaterialNameFast(*args)
    def GetMaterialName(*args): return _blcelc.iBillboard_GetMaterialName(*args)
    def DrawMesh(*args): return _blcelc.iBillboard_DrawMesh(*args)
    def SetSize(*args): return _blcelc.iBillboard_SetSize(*args)
    def GetSize(*args): return _blcelc.iBillboard_GetSize(*args)
    def GetImageSize(*args): return _blcelc.iBillboard_GetImageSize(*args)
    def SetPosition(*args): return _blcelc.iBillboard_SetPosition(*args)
    def MoveToPosition(*args): return _blcelc.iBillboard_MoveToPosition(*args)
    def GetPosition(*args): return _blcelc.iBillboard_GetPosition(*args)
    def Move(*args): return _blcelc.iBillboard_Move(*args)
    def SetRotation(*args): return _blcelc.iBillboard_SetRotation(*args)
    def GetRotation(*args): return _blcelc.iBillboard_GetRotation(*args)
    def StackTop(*args): return _blcelc.iBillboard_StackTop(*args)
    def StackBottom(*args): return _blcelc.iBillboard_StackBottom(*args)
    def StackAfter(*args): return _blcelc.iBillboard_StackAfter(*args)
    def StackBefore(*args): return _blcelc.iBillboard_StackBefore(*args)
    def StackUp(*args): return _blcelc.iBillboard_StackUp(*args)
    def StackDown(*args): return _blcelc.iBillboard_StackDown(*args)
    def SetUVTopLeft(*args): return _blcelc.iBillboard_SetUVTopLeft(*args)
    def GetUVTopLeft(*args): return _blcelc.iBillboard_GetUVTopLeft(*args)
    def SetUVBottomRight(*args): return _blcelc.iBillboard_SetUVBottomRight(*args)
    def GetUVBottomRight(*args): return _blcelc.iBillboard_GetUVBottomRight(*args)
    def SetColor(*args): return _blcelc.iBillboard_SetColor(*args)
    def GetColor(*args): return _blcelc.iBillboard_GetColor(*args)
    def SetLayer(*args): return _blcelc.iBillboard_SetLayer(*args)
    def GetLayer(*args): return _blcelc.iBillboard_GetLayer(*args)
    def AddEventHandler(*args): return _blcelc.iBillboard_AddEventHandler(*args)
    def RemoveEventHandler(*args): return _blcelc.iBillboard_RemoveEventHandler(*args)
    def SetText(*args): return _blcelc.iBillboard_SetText(*args)
    def GetText(*args): return _blcelc.iBillboard_GetText(*args)
    def GetTextDimensions(*args): return _blcelc.iBillboard_GetTextDimensions(*args)
    def SetTextOffset(*args): return _blcelc.iBillboard_SetTextOffset(*args)
    def GetTextOffsetDX(*args): return _blcelc.iBillboard_GetTextOffsetDX(*args)
    def GetTextOffsetDY(*args): return _blcelc.iBillboard_GetTextOffsetDY(*args)
    def SetTextFont(*args): return _blcelc.iBillboard_SetTextFont(*args)
    def GetTextFont(*args): return _blcelc.iBillboard_GetTextFont(*args)
    def GetTextFontSize(*args): return _blcelc.iBillboard_GetTextFontSize(*args)
    def SetTextFgColor(*args): return _blcelc.iBillboard_SetTextFgColor(*args)
    def GetTextFgColor(*args): return _blcelc.iBillboard_GetTextFgColor(*args)
    def ClearTextFgColor(*args): return _blcelc.iBillboard_ClearTextFgColor(*args)
    def SetTextBgColor(*args): return _blcelc.iBillboard_SetTextBgColor(*args)
    def GetTextBgColor(*args): return _blcelc.iBillboard_GetTextBgColor(*args)
    def SetTextBgTransparent(*args): return _blcelc.iBillboard_SetTextBgTransparent(*args)
    def IsTextBgTransparent(*args): return _blcelc.iBillboard_IsTextBgTransparent(*args)
    def ClearTextBgColor(*args): return _blcelc.iBillboard_ClearTextBgColor(*args)
    Name = _swig_property(_blcelc.iBillboard_Name_get, None, None,
                    "iBillboard.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iBillboard::GetName()")

    Flags = _swig_property(_blcelc.iBillboard_Flags_get, None, None,
                    "iBillboard.Flags -> csFlags&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csFlags& iBillboard::GetFlags()")

    MaterialName = _swig_property(_blcelc.iBillboard_MaterialName_get, _blcelc.iBillboard_MaterialName_set, None,
                    "iBillboard.MaterialName -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iBillboard::GetMaterialName()\n\tset: void iBillboard::SetMaterialName(const char*)")


    MaterialNameFast = _swig_property(None, _blcelc.iBillboard_MaterialNameFast_set, None,
                    "iBillboard.MaterialNameFast (write only) -> const char*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iBillboard::SetMaterialNameFast(const char*)")

    Rotation = _swig_property(_blcelc.iBillboard_Rotation_get, _blcelc.iBillboard_Rotation_set, None,
                    "iBillboard.Rotation -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iBillboard::GetRotation()\n\tset: void iBillboard::SetRotation(float)")


    UVTopLeft = _swig_property(_blcelc.iBillboard_UVTopLeft_get, _blcelc.iBillboard_UVTopLeft_set, None,
                    "iBillboard.UVTopLeft -> const csVector2&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector2& iBillboard::GetUVTopLeft()\n\tset: void iBillboard::SetUVTopLeft(const csVector2&)")


    UVBottomRight = _swig_property(_blcelc.iBillboard_UVBottomRight_get, _blcelc.iBillboard_UVBottomRight_set, None,
                    "iBillboard.UVBottomRight -> const csVector2&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector2& iBillboard::GetUVBottomRight()\n\tset: void iBillboard::SetUVBottomRight(const csVector2&)")


    Color = _swig_property(_blcelc.iBillboard_Color_get, _blcelc.iBillboard_Color_set, None,
                    "iBillboard.Color -> const csColor&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csColor& iBillboard::GetColor()\n\tset: void iBillboard::SetColor(const csColor&)")


    Layer = _swig_property(_blcelc.iBillboard_Layer_get, _blcelc.iBillboard_Layer_set, None,
                    "iBillboard.Layer -> iBillboardLayer*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iBillboardLayer* iBillboard::GetLayer()\n\tset: void iBillboard::SetLayer(iBillboardLayer*)")


    Text = _swig_property(_blcelc.iBillboard_Text_get, _blcelc.iBillboard_Text_set, None,
                    "iBillboard.Text -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iBillboard::GetText()\n\tset: void iBillboard::SetText(const char*)")


    TextOffset = _swig_property(None, fix_args(_blcelc.iBillboard_SetTextOffset), None,
                    "iBillboard.TextOffset -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iBillboard::getmethod()\n\tset: void iBillboard::SetTextOffset(...)")

    TextOffsetDX = _swig_property(_blcelc.iBillboard_TextOffsetDX_get, None, None,
                    "iBillboard.TextOffsetDX -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iBillboard::GetTextOffsetDX()")

    TextOffsetDY = _swig_property(_blcelc.iBillboard_TextOffsetDY_get, None, None,
                    "iBillboard.TextOffsetDY -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iBillboard::GetTextOffsetDY()")

    TextFont = _swig_property(_blcelc.iBillboard_GetTextFont, fix_args(_blcelc.iBillboard_SetTextFont), None,
                    "iBillboard.TextFont -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iBillboard::GetTextFont()\n\tset: void iBillboard::SetTextFont(...)")

    TextFontSize = _swig_property(_blcelc.iBillboard_TextFontSize_get, None, None,
                    "iBillboard.TextFontSize -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iBillboard::GetTextFontSize()")

    TextFgColor = _swig_property(_blcelc.iBillboard_TextFgColor_get, _blcelc.iBillboard_TextFgColor_set, None,
                    "iBillboard.TextFgColor -> const csColor&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csColor& iBillboard::GetTextFgColor()\n\tset: void iBillboard::SetTextFgColor(const csColor&)")


    TextBgColor = _swig_property(_blcelc.iBillboard_TextBgColor_get, _blcelc.iBillboard_TextBgColor_set, None,
                    "iBillboard.TextBgColor -> const csColor&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csColor& iBillboard::GetTextBgColor()\n\tset: void iBillboard::SetTextBgColor(const csColor&)")


    TextBgTransparent = _swig_property(_blcelc.iBillboard_TextBgTransparent_get, None, None,
                    "iBillboard.TextBgTransparent -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iBillboard::IsTextBgTransparent()")

    __swig_destroy__ = _blcelc.delete_iBillboard
    __del__ = lambda self : None;
iBillboard_swigregister = _blcelc.iBillboard_swigregister
iBillboard_swigregister(iBillboard)

class iBillboardManager(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def ScreenToBillboardX(*args): return _blcelc.iBillboardManager_ScreenToBillboardX(*args)
    def ScreenToBillboardY(*args): return _blcelc.iBillboardManager_ScreenToBillboardY(*args)
    def BillboardToScreenX(*args): return _blcelc.iBillboardManager_BillboardToScreenX(*args)
    def BillboardToScreenY(*args): return _blcelc.iBillboardManager_BillboardToScreenY(*args)
    def CreateBillboard(*args): return _blcelc.iBillboardManager_CreateBillboard(*args)
    def FindBillboard(*args): return _blcelc.iBillboardManager_FindBillboard(*args)
    def RemoveBillboard(*args): return _blcelc.iBillboardManager_RemoveBillboard(*args)
    def GetBillboardCount(*args): return _blcelc.iBillboardManager_GetBillboardCount(*args)
    def GetBillboard(*args): return _blcelc.iBillboardManager_GetBillboard(*args)
    def CreateBillboardLayer(*args): return _blcelc.iBillboardManager_CreateBillboardLayer(*args)
    def FindBillboardLayer(*args): return _blcelc.iBillboardManager_FindBillboardLayer(*args)
    def RemoveBillboardLayer(*args): return _blcelc.iBillboardManager_RemoveBillboardLayer(*args)
    def GetBillboardLayerCount(*args): return _blcelc.iBillboardManager_GetBillboardLayerCount(*args)
    def GetBillboardLayer(*args): return _blcelc.iBillboardManager_GetBillboardLayer(*args)
    def RemoveAll(*args): return _blcelc.iBillboardManager_RemoveAll(*args)
    def SetFlags(*args): return _blcelc.iBillboardManager_SetFlags(*args)
    def StackTop(*args): return _blcelc.iBillboardManager_StackTop(*args)
    def StackBottom(*args): return _blcelc.iBillboardManager_StackBottom(*args)
    def StackUp(*args): return _blcelc.iBillboardManager_StackUp(*args)
    def StackDown(*args): return _blcelc.iBillboardManager_StackDown(*args)
    def StackBefore(*args): return _blcelc.iBillboardManager_StackBefore(*args)
    def StackAfter(*args): return _blcelc.iBillboardManager_StackAfter(*args)
    def TestCollision(*args): return _blcelc.iBillboardManager_TestCollision(*args)
    def SetDefaultTextFont(*args): return _blcelc.iBillboardManager_SetDefaultTextFont(*args)
    def GetDefaultTextFont(*args): return _blcelc.iBillboardManager_GetDefaultTextFont(*args)
    def GetDefaultTextFontSize(*args): return _blcelc.iBillboardManager_GetDefaultTextFontSize(*args)
    def SetDefaultTextFgColor(*args): return _blcelc.iBillboardManager_SetDefaultTextFgColor(*args)
    def GetDefaultTextFgColor(*args): return _blcelc.iBillboardManager_GetDefaultTextFgColor(*args)
    def SetDefaultTextBgColor(*args): return _blcelc.iBillboardManager_SetDefaultTextBgColor(*args)
    def GetDefaultTextBgColor(*args): return _blcelc.iBillboardManager_GetDefaultTextBgColor(*args)
    def SetDefaultTextBgTransparent(*args): return _blcelc.iBillboardManager_SetDefaultTextBgTransparent(*args)
    def GetShowroom(*args): return _blcelc.iBillboardManager_GetShowroom(*args)
    BillboardCount = _swig_property(_blcelc.iBillboardManager_BillboardCount_get, None, None,
                    "iBillboardManager.BillboardCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iBillboardManager::GetBillboardCount()")

    BillboardLayerCount = _swig_property(_blcelc.iBillboardManager_BillboardLayerCount_get, None, None,
                    "iBillboardManager.BillboardLayerCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iBillboardManager::GetBillboardLayerCount()")

    Flags = _swig_property(None, fix_args(_blcelc.iBillboardManager_SetFlags), None,
                    "iBillboardManager.Flags -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iBillboardManager::getmethod()\n\tset: void iBillboardManager::SetFlags(...)")

    DefaultTextFont = _swig_property(_blcelc.iBillboardManager_GetDefaultTextFont, fix_args(_blcelc.iBillboardManager_SetDefaultTextFont), None,
                    "iBillboardManager.DefaultTextFont -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iBillboardManager::GetDefaultTextFont()\n\tset: void iBillboardManager::SetDefaultTextFont(...)")

    DefaultTextFontSize = _swig_property(_blcelc.iBillboardManager_DefaultTextFontSize_get, None, None,
                    "iBillboardManager.DefaultTextFontSize -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iBillboardManager::GetDefaultTextFontSize()")

    DefaultTextFgColor = _swig_property(_blcelc.iBillboardManager_DefaultTextFgColor_get, _blcelc.iBillboardManager_DefaultTextFgColor_set, None,
                    "iBillboardManager.DefaultTextFgColor -> const csColor&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csColor& iBillboardManager::GetDefaultTextFgColor()\n\tset: void iBillboardManager::SetDefaultTextFgColor(const csColor&)")


    DefaultTextBgColor = _swig_property(_blcelc.iBillboardManager_DefaultTextBgColor_get, _blcelc.iBillboardManager_DefaultTextBgColor_set, None,
                    "iBillboardManager.DefaultTextBgColor -> const csColor&\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csColor& iBillboardManager::GetDefaultTextBgColor()\n\tset: void iBillboardManager::SetDefaultTextBgColor(const csColor&)")


    DefaultTextBgTransparent = _swig_property(None, fix_args(_blcelc.iBillboardManager_SetDefaultTextBgTransparent), None,
                    "iBillboardManager.DefaultTextBgTransparent -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iBillboardManager::getmethod()\n\tset: void iBillboardManager::SetDefaultTextBgTransparent(...)")

    Showroom = _swig_property(_blcelc.iBillboardManager_Showroom_get, None, None,
                    "iBillboardManager.Showroom -> iSector*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iSector* iBillboardManager::GetShowroom()")

    scfGetVersion = staticmethod(_blcelc.iBillboardManager_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iBillboardManager
    __del__ = lambda self : None;
iBillboardManager_swigregister = _blcelc.iBillboardManager_swigregister
iBillboardManager_swigregister(iBillboardManager)
iBillboardManager_scfGetVersion = _blcelc.iBillboardManager_scfGetVersion

class iPcBillboard(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetBillboardName(*args): return _blcelc.iPcBillboard_SetBillboardName(*args)
    def GetBillboardName(*args): return _blcelc.iPcBillboard_GetBillboardName(*args)
    def GetBillboard(*args): return _blcelc.iPcBillboard_GetBillboard(*args)
    def EnableEvents(*args): return _blcelc.iPcBillboard_EnableEvents(*args)
    def AreEventsEnabled(*args): return _blcelc.iPcBillboard_AreEventsEnabled(*args)
    BillboardName = _swig_property(_blcelc.iPcBillboard_BillboardName_get, _blcelc.iPcBillboard_BillboardName_set, None,
                    "iPcBillboard.BillboardName -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcBillboard::GetBillboardName()\n\tset: void iPcBillboard::SetBillboardName(const char*)")


    Billboard = _swig_property(_blcelc.iPcBillboard_Billboard_get, None, None,
                    "iPcBillboard.Billboard -> iBillboard*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iBillboard* iPcBillboard::GetBillboard()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcBillboard,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcBillboard_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcBillboard
    __del__ = lambda self : None;
iPcBillboard_swigregister = _blcelc.iPcBillboard_swigregister
iPcBillboard_swigregister(iPcBillboard)
iPcBillboard_scfGetVersion = _blcelc.iPcBillboard_scfGetVersion

scfQuery_iPcBillboard = _blcelc.scfQuery_iPcBillboard
scfQueryPC_iPcBillboard = _blcelc.scfQueryPC_iPcBillboard
class iPcRegion(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetWorldFile(*args): return _blcelc.iPcRegion_SetWorldFile(*args)
    def GetWorldDir(*args): return _blcelc.iPcRegion_GetWorldDir(*args)
    def GetWorldFile(*args): return _blcelc.iPcRegion_GetWorldFile(*args)
    def SetRegionName(*args): return _blcelc.iPcRegion_SetRegionName(*args)
    def GetRegionName(*args): return _blcelc.iPcRegion_GetRegionName(*args)
    def CreateEmptySector(*args): return _blcelc.iPcRegion_CreateEmptySector(*args)
    def Load(*args): return _blcelc.iPcRegion_Load(*args)
    def Unload(*args): return _blcelc.iPcRegion_Unload(*args)
    def FindSector(*args): return _blcelc.iPcRegion_FindSector(*args)
    def GetStartSector(*args): return _blcelc.iPcRegion_GetStartSector(*args)
    def GetStartPosition(*args): return _blcelc.iPcRegion_GetStartPosition(*args)
    def PointCamera(*args): return _blcelc.iPcRegion_PointCamera(*args)
    def GetCollection(*args): return _blcelc.iPcRegion_GetCollection(*args)
    WorldFile = _swig_property(_blcelc.iPcRegion_GetWorldFile, fix_args(_blcelc.iPcRegion_SetWorldFile), None,
                    "iPcRegion.WorldFile -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcRegion::GetWorldFile()\n\tset: void iPcRegion::SetWorldFile(...)")

    WorldDir = _swig_property(_blcelc.iPcRegion_WorldDir_get, None, None,
                    "iPcRegion.WorldDir -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iPcRegion::GetWorldDir()")

    RegionName = _swig_property(_blcelc.iPcRegion_RegionName_get, _blcelc.iPcRegion_RegionName_set, None,
                    "iPcRegion.RegionName -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcRegion::GetRegionName()\n\tset: void iPcRegion::SetRegionName(const char*)")


    StartSector = _swig_property(_blcelc.iPcRegion_GetStartSector, None, None,
                    "iPcRegion.StartSector -> type\n\nThis is equivalent to calling the C++ cs method:\n\tget: iPcRegion::GetStartSector()")

    StartPosition = _swig_property(_blcelc.iPcRegion_GetStartPosition, None, None,
                    "iPcRegion.StartPosition -> type\n\nThis is equivalent to calling the C++ cs method:\n\tget: iPcRegion::GetStartPosition()")

    def LoadWorld(*args): return _blcelc.iPcRegion_LoadWorld(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcRegion,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcRegion_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcRegion
    __del__ = lambda self : None;
iPcRegion_swigregister = _blcelc.iPcRegion_swigregister
iPcRegion_swigregister(iPcRegion)
celCreateBillboard = _blcelc.celCreateBillboard
celGetSetBillboard = _blcelc.celGetSetBillboard
celGetBillboard = _blcelc.celGetBillboard
iPcRegion_scfGetVersion = _blcelc.iPcRegion_scfGetVersion

scfQuery_iPcRegion = _blcelc.scfQuery_iPcRegion
class iCelMapFile(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetName(*args): return _blcelc.iCelMapFile_SetName(*args)
    def SetPath(*args): return _blcelc.iCelMapFile_SetPath(*args)
    def SetFile(*args): return _blcelc.iCelMapFile_SetFile(*args)
    def GetName(*args): return _blcelc.iCelMapFile_GetName(*args)
    def GetPath(*args): return _blcelc.iCelMapFile_GetPath(*args)
    def GetFile(*args): return _blcelc.iCelMapFile_GetFile(*args)
    def SetSectorName(*args): return _blcelc.iCelMapFile_SetSectorName(*args)
    def GetSectorName(*args): return _blcelc.iCelMapFile_GetSectorName(*args)
    Name = _swig_property(_blcelc.iCelMapFile_Name_get, _blcelc.iCelMapFile_Name_set, None,
                    "iCelMapFile.Name -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelMapFile::GetName()\n\tset: void iCelMapFile::SetName(const char*)")


    Path = _swig_property(_blcelc.iCelMapFile_Path_get, _blcelc.iCelMapFile_Path_set, None,
                    "iCelMapFile.Path -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelMapFile::GetPath()\n\tset: void iCelMapFile::SetPath(const char*)")


    File = _swig_property(_blcelc.iCelMapFile_File_get, _blcelc.iCelMapFile_File_set, None,
                    "iCelMapFile.File -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelMapFile::GetFile()\n\tset: void iCelMapFile::SetFile(const char*)")


    SectorName = _swig_property(_blcelc.iCelMapFile_SectorName_get, _blcelc.iCelMapFile_SectorName_set, None,
                    "iCelMapFile.SectorName -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelMapFile::GetSectorName()\n\tset: void iCelMapFile::SetSectorName(const char*)")


    __swig_destroy__ = _blcelc.delete_iCelMapFile
    __del__ = lambda self : None;
iCelMapFile_swigregister = _blcelc.iCelMapFile_swigregister
iCelMapFile_swigregister(iCelMapFile)
celCreateRegion = _blcelc.celCreateRegion
celGetSetRegion = _blcelc.celGetSetRegion
celGetRegion = _blcelc.celGetRegion

class iCelRegion(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iCelRegion_GetName(*args)
    def GetCsCollectionName(*args): return _blcelc.iCelRegion_GetCsCollectionName(*args)
    def SetCachePath(*args): return _blcelc.iCelRegion_SetCachePath(*args)
    def GetCachePath(*args): return _blcelc.iCelRegion_GetCachePath(*args)
    def CreateMapFile(*args): return _blcelc.iCelRegion_CreateMapFile(*args)
    def GetMapFileCount(*args): return _blcelc.iCelRegion_GetMapFileCount(*args)
    def GetMapFile(*args): return _blcelc.iCelRegion_GetMapFile(*args)
    def FindMapFile(*args): return _blcelc.iCelRegion_FindMapFile(*args)
    def RemoveMapFile(*args): return _blcelc.iCelRegion_RemoveMapFile(*args)
    def RemoveAllMapFiles(*args): return _blcelc.iCelRegion_RemoveAllMapFiles(*args)
    def AssociateEntity(*args): return _blcelc.iCelRegion_AssociateEntity(*args)
    def DissociateEntity(*args): return _blcelc.iCelRegion_DissociateEntity(*args)
    def ContainsEntity(*args): return _blcelc.iCelRegion_ContainsEntity(*args)
    def GetCollection(*args): return _blcelc.iCelRegion_GetCollection(*args)
    Name = _swig_property(_blcelc.iCelRegion_Name_get, None, None,
                    "iCelRegion.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelRegion::GetName()")

    CachePath = _swig_property(_blcelc.iCelRegion_CachePath_get, _blcelc.iCelRegion_CachePath_set, None,
                    "iCelRegion.CachePath -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iCelRegion::GetCachePath()\n\tset: void iCelRegion::SetCachePath(const char*)")


    MapFileCount = _swig_property(_blcelc.iCelRegion_MapFileCount_get, None, None,
                    "iCelRegion.MapFileCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelRegion::GetMapFileCount()")

    __swig_destroy__ = _blcelc.delete_iCelRegion
    __del__ = lambda self : None;
iCelRegion_swigregister = _blcelc.iCelRegion_swigregister
iCelRegion_swigregister(iCelRegion)

class iCelZone(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iCelZone_GetName(*args)
    def LinkRegion(*args): return _blcelc.iCelZone_LinkRegion(*args)
    def GetRegionCount(*args): return _blcelc.iCelZone_GetRegionCount(*args)
    def GetRegion(*args): return _blcelc.iCelZone_GetRegion(*args)
    def FindRegion(*args): return _blcelc.iCelZone_FindRegion(*args)
    def UnlinkRegion(*args): return _blcelc.iCelZone_UnlinkRegion(*args)
    def UnlinkAllRegions(*args): return _blcelc.iCelZone_UnlinkAllRegions(*args)
    Name = _swig_property(_blcelc.iCelZone_Name_get, None, None,
                    "iCelZone.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelZone::GetName()")

    RegionCount = _swig_property(_blcelc.iCelZone_RegionCount_get, None, None,
                    "iCelZone.RegionCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iCelZone::GetRegionCount()")

    __swig_destroy__ = _blcelc.delete_iCelZone
    __del__ = lambda self : None;
iCelZone_swigregister = _blcelc.iCelZone_swigregister
iCelZone_swigregister(iCelZone)

CEL_ZONEERROR_OK = _blcelc.CEL_ZONEERROR_OK
CEL_ZONEERROR_BADREGION = _blcelc.CEL_ZONEERROR_BADREGION
CEL_ZONEERROR_BADSTART = _blcelc.CEL_ZONEERROR_BADSTART
CEL_ZONEERROR_LOAD = _blcelc.CEL_ZONEERROR_LOAD
CEL_ZONE_NORMAL = _blcelc.CEL_ZONE_NORMAL
CEL_ZONE_KEEP = _blcelc.CEL_ZONE_KEEP
CEL_ZONE_LOADALL = _blcelc.CEL_ZONE_LOADALL
class iPcZoneManager(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def EnableColliderWrappers(*args): return _blcelc.iPcZoneManager_EnableColliderWrappers(*args)
    def IsColliderWrappers(*args): return _blcelc.iPcZoneManager_IsColliderWrappers(*args)
    def SetLoadingMode(*args): return _blcelc.iPcZoneManager_SetLoadingMode(*args)
    def GetLoadingMode(*args): return _blcelc.iPcZoneManager_GetLoadingMode(*args)
    def Load(*args): return _blcelc.iPcZoneManager_Load(*args)
    def CreateZone(*args): return _blcelc.iPcZoneManager_CreateZone(*args)
    def GetZoneCount(*args): return _blcelc.iPcZoneManager_GetZoneCount(*args)
    def GetZone(*args): return _blcelc.iPcZoneManager_GetZone(*args)
    def FindZone(*args): return _blcelc.iPcZoneManager_FindZone(*args)
    def RemoveZone(*args): return _blcelc.iPcZoneManager_RemoveZone(*args)
    def RemoveAllZones(*args): return _blcelc.iPcZoneManager_RemoveAllZones(*args)
    def CreateRegion(*args): return _blcelc.iPcZoneManager_CreateRegion(*args)
    def GetRegionCount(*args): return _blcelc.iPcZoneManager_GetRegionCount(*args)
    def GetRegion(*args): return _blcelc.iPcZoneManager_GetRegion(*args)
    def FindRegion(*args): return _blcelc.iPcZoneManager_FindRegion(*args)
    def RemoveRegion(*args): return _blcelc.iPcZoneManager_RemoveRegion(*args)
    def RemoveAllRegions(*args): return _blcelc.iPcZoneManager_RemoveAllRegions(*args)
    def FindStartLocations(*args): return _blcelc.iPcZoneManager_FindStartLocations(*args)
    def GetLastStartLocation(*args): return _blcelc.iPcZoneManager_GetLastStartLocation(*args)
    def GetLastStartRegionName(*args): return _blcelc.iPcZoneManager_GetLastStartRegionName(*args)
    def GetLastStartName(*args): return _blcelc.iPcZoneManager_GetLastStartName(*args)
    def PointCamera(*args): return _blcelc.iPcZoneManager_PointCamera(*args)
    def PointMesh(*args): return _blcelc.iPcZoneManager_PointMesh(*args)
    def ActivateRegion(*args): return _blcelc.iPcZoneManager_ActivateRegion(*args)
    def FindRegionContaining(*args): return _blcelc.iPcZoneManager_FindRegionContaining(*args)
    ColliderWrappers = _swig_property(_blcelc.iPcZoneManager_ColliderWrappers_get, None, None,
                    "iPcZoneManager.ColliderWrappers -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcZoneManager::IsColliderWrappers()")

    LoadingMode = _swig_property(_blcelc.iPcZoneManager_LoadingMode_get, _blcelc.iPcZoneManager_LoadingMode_set, None,
                    "iPcZoneManager.LoadingMode -> int\n\nThis is equivalent to calling the C++ cs methods:\n\tget: int iPcZoneManager::GetLoadingMode()\n\tset: void iPcZoneManager::SetLoadingMode(int)")


    ZoneCount = _swig_property(_blcelc.iPcZoneManager_ZoneCount_get, None, None,
                    "iPcZoneManager.ZoneCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iPcZoneManager::GetZoneCount()")

    RegionCount = _swig_property(_blcelc.iPcZoneManager_RegionCount_get, None, None,
                    "iPcZoneManager.RegionCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iPcZoneManager::GetRegionCount()")

    LastStartRegionName = _swig_property(_blcelc.iPcZoneManager_LastStartRegionName_get, None, None,
                    "iPcZoneManager.LastStartRegionName -> const char *  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char * iPcZoneManager::GetLastStartRegionName()")

    LastStartName = _swig_property(_blcelc.iPcZoneManager_LastStartName_get, None, None,
                    "iPcZoneManager.LastStartName -> const char *  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char * iPcZoneManager::GetLastStartName()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcZoneManager,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcZoneManager_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcZoneManager
    __del__ = lambda self : None;
iPcZoneManager_swigregister = _blcelc.iPcZoneManager_swigregister
iPcZoneManager_swigregister(iPcZoneManager)
iPcZoneManager_scfGetVersion = _blcelc.iPcZoneManager_scfGetVersion

scfQuery_iPcZoneManager = _blcelc.scfQuery_iPcZoneManager
CEL_KEY_STATE_UNUSED = _blcelc.CEL_KEY_STATE_UNUSED
CEL_KEY_STATE_UP = _blcelc.CEL_KEY_STATE_UP
CEL_KEY_STATE_DOWN = _blcelc.CEL_KEY_STATE_DOWN
CEL_KEY_STATE_REPEAT = _blcelc.CEL_KEY_STATE_REPEAT
class iPcCommandInput(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetSendTrigger(*args): return _blcelc.iPcCommandInput_SetSendTrigger(*args)
    def IsSendTriggerEnabled(*args): return _blcelc.iPcCommandInput_IsSendTriggerEnabled(*args)
    def SetCookedMode(*args): return _blcelc.iPcCommandInput_SetCookedMode(*args)
    def GetCookedMode(*args): return _blcelc.iPcCommandInput_GetCookedMode(*args)
    def ScreenCoordinates(*args): return _blcelc.iPcCommandInput_ScreenCoordinates(*args)
    def ScreenToCentered(*args): return _blcelc.iPcCommandInput_ScreenToCentered(*args)
    def CenteredToScreen(*args): return _blcelc.iPcCommandInput_CenteredToScreen(*args)
    def LoadConfig(*args): return _blcelc.iPcCommandInput_LoadConfig(*args)
    def SaveConfig(*args): return _blcelc.iPcCommandInput_SaveConfig(*args)
    def Bind(*args): return _blcelc.iPcCommandInput_Bind(*args)
    def GetBind(*args): return _blcelc.iPcCommandInput_GetBind(*args)
    def RemoveBind(*args): return _blcelc.iPcCommandInput_RemoveBind(*args)
    def RemoveAllBinds(*args): return _blcelc.iPcCommandInput_RemoveAllBinds(*args)
    def EnableMouseEvents(*args): return _blcelc.iPcCommandInput_EnableMouseEvents(*args)
    def DisableMouseEvents(*args): return _blcelc.iPcCommandInput_DisableMouseEvents(*args)
    def EnableKeyboardEvents(*args): return _blcelc.iPcCommandInput_EnableKeyboardEvents(*args)
    def DisableKeyboardEvents(*args): return _blcelc.iPcCommandInput_DisableKeyboardEvents(*args)
    def EnableJoystickEvents(*args): return _blcelc.iPcCommandInput_EnableJoystickEvents(*args)
    def DisableJoystickEvents(*args): return _blcelc.iPcCommandInput_DisableJoystickEvents(*args)
    SendTrigger = _swig_property(None, _blcelc.iPcCommandInput_SendTrigger_set, None,
                    "iPcCommandInput.SendTrigger (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCommandInput::SetSendTrigger(bool)")

    SendTriggerEnabled = _swig_property(_blcelc.iPcCommandInput_SendTriggerEnabled_get, None, None,
                    "iPcCommandInput.SendTriggerEnabled -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcCommandInput::IsSendTriggerEnabled()")

    CookedMode = _swig_property(_blcelc.iPcCommandInput_CookedMode_get, _blcelc.iPcCommandInput_CookedMode_set, None,
                    "iPcCommandInput.CookedMode -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcCommandInput::GetCookedMode()\n\tset: void iPcCommandInput::SetCookedMode(bool)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcCommandInput,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcCommandInput_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcCommandInput
    __del__ = lambda self : None;
iPcCommandInput_swigregister = _blcelc.iPcCommandInput_swigregister
iPcCommandInput_swigregister(iPcCommandInput)
celCreateZoneManager = _blcelc.celCreateZoneManager
celGetSetZoneManager = _blcelc.celGetSetZoneManager
celGetZoneManager = _blcelc.celGetZoneManager
iPcCommandInput_scfGetVersion = _blcelc.iPcCommandInput_scfGetVersion

scfQuery_iPcCommandInput = _blcelc.scfQuery_iPcCommandInput
class iPcGravityCallback(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Callback(*args): return _blcelc.iPcGravityCallback_Callback(*args)
    __swig_destroy__ = _blcelc.delete_iPcGravityCallback
    __del__ = lambda self : None;
iPcGravityCallback_swigregister = _blcelc.iPcGravityCallback_swigregister
iPcGravityCallback_swigregister(iPcGravityCallback)
celCreateCommandInput = _blcelc.celCreateCommandInput
celGetSetCommandInput = _blcelc.celGetSetCommandInput
celGetCommandInput = _blcelc.celGetCommandInput

class iPcLinearMovement(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetAnchor(*args): return _blcelc.iPcLinearMovement_SetAnchor(*args)
    def GetAnchor(*args): return _blcelc.iPcLinearMovement_GetAnchor(*args)
    def SetAngularVelocity(*args): return _blcelc.iPcLinearMovement_SetAngularVelocity(*args)
    def SetSpeed(*args): return _blcelc.iPcLinearMovement_SetSpeed(*args)
    def GetSpeed(*args): return _blcelc.iPcLinearMovement_GetSpeed(*args)
    def SetVelocity(*args): return _blcelc.iPcLinearMovement_SetVelocity(*args)
    def SetBodyVelocity(*args): return _blcelc.iPcLinearMovement_SetBodyVelocity(*args)
    def SetWorldVelocity(*args): return _blcelc.iPcLinearMovement_SetWorldVelocity(*args)
    def AddVelocity(*args): return _blcelc.iPcLinearMovement_AddVelocity(*args)
    def ClearWorldVelocity(*args): return _blcelc.iPcLinearMovement_ClearWorldVelocity(*args)
    def GetBodyVelocity(*args): return _blcelc.iPcLinearMovement_GetBodyVelocity(*args)
    def GetWorldVelocity(*args): return _blcelc.iPcLinearMovement_GetWorldVelocity(*args)
    def GetVelocity(*args): return _blcelc.iPcLinearMovement_GetVelocity(*args)
    def GetAngularVelocity(*args): return _blcelc.iPcLinearMovement_GetAngularVelocity(*args)
    def GetCDDimensions(*args): return _blcelc.iPcLinearMovement_GetCDDimensions(*args)
    def InitCD(*args): return _blcelc.iPcLinearMovement_InitCD(*args)
    def TimeDiff(*args): return _blcelc.iPcLinearMovement_TimeDiff(*args)
    def GetDRData(*args): return _blcelc.iPcLinearMovement_GetDRData(*args)
    def SetDRData(*args): return _blcelc.iPcLinearMovement_SetDRData(*args)
    def SetSoftDRData(*args): return _blcelc.iPcLinearMovement_SetSoftDRData(*args)
    def GetLastPosition(*args): return _blcelc.iPcLinearMovement_GetLastPosition(*args)
    def GetLastFullPosition(*args): return _blcelc.iPcLinearMovement_GetLastFullPosition(*args)
    def GetYRotation(*args): return _blcelc.iPcLinearMovement_GetYRotation(*args)
    def GetPosition(*args): return _blcelc.iPcLinearMovement_GetPosition(*args)
    def GetFullPosition(*args): return _blcelc.iPcLinearMovement_GetFullPosition(*args)
    def GetFullTransform(*args): return _blcelc.iPcLinearMovement_GetFullTransform(*args)
    def IsPath(*args): return _blcelc.iPcLinearMovement_IsPath(*args)
    def GetSector(*args): return _blcelc.iPcLinearMovement_GetSector(*args)
    def ExtrapolatePosition(*args): return _blcelc.iPcLinearMovement_ExtrapolatePosition(*args)
    def UpdateDRDelta(*args): return _blcelc.iPcLinearMovement_UpdateDRDelta(*args)
    def UpdateDR(*args): return _blcelc.iPcLinearMovement_UpdateDR(*args)
    def SetPath(*args): return _blcelc.iPcLinearMovement_SetPath(*args)
    def SetPathTime(*args): return _blcelc.iPcLinearMovement_SetPathTime(*args)
    def SetPathSpeed(*args): return _blcelc.iPcLinearMovement_SetPathSpeed(*args)
    def SetPathAction(*args): return _blcelc.iPcLinearMovement_SetPathAction(*args)
    def SetPathSector(*args): return _blcelc.iPcLinearMovement_SetPathSector(*args)
    def IsOnGround(*args): return _blcelc.iPcLinearMovement_IsOnGround(*args)
    def SetOnGround(*args): return _blcelc.iPcLinearMovement_SetOnGround(*args)
    def SetHugGround(*args): return _blcelc.iPcLinearMovement_SetHugGround(*args)
    def SetDeltaLimit(*args): return _blcelc.iPcLinearMovement_SetDeltaLimit(*args)
    def GetDeltaLimit(*args): return _blcelc.iPcLinearMovement_GetDeltaLimit(*args)
    def RotateV(*args): return _blcelc.iPcLinearMovement_RotateV(*args)
    def SetGravity(*args): return _blcelc.iPcLinearMovement_SetGravity(*args)
    def GetGravity(*args): return _blcelc.iPcLinearMovement_GetGravity(*args)
    def ResetGravity(*args): return _blcelc.iPcLinearMovement_ResetGravity(*args)
    def AddGravityCallback(*args): return _blcelc.iPcLinearMovement_AddGravityCallback(*args)
    def RemoveGravityCallback(*args): return _blcelc.iPcLinearMovement_RemoveGravityCallback(*args)
    def GetPortalDisplacement(*args): return _blcelc.iPcLinearMovement_GetPortalDisplacement(*args)
    def ClearPortalDisplacement(*args): return _blcelc.iPcLinearMovement_ClearPortalDisplacement(*args)
    def SetFullPosition(*args): return _blcelc.iPcLinearMovement_SetFullPosition(*args)
    def SetPosition(*args): return _blcelc.iPcLinearMovement_SetPosition(*args)
    Anchor = _swig_property(_blcelc.iPcLinearMovement_Anchor_get, _blcelc.iPcLinearMovement_Anchor_set, None,
                    "iPcLinearMovement.Anchor -> iPcMesh*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMesh* iPcLinearMovement::GetAnchor()\n\tset: void iPcLinearMovement::SetAnchor(iPcMesh*)")


    AngularVelocity = _swig_property(_blcelc.iPcLinearMovement_GetAngularVelocity, fix_args(_blcelc.iPcLinearMovement_SetAngularVelocity), None,
                    "iPcLinearMovement.AngularVelocity -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLinearMovement::GetAngularVelocity()\n\tset: void iPcLinearMovement::SetAngularVelocity(...)")

    Speed = _swig_property(None, _blcelc.iPcLinearMovement_Speed_set, None,
                    "iPcLinearMovement.Speed (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcLinearMovement::SetSpeed(float)")

    Velocity = _swig_property(_blcelc.iPcLinearMovement_Velocity_get, _blcelc.iPcLinearMovement_Velocity_set, None,
                    "iPcLinearMovement.Velocity -> const csVector3\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const csVector3 iPcLinearMovement::GetVelocity()\n\tset: void iPcLinearMovement::SetVelocity(const csVector3)")


    SoftDRData = _swig_property(None, fix_args(_blcelc.iPcLinearMovement_SetSoftDRData), None,
                    "iPcLinearMovement.SoftDRData -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLinearMovement::getmethod()\n\tset: void iPcLinearMovement::SetSoftDRData(...)")

    FullPosition = _swig_property(_blcelc.iPcLinearMovement_GetFullPosition, fix_args(_blcelc.iPcLinearMovement_SetFullPosition), None,
                    "iPcLinearMovement.FullPosition -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLinearMovement::GetFullPosition()\n\tset: void iPcLinearMovement::SetFullPosition(...)")

    Position = _swig_property(_blcelc.iPcLinearMovement_GetPosition, fix_args(_blcelc.iPcLinearMovement_SetPosition), None,
                    "iPcLinearMovement.Position -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLinearMovement::GetPosition()\n\tset: void iPcLinearMovement::SetPosition(...)")

    YRotation = _swig_property(_blcelc.iPcLinearMovement_YRotation_get, None, None,
                    "iPcLinearMovement.YRotation -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcLinearMovement::GetYRotation()")

    Path = _swig_property(_blcelc.iPcLinearMovement_IsPath, fix_args(_blcelc.iPcLinearMovement_SetPath), None,
                    "iPcLinearMovement.Path -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLinearMovement::IsPath()\n\tset: void iPcLinearMovement::SetPath(...)")

    Sector = _swig_property(_blcelc.iPcLinearMovement_Sector_get, None, None,
                    "iPcLinearMovement.Sector -> iSector*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iSector* iPcLinearMovement::GetSector()")

    PathTime = _swig_property(None, _blcelc.iPcLinearMovement_PathTime_set, None,
                    "iPcLinearMovement.PathTime (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcLinearMovement::SetPathTime(float)")

    PathSpeed = _swig_property(None, _blcelc.iPcLinearMovement_PathSpeed_set, None,
                    "iPcLinearMovement.PathSpeed (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcLinearMovement::SetPathSpeed(float)")

    PathAction = _swig_property(None, fix_args(_blcelc.iPcLinearMovement_SetPathAction), None,
                    "iPcLinearMovement.PathAction -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcLinearMovement::getmethod()\n\tset: void iPcLinearMovement::SetPathAction(...)")

    PathSector = _swig_property(None, _blcelc.iPcLinearMovement_PathSector_set, None,
                    "iPcLinearMovement.PathSector (write only) -> const char *\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcLinearMovement::SetPathSector(const char *)")

    OnGround = _swig_property(_blcelc.iPcLinearMovement_OnGround_get, _blcelc.iPcLinearMovement_OnGround_set, None,
                    "iPcLinearMovement.OnGround -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcLinearMovement::IsOnGround()\n\tset: void iPcLinearMovement::SetOnGround(bool)")


    HugGround = _swig_property(None, _blcelc.iPcLinearMovement_HugGround_set, None,
                    "iPcLinearMovement.HugGround (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcLinearMovement::SetHugGround(bool)")

    DeltaLimit = _swig_property(None, _blcelc.iPcLinearMovement_DeltaLimit_set, None,
                    "iPcLinearMovement.DeltaLimit (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcLinearMovement::SetDeltaLimit(float)")

    Gravity = _swig_property(_blcelc.iPcLinearMovement_Gravity_get, _blcelc.iPcLinearMovement_Gravity_set, None,
                    "iPcLinearMovement.Gravity -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcLinearMovement::GetGravity()\n\tset: void iPcLinearMovement::SetGravity(float)")


    PortalDisplacement = _swig_property(_blcelc.iPcLinearMovement_PortalDisplacement_get, None, None,
                    "iPcLinearMovement.PortalDisplacement -> csVector3  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csVector3 iPcLinearMovement::GetPortalDisplacement()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcLinearMovement,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcLinearMovement_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcLinearMovement
    __del__ = lambda self : None;
iPcLinearMovement_swigregister = _blcelc.iPcLinearMovement_swigregister
iPcLinearMovement_swigregister(iPcLinearMovement)
iPcLinearMovement_scfGetVersion = _blcelc.iPcLinearMovement_scfGetVersion

scfQuery_iPcLinearMovement = _blcelc.scfQuery_iPcLinearMovement
CEL_ANIM_IDLE = _blcelc.CEL_ANIM_IDLE
CEL_ANIM_WALK = _blcelc.CEL_ANIM_WALK
CEL_ANIM_RUN = _blcelc.CEL_ANIM_RUN
CEL_ANIM_JUMP = _blcelc.CEL_ANIM_JUMP
class iPcActorMove(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Forward(*args): return _blcelc.iPcActorMove_Forward(*args)
    def IsMovingForward(*args): return _blcelc.iPcActorMove_IsMovingForward(*args)
    def Backward(*args): return _blcelc.iPcActorMove_Backward(*args)
    def IsMovingBackward(*args): return _blcelc.iPcActorMove_IsMovingBackward(*args)
    def IsMoving(*args): return _blcelc.iPcActorMove_IsMoving(*args)
    def StrafeLeft(*args): return _blcelc.iPcActorMove_StrafeLeft(*args)
    def IsStrafingLeft(*args): return _blcelc.iPcActorMove_IsStrafingLeft(*args)
    def StrafeRight(*args): return _blcelc.iPcActorMove_StrafeRight(*args)
    def IsStrafingRight(*args): return _blcelc.iPcActorMove_IsStrafingRight(*args)
    def RotateLeft(*args): return _blcelc.iPcActorMove_RotateLeft(*args)
    def IsRotatingLeft(*args): return _blcelc.iPcActorMove_IsRotatingLeft(*args)
    def RotateRight(*args): return _blcelc.iPcActorMove_RotateRight(*args)
    def IsRotatingRight(*args): return _blcelc.iPcActorMove_IsRotatingRight(*args)
    def RotateTo(*args): return _blcelc.iPcActorMove_RotateTo(*args)
    def Run(*args): return _blcelc.iPcActorMove_Run(*args)
    def IsRunning(*args): return _blcelc.iPcActorMove_IsRunning(*args)
    def AutoRun(*args): return _blcelc.iPcActorMove_AutoRun(*args)
    def IsAutoRunning(*args): return _blcelc.iPcActorMove_IsAutoRunning(*args)
    def MouseMove(*args): return _blcelc.iPcActorMove_MouseMove(*args)
    def Jump(*args): return _blcelc.iPcActorMove_Jump(*args)
    def ToggleCameraMode(*args): return _blcelc.iPcActorMove_ToggleCameraMode(*args)
    def EnableMouseMove(*args): return _blcelc.iPcActorMove_EnableMouseMove(*args)
    def IsMouseMoveEnabled(*args): return _blcelc.iPcActorMove_IsMouseMoveEnabled(*args)
    def SetMouseMoveAccelerated(*args): return _blcelc.iPcActorMove_SetMouseMoveAccelerated(*args)
    def IsMouseMoveAccelerated(*args): return _blcelc.iPcActorMove_IsMouseMoveAccelerated(*args)
    def SetMouseMoveInverted(*args): return _blcelc.iPcActorMove_SetMouseMoveInverted(*args)
    def IsMouseMoveInverted(*args): return _blcelc.iPcActorMove_IsMouseMoveInverted(*args)
    def SetMouseMoveSpeed(*args): return _blcelc.iPcActorMove_SetMouseMoveSpeed(*args)
    def GetMouseMoveSpeedX(*args): return _blcelc.iPcActorMove_GetMouseMoveSpeedX(*args)
    def GetMouseMoveSpeedY(*args): return _blcelc.iPcActorMove_GetMouseMoveSpeedY(*args)
    def SetMovementSpeed(*args): return _blcelc.iPcActorMove_SetMovementSpeed(*args)
    def GetMovementSpeed(*args): return _blcelc.iPcActorMove_GetMovementSpeed(*args)
    def SetRunningSpeed(*args): return _blcelc.iPcActorMove_SetRunningSpeed(*args)
    def GetRunningSpeed(*args): return _blcelc.iPcActorMove_GetRunningSpeed(*args)
    def SetRotationSpeed(*args): return _blcelc.iPcActorMove_SetRotationSpeed(*args)
    def GetRotationSpeed(*args): return _blcelc.iPcActorMove_GetRotationSpeed(*args)
    def SetJumpingVelocity(*args): return _blcelc.iPcActorMove_SetJumpingVelocity(*args)
    def GetJumpingVelocity(*args): return _blcelc.iPcActorMove_GetJumpingVelocity(*args)
    def SetAnimation(*args): return _blcelc.iPcActorMove_SetAnimation(*args)
    def SetAnimationMapping(*args): return _blcelc.iPcActorMove_SetAnimationMapping(*args)
    def SubscribeMessages(*args): return _blcelc.iPcActorMove_SubscribeMessages(*args)
    MovingForward = _swig_property(_blcelc.iPcActorMove_MovingForward_get, _blcelc.iPcActorMove_MovingForward_set, None,
                    "iPcActorMove.MovingForward -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsMovingForward()\n\tset: void iPcActorMove::Forward(bool)")


    MovingBackward = _swig_property(_blcelc.iPcActorMove_MovingBackward_get, _blcelc.iPcActorMove_MovingBackward_set, None,
                    "iPcActorMove.MovingBackward -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsMovingBackward()\n\tset: void iPcActorMove::Backward(bool)")


    Moving = _swig_property(_blcelc.iPcActorMove_Moving_get, None, None,
                    "iPcActorMove.Moving -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcActorMove::IsMoving()")

    StrafingLeft = _swig_property(_blcelc.iPcActorMove_StrafingLeft_get, _blcelc.iPcActorMove_StrafingLeft_set, None,
                    "iPcActorMove.StrafingLeft -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsStrafingLeft()\n\tset: void iPcActorMove::StrafeLeft(bool)")


    StrafingRight = _swig_property(_blcelc.iPcActorMove_StrafingRight_get, _blcelc.iPcActorMove_StrafingRight_set, None,
                    "iPcActorMove.StrafingRight -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsStrafingRight()\n\tset: void iPcActorMove::StrafeRight(bool)")


    RotatingLeft = _swig_property(_blcelc.iPcActorMove_RotatingLeft_get, _blcelc.iPcActorMove_RotatingLeft_set, None,
                    "iPcActorMove.RotatingLeft -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsRotatingLeft()\n\tset: void iPcActorMove::RotateLeft(bool)")


    RotatingRight = _swig_property(_blcelc.iPcActorMove_RotatingRight_get, _blcelc.iPcActorMove_RotatingRight_set, None,
                    "iPcActorMove.RotatingRight -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsRotatingRight()\n\tset: void iPcActorMove::RotateRight(bool)")


    Running = _swig_property(_blcelc.iPcActorMove_Running_get, _blcelc.iPcActorMove_Running_set, None,
                    "iPcActorMove.Running -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsRunning()\n\tset: void iPcActorMove::Run(bool)")


    AutoRunning = _swig_property(_blcelc.iPcActorMove_AutoRunning_get, _blcelc.iPcActorMove_AutoRunning_set, None,
                    "iPcActorMove.AutoRunning -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsAutoRunning()\n\tset: void iPcActorMove::AutoRun(bool)")


    MouseMoveEnabled = _swig_property(_blcelc.iPcActorMove_MouseMoveEnabled_get, None, None,
                    "iPcActorMove.MouseMoveEnabled -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcActorMove::IsMouseMoveEnabled()")

    MouseMoveAccelerated = _swig_property(_blcelc.iPcActorMove_MouseMoveAccelerated_get, _blcelc.iPcActorMove_MouseMoveAccelerated_set, None,
                    "iPcActorMove.MouseMoveAccelerated -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsMouseMoveAccelerated()\n\tset: void iPcActorMove::SetMouseMoveAccelerated(bool)")


    MouseMoveInverted = _swig_property(_blcelc.iPcActorMove_MouseMoveInverted_get, _blcelc.iPcActorMove_MouseMoveInverted_set, None,
                    "iPcActorMove.MouseMoveInverted -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcActorMove::IsMouseMoveInverted()\n\tset: void iPcActorMove::SetMouseMoveInverted(bool)")


    MouseMoveSpeed = _swig_property(None, fix_args(_blcelc.iPcActorMove_SetMouseMoveSpeed), None,
                    "iPcActorMove.MouseMoveSpeed -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcActorMove::getmethod()\n\tset: void iPcActorMove::SetMouseMoveSpeed(...)")

    MouseMoveSpeedX = _swig_property(_blcelc.iPcActorMove_MouseMoveSpeedX_get, None, None,
                    "iPcActorMove.MouseMoveSpeedX -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcActorMove::GetMouseMoveSpeedX()")

    MouseMoveSpeedY = _swig_property(_blcelc.iPcActorMove_MouseMoveSpeedY_get, None, None,
                    "iPcActorMove.MouseMoveSpeedY -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcActorMove::GetMouseMoveSpeedY()")

    MovementSpeed = _swig_property(_blcelc.iPcActorMove_MovementSpeed_get, _blcelc.iPcActorMove_MovementSpeed_set, None,
                    "iPcActorMove.MovementSpeed -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcActorMove::GetMovementSpeed()\n\tset: void iPcActorMove::SetMovementSpeed(float)")


    RunningSpeed = _swig_property(_blcelc.iPcActorMove_RunningSpeed_get, _blcelc.iPcActorMove_RunningSpeed_set, None,
                    "iPcActorMove.RunningSpeed -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcActorMove::GetRunningSpeed()\n\tset: void iPcActorMove::SetRunningSpeed(float)")


    RotationSpeed = _swig_property(_blcelc.iPcActorMove_RotationSpeed_get, _blcelc.iPcActorMove_RotationSpeed_set, None,
                    "iPcActorMove.RotationSpeed -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcActorMove::GetRotationSpeed()\n\tset: void iPcActorMove::SetRotationSpeed(float)")


    JumpingVelocity = _swig_property(_blcelc.iPcActorMove_JumpingVelocity_get, _blcelc.iPcActorMove_JumpingVelocity_set, None,
                    "iPcActorMove.JumpingVelocity -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcActorMove::GetJumpingVelocity()\n\tset: void iPcActorMove::SetJumpingVelocity(float)")


    Animation = _swig_property(None, fix_args(_blcelc.iPcActorMove_SetAnimation), None,
                    "iPcActorMove.Animation -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcActorMove::getmethod()\n\tset: void iPcActorMove::SetAnimation(...)")

    AnimationMapping = _swig_property(None, fix_args(_blcelc.iPcActorMove_SetAnimationMapping), None,
                    "iPcActorMove.AnimationMapping -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcActorMove::getmethod()\n\tset: void iPcActorMove::SetAnimationMapping(...)")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcActorMove,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcActorMove_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcActorMove
    __del__ = lambda self : None;
iPcActorMove_swigregister = _blcelc.iPcActorMove_swigregister
iPcActorMove_swigregister(iPcActorMove)
celCreateLinearMovement = _blcelc.celCreateLinearMovement
celGetSetLinearMovement = _blcelc.celGetSetLinearMovement
celGetLinearMovement = _blcelc.celGetLinearMovement
iPcActorMove_scfGetVersion = _blcelc.iPcActorMove_scfGetVersion

scfQuery_iPcActorMove = _blcelc.scfQuery_iPcActorMove
scfQuery_iPcActorAnalog = _blcelc.scfQuery_iPcActorAnalog
class iPcAnalogMotion(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetAxis(*args): return _blcelc.iPcAnalogMotion_SetAxis(*args)
    def GetAxis(*args): return _blcelc.iPcAnalogMotion_GetAxis(*args)
    def AddAxis(*args): return _blcelc.iPcAnalogMotion_AddAxis(*args)
    def SetMovementSpeed(*args): return _blcelc.iPcAnalogMotion_SetMovementSpeed(*args)
    def GetMovementSpeed(*args): return _blcelc.iPcAnalogMotion_GetMovementSpeed(*args)
    def SetMovementAcceleration(*args): return _blcelc.iPcAnalogMotion_SetMovementAcceleration(*args)
    def GetMovementAcceleration(*args): return _blcelc.iPcAnalogMotion_GetMovementAcceleration(*args)
    def SetMovementDeceleration(*args): return _blcelc.iPcAnalogMotion_SetMovementDeceleration(*args)
    def GetMovementDeceleration(*args): return _blcelc.iPcAnalogMotion_GetMovementDeceleration(*args)
    def SetTurningSpeed(*args): return _blcelc.iPcAnalogMotion_SetTurningSpeed(*args)
    def GetTurningSpeed(*args): return _blcelc.iPcAnalogMotion_GetTurningSpeed(*args)
    def SetMinimumTurningSpeed(*args): return _blcelc.iPcAnalogMotion_SetMinimumTurningSpeed(*args)
    def GetMinimumTurningSpeed(*args): return _blcelc.iPcAnalogMotion_GetMinimumTurningSpeed(*args)
    def SetMaximumTurningSpeed(*args): return _blcelc.iPcAnalogMotion_SetMaximumTurningSpeed(*args)
    def GetMaximumTurningSpeed(*args): return _blcelc.iPcAnalogMotion_GetMaximumTurningSpeed(*args)
    def Enable(*args): return _blcelc.iPcAnalogMotion_Enable(*args)
    def IsEnabled(*args): return _blcelc.iPcAnalogMotion_IsEnabled(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcAnalogMotion,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcAnalogMotion_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcAnalogMotion
    __del__ = lambda self : None;
iPcAnalogMotion_swigregister = _blcelc.iPcAnalogMotion_swigregister
iPcAnalogMotion_swigregister(iPcAnalogMotion)
celCreateActorMove = _blcelc.celCreateActorMove
celGetSetActorMove = _blcelc.celGetSetActorMove
celGetActorMove = _blcelc.celGetActorMove
celCreateActorAnalog = _blcelc.celCreateActorAnalog
celGetSetActorAnalog = _blcelc.celGetSetActorAnalog
celGetActorAnalog = _blcelc.celGetActorAnalog
iPcAnalogMotion_scfGetVersion = _blcelc.iPcAnalogMotion_scfGetVersion

scfQuery_iPcAnalogMotion = _blcelc.scfQuery_iPcAnalogMotion
class iPcJump(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Jump(*args): return _blcelc.iPcJump_Jump(*args)
    def FinishBoost(*args): return _blcelc.iPcJump_FinishBoost(*args)
    def Freeze(*args): return _blcelc.iPcJump_Freeze(*args)
    STAND = _blcelc.iPcJump_STAND
    JUMP = _blcelc.iPcJump_JUMP
    DOUBLEJUMP = _blcelc.iPcJump_DOUBLEJUMP
    GLIDE = _blcelc.iPcJump_GLIDE
    FROZEN = _blcelc.iPcJump_FROZEN
    def GetState(*args): return _blcelc.iPcJump_GetState(*args)
    GLIDE_NOTURN = _blcelc.iPcJump_GLIDE_NOTURN
    GLIDE_LEFT = _blcelc.iPcJump_GLIDE_LEFT
    GLIDE_RIGHT = _blcelc.iPcJump_GLIDE_RIGHT
    def GlideTurn(*args): return _blcelc.iPcJump_GlideTurn(*args)
    GLIDE_NOPITCH = _blcelc.iPcJump_GLIDE_NOPITCH
    GLIDE_UP = _blcelc.iPcJump_GLIDE_UP
    GLIDE_DOWN = _blcelc.iPcJump_GLIDE_DOWN
    def GlidePitch(*args): return _blcelc.iPcJump_GlidePitch(*args)
    def SetGlideGravity(*args): return _blcelc.iPcJump_SetGlideGravity(*args)
    def GetGlideGravity(*args): return _blcelc.iPcJump_GetGlideGravity(*args)
    def SetGlidePitchLimit(*args): return _blcelc.iPcJump_SetGlidePitchLimit(*args)
    def GetGlidePitchLimit(*args): return _blcelc.iPcJump_GetGlidePitchLimit(*args)
    def SetGlidePitchSpeed(*args): return _blcelc.iPcJump_SetGlidePitchSpeed(*args)
    def GetGlidePitchSpeed(*args): return _blcelc.iPcJump_GetGlidePitchSpeed(*args)
    def SetGlideTurnSpeed(*args): return _blcelc.iPcJump_SetGlideTurnSpeed(*args)
    def GetGlideTurnSpeed(*args): return _blcelc.iPcJump_GetGlideTurnSpeed(*args)
    def SetJumpSpeed(*args): return _blcelc.iPcJump_SetJumpSpeed(*args)
    def GetJumpSpeed(*args): return _blcelc.iPcJump_GetJumpSpeed(*args)
    def SetJumpHeight(*args): return _blcelc.iPcJump_SetJumpHeight(*args)
    def GetJumpHeight(*args): return _blcelc.iPcJump_GetJumpHeight(*args)
    def GetAirTime(*args): return _blcelc.iPcJump_GetAirTime(*args)
    def SetDoubleJumpSpeed(*args): return _blcelc.iPcJump_SetDoubleJumpSpeed(*args)
    def GetDoubleJumpSpeed(*args): return _blcelc.iPcJump_GetDoubleJumpSpeed(*args)
    def SetGravity(*args): return _blcelc.iPcJump_SetGravity(*args)
    def GetGravity(*args): return _blcelc.iPcJump_GetGravity(*args)
    def SetFixedJump(*args): return _blcelc.iPcJump_SetFixedJump(*args)
    def GetFixedJump(*args): return _blcelc.iPcJump_GetFixedJump(*args)
    def SetBoostJump(*args): return _blcelc.iPcJump_SetBoostJump(*args)
    def GetBoostJump(*args): return _blcelc.iPcJump_GetBoostJump(*args)
    def SetBoostTime(*args): return _blcelc.iPcJump_SetBoostTime(*args)
    def GetBoostTime(*args): return _blcelc.iPcJump_GetBoostTime(*args)
    def SetBoostAcceleration(*args): return _blcelc.iPcJump_SetBoostAcceleration(*args)
    def GetBoostAcceleration(*args): return _blcelc.iPcJump_GetBoostAcceleration(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcJump,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcJump_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcJump
    __del__ = lambda self : None;
iPcJump_swigregister = _blcelc.iPcJump_swigregister
iPcJump_swigregister(iPcJump)
celCreateAnalogMotion = _blcelc.celCreateAnalogMotion
celGetSetAnalogMotion = _blcelc.celGetSetAnalogMotion
celGetAnalogMotion = _blcelc.celGetAnalogMotion
iPcJump_scfGetVersion = _blcelc.iPcJump_scfGetVersion

scfQuery_iPcJump = _blcelc.scfQuery_iPcJump
class iPcCamera(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetRegion(*args): return _blcelc.iPcCamera_SetRegion(*args)
    def SetZoneManager(*args): return _blcelc.iPcCamera_SetZoneManager(*args)
    def SetRectangle(*args): return _blcelc.iPcCamera_SetRectangle(*args)
    def GetCamera(*args): return _blcelc.iPcCamera_GetCamera(*args)
    def GetView(*args): return _blcelc.iPcCamera_GetView(*args)
    def SetClearZBuffer(*args): return _blcelc.iPcCamera_SetClearZBuffer(*args)
    def GetClearZBuffer(*args): return _blcelc.iPcCamera_GetClearZBuffer(*args)
    def SetClearScreen(*args): return _blcelc.iPcCamera_SetClearScreen(*args)
    def GetClearScreen(*args): return _blcelc.iPcCamera_GetClearScreen(*args)
    def DisableDistanceClipping(*args): return _blcelc.iPcCamera_DisableDistanceClipping(*args)
    def EnableFixedDistanceClipping(*args): return _blcelc.iPcCamera_EnableFixedDistanceClipping(*args)
    def EnableAdaptiveDistanceClipping(*args): return _blcelc.iPcCamera_EnableAdaptiveDistanceClipping(*args)
    def UseDistanceClipping(*args): return _blcelc.iPcCamera_UseDistanceClipping(*args)
    def UseFixedDistanceClipping(*args): return _blcelc.iPcCamera_UseFixedDistanceClipping(*args)
    def GetFixedDistance(*args): return _blcelc.iPcCamera_GetFixedDistance(*args)
    def GetAdaptiveMinFPS(*args): return _blcelc.iPcCamera_GetAdaptiveMinFPS(*args)
    def GetAdaptiveMaxFPS(*args): return _blcelc.iPcCamera_GetAdaptiveMaxFPS(*args)
    def GetAdaptiveMinDistance(*args): return _blcelc.iPcCamera_GetAdaptiveMinDistance(*args)
    def SetAutoDraw(*args): return _blcelc.iPcCamera_SetAutoDraw(*args)
    def Draw(*args): return _blcelc.iPcCamera_Draw(*args)
    def UpdateCamera(*args): return _blcelc.iPcCamera_UpdateCamera(*args)
    def GetDrawFlags(*args): return _blcelc.iPcCamera_GetDrawFlags(*args)
    def SetPerspectiveCenter(*args): return _blcelc.iPcCamera_SetPerspectiveCenter(*args)
    Region = _swig_property(None, fix_args(_blcelc.iPcCamera_SetRegion), None,
                    "iPcCamera.Region -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcCamera::getmethod()\n\tset: void iPcCamera::SetRegion(...)")

    ZoneManager = _swig_property(None, fix_args(_blcelc.iPcCamera_SetZoneManager), None,
                    "iPcCamera.ZoneManager -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcCamera::getmethod()\n\tset: void iPcCamera::SetZoneManager(...)")

    Rectangle = _swig_property(None, fix_args(_blcelc.iPcCamera_SetRectangle), None,
                    "iPcCamera.Rectangle -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcCamera::getmethod()\n\tset: void iPcCamera::SetRectangle(...)")

    Camera = _swig_property(_blcelc.iPcCamera_Camera_get, None, None,
                    "iPcCamera.Camera -> iCamera*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iCamera* iPcCamera::GetCamera()")

    View = _swig_property(_blcelc.iPcCamera_View_get, None, None,
                    "iPcCamera.View -> iView*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iView* iPcCamera::GetView()")

    ClearZBuffer = _swig_property(_blcelc.iPcCamera_ClearZBuffer_get, _blcelc.iPcCamera_ClearZBuffer_set, None,
                    "iPcCamera.ClearZBuffer -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcCamera::GetClearZBuffer()\n\tset: void iPcCamera::SetClearZBuffer(bool)")


    ClearScreen = _swig_property(_blcelc.iPcCamera_ClearScreen_get, _blcelc.iPcCamera_ClearScreen_set, None,
                    "iPcCamera.ClearScreen -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcCamera::GetClearScreen()\n\tset: void iPcCamera::SetClearScreen(bool)")


    FixedDistance = _swig_property(_blcelc.iPcCamera_FixedDistance_get, None, None,
                    "iPcCamera.FixedDistance -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcCamera::GetFixedDistance()")

    AdaptiveMinFPS = _swig_property(_blcelc.iPcCamera_AdaptiveMinFPS_get, None, None,
                    "iPcCamera.AdaptiveMinFPS -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcCamera::GetAdaptiveMinFPS()")

    AdaptiveMaxFPS = _swig_property(_blcelc.iPcCamera_AdaptiveMaxFPS_get, None, None,
                    "iPcCamera.AdaptiveMaxFPS -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcCamera::GetAdaptiveMaxFPS()")

    AdaptiveMinDistance = _swig_property(_blcelc.iPcCamera_AdaptiveMinDistance_get, None, None,
                    "iPcCamera.AdaptiveMinDistance -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcCamera::GetAdaptiveMinDistance()")

    AutoDraw = _swig_property(None, _blcelc.iPcCamera_AutoDraw_set, None,
                    "iPcCamera.AutoDraw (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCamera::SetAutoDraw(bool)")

    DrawFlags = _swig_property(_blcelc.iPcCamera_DrawFlags_get, None, None,
                    "iPcCamera.DrawFlags -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iPcCamera::GetDrawFlags()")

    PerspectiveCenter = _swig_property(None, fix_args(_blcelc.iPcCamera_SetPerspectiveCenter), None,
                    "iPcCamera.PerspectiveCenter -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcCamera::getmethod()\n\tset: void iPcCamera::SetPerspectiveCenter(...)")

    __swig_destroy__ = _blcelc.delete_iPcCamera
    __del__ = lambda self : None;
iPcCamera_swigregister = _blcelc.iPcCamera_swigregister
iPcCamera_swigregister(iPcCamera)
celCreateJump = _blcelc.celCreateJump
celGetSetJump = _blcelc.celGetSetJump
celGetJump = _blcelc.celGetJump

class iPcDefaultCamera(iPcCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    freelook = _blcelc.iPcDefaultCamera_freelook
    firstperson = _blcelc.iPcDefaultCamera_firstperson
    thirdperson = _blcelc.iPcDefaultCamera_thirdperson
    m64_thirdperson = _blcelc.iPcDefaultCamera_m64_thirdperson
    lara_thirdperson = _blcelc.iPcDefaultCamera_lara_thirdperson
    actual_data = _blcelc.iPcDefaultCamera_actual_data
    last_actual = _blcelc.iPcDefaultCamera_last_actual
    transition = _blcelc.iPcDefaultCamera_transition
    camerror = _blcelc.iPcDefaultCamera_camerror
    CameraMode_count = _blcelc.iPcDefaultCamera_CameraMode_count
    def SetFollowEntity(*args): return _blcelc.iPcDefaultCamera_SetFollowEntity(*args)
    def SetMode(*args): return _blcelc.iPcDefaultCamera_SetMode(*args)
    def GetMode(*args): return _blcelc.iPcDefaultCamera_GetMode(*args)
    def SetModeName(*args): return _blcelc.iPcDefaultCamera_SetModeName(*args)
    def GetModeName(*args): return _blcelc.iPcDefaultCamera_GetModeName(*args)
    def GetNextMode(*args): return _blcelc.iPcDefaultCamera_GetNextMode(*args)
    def PointCamera(*args): return _blcelc.iPcDefaultCamera_PointCamera(*args)
    def SetSpringParameters(*args): return _blcelc.iPcDefaultCamera_SetSpringParameters(*args)
    def SetMinMaxCameraDistance(*args): return _blcelc.iPcDefaultCamera_SetMinMaxCameraDistance(*args)
    def SetTurnSpeed(*args): return _blcelc.iPcDefaultCamera_SetTurnSpeed(*args)
    def SetSwingCoef(*args): return _blcelc.iPcDefaultCamera_SetSwingCoef(*args)
    def SetFirstPersonOffset(*args): return _blcelc.iPcDefaultCamera_SetFirstPersonOffset(*args)
    def SetThirdPersonOffset(*args): return _blcelc.iPcDefaultCamera_SetThirdPersonOffset(*args)
    def CenterCamera(*args): return _blcelc.iPcDefaultCamera_CenterCamera(*args)
    def SetPitch(*args): return _blcelc.iPcDefaultCamera_SetPitch(*args)
    def GetPitch(*args): return _blcelc.iPcDefaultCamera_GetPitch(*args)
    def SetPitchVelocity(*args): return _blcelc.iPcDefaultCamera_SetPitchVelocity(*args)
    def GetPitchVelocity(*args): return _blcelc.iPcDefaultCamera_GetPitchVelocity(*args)
    def MovePitch(*args): return _blcelc.iPcDefaultCamera_MovePitch(*args)
    def SetYaw(*args): return _blcelc.iPcDefaultCamera_SetYaw(*args)
    def MoveYaw(*args): return _blcelc.iPcDefaultCamera_MoveYaw(*args)
    def GetYaw(*args): return _blcelc.iPcDefaultCamera_GetYaw(*args)
    def SetYawVelocity(*args): return _blcelc.iPcDefaultCamera_SetYawVelocity(*args)
    def GetYawVelocity(*args): return _blcelc.iPcDefaultCamera_GetYawVelocity(*args)
    def SetDistance(*args): return _blcelc.iPcDefaultCamera_SetDistance(*args)
    def GetDistance(*args): return _blcelc.iPcDefaultCamera_GetDistance(*args)
    def SetDistanceVelocity(*args): return _blcelc.iPcDefaultCamera_SetDistanceVelocity(*args)
    def GetDistanceVelocity(*args): return _blcelc.iPcDefaultCamera_GetDistanceVelocity(*args)
    FollowEntity = _swig_property(None, _blcelc.iPcDefaultCamera_FollowEntity_set, None,
                    "iPcDefaultCamera.FollowEntity (write only) -> iCelEntity*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcDefaultCamera::SetFollowEntity(iCelEntity*)")

    Mode = _swig_property(_blcelc.iPcDefaultCamera_Mode_get, _blcelc.iPcDefaultCamera_Mode_set, None,
                    "iPcDefaultCamera.Mode -> iPcDefaultCamera::CameraMode\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcDefaultCamera::CameraMode iPcDefaultCamera::GetMode()\n\tset: void iPcDefaultCamera::SetMode(iPcDefaultCamera::CameraMode)")


    ModeName = _swig_property(_blcelc.iPcDefaultCamera_ModeName_get, _blcelc.iPcDefaultCamera_ModeName_set, None,
                    "iPcDefaultCamera.ModeName -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcDefaultCamera::GetModeName()\n\tset: void iPcDefaultCamera::SetModeName(const char*)")


    NextMode = _swig_property(_blcelc.iPcDefaultCamera_NextMode_get, None, None,
                    "iPcDefaultCamera.NextMode -> iPcDefaultCamera::CameraMode  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iPcDefaultCamera::CameraMode iPcDefaultCamera::GetNextMode()")

    SpringParameters = _swig_property(None, fix_args(_blcelc.iPcDefaultCamera_SetSpringParameters), None,
                    "iPcDefaultCamera.SpringParameters -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcDefaultCamera::getmethod()\n\tset: void iPcDefaultCamera::SetSpringParameters(...)")

    MinMaxCameraDistance = _swig_property(None, fix_args(_blcelc.iPcDefaultCamera_SetMinMaxCameraDistance), None,
                    "iPcDefaultCamera.MinMaxCameraDistance -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcDefaultCamera::getmethod()\n\tset: void iPcDefaultCamera::SetMinMaxCameraDistance(...)")

    TurnSpeed = _swig_property(None, _blcelc.iPcDefaultCamera_TurnSpeed_set, None,
                    "iPcDefaultCamera.TurnSpeed (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcDefaultCamera::SetTurnSpeed(float)")

    SwingCoef = _swig_property(None, _blcelc.iPcDefaultCamera_SwingCoef_set, None,
                    "iPcDefaultCamera.SwingCoef (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcDefaultCamera::SetSwingCoef(float)")

    FirstPersonOffset = _swig_property(None, _blcelc.iPcDefaultCamera_FirstPersonOffset_set, None,
                    "iPcDefaultCamera.FirstPersonOffset (write only) -> const csVector3&\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcDefaultCamera::SetFirstPersonOffset(const csVector3&)")

    ThirdPersonOffset = _swig_property(None, _blcelc.iPcDefaultCamera_ThirdPersonOffset_set, None,
                    "iPcDefaultCamera.ThirdPersonOffset (write only) -> const csVector3&\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcDefaultCamera::SetThirdPersonOffset(const csVector3&)")

    Pitch = _swig_property(_blcelc.iPcDefaultCamera_Pitch_get, _blcelc.iPcDefaultCamera_Pitch_set, None,
                    "iPcDefaultCamera.Pitch -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcDefaultCamera::GetPitch()\n\tset: void iPcDefaultCamera::SetPitch(float)")


    PitchVelocity = _swig_property(_blcelc.iPcDefaultCamera_PitchVelocity_get, _blcelc.iPcDefaultCamera_PitchVelocity_set, None,
                    "iPcDefaultCamera.PitchVelocity -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcDefaultCamera::GetPitchVelocity()\n\tset: void iPcDefaultCamera::SetPitchVelocity(float)")


    Yaw = _swig_property(_blcelc.iPcDefaultCamera_GetYaw, fix_args(_blcelc.iPcDefaultCamera_SetYaw), None,
                    "iPcDefaultCamera.Yaw -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcDefaultCamera::GetYaw()\n\tset: void iPcDefaultCamera::SetYaw(...)")

    YawVelocity = _swig_property(_blcelc.iPcDefaultCamera_YawVelocity_get, _blcelc.iPcDefaultCamera_YawVelocity_set, None,
                    "iPcDefaultCamera.YawVelocity -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcDefaultCamera::GetYawVelocity()\n\tset: void iPcDefaultCamera::SetYawVelocity(float)")


    Distance = _swig_property(_blcelc.iPcDefaultCamera_GetDistance, fix_args(_blcelc.iPcDefaultCamera_SetDistance), None,
                    "iPcDefaultCamera.Distance -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcDefaultCamera::GetDistance()\n\tset: void iPcDefaultCamera::SetDistance(...)")

    DistanceVelocity = _swig_property(_blcelc.iPcDefaultCamera_DistanceVelocity_get, _blcelc.iPcDefaultCamera_DistanceVelocity_set, None,
                    "iPcDefaultCamera.DistanceVelocity -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcDefaultCamera::GetDistanceVelocity()\n\tset: void iPcDefaultCamera::SetDistanceVelocity(float)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcDefaultCamera,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcDefaultCamera_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcDefaultCamera
    __del__ = lambda self : None;
iPcDefaultCamera_swigregister = _blcelc.iPcDefaultCamera_swigregister
iPcDefaultCamera_swigregister(iPcDefaultCamera)
iPcDefaultCamera_scfGetVersion = _blcelc.iPcDefaultCamera_scfGetVersion

scfQuery_iPcDefaultCamera = _blcelc.scfQuery_iPcDefaultCamera
class iPcSimpleCamera(iPcCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetDrawMesh(*args): return _blcelc.iPcSimpleCamera_SetDrawMesh(*args)
    def SetCameraOffset(*args): return _blcelc.iPcSimpleCamera_SetCameraOffset(*args)
    def SetLookAtOffset(*args): return _blcelc.iPcSimpleCamera_SetLookAtOffset(*args)
    def SetMesh(*args): return _blcelc.iPcSimpleCamera_SetMesh(*args)
    def Draw(*args): return _blcelc.iPcSimpleCamera_Draw(*args)
    DrawMesh = _swig_property(None, _blcelc.iPcSimpleCamera_DrawMesh_set, None,
                    "iPcSimpleCamera.DrawMesh (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcSimpleCamera::SetDrawMesh(bool)")

    CameraOffset = _swig_property(None, fix_args(_blcelc.iPcSimpleCamera_SetCameraOffset), None,
                    "iPcSimpleCamera.CameraOffset -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcSimpleCamera::getmethod()\n\tset: void iPcSimpleCamera::SetCameraOffset(...)")

    LookAtOffset = _swig_property(None, _blcelc.iPcSimpleCamera_LookAtOffset_set, None,
                    "iPcSimpleCamera.LookAtOffset (write only) -> const csVector3&\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcSimpleCamera::SetLookAtOffset(const csVector3&)")

    Mesh = _swig_property(None, _blcelc.iPcSimpleCamera_Mesh_set, None,
                    "iPcSimpleCamera.Mesh (write only) -> iPcMesh*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcSimpleCamera::SetMesh(iPcMesh*)")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcSimpleCamera,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcSimpleCamera_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcSimpleCamera
    __del__ = lambda self : None;
iPcSimpleCamera_swigregister = _blcelc.iPcSimpleCamera_swigregister
iPcSimpleCamera_swigregister(iPcSimpleCamera)
celCreateDefaultCamera = _blcelc.celCreateDefaultCamera
celGetSetDefaultCamera = _blcelc.celGetSetDefaultCamera
celGetDefaultCamera = _blcelc.celGetDefaultCamera
iPcSimpleCamera_scfGetVersion = _blcelc.iPcSimpleCamera_scfGetVersion

scfQuery_iPcSimpleCamera = _blcelc.scfQuery_iPcSimpleCamera
class General(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetParentCamera(*args): return _blcelc.General_SetParentCamera(*args)
    def UseSpringPos(*args): return _blcelc.General_UseSpringPos(*args)
    def UseSpringOrigin(*args): return _blcelc.General_UseSpringOrigin(*args)
    def UseSpringTarget(*args): return _blcelc.General_UseSpringTarget(*args)
    def UseSpringUp(*args): return _blcelc.General_UseSpringUp(*args)
    def AllowCollisionDetection(*args): return _blcelc.General_AllowCollisionDetection(*args)
    def GetCollisionDetection(*args): return _blcelc.General_GetCollisionDetection(*args)
    def DrawAttachedMesh(*args): return _blcelc.General_DrawAttachedMesh(*args)
    def GetSpringCoefficient(*args): return _blcelc.General_GetSpringCoefficient(*args)
    def SetSpringCoefficient(*args): return _blcelc.General_SetSpringCoefficient(*args)
    def SetOriginSpringCoefficient(*args): return _blcelc.General_SetOriginSpringCoefficient(*args)
    def GetOriginSpringCoefficient(*args): return _blcelc.General_GetOriginSpringCoefficient(*args)
    def SetTargetSpringCoefficient(*args): return _blcelc.General_SetTargetSpringCoefficient(*args)
    def GetTargetSpringCoefficient(*args): return _blcelc.General_GetTargetSpringCoefficient(*args)
    def SetUpSpringCoefficient(*args): return _blcelc.General_SetUpSpringCoefficient(*args)
    def GetUpSpringCoefficient(*args): return _blcelc.General_GetUpSpringCoefficient(*args)
    def GetPosition(*args): return _blcelc.General_GetPosition(*args)
    def GetOrigin(*args): return _blcelc.General_GetOrigin(*args)
    def GetTarget(*args): return _blcelc.General_GetTarget(*args)
    def GetUp(*args): return _blcelc.General_GetUp(*args)
    def DecideCameraState(*args): return _blcelc.General_DecideCameraState(*args)
    __swig_destroy__ = _blcelc.delete_General
    __del__ = lambda self : None;
General_swigregister = _blcelc.General_swigregister
General_swigregister(General)
celCreateSimpleCamera = _blcelc.celCreateSimpleCamera
celGetSetSimpleCamera = _blcelc.celGetSetSimpleCamera
celGetSimpleCamera = _blcelc.celGetSimpleCamera

class Tracking(General):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def ResetCamera(*args): return _blcelc.Tracking_ResetCamera(*args)
    TARGET_BASE = _blcelc.Tracking_TARGET_BASE
    TARGET_OBJ = _blcelc.Tracking_TARGET_OBJ
    TARGET_NONE = _blcelc.Tracking_TARGET_NONE
    def SetTargetEntity(*args): return _blcelc.Tracking_SetTargetEntity(*args)
    def SetTargetState(*args): return _blcelc.Tracking_SetTargetState(*args)
    def GetTargetState(*args): return _blcelc.Tracking_GetTargetState(*args)
    def SetTargetYOffset(*args): return _blcelc.Tracking_SetTargetYOffset(*args)
    __swig_destroy__ = _blcelc.delete_Tracking
    __del__ = lambda self : None;
Tracking_swigregister = _blcelc.Tracking_swigregister
Tracking_swigregister(Tracking)

class iPcNewCamera(iPcCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetBasePos(*args): return _blcelc.iPcNewCamera_GetBasePos(*args)
    def GetBaseOrigin(*args): return _blcelc.iPcNewCamera_GetBaseOrigin(*args)
    def GetBaseDir(*args): return _blcelc.iPcNewCamera_GetBaseDir(*args)
    def GetBaseUp(*args): return _blcelc.iPcNewCamera_GetBaseUp(*args)
    def GetBaseTrans(*args): return _blcelc.iPcNewCamera_GetBaseTrans(*args)
    def GetPos(*args): return _blcelc.iPcNewCamera_GetPos(*args)
    def GetOrigin(*args): return _blcelc.iPcNewCamera_GetOrigin(*args)
    def GetTarget(*args): return _blcelc.iPcNewCamera_GetTarget(*args)
    def GetUp(*args): return _blcelc.iPcNewCamera_GetUp(*args)
    def SetPositionOffset(*args): return _blcelc.iPcNewCamera_SetPositionOffset(*args)
    def SetTargetPositionOffset(*args): return _blcelc.iPcNewCamera_SetTargetPositionOffset(*args)
    def SetTargetMinimumOffset(*args): return _blcelc.iPcNewCamera_SetTargetMinimumOffset(*args)
    def SetCameraPositionOffset(*args): return _blcelc.iPcNewCamera_SetCameraPositionOffset(*args)
    def SetSpringCoefficient(*args): return _blcelc.iPcNewCamera_SetSpringCoefficient(*args)
    def GetSpringCoefficient(*args): return _blcelc.iPcNewCamera_GetSpringCoefficient(*args)
    def SetOriginSpringCoefficient(*args): return _blcelc.iPcNewCamera_SetOriginSpringCoefficient(*args)
    def GetOriginSpringCoefficient(*args): return _blcelc.iPcNewCamera_GetOriginSpringCoefficient(*args)
    def SetTargetSpringCoefficient(*args): return _blcelc.iPcNewCamera_SetTargetSpringCoefficient(*args)
    def GetTargetSpringCoefficient(*args): return _blcelc.iPcNewCamera_GetTargetSpringCoefficient(*args)
    def SetUpSpringCoefficient(*args): return _blcelc.iPcNewCamera_SetUpSpringCoefficient(*args)
    def GetUpSpringCoefficient(*args): return _blcelc.iPcNewCamera_GetUpSpringCoefficient(*args)
    def DetectCollisions(*args): return _blcelc.iPcNewCamera_DetectCollisions(*args)
    def SetCollisionDetection(*args): return _blcelc.iPcNewCamera_SetCollisionDetection(*args)
    def GetCollisionDetection(*args): return _blcelc.iPcNewCamera_GetCollisionDetection(*args)
    def SetCollisionYFocusOffset(*args): return _blcelc.iPcNewCamera_SetCollisionYFocusOffset(*args)
    def GetCollisionYFocusOffset(*args): return _blcelc.iPcNewCamera_GetCollisionYFocusOffset(*args)
    def SetCollisionCorrection(*args): return _blcelc.iPcNewCamera_SetCollisionCorrection(*args)
    def GetCollisionCorrection(*args): return _blcelc.iPcNewCamera_GetCollisionCorrection(*args)
    def SetCollisionAvoidanceRadiusSq(*args): return _blcelc.iPcNewCamera_SetCollisionAvoidanceRadiusSq(*args)
    def GetCollisionAvoidanceRadiusSq(*args): return _blcelc.iPcNewCamera_GetCollisionAvoidanceRadiusSq(*args)
    def SetCollisionYAvoidance(*args): return _blcelc.iPcNewCamera_SetCollisionYAvoidance(*args)
    def GetCollisionYAvoidance(*args): return _blcelc.iPcNewCamera_GetCollisionYAvoidance(*args)
    def SetCollisionAvoidanceInterpolation(*args): return _blcelc.iPcNewCamera_SetCollisionAvoidanceInterpolation(*args)
    def GetCollisionAvoidanceInterpolation(*args): return _blcelc.iPcNewCamera_GetCollisionAvoidanceInterpolation(*args)
    def SetCollisionSpringCoefficient(*args): return _blcelc.iPcNewCamera_SetCollisionSpringCoefficient(*args)
    def GetCollisionSpringCoefficient(*args): return _blcelc.iPcNewCamera_GetCollisionSpringCoefficient(*args)
    def InCameraTransition(*args): return _blcelc.iPcNewCamera_InCameraTransition(*args)
    def SetTransitionSpringCoefficient(*args): return _blcelc.iPcNewCamera_SetTransitionSpringCoefficient(*args)
    def GetTransitionSpringCoefficient(*args): return _blcelc.iPcNewCamera_GetTransitionSpringCoefficient(*args)
    def SetTransitionCutoffDistance(*args): return _blcelc.iPcNewCamera_SetTransitionCutoffDistance(*args)
    def GetTransitionCutoffPosDistance(*args): return _blcelc.iPcNewCamera_GetTransitionCutoffPosDistance(*args)
    def GetTransitionCutoffOriginDistance(*args): return _blcelc.iPcNewCamera_GetTransitionCutoffOriginDistance(*args)
    def GetTransitionCutoffTargetDistance(*args): return _blcelc.iPcNewCamera_GetTransitionCutoffTargetDistance(*args)
    def SetTransitionTime(*args): return _blcelc.iPcNewCamera_SetTransitionTime(*args)
    def GetTransitionTime(*args): return _blcelc.iPcNewCamera_GetTransitionTime(*args)
    CCM_FIRST_PERSON = _blcelc.iPcNewCamera_CCM_FIRST_PERSON
    CCM_THIRD_PERSON = _blcelc.iPcNewCamera_CCM_THIRD_PERSON
    CCM_TRACKING = _blcelc.iPcNewCamera_CCM_TRACKING
    CCM_HORIZONTAL = _blcelc.iPcNewCamera_CCM_HORIZONTAL
    CCM_ISOMETRIC = _blcelc.iPcNewCamera_CCM_ISOMETRIC
    CCM_COUNT = _blcelc.iPcNewCamera_CCM_COUNT
    def AttachCameraMode(*args): return _blcelc.iPcNewCamera_AttachCameraMode(*args)
    def GetCurrentCameraModeIndex(*args): return _blcelc.iPcNewCamera_GetCurrentCameraModeIndex(*args)
    def GetCurrentCameraMode(*args): return _blcelc.iPcNewCamera_GetCurrentCameraMode(*args)
    def SetCurrentCameraMode(*args): return _blcelc.iPcNewCamera_SetCurrentCameraMode(*args)
    def NextCameraMode(*args): return _blcelc.iPcNewCamera_NextCameraMode(*args)
    def PrevCameraMode(*args): return _blcelc.iPcNewCamera_PrevCameraMode(*args)
    def Draw(*args): return _blcelc.iPcNewCamera_Draw(*args)
    def GetTransform(*args): return _blcelc.iPcNewCamera_GetTransform(*args)
    def GetCameraMode(*args): return _blcelc.iPcNewCamera_GetCameraMode(*args)
    def Reset(*args): return _blcelc.iPcNewCamera_Reset(*args)
    BaseOrigin = _swig_property(_blcelc.iPcNewCamera_BaseOrigin_get, None, None,
                    "iPcNewCamera.BaseOrigin -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcNewCamera::GetBaseOrigin()")

    BaseDir = _swig_property(_blcelc.iPcNewCamera_BaseDir_get, None, None,
                    "iPcNewCamera.BaseDir -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcNewCamera::GetBaseDir()")

    BaseUp = _swig_property(_blcelc.iPcNewCamera_BaseUp_get, None, None,
                    "iPcNewCamera.BaseUp -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcNewCamera::GetBaseUp()")

    BaseTrans = _swig_property(_blcelc.iPcNewCamera_BaseTrans_get, None, None,
                    "iPcNewCamera.BaseTrans -> const csReversibleTransform&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csReversibleTransform& iPcNewCamera::GetBaseTrans()")

    Origin = _swig_property(_blcelc.iPcNewCamera_Origin_get, None, None,
                    "iPcNewCamera.Origin -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcNewCamera::GetOrigin()")

    Target = _swig_property(_blcelc.iPcNewCamera_Target_get, None, None,
                    "iPcNewCamera.Target -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcNewCamera::GetTarget()")

    Up = _swig_property(_blcelc.iPcNewCamera_Up_get, None, None,
                    "iPcNewCamera.Up -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcNewCamera::GetUp()")

    TargetPositionOffset = _swig_property(None, _blcelc.iPcNewCamera_TargetPositionOffset_set, None,
                    "iPcNewCamera.TargetPositionOffset (write only) -> const csVector3&\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcNewCamera::SetTargetPositionOffset(const csVector3&)")

    CameraPositionOffset = _swig_property(None, _blcelc.iPcNewCamera_CameraPositionOffset_set, None,
                    "iPcNewCamera.CameraPositionOffset (write only) -> const csVector3&\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcNewCamera::SetCameraPositionOffset(const csVector3&)")

    SpringCoefficient = _swig_property(_blcelc.iPcNewCamera_SpringCoefficient_get, _blcelc.iPcNewCamera_SpringCoefficient_set, None,
                    "iPcNewCamera.SpringCoefficient -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcNewCamera::GetSpringCoefficient()\n\tset: void iPcNewCamera::SetSpringCoefficient(float)")


    OriginSpringCoefficient = _swig_property(_blcelc.iPcNewCamera_OriginSpringCoefficient_get, _blcelc.iPcNewCamera_OriginSpringCoefficient_set, None,
                    "iPcNewCamera.OriginSpringCoefficient -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcNewCamera::GetOriginSpringCoefficient()\n\tset: void iPcNewCamera::SetOriginSpringCoefficient(float)")


    TargetSpringCoefficient = _swig_property(_blcelc.iPcNewCamera_TargetSpringCoefficient_get, _blcelc.iPcNewCamera_TargetSpringCoefficient_set, None,
                    "iPcNewCamera.TargetSpringCoefficient -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcNewCamera::GetTargetSpringCoefficient()\n\tset: void iPcNewCamera::SetTargetSpringCoefficient(float)")


    UpSpringCoefficient = _swig_property(_blcelc.iPcNewCamera_UpSpringCoefficient_get, _blcelc.iPcNewCamera_UpSpringCoefficient_set, None,
                    "iPcNewCamera.UpSpringCoefficient -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcNewCamera::GetUpSpringCoefficient()\n\tset: void iPcNewCamera::SetUpSpringCoefficient(float)")


    CollisionDetection = _swig_property(_blcelc.iPcNewCamera_CollisionDetection_get, _blcelc.iPcNewCamera_CollisionDetection_set, None,
                    "iPcNewCamera.CollisionDetection -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcNewCamera::GetCollisionDetection()\n\tset: void iPcNewCamera::SetCollisionDetection(bool)")


    CollisionSpringCoefficient = _swig_property(_blcelc.iPcNewCamera_CollisionSpringCoefficient_get, _blcelc.iPcNewCamera_CollisionSpringCoefficient_set, None,
                    "iPcNewCamera.CollisionSpringCoefficient -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcNewCamera::GetCollisionSpringCoefficient()\n\tset: void iPcNewCamera::SetCollisionSpringCoefficient(float)")


    TransitionSpringCoefficient = _swig_property(_blcelc.iPcNewCamera_TransitionSpringCoefficient_get, _blcelc.iPcNewCamera_TransitionSpringCoefficient_set, None,
                    "iPcNewCamera.TransitionSpringCoefficient -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcNewCamera::GetTransitionSpringCoefficient()\n\tset: void iPcNewCamera::SetTransitionSpringCoefficient(float)")


    TransitionCutoffDistance = _swig_property(None, fix_args(_blcelc.iPcNewCamera_SetTransitionCutoffDistance), None,
                    "iPcNewCamera.TransitionCutoffDistance -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcNewCamera::getmethod()\n\tset: void iPcNewCamera::SetTransitionCutoffDistance(...)")

    TransitionCutoffOriginDistance = _swig_property(_blcelc.iPcNewCamera_TransitionCutoffOriginDistance_get, None, None,
                    "iPcNewCamera.TransitionCutoffOriginDistance -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcNewCamera::GetTransitionCutoffOriginDistance()")

    TransitionCutoffTargetDistance = _swig_property(_blcelc.iPcNewCamera_TransitionCutoffTargetDistance_get, None, None,
                    "iPcNewCamera.TransitionCutoffTargetDistance -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcNewCamera::GetTransitionCutoffTargetDistance()")

    CurrentCameraModeIndex = _swig_property(_blcelc.iPcNewCamera_CurrentCameraModeIndex_get, None, None,
                    "iPcNewCamera.CurrentCameraModeIndex -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iPcNewCamera::GetCurrentCameraModeIndex()")

    CameraMode = _swig_property(_blcelc.iPcNewCamera_GetCameraMode, None, None,
                    "iPcNewCamera.CameraMode -> type\n\nThis is equivalent to calling the C++ cs method:\n\tget: iPcNewCamera::GetCameraMode()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcNewCamera,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcNewCamera_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcNewCamera
    __del__ = lambda self : None;
iPcNewCamera_swigregister = _blcelc.iPcNewCamera_swigregister
iPcNewCamera_swigregister(iPcNewCamera)
iPcNewCamera_scfGetVersion = _blcelc.iPcNewCamera_scfGetVersion

scfQuery_iPcNewCamera = _blcelc.scfQuery_iPcNewCamera
class iPcCameraMode(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def DecideState(*args): return _blcelc.iPcCameraMode_DecideState(*args)
    def GetPosition(*args): return _blcelc.iPcCameraMode_GetPosition(*args)
    def GetTarget(*args): return _blcelc.iPcCameraMode_GetTarget(*args)
    def GetUp(*args): return _blcelc.iPcCameraMode_GetUp(*args)
    __swig_destroy__ = _blcelc.delete_iPcCameraMode
    __del__ = lambda self : None;
iPcCameraMode_swigregister = _blcelc.iPcCameraMode_swigregister
iPcCameraMode_swigregister(iPcCameraMode)
celCreateNewCamera = _blcelc.celCreateNewCamera
celGetSetNewCamera = _blcelc.celGetSetNewCamera
celGetNewCamera = _blcelc.celGetNewCamera

class iPcDelegateCamera(iPcCamera):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetCurrentMode(*args): return _blcelc.iPcDelegateCamera_SetCurrentMode(*args)
    def GetCurrentMode(*args): return _blcelc.iPcDelegateCamera_GetCurrentMode(*args)
    def SetTransitionTime(*args): return _blcelc.iPcDelegateCamera_SetTransitionTime(*args)
    def GetTransitionTime(*args): return _blcelc.iPcDelegateCamera_GetTransitionTime(*args)
    def GetContinousTransitionSpeed(*args): return _blcelc.iPcDelegateCamera_GetContinousTransitionSpeed(*args)
    def SetContinousTransitionSpeed(*args): return _blcelc.iPcDelegateCamera_SetContinousTransitionSpeed(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcDelegateCamera,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcDelegateCamera_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcDelegateCamera
    __del__ = lambda self : None;
iPcDelegateCamera_swigregister = _blcelc.iPcDelegateCamera_swigregister
iPcDelegateCamera_swigregister(iPcDelegateCamera)
iPcDelegateCamera_scfGetVersion = _blcelc.iPcDelegateCamera_scfGetVersion

scfQuery_iPcDelegateCamera = _blcelc.scfQuery_iPcDelegateCamera
class iPcTrackingCamera(iPcCameraMode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def DecideState(*args): return _blcelc.iPcTrackingCamera_DecideState(*args)
    def GetPosition(*args): return _blcelc.iPcTrackingCamera_GetPosition(*args)
    def GetTarget(*args): return _blcelc.iPcTrackingCamera_GetTarget(*args)
    def GetUp(*args): return _blcelc.iPcTrackingCamera_GetUp(*args)
    def ResetCamera(*args): return _blcelc.iPcTrackingCamera_ResetCamera(*args)
    TARGET_BASE = _blcelc.iPcTrackingCamera_TARGET_BASE
    TARGET_OBJ = _blcelc.iPcTrackingCamera_TARGET_OBJ
    TARGET_NONE = _blcelc.iPcTrackingCamera_TARGET_NONE
    def SetTargetEntity(*args): return _blcelc.iPcTrackingCamera_SetTargetEntity(*args)
    def SetTargetState(*args): return _blcelc.iPcTrackingCamera_SetTargetState(*args)
    def GetTargetState(*args): return _blcelc.iPcTrackingCamera_GetTargetState(*args)
    def SetTargetYOffset(*args): return _blcelc.iPcTrackingCamera_SetTargetYOffset(*args)
    def GetTargetYOffset(*args): return _blcelc.iPcTrackingCamera_GetTargetYOffset(*args)
    def SetTargetInterpolationTime(*args): return _blcelc.iPcTrackingCamera_SetTargetInterpolationTime(*args)
    def GetTargetInterpolationTime(*args): return _blcelc.iPcTrackingCamera_GetTargetInterpolationTime(*args)
    def SetOffsetAngle(*args): return _blcelc.iPcTrackingCamera_SetOffsetAngle(*args)
    def GetOffsetAngle(*args): return _blcelc.iPcTrackingCamera_GetOffsetAngle(*args)
    def SetOffsetDistance(*args): return _blcelc.iPcTrackingCamera_SetOffsetDistance(*args)
    def GetOffsetDistance(*args): return _blcelc.iPcTrackingCamera_GetOffsetDistance(*args)
    def SetFollowSpringLength(*args): return _blcelc.iPcTrackingCamera_SetFollowSpringLength(*args)
    def GetFollowSpringLength(*args): return _blcelc.iPcTrackingCamera_GetFollowSpringLength(*args)
    def SetFollowMinimumSpringFactor(*args): return _blcelc.iPcTrackingCamera_SetFollowMinimumSpringFactor(*args)
    def GetFollowMinimumSpringFactor(*args): return _blcelc.iPcTrackingCamera_GetFollowMinimumSpringFactor(*args)
    def SetPanDirection(*args): return _blcelc.iPcTrackingCamera_SetPanDirection(*args)
    def GetPanDirection(*args): return _blcelc.iPcTrackingCamera_GetPanDirection(*args)
    def SetPanSpeed(*args): return _blcelc.iPcTrackingCamera_SetPanSpeed(*args)
    def GetPanSpeed(*args): return _blcelc.iPcTrackingCamera_GetPanSpeed(*args)
    def SetPanAcceleration(*args): return _blcelc.iPcTrackingCamera_SetPanAcceleration(*args)
    def GetPanAcceleration(*args): return _blcelc.iPcTrackingCamera_GetPanAcceleration(*args)
    def SetTiltDirection(*args): return _blcelc.iPcTrackingCamera_SetTiltDirection(*args)
    def GetTiltDirection(*args): return _blcelc.iPcTrackingCamera_GetTiltDirection(*args)
    def SetTiltSpeed(*args): return _blcelc.iPcTrackingCamera_SetTiltSpeed(*args)
    def GetTiltSpeed(*args): return _blcelc.iPcTrackingCamera_GetTiltSpeed(*args)
    def SetTiltAcceleration(*args): return _blcelc.iPcTrackingCamera_SetTiltAcceleration(*args)
    def GetTiltAcceleration(*args): return _blcelc.iPcTrackingCamera_GetTiltAcceleration(*args)
    def SetZoomOutCorrectionSpeed(*args): return _blcelc.iPcTrackingCamera_SetZoomOutCorrectionSpeed(*args)
    def GetZoomOutCorrectionSpeed(*args): return _blcelc.iPcTrackingCamera_GetZoomOutCorrectionSpeed(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcTrackingCamera,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcTrackingCamera_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcTrackingCamera
    __del__ = lambda self : None;
iPcTrackingCamera_swigregister = _blcelc.iPcTrackingCamera_swigregister
iPcTrackingCamera_swigregister(iPcTrackingCamera)
celCreateDelegateCamera = _blcelc.celCreateDelegateCamera
celGetSetDelegateCamera = _blcelc.celGetSetDelegateCamera
celGetDelegateCamera = _blcelc.celGetDelegateCamera
iPcTrackingCamera_scfGetVersion = _blcelc.iPcTrackingCamera_scfGetVersion

scfQuery_iPcTrackingCamera = _blcelc.scfQuery_iPcTrackingCamera
CEL_MOUSE_BUTTON1 = _blcelc.CEL_MOUSE_BUTTON1
CEL_MOUSE_BUTTON2 = _blcelc.CEL_MOUSE_BUTTON2
CEL_MOUSE_BUTTON3 = _blcelc.CEL_MOUSE_BUTTON3
class iPcMeshSelectListener(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def MouseDown(*args): return _blcelc.iPcMeshSelectListener_MouseDown(*args)
    def MouseUp(*args): return _blcelc.iPcMeshSelectListener_MouseUp(*args)
    def MouseMove(*args): return _blcelc.iPcMeshSelectListener_MouseMove(*args)
    __swig_destroy__ = _blcelc.delete_iPcMeshSelectListener
    __del__ = lambda self : None;
iPcMeshSelectListener_swigregister = _blcelc.iPcMeshSelectListener_swigregister
iPcMeshSelectListener_swigregister(iPcMeshSelectListener)
celCreateTrackingCamera = _blcelc.celCreateTrackingCamera
celGetSetTrackingCamera = _blcelc.celGetSetTrackingCamera
celGetTrackingCamera = _blcelc.celGetTrackingCamera

class iPcMeshSelect(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddMeshSelectListener(*args): return _blcelc.iPcMeshSelect_AddMeshSelectListener(*args)
    def RemoveMeshSelectListener(*args): return _blcelc.iPcMeshSelect_RemoveMeshSelectListener(*args)
    def SetCamera(*args): return _blcelc.iPcMeshSelect_SetCamera(*args)
    def SetMouseButtons(*args): return _blcelc.iPcMeshSelect_SetMouseButtons(*args)
    def GetMouseButtons(*args): return _blcelc.iPcMeshSelect_GetMouseButtons(*args)
    def SetGlobalSelection(*args): return _blcelc.iPcMeshSelect_SetGlobalSelection(*args)
    def HasGlobalSelection(*args): return _blcelc.iPcMeshSelect_HasGlobalSelection(*args)
    def SetFollowMode(*args): return _blcelc.iPcMeshSelect_SetFollowMode(*args)
    def HasFollowMode(*args): return _blcelc.iPcMeshSelect_HasFollowMode(*args)
    def SetFollowAlwaysMode(*args): return _blcelc.iPcMeshSelect_SetFollowAlwaysMode(*args)
    def HasFollowAlwaysMode(*args): return _blcelc.iPcMeshSelect_HasFollowAlwaysMode(*args)
    def SetDragMode(*args): return _blcelc.iPcMeshSelect_SetDragMode(*args)
    def HasDragMode(*args): return _blcelc.iPcMeshSelect_HasDragMode(*args)
    def SetDragPlaneNormal(*args): return _blcelc.iPcMeshSelect_SetDragPlaneNormal(*args)
    def GetDragPlaneNormal(*args): return _blcelc.iPcMeshSelect_GetDragPlaneNormal(*args)
    def SetSendmoveEvent(*args): return _blcelc.iPcMeshSelect_SetSendmoveEvent(*args)
    def HasSendmoveEvent(*args): return _blcelc.iPcMeshSelect_HasSendmoveEvent(*args)
    def SetSendupEvent(*args): return _blcelc.iPcMeshSelect_SetSendupEvent(*args)
    def HasSendupEvent(*args): return _blcelc.iPcMeshSelect_HasSendupEvent(*args)
    def SetSenddownEvent(*args): return _blcelc.iPcMeshSelect_SetSenddownEvent(*args)
    def HasSenddownEvent(*args): return _blcelc.iPcMeshSelect_HasSenddownEvent(*args)
    def SetMaxSelectionDistance(*args): return _blcelc.iPcMeshSelect_SetMaxSelectionDistance(*args)
    def GetMaxSelectionDistance(*args): return _blcelc.iPcMeshSelect_GetMaxSelectionDistance(*args)
    Camera = _swig_property(None, _blcelc.iPcMeshSelect_Camera_set, None,
                    "iPcMeshSelect.Camera (write only) -> iPcCamera*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcMeshSelect::SetCamera(iPcCamera*)")

    MouseButtons = _swig_property(_blcelc.iPcMeshSelect_GetMouseButtons, fix_args(_blcelc.iPcMeshSelect_SetMouseButtons), None,
                    "iPcMeshSelect.MouseButtons -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMeshSelect::GetMouseButtons()\n\tset: void iPcMeshSelect::SetMouseButtons(...)")

    GlobalSelection = _swig_property(_blcelc.iPcMeshSelect_GlobalSelection_get, _blcelc.iPcMeshSelect_GlobalSelection_set, None,
                    "iPcMeshSelect.GlobalSelection -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasGlobalSelection()\n\tset: void iPcMeshSelect::SetGlobalSelection(bool)")


    FollowMode = _swig_property(_blcelc.iPcMeshSelect_FollowMode_get, _blcelc.iPcMeshSelect_FollowMode_set, None,
                    "iPcMeshSelect.FollowMode -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasFollowMode()\n\tset: void iPcMeshSelect::SetFollowMode(bool)")


    FollowAlwaysMode = _swig_property(_blcelc.iPcMeshSelect_FollowAlwaysMode_get, _blcelc.iPcMeshSelect_FollowAlwaysMode_set, None,
                    "iPcMeshSelect.FollowAlwaysMode -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasFollowAlwaysMode()\n\tset: void iPcMeshSelect::SetFollowAlwaysMode(bool)")


    DragMode = _swig_property(_blcelc.iPcMeshSelect_DragMode_get, _blcelc.iPcMeshSelect_DragMode_set, None,
                    "iPcMeshSelect.DragMode -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasDragMode()\n\tset: void iPcMeshSelect::SetDragMode(bool)")


    SendmoveEvent = _swig_property(_blcelc.iPcMeshSelect_SendmoveEvent_get, _blcelc.iPcMeshSelect_SendmoveEvent_set, None,
                    "iPcMeshSelect.SendmoveEvent -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasSendmoveEvent()\n\tset: void iPcMeshSelect::SetSendmoveEvent(bool)")


    SendupEvent = _swig_property(_blcelc.iPcMeshSelect_SendupEvent_get, _blcelc.iPcMeshSelect_SendupEvent_set, None,
                    "iPcMeshSelect.SendupEvent -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasSendupEvent()\n\tset: void iPcMeshSelect::SetSendupEvent(bool)")


    SenddownEvent = _swig_property(_blcelc.iPcMeshSelect_SenddownEvent_get, _blcelc.iPcMeshSelect_SenddownEvent_set, None,
                    "iPcMeshSelect.SenddownEvent -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcMeshSelect::HasSenddownEvent()\n\tset: void iPcMeshSelect::SetSenddownEvent(bool)")


    MaxSelectionDistance = _swig_property(_blcelc.iPcMeshSelect_MaxSelectionDistance_get, _blcelc.iPcMeshSelect_MaxSelectionDistance_set, None,
                    "iPcMeshSelect.MaxSelectionDistance -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMeshSelect::GetMaxSelectionDistance()\n\tset: void iPcMeshSelect::SetMaxSelectionDistance(float)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMeshSelect,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMeshSelect_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMeshSelect
    __del__ = lambda self : None;
iPcMeshSelect_swigregister = _blcelc.iPcMeshSelect_swigregister
iPcMeshSelect_swigregister(iPcMeshSelect)
iPcMeshSelect_scfGetVersion = _blcelc.iPcMeshSelect_scfGetVersion

scfQuery_iPcMeshSelect = _blcelc.scfQuery_iPcMeshSelect
CEL_PCMESH_PROPERTY_MESH = _blcelc.CEL_PCMESH_PROPERTY_MESH
class iPcMesh(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetPath(*args): return _blcelc.iPcMesh_SetPath(*args)
    def SetMesh(*args): return _blcelc.iPcMesh_SetMesh(*args)
    def SetFactoryName(*args): return _blcelc.iPcMesh_SetFactoryName(*args)
    def GetFactoryName(*args): return _blcelc.iPcMesh_GetFactoryName(*args)
    def CreateEmptyThing(*args): return _blcelc.iPcMesh_CreateEmptyThing(*args)
    def CreateEmptyGenmesh(*args): return _blcelc.iPcMesh_CreateEmptyGenmesh(*args)
    def CreateNullMesh(*args): return _blcelc.iPcMesh_CreateNullMesh(*args)
    def GetMesh(*args): return _blcelc.iPcMesh_GetMesh(*args)
    def MoveMesh(*args): return _blcelc.iPcMesh_MoveMesh(*args)
    def SetAction(*args): return _blcelc.iPcMesh_SetAction(*args)
    def GetAction(*args): return _blcelc.iPcMesh_GetAction(*args)
    def SetReverseAction(*args): return _blcelc.iPcMesh_SetReverseAction(*args)
    def SetAnimation(*args): return _blcelc.iPcMesh_SetAnimation(*args)
    def Hide(*args): return _blcelc.iPcMesh_Hide(*args)
    def Show(*args): return _blcelc.iPcMesh_Show(*args)
    def IsVisible(*args): return _blcelc.iPcMesh_IsVisible(*args)
    def AttachSocketMesh(*args): return _blcelc.iPcMesh_AttachSocketMesh(*args)
    def DetachSocketMesh(*args): return _blcelc.iPcMesh_DetachSocketMesh(*args)
    Path = _swig_property(None, _blcelc.iPcMesh_Path_set, None,
                    "iPcMesh.Path (write only) -> const char*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcMesh::SetPath(const char*)")

    Mesh = _swig_property(_blcelc.iPcMesh_GetMesh, fix_args(_blcelc.iPcMesh_SetMesh), None,
                    "iPcMesh.Mesh -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMesh::GetMesh()\n\tset: void iPcMesh::SetMesh(...)")

    Action = _swig_property(_blcelc.iPcMesh_Action_get, _blcelc.iPcMesh_Action_set, None,
                    "iPcMesh.Action -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcMesh::GetAction()\n\tset: void iPcMesh::SetAction(const char*)")


    ReverseAction = _swig_property(None, _blcelc.iPcMesh_ReverseAction_set, None,
                    "iPcMesh.ReverseAction (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcMesh::SetReverseAction(bool)")

    Animation = _swig_property(None, fix_args(_blcelc.iPcMesh_SetAnimation), None,
                    "iPcMesh.Animation -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMesh::getmethod()\n\tset: void iPcMesh::SetAnimation(...)")

    Visible = _swig_property(_blcelc.iPcMesh_Visible_get, None, None,
                    "iPcMesh.Visible -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcMesh::IsVisible()")

    def LoadMesh(*args): return _blcelc.iPcMesh_LoadMesh(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMesh,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMesh_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMesh
    __del__ = lambda self : None;
iPcMesh_swigregister = _blcelc.iPcMesh_swigregister
iPcMesh_swigregister(iPcMesh)
celCreateMeshSelect = _blcelc.celCreateMeshSelect
celGetSetMeshSelect = _blcelc.celGetSetMeshSelect
celGetMeshSelect = _blcelc.celGetMeshSelect
iPcMesh_scfGetVersion = _blcelc.iPcMesh_scfGetVersion

scfQuery_iPcMesh = _blcelc.scfQuery_iPcMesh
class iPcTimer(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def WakeUp(*args): return _blcelc.iPcTimer_WakeUp(*args)
    def WakeUpFrame(*args): return _blcelc.iPcTimer_WakeUpFrame(*args)
    def Clear(*args): return _blcelc.iPcTimer_Clear(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcTimer,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcTimer_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcTimer
    __del__ = lambda self : None;
iPcTimer_swigregister = _blcelc.iPcTimer_swigregister
iPcTimer_swigregister(iPcTimer)
celCreateMesh = _blcelc.celCreateMesh
celGetSetMesh = _blcelc.celGetSetMesh
celGetMesh = _blcelc.celGetMesh
iPcTimer_scfGetVersion = _blcelc.iPcTimer_scfGetVersion

scfQuery_iPcTimer = _blcelc.scfQuery_iPcTimer
TRIGGER_NONE = _blcelc.TRIGGER_NONE
TRIGGER_SPHERE = _blcelc.TRIGGER_SPHERE
TRIGGER_BOX = _blcelc.TRIGGER_BOX
TRIGGER_ABOVE = _blcelc.TRIGGER_ABOVE
TRIGGER_BEAM = _blcelc.TRIGGER_BEAM
class iPcTriggerListener(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def EntityEnters(*args): return _blcelc.iPcTriggerListener_EntityEnters(*args)
    def EntityLeaves(*args): return _blcelc.iPcTriggerListener_EntityLeaves(*args)
    def EnterTrigger(*args): return _blcelc.iPcTriggerListener_EnterTrigger(*args)
    def LeaveTrigger(*args): return _blcelc.iPcTriggerListener_LeaveTrigger(*args)
    __swig_destroy__ = _blcelc.delete_iPcTriggerListener
    __del__ = lambda self : None;
iPcTriggerListener_swigregister = _blcelc.iPcTriggerListener_swigregister
iPcTriggerListener_swigregister(iPcTriggerListener)
celCreateTimer = _blcelc.celCreateTimer
celGetSetTimer = _blcelc.celGetSetTimer
celGetTimer = _blcelc.celGetTimer

class iPcTrigger(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddTriggerListener(*args): return _blcelc.iPcTrigger_AddTriggerListener(*args)
    def RemoveTriggerListener(*args): return _blcelc.iPcTrigger_RemoveTriggerListener(*args)
    def SetupTriggerSphere(*args): return _blcelc.iPcTrigger_SetupTriggerSphere(*args)
    def SetupTriggerBox(*args): return _blcelc.iPcTrigger_SetupTriggerBox(*args)
    def SetupTriggerBeam(*args): return _blcelc.iPcTrigger_SetupTriggerBeam(*args)
    def SetupTriggerAboveMesh(*args): return _blcelc.iPcTrigger_SetupTriggerAboveMesh(*args)
    def MonitorEntity(*args): return _blcelc.iPcTrigger_MonitorEntity(*args)
    def GetMonitorEntity(*args): return _blcelc.iPcTrigger_GetMonitorEntity(*args)
    def MonitorClass(*args): return _blcelc.iPcTrigger_MonitorClass(*args)
    def GetMonitorClass(*args): return _blcelc.iPcTrigger_GetMonitorClass(*args)
    def SetMonitorDelay(*args): return _blcelc.iPcTrigger_SetMonitorDelay(*args)
    def EnableMonitorInvisible(*args): return _blcelc.iPcTrigger_EnableMonitorInvisible(*args)
    def EnableMessagesToSelf(*args): return _blcelc.iPcTrigger_EnableMessagesToSelf(*args)
    def EnableMessagesToOthers(*args): return _blcelc.iPcTrigger_EnableMessagesToOthers(*args)
    def EnableTrigger(*args): return _blcelc.iPcTrigger_EnableTrigger(*args)
    def IsEnabled(*args): return _blcelc.iPcTrigger_IsEnabled(*args)
    def GetEntitiesInTrigger(*args): return _blcelc.iPcTrigger_GetEntitiesInTrigger(*args)
    def Check(*args): return _blcelc.iPcTrigger_Check(*args)
    def GetUpdateDelay(*args): return _blcelc.iPcTrigger_GetUpdateDelay(*args)
    def GetUpdateJitter(*args): return _blcelc.iPcTrigger_GetUpdateJitter(*args)
    def HasCheckingOnInvisibleEntities(*args): return _blcelc.iPcTrigger_HasCheckingOnInvisibleEntities(*args)
    def HasFollowEntity(*args): return _blcelc.iPcTrigger_HasFollowEntity(*args)
    def SetFollowEntity(*args): return _blcelc.iPcTrigger_SetFollowEntity(*args)
    def HasStrictChecking(*args): return _blcelc.iPcTrigger_HasStrictChecking(*args)
    def SetStrictChecking(*args): return _blcelc.iPcTrigger_SetStrictChecking(*args)
    def GetTriggerType(*args): return _blcelc.iPcTrigger_GetTriggerType(*args)
    MonitorDelay = _swig_property(None, fix_args(_blcelc.iPcTrigger_SetMonitorDelay), None,
                    "iPcTrigger.MonitorDelay -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcTrigger::getmethod()\n\tset: void iPcTrigger::SetMonitorDelay(...)")

    Enabled = _swig_property(_blcelc.iPcTrigger_Enabled_get, None, None,
                    "iPcTrigger.Enabled -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcTrigger::IsEnabled()")

    EntitiesInTrigger = _swig_property(_blcelc.iPcTrigger_EntitiesInTrigger_get, None, None,
                    "iPcTrigger.EntitiesInTrigger -> const csWeakRefArray<iCelEntity>&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csWeakRefArray<iCelEntity>& iPcTrigger::GetEntitiesInTrigger()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcTrigger,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcTrigger_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcTrigger
    __del__ = lambda self : None;
iPcTrigger_swigregister = _blcelc.iPcTrigger_swigregister
iPcTrigger_swigregister(iPcTrigger)
iPcTrigger_scfGetVersion = _blcelc.iPcTrigger_scfGetVersion

scfQuery_iPcTrigger = _blcelc.scfQuery_iPcTrigger
class iPcSteer(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Vigilant(*args): return _blcelc.iPcSteer_Vigilant(*args)
    def Seek(*args): return _blcelc.iPcSteer_Seek(*args)
    def Flee(*args): return _blcelc.iPcSteer_Flee(*args)
    def Pursue(*args): return _blcelc.iPcSteer_Pursue(*args)
    def CheckArrivalOn(*args): return _blcelc.iPcSteer_CheckArrivalOn(*args)
    def CheckArrivalOff(*args): return _blcelc.iPcSteer_CheckArrivalOff(*args)
    def CollisionAvoidanceOn(*args): return _blcelc.iPcSteer_CollisionAvoidanceOn(*args)
    def CollisionAvoidanceOff(*args): return _blcelc.iPcSteer_CollisionAvoidanceOff(*args)
    def CohesionOn(*args): return _blcelc.iPcSteer_CohesionOn(*args)
    def CohesionOff(*args): return _blcelc.iPcSteer_CohesionOff(*args)
    def SeparationOn(*args): return _blcelc.iPcSteer_SeparationOn(*args)
    def SeparationOff(*args): return _blcelc.iPcSteer_SeparationOff(*args)
    def DirectionMatchingOn(*args): return _blcelc.iPcSteer_DirectionMatchingOn(*args)
    def DirectionMatchingOff(*args): return _blcelc.iPcSteer_DirectionMatchingOff(*args)
    def Interrupt(*args): return _blcelc.iPcSteer_Interrupt(*args)
    def GetSector(*args): return _blcelc.iPcSteer_GetSector(*args)
    def GetPosition(*args): return _blcelc.iPcSteer_GetPosition(*args)
    def RandomBinomial(*args): return _blcelc.iPcSteer_RandomBinomial(*args)
    def SetDelayRecheck(*args): return _blcelc.iPcSteer_SetDelayRecheck(*args)
    def IsMoving(*args): return _blcelc.iPcSteer_IsMoving(*args)
    Sector = _swig_property(_blcelc.iPcSteer_Sector_get, None, None,
                    "iPcSteer.Sector -> iSector*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iSector* iPcSteer::GetSector()")

    Position = _swig_property(_blcelc.iPcSteer_Position_get, None, None,
                    "iPcSteer.Position -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcSteer::GetPosition()")

    DelayRecheck = _swig_property(None, _blcelc.iPcSteer_DelayRecheck_set, None,
                    "iPcSteer.DelayRecheck (write only) -> int\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcSteer::SetDelayRecheck(int)")

    Moving = _swig_property(_blcelc.iPcSteer_Moving_get, None, None,
                    "iPcSteer.Moving -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcSteer::IsMoving()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcSteer,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcSteer_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcSteer
    __del__ = lambda self : None;
iPcSteer_swigregister = _blcelc.iPcSteer_swigregister
iPcSteer_swigregister(iPcSteer)
celCreateTrigger = _blcelc.celCreateTrigger
celGetSetTrigger = _blcelc.celGetSetTrigger
celGetTrigger = _blcelc.celGetTrigger
iPcSteer_scfGetVersion = _blcelc.iPcSteer_scfGetVersion

scfQuery_iPcSteer = _blcelc.scfQuery_iPcSteer
class iPcPathFinder(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Seek(*args): return _blcelc.iPcPathFinder_Seek(*args)
    def Wander(*args): return _blcelc.iPcPathFinder_Wander(*args)
    def Pursue(*args): return _blcelc.iPcPathFinder_Pursue(*args)
    def FollowCyclicPath(*args): return _blcelc.iPcPathFinder_FollowCyclicPath(*args)
    def FollowOneWayPath(*args): return _blcelc.iPcPathFinder_FollowOneWayPath(*args)
    def FollowTwoWayPath(*args): return _blcelc.iPcPathFinder_FollowTwoWayPath(*args)
    def Interrupt(*args): return _blcelc.iPcPathFinder_Interrupt(*args)
    def SetDelayRecheck(*args): return _blcelc.iPcPathFinder_SetDelayRecheck(*args)
    def SetMinDistance(*args): return _blcelc.iPcPathFinder_SetMinDistance(*args)
    def GetPosition(*args): return _blcelc.iPcPathFinder_GetPosition(*args)
    def StopTracking(*args): return _blcelc.iPcPathFinder_StopTracking(*args)
    def IsActive(*args): return _blcelc.iPcPathFinder_IsActive(*args)
    def SetGraph(*args): return _blcelc.iPcPathFinder_SetGraph(*args)
    DelayRecheck = _swig_property(None, _blcelc.iPcPathFinder_DelayRecheck_set, None,
                    "iPcPathFinder.DelayRecheck (write only) -> int\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcPathFinder::SetDelayRecheck(int)")

    MinDistance = _swig_property(None, _blcelc.iPcPathFinder_MinDistance_set, None,
                    "iPcPathFinder.MinDistance (write only) -> int\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcPathFinder::SetMinDistance(int)")

    Position = _swig_property(_blcelc.iPcPathFinder_Position_get, None, None,
                    "iPcPathFinder.Position -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcPathFinder::GetPosition()")

    Active = _swig_property(_blcelc.iPcPathFinder_Active_get, None, None,
                    "iPcPathFinder.Active -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcPathFinder::IsActive()")

    Graph = _swig_property(None, _blcelc.iPcPathFinder_Graph_set, None,
                    "iPcPathFinder.Graph (write only) -> iCelGraph*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcPathFinder::SetGraph(iCelGraph*)")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcPathFinder,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcPathFinder_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcPathFinder
    __del__ = lambda self : None;
iPcPathFinder_swigregister = _blcelc.iPcPathFinder_swigregister
iPcPathFinder_swigregister(iPcPathFinder)
celCreateSteer = _blcelc.celCreateSteer
celGetSetSteer = _blcelc.celGetSetSteer
celGetSteer = _blcelc.celGetSteer
iPcPathFinder_scfGetVersion = _blcelc.iPcPathFinder_scfGetVersion

scfQuery_iPcPathFinder = _blcelc.scfQuery_iPcPathFinder
class iPcSpawn(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetEnabled(*args): return _blcelc.iPcSpawn_SetEnabled(*args)
    def IsEnabled(*args): return _blcelc.iPcSpawn_IsEnabled(*args)
    def AddEntityType(*args): return _blcelc.iPcSpawn_AddEntityType(*args)
    def AddEntityTemplateType(*args): return _blcelc.iPcSpawn_AddEntityTemplateType(*args)
    def ClearEntityList(*args): return _blcelc.iPcSpawn_ClearEntityList(*args)
    def SetTiming(*args): return _blcelc.iPcSpawn_SetTiming(*args)
    def ResetTiming(*args): return _blcelc.iPcSpawn_ResetTiming(*args)
    def SetEntityNameCounter(*args): return _blcelc.iPcSpawn_SetEntityNameCounter(*args)
    def IsEntityNameCounterCounter(*args): return _blcelc.iPcSpawn_IsEntityNameCounterCounter(*args)
    def EnableSpawnUnique(*args): return _blcelc.iPcSpawn_EnableSpawnUnique(*args)
    def IsSpawnUniqueEnabled(*args): return _blcelc.iPcSpawn_IsSpawnUniqueEnabled(*args)
    def InhibitCount(*args): return _blcelc.iPcSpawn_InhibitCount(*args)
    def Spawn(*args): return _blcelc.iPcSpawn_Spawn(*args)
    def AddSpawnPosition(*args): return _blcelc.iPcSpawn_AddSpawnPosition(*args)
    Enabled = _swig_property(_blcelc.iPcSpawn_Enabled_get, _blcelc.iPcSpawn_Enabled_set, None,
                    "iPcSpawn.Enabled -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcSpawn::IsEnabled()\n\tset: void iPcSpawn::SetEnabled(bool)")


    Timing = _swig_property(None, fix_args(_blcelc.iPcSpawn_SetTiming), None,
                    "iPcSpawn.Timing -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcSpawn::getmethod()\n\tset: void iPcSpawn::SetTiming(...)")

    EntityNameCounter = _swig_property(None, _blcelc.iPcSpawn_EntityNameCounter_set, None,
                    "iPcSpawn.EntityNameCounter (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcSpawn::SetEntityNameCounter(bool)")

    EntityNameCounterCounter = _swig_property(_blcelc.iPcSpawn_EntityNameCounterCounter_get, None, None,
                    "iPcSpawn.EntityNameCounterCounter -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcSpawn::IsEntityNameCounterCounter()")

    SpawnUniqueEnabled = _swig_property(_blcelc.iPcSpawn_SpawnUniqueEnabled_get, None, None,
                    "iPcSpawn.SpawnUniqueEnabled -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcSpawn::IsSpawnUniqueEnabled()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcSpawn,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcSpawn_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcSpawn
    __del__ = lambda self : None;
iPcSpawn_swigregister = _blcelc.iPcSpawn_swigregister
iPcSpawn_swigregister(iPcSpawn)
celCreatePathFinder = _blcelc.celCreatePathFinder
celGetSetPathFinder = _blcelc.celGetSetPathFinder
celGetPathFinder = _blcelc.celGetPathFinder
iPcSpawn_scfGetVersion = _blcelc.iPcSpawn_scfGetVersion

scfQuery_iPcSpawn = _blcelc.scfQuery_iPcSpawn
class iPcProjectile(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Start(*args): return _blcelc.iPcProjectile_Start(*args)
    def Interrupt(*args): return _blcelc.iPcProjectile_Interrupt(*args)
    def IsMoving(*args): return _blcelc.iPcProjectile_IsMoving(*args)
    Moving = _swig_property(_blcelc.iPcProjectile_Moving_get, None, None,
                    "iPcProjectile.Moving -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcProjectile::IsMoving()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcProjectile,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcProjectile_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcProjectile
    __del__ = lambda self : None;
iPcProjectile_swigregister = _blcelc.iPcProjectile_swigregister
iPcProjectile_swigregister(iPcProjectile)
celCreateSpawn = _blcelc.celCreateSpawn
celGetSetSpawn = _blcelc.celGetSetSpawn
celGetSpawn = _blcelc.celGetSpawn
iPcProjectile_scfGetVersion = _blcelc.iPcProjectile_scfGetVersion

scfQuery_iPcProjectile = _blcelc.scfQuery_iPcProjectile
class iPcSolid(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMesh(*args): return _blcelc.iPcSolid_SetMesh(*args)
    def GetMesh(*args): return _blcelc.iPcSolid_GetMesh(*args)
    def GetCollider(*args): return _blcelc.iPcSolid_GetCollider(*args)
    def Setup(*args): return _blcelc.iPcSolid_Setup(*args)
    def SetupBox(*args): return _blcelc.iPcSolid_SetupBox(*args)
    Mesh = _swig_property(_blcelc.iPcSolid_Mesh_get, _blcelc.iPcSolid_Mesh_set, None,
                    "iPcSolid.Mesh -> iPcMesh*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMesh* iPcSolid::GetMesh()\n\tset: void iPcSolid::SetMesh(iPcMesh*)")


    Collider = _swig_property(_blcelc.iPcSolid_Collider_get, None, None,
                    "iPcSolid.Collider -> iCollider*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iCollider* iPcSolid::GetCollider()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcSolid,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcSolid_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcSolid
    __del__ = lambda self : None;
iPcSolid_swigregister = _blcelc.iPcSolid_swigregister
iPcSolid_swigregister(iPcSolid)
celCreateProjectile = _blcelc.celCreateProjectile
celGetSetProjectile = _blcelc.celGetSetProjectile
celGetProjectile = _blcelc.celGetProjectile
iPcSolid_scfGetVersion = _blcelc.iPcSolid_scfGetVersion

scfQuery_iPcSolid = _blcelc.scfQuery_iPcSolid
class iPcGravity(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CreateGravityColliderFromMesh(*args): return _blcelc.iPcGravity_CreateGravityColliderFromMesh(*args)
    def GetGravityCollider(*args): return _blcelc.iPcGravity_GetGravityCollider(*args)
    def SetMovable(*args): return _blcelc.iPcGravity_SetMovable(*args)
    def GetMovable(*args): return _blcelc.iPcGravity_GetMovable(*args)
    def SetSolid(*args): return _blcelc.iPcGravity_SetSolid(*args)
    def GetSolid(*args): return _blcelc.iPcGravity_GetSolid(*args)
    def SetWeight(*args): return _blcelc.iPcGravity_SetWeight(*args)
    def GetWeight(*args): return _blcelc.iPcGravity_GetWeight(*args)
    def ClearForces(*args): return _blcelc.iPcGravity_ClearForces(*args)
    def ClearPermanentForces(*args): return _blcelc.iPcGravity_ClearPermanentForces(*args)
    def ResetSpeed(*args): return _blcelc.iPcGravity_ResetSpeed(*args)
    def ApplyForce(*args): return _blcelc.iPcGravity_ApplyForce(*args)
    def ApplyPermanentForce(*args): return _blcelc.iPcGravity_ApplyPermanentForce(*args)
    def IsResting(*args): return _blcelc.iPcGravity_IsResting(*args)
    def SetActive(*args): return _blcelc.iPcGravity_SetActive(*args)
    def IsActive(*args): return _blcelc.iPcGravity_IsActive(*args)
    GravityCollider = _swig_property(_blcelc.iPcGravity_GravityCollider_get, None, None,
                    "iPcGravity.GravityCollider -> iCollider*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iCollider* iPcGravity::GetGravityCollider()")

    Movable = _swig_property(_blcelc.iPcGravity_Movable_get, _blcelc.iPcGravity_Movable_set, None,
                    "iPcGravity.Movable -> iPcMovable*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMovable* iPcGravity::GetMovable()\n\tset: void iPcGravity::SetMovable(iPcMovable*)")


    Solid = _swig_property(_blcelc.iPcGravity_Solid_get, _blcelc.iPcGravity_Solid_set, None,
                    "iPcGravity.Solid -> iPcSolid*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcSolid* iPcGravity::GetSolid()\n\tset: void iPcGravity::SetSolid(iPcSolid*)")


    Weight = _swig_property(_blcelc.iPcGravity_Weight_get, _blcelc.iPcGravity_Weight_set, None,
                    "iPcGravity.Weight -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcGravity::GetWeight()\n\tset: void iPcGravity::SetWeight(float)")


    Resting = _swig_property(_blcelc.iPcGravity_Resting_get, None, None,
                    "iPcGravity.Resting -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcGravity::IsResting()")

    Active = _swig_property(_blcelc.iPcGravity_Active_get, _blcelc.iPcGravity_Active_set, None,
                    "iPcGravity.Active -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcGravity::IsActive()\n\tset: void iPcGravity::SetActive(bool)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcGravity,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcGravity_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcGravity
    __del__ = lambda self : None;
iPcGravity_swigregister = _blcelc.iPcGravity_swigregister
iPcGravity_swigregister(iPcGravity)
celCreateSolid = _blcelc.celCreateSolid
celGetSetSolid = _blcelc.celGetSetSolid
celGetSolid = _blcelc.celGetSolid
iPcGravity_scfGetVersion = _blcelc.iPcGravity_scfGetVersion

scfQuery_iPcGravity = _blcelc.scfQuery_iPcGravity
CEL_PCMOVABLE_PROPERTY_POSITION = _blcelc.CEL_PCMOVABLE_PROPERTY_POSITION
CEL_MOVE_FAIL = _blcelc.CEL_MOVE_FAIL
CEL_MOVE_SUCCEED = _blcelc.CEL_MOVE_SUCCEED
CEL_MOVE_PARTIAL = _blcelc.CEL_MOVE_PARTIAL
class iPcMovable(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMesh(*args): return _blcelc.iPcMovable_SetMesh(*args)
    def GetMesh(*args): return _blcelc.iPcMovable_GetMesh(*args)
    def SetPos(*args): return _blcelc.iPcMovable_SetPos(*args)
    def AddConstraint(*args): return _blcelc.iPcMovable_AddConstraint(*args)
    def RemoveConstraint(*args): return _blcelc.iPcMovable_RemoveConstraint(*args)
    def RemoveAllConstraints(*args): return _blcelc.iPcMovable_RemoveAllConstraints(*args)
    Mesh = _swig_property(_blcelc.iPcMovable_Mesh_get, _blcelc.iPcMovable_Mesh_set, None,
                    "iPcMovable.Mesh -> iPcMesh*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcMesh* iPcMovable::GetMesh()\n\tset: void iPcMovable::SetMesh(iPcMesh*)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMovable,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMovable_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMovable
    __del__ = lambda self : None;
iPcMovable_swigregister = _blcelc.iPcMovable_swigregister
iPcMovable_swigregister(iPcMovable)
celCreateGravity = _blcelc.celCreateGravity
celGetSetGravity = _blcelc.celGetSetGravity
celGetGravity = _blcelc.celGetGravity
iPcMovable_scfGetVersion = _blcelc.iPcMovable_scfGetVersion

class iPcMovableConstraint(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def CheckMove(*args): return _blcelc.iPcMovableConstraint_CheckMove(*args)
    __swig_destroy__ = _blcelc.delete_iPcMovableConstraint
    __del__ = lambda self : None;
iPcMovableConstraint_swigregister = _blcelc.iPcMovableConstraint_swigregister
iPcMovableConstraint_swigregister(iPcMovableConstraint)

scfQuery_iPcMovable = _blcelc.scfQuery_iPcMovable
class iPcInventoryListener(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddChild(*args): return _blcelc.iPcInventoryListener_AddChild(*args)
    def RemoveChild(*args): return _blcelc.iPcInventoryListener_RemoveChild(*args)
    def AddChildTemplate(*args): return _blcelc.iPcInventoryListener_AddChildTemplate(*args)
    def RemoveChildTemplate(*args): return _blcelc.iPcInventoryListener_RemoveChildTemplate(*args)
    __swig_destroy__ = _blcelc.delete_iPcInventoryListener
    __del__ = lambda self : None;
iPcInventoryListener_swigregister = _blcelc.iPcInventoryListener_swigregister
iPcInventoryListener_swigregister(iPcInventoryListener)
celCreateMovable = _blcelc.celCreateMovable
celGetSetMovable = _blcelc.celGetSetMovable
celGetMovable = _blcelc.celGetMovable

class iCelInventorySpaceSlot(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetEntity(*args): return _blcelc.iCelInventorySpaceSlot_GetEntity(*args)
    def AddEntity(*args): return _blcelc.iCelInventorySpaceSlot_AddEntity(*args)
    def RemoveEntity(*args): return _blcelc.iCelInventorySpaceSlot_RemoveEntity(*args)
    def GetCount(*args): return _blcelc.iCelInventorySpaceSlot_GetCount(*args)
    def RemoveAll(*args): return _blcelc.iCelInventorySpaceSlot_RemoveAll(*args)
    def IsEmpty(*args): return _blcelc.iCelInventorySpaceSlot_IsEmpty(*args)
    Count = _swig_property(_blcelc.iCelInventorySpaceSlot_Count_get, None, None,
                    "iCelInventorySpaceSlot.Count -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iCelInventorySpaceSlot::GetCount()")

    Empty = _swig_property(_blcelc.iCelInventorySpaceSlot_Empty_get, None, None,
                    "iCelInventorySpaceSlot.Empty -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iCelInventorySpaceSlot::IsEmpty()")

    __swig_destroy__ = _blcelc.delete_iCelInventorySpaceSlot
    __del__ = lambda self : None;
iCelInventorySpaceSlot_swigregister = _blcelc.iCelInventorySpaceSlot_swigregister
iCelInventorySpaceSlot_swigregister(iCelInventorySpaceSlot)

class iCelInventorySpace(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSpaceTotal(*args): return _blcelc.iCelInventorySpace_GetSpaceTotal(*args)
    def GetSpaceLeft(*args): return _blcelc.iCelInventorySpace_GetSpaceLeft(*args)
    def GetSpaceTaken(*args): return _blcelc.iCelInventorySpace_GetSpaceTaken(*args)
    def AddEntity(*args): return _blcelc.iCelInventorySpace_AddEntity(*args)
    def RemoveEntity(*args): return _blcelc.iCelInventorySpace_RemoveEntity(*args)
    def RemoveAll(*args): return _blcelc.iCelInventorySpace_RemoveAll(*args)
    def GetSlot(*args): return _blcelc.iCelInventorySpace_GetSlot(*args)
    def GetEntity(*args): return _blcelc.iCelInventorySpace_GetEntity(*args)
    SpaceTotal = _swig_property(_blcelc.iCelInventorySpace_SpaceTotal_get, None, None,
                    "iCelInventorySpace.SpaceTotal -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iCelInventorySpace::GetSpaceTotal()")

    SpaceLeft = _swig_property(_blcelc.iCelInventorySpace_SpaceLeft_get, None, None,
                    "iCelInventorySpace.SpaceLeft -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iCelInventorySpace::GetSpaceLeft()")

    SpaceTaken = _swig_property(_blcelc.iCelInventorySpace_SpaceTaken_get, None, None,
                    "iCelInventorySpace.SpaceTaken -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iCelInventorySpace::GetSpaceTaken()")

    __swig_destroy__ = _blcelc.delete_iCelInventorySpace
    __del__ = lambda self : None;
iCelInventorySpace_swigregister = _blcelc.iCelInventorySpace_swigregister
iCelInventorySpace_swigregister(iCelInventorySpace)

class iPcInventory(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddInventoryListener(*args): return _blcelc.iPcInventory_AddInventoryListener(*args)
    def RemoveInventoryListener(*args): return _blcelc.iPcInventory_RemoveInventoryListener(*args)
    def AddEntity(*args): return _blcelc.iPcInventory_AddEntity(*args)
    def RemoveEntity(*args): return _blcelc.iPcInventory_RemoveEntity(*args)
    def AddEntityTemplate(*args): return _blcelc.iPcInventory_AddEntityTemplate(*args)
    def RemoveEntityTemplate(*args): return _blcelc.iPcInventory_RemoveEntityTemplate(*args)
    def RemoveAll(*args): return _blcelc.iPcInventory_RemoveAll(*args)
    def GetEntityCount(*args): return _blcelc.iPcInventory_GetEntityCount(*args)
    def GetEntity(*args): return _blcelc.iPcInventory_GetEntity(*args)
    def FindEntity(*args): return _blcelc.iPcInventory_FindEntity(*args)
    def GetEntityTemplateCount(*args): return _blcelc.iPcInventory_GetEntityTemplateCount(*args)
    def GetEntityTemplate(*args): return _blcelc.iPcInventory_GetEntityTemplate(*args)
    def GetEntityTemplateAmount(*args): return _blcelc.iPcInventory_GetEntityTemplateAmount(*args)
    def In(*args): return _blcelc.iPcInventory_In(*args)
    def FindEntityTemplate(*args): return _blcelc.iPcInventory_FindEntityTemplate(*args)
    def GetEntitySlot(*args): return _blcelc.iPcInventory_GetEntitySlot(*args)
    def SetStrictCharacteristics(*args): return _blcelc.iPcInventory_SetStrictCharacteristics(*args)
    def HasStrictCharacteristics(*args): return _blcelc.iPcInventory_HasStrictCharacteristics(*args)
    def SetConstraints(*args): return _blcelc.iPcInventory_SetConstraints(*args)
    def GetConstraints(*args): return _blcelc.iPcInventory_GetConstraints(*args)
    def RemoveConstraints(*args): return _blcelc.iPcInventory_RemoveConstraints(*args)
    def RemoveAllConstraints(*args): return _blcelc.iPcInventory_RemoveAllConstraints(*args)
    def GetCurrentCharacteristic(*args): return _blcelc.iPcInventory_GetCurrentCharacteristic(*args)
    def MarkDirty(*args): return _blcelc.iPcInventory_MarkDirty(*args)
    def TestConstraints(*args): return _blcelc.iPcInventory_TestConstraints(*args)
    def Dump(*args): return _blcelc.iPcInventory_Dump(*args)
    def SetSpace(*args): return _blcelc.iPcInventory_SetSpace(*args)
    def GetSpace(*args): return _blcelc.iPcInventory_GetSpace(*args)
    def AddAllowedClass(*args): return _blcelc.iPcInventory_AddAllowedClass(*args)
    def ClearAllowedClasses(*args): return _blcelc.iPcInventory_ClearAllowedClasses(*args)
    def IsClassAllowed(*args): return _blcelc.iPcInventory_IsClassAllowed(*args)
    def SetLootGenerator(*args): return _blcelc.iPcInventory_SetLootGenerator(*args)
    def GetLootGenerator(*args): return _blcelc.iPcInventory_GetLootGenerator(*args)
    def GenerateLoot(*args): return _blcelc.iPcInventory_GenerateLoot(*args)
    EntityCount = _swig_property(_blcelc.iPcInventory_EntityCount_get, None, None,
                    "iPcInventory.EntityCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iPcInventory::GetEntityCount()")

    Space = _swig_property(_blcelc.iPcInventory_Space_get, _blcelc.iPcInventory_Space_set, None,
                    "iPcInventory.Space -> iCelInventorySpace*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelInventorySpace* iPcInventory::GetSpace()\n\tset: void iPcInventory::SetSpace(iCelInventorySpace*)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcInventory,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcInventory_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcInventory
    __del__ = lambda self : None;
    def GetEntities(self): return iCelEntityInvFakeArray(self)
    Entities = _swig_property(GetEntities) 
iPcInventory_swigregister = _blcelc.iPcInventory_swigregister
iPcInventory_swigregister(iPcInventory)
iPcInventory_scfGetVersion = _blcelc.iPcInventory_scfGetVersion

scfQuery_iPcInventory = _blcelc.scfQuery_iPcInventory
class iCelEntityInvFakeArray(object):
	def __init__(self,parent): self.parent = parent
	def __contains__(self,obj):
		if self.parent.In(obj): return True
		else: return False
	def __repr__(self): return "List of "+str("iCelEntity")
	def __len__(self): return self.parent.GetEntityCount()
	def __delitem__(self,val):
		if type(val) == type(""):
			obj = self.parent.In(val)
			if obj: return self.parent.RemoveEntity(obj)
			else: raise IndexError(val+" not in list")
		else: return self.parent.RemoveEntity(val)
	def __noappend__(self,obj):
		print "Append not supported by this list"
	def content_iterator(self):
		for idx in xrange(len(self)):
			yield self.parent.GetEntity(idx)
	def __iter__(self): return self.content_iterator()
	def __getitem__(self,val):
		if type(val) == type(""): return self.parent.In(val)
		else: return self.parent.GetEntity(val)
	def append(self,obj): return self.parent.AddEntity(obj)

class iPcCharacteristics(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetCharacteristic(*args): return _blcelc.iPcCharacteristics_SetCharacteristic(*args)
    def SetInheritedCharacteristic(*args): return _blcelc.iPcCharacteristics_SetInheritedCharacteristic(*args)
    def GetCharacteristic(*args): return _blcelc.iPcCharacteristics_GetCharacteristic(*args)
    def GetLocalCharacteristic(*args): return _blcelc.iPcCharacteristics_GetLocalCharacteristic(*args)
    def GetInheritedCharacteristic(*args): return _blcelc.iPcCharacteristics_GetInheritedCharacteristic(*args)
    def ClearCharacteristic(*args): return _blcelc.iPcCharacteristics_ClearCharacteristic(*args)
    def HasCharacteristic(*args): return _blcelc.iPcCharacteristics_HasCharacteristic(*args)
    def ClearAll(*args): return _blcelc.iPcCharacteristics_ClearAll(*args)
    def AddToInventory(*args): return _blcelc.iPcCharacteristics_AddToInventory(*args)
    def RemoveFromInventory(*args): return _blcelc.iPcCharacteristics_RemoveFromInventory(*args)
    def MarkDirty(*args): return _blcelc.iPcCharacteristics_MarkDirty(*args)
    def TestConstraints(*args): return _blcelc.iPcCharacteristics_TestConstraints(*args)
    def Dump(*args): return _blcelc.iPcCharacteristics_Dump(*args)
    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcCharacteristics,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcCharacteristics_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcCharacteristics
    __del__ = lambda self : None;
iPcCharacteristics_swigregister = _blcelc.iPcCharacteristics_swigregister
iPcCharacteristics_swigregister(iPcCharacteristics)
celCreateInventory = _blcelc.celCreateInventory
celGetSetInventory = _blcelc.celGetSetInventory
celGetInventory = _blcelc.celGetInventory
iPcCharacteristics_scfGetVersion = _blcelc.iPcCharacteristics_scfGetVersion

class iTemplateCharacteristics(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetCharacteristic(*args): return _blcelc.iTemplateCharacteristics_SetCharacteristic(*args)
    def GetCharacteristic(*args): return _blcelc.iTemplateCharacteristics_GetCharacteristic(*args)
    def ClearCharacteristic(*args): return _blcelc.iTemplateCharacteristics_ClearCharacteristic(*args)
    def HasCharacteristic(*args): return _blcelc.iTemplateCharacteristics_HasCharacteristic(*args)
    def ClearAll(*args): return _blcelc.iTemplateCharacteristics_ClearAll(*args)
    __swig_destroy__ = _blcelc.delete_iTemplateCharacteristics
    __del__ = lambda self : None;
iTemplateCharacteristics_swigregister = _blcelc.iTemplateCharacteristics_swigregister
iTemplateCharacteristics_swigregister(iTemplateCharacteristics)

scfQuery_iPcCharacteristics = _blcelc.scfQuery_iPcCharacteristics
CEL_TOOLTIP_LEFT = _blcelc.CEL_TOOLTIP_LEFT
CEL_TOOLTIP_CENTER = _blcelc.CEL_TOOLTIP_CENTER
CEL_TOOLTIP_RIGHT = _blcelc.CEL_TOOLTIP_RIGHT
class iPcTooltip(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetText(*args): return _blcelc.iPcTooltip_SetText(*args)
    def Show(*args): return _blcelc.iPcTooltip_Show(*args)
    def Hide(*args): return _blcelc.iPcTooltip_Hide(*args)
    def IsVisible(*args): return _blcelc.iPcTooltip_IsVisible(*args)
    def SetTextColor(*args): return _blcelc.iPcTooltip_SetTextColor(*args)
    def SetBackgroundColor(*args): return _blcelc.iPcTooltip_SetBackgroundColor(*args)
    def SetFont(*args): return _blcelc.iPcTooltip_SetFont(*args)
    def SetJustify(*args): return _blcelc.iPcTooltip_SetJustify(*args)
    Text = _swig_property(None, _blcelc.iPcTooltip_Text_set, None,
                    "iPcTooltip.Text (write only) -> const char*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcTooltip::SetText(const char*)")

    Visible = _swig_property(_blcelc.iPcTooltip_Visible_get, None, None,
                    "iPcTooltip.Visible -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcTooltip::IsVisible()")

    TextColor = _swig_property(None, fix_args(_blcelc.iPcTooltip_SetTextColor), None,
                    "iPcTooltip.TextColor -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcTooltip::getmethod()\n\tset: void iPcTooltip::SetTextColor(...)")

    BackgroundColor = _swig_property(None, fix_args(_blcelc.iPcTooltip_SetBackgroundColor), None,
                    "iPcTooltip.BackgroundColor -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcTooltip::getmethod()\n\tset: void iPcTooltip::SetBackgroundColor(...)")

    Font = _swig_property(None, _blcelc.iPcTooltip_Font_set, None,
                    "iPcTooltip.Font (write only) -> iFont*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcTooltip::SetFont(iFont*)")

    Justify = _swig_property(None, _blcelc.iPcTooltip_Justify_set, None,
                    "iPcTooltip.Justify (write only) -> celTooltipJustify\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcTooltip::SetJustify(celTooltipJustify)")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcTooltip,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcTooltip_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcTooltip
    __del__ = lambda self : None;
iPcTooltip_swigregister = _blcelc.iPcTooltip_swigregister
iPcTooltip_swigregister(iPcTooltip)
celCreateCharacteristics = _blcelc.celCreateCharacteristics
celGetSetCharacteristics = _blcelc.celGetSetCharacteristics
celGetCharacteristics = _blcelc.celGetCharacteristics
iPcTooltip_scfGetVersion = _blcelc.iPcTooltip_scfGetVersion

scfQuery_iPcTooltip = _blcelc.scfQuery_iPcTooltip
class iPcSoundListener(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSoundListener(*args): return _blcelc.iPcSoundListener_GetSoundListener(*args)
    SoundListener = _swig_property(_blcelc.iPcSoundListener_SoundListener_get, None, None,
                    "iPcSoundListener.SoundListener -> iSndSysListener*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iSndSysListener* iPcSoundListener::GetSoundListener()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcSoundListener,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcSoundListener_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcSoundListener
    __del__ = lambda self : None;
iPcSoundListener_swigregister = _blcelc.iPcSoundListener_swigregister
iPcSoundListener_swigregister(iPcSoundListener)
celCreateToolTip = _blcelc.celCreateToolTip
celGetSetToolTip = _blcelc.celGetSetToolTip
celGetToolTip = _blcelc.celGetToolTip
iPcSoundListener_scfGetVersion = _blcelc.iPcSoundListener_scfGetVersion

class iPcSoundSource(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetSoundSource(*args): return _blcelc.iPcSoundSource_GetSoundSource(*args)
    def SetSoundName(*args): return _blcelc.iPcSoundSource_SetSoundName(*args)
    def GetSoundName(*args): return _blcelc.iPcSoundSource_GetSoundName(*args)
    def SetMode(*args): return _blcelc.iPcSoundSource_SetMode(*args)
    def GetMode(*args): return _blcelc.iPcSoundSource_GetMode(*args)
    def Play(*args): return _blcelc.iPcSoundSource_Play(*args)
    def Stop(*args): return _blcelc.iPcSoundSource_Stop(*args)
    def Pause(*args): return _blcelc.iPcSoundSource_Pause(*args)
    def Unpause(*args): return _blcelc.iPcSoundSource_Unpause(*args)
    SoundSource = _swig_property(_blcelc.iPcSoundSource_SoundSource_get, None, None,
                    "iPcSoundSource.SoundSource -> iSndSysSource*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iSndSysSource* iPcSoundSource::GetSoundSource()")

    SoundName = _swig_property(_blcelc.iPcSoundSource_SoundName_get, _blcelc.iPcSoundSource_SoundName_set, None,
                    "iPcSoundSource.SoundName -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcSoundSource::GetSoundName()\n\tset: void iPcSoundSource::SetSoundName(const char*)")


    Mode = _swig_property(_blcelc.iPcSoundSource_Mode_get, _blcelc.iPcSoundSource_Mode_set, None,
                    "iPcSoundSource.Mode -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcSoundSource::GetMode()\n\tset: void iPcSoundSource::SetMode(const char*)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcSoundSource,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcSoundSource_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcSoundSource
    __del__ = lambda self : None;
iPcSoundSource_swigregister = _blcelc.iPcSoundSource_swigregister
iPcSoundSource_swigregister(iPcSoundSource)
iPcSoundSource_scfGetVersion = _blcelc.iPcSoundSource_scfGetVersion

scfQuery_iPcSoundSource = _blcelc.scfQuery_iPcSoundSource
scfQuery_iPcSoundListener = _blcelc.scfQuery_iPcSoundListener
class iPcPropertyListener(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def PropertyChanged(*args): return _blcelc.iPcPropertyListener_PropertyChanged(*args)
    __swig_destroy__ = _blcelc.delete_iPcPropertyListener
    __del__ = lambda self : None;
iPcPropertyListener_swigregister = _blcelc.iPcPropertyListener_swigregister
iPcPropertyListener_swigregister(iPcPropertyListener)
celCreateSoundSource = _blcelc.celCreateSoundSource
celGetSetSoundSource = _blcelc.celGetSetSoundSource
celGetSoundSource = _blcelc.celGetSoundSource
celCreateSoundListener = _blcelc.celCreateSoundListener
celGetSetSoundListener = _blcelc.celGetSetSoundListener
celGetSoundListener = _blcelc.celGetSoundListener

class iPcProperties(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def AddPropertyListener(*args): return _blcelc.iPcProperties_AddPropertyListener(*args)
    def RemovePropertyListener(*args): return _blcelc.iPcProperties_RemovePropertyListener(*args)
    def SetProperty(*args): return _blcelc.iPcProperties_SetProperty(*args)
    def GetPropertyIndex(*args): return _blcelc.iPcProperties_GetPropertyIndex(*args)
    def SetPropertyIndex(*args): return _blcelc.iPcProperties_SetPropertyIndex(*args)
    def GetPropertyType(*args): return _blcelc.iPcProperties_GetPropertyType(*args)
    def GetPropertyFloat(*args): return _blcelc.iPcProperties_GetPropertyFloat(*args)
    def GetPropertyLong(*args): return _blcelc.iPcProperties_GetPropertyLong(*args)
    def GetPropertyBool(*args): return _blcelc.iPcProperties_GetPropertyBool(*args)
    def GetPropertyVector(*args): return _blcelc.iPcProperties_GetPropertyVector(*args)
    def GetPropertyColor(*args): return _blcelc.iPcProperties_GetPropertyColor(*args)
    def GetPropertyString(*args): return _blcelc.iPcProperties_GetPropertyString(*args)
    def GetPropertyPClass(*args): return _blcelc.iPcProperties_GetPropertyPClass(*args)
    def GetPropertyEntity(*args): return _blcelc.iPcProperties_GetPropertyEntity(*args)
    def GetPropertyIBase(*args): return _blcelc.iPcProperties_GetPropertyIBase(*args)
    def ClearProperty(*args): return _blcelc.iPcProperties_ClearProperty(*args)
    def Clear(*args): return _blcelc.iPcProperties_Clear(*args)
    def GetPropertyCount(*args): return _blcelc.iPcProperties_GetPropertyCount(*args)
    def GetPropertyName(*args): return _blcelc.iPcProperties_GetPropertyName(*args)
    def Dump(*args): return _blcelc.iPcProperties_Dump(*args)
    Property = _swig_property(None, fix_args(_blcelc.iPcProperties_SetProperty), None,
                    "iPcProperties.Property -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcProperties::getmethod()\n\tset: void iPcProperties::SetProperty(...)")

    PropertyIndex = _swig_property(_blcelc.iPcProperties_GetPropertyIndex, fix_args(_blcelc.iPcProperties_SetPropertyIndex), None,
                    "iPcProperties.PropertyIndex -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcProperties::GetPropertyIndex()\n\tset: void iPcProperties::SetPropertyIndex(...)")

    PropertyCount = _swig_property(_blcelc.iPcProperties_PropertyCount_get, None, None,
                    "iPcProperties.PropertyCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iPcProperties::GetPropertyCount()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcProperties,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcProperties_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcProperties
    __del__ = lambda self : None;
    def GetPropertyValueIndex(*args): return _blcelc.iPcProperties_GetPropertyValueIndex(*args)
    def __len__(*args): return _blcelc.iPcProperties___len__(*args)
    def clear(*args): return _blcelc.iPcProperties_clear(*args)
    def __contains__(*args): return _blcelc.iPcProperties___contains__(*args)
    def __delitem__(self,item):
        if isinstance(item,str):
          item = self.GetPropertyIndex(item)
          if item == cspace.csArrayItemNotFound:
            return
        self.ClearProperty(item)
    def __setitem__(self,item,value): 
        if isinstance(item,str):
          return self.SetProperty(item,value) 
        return self.SetPropertyIndex(item,value)
    def __getitem__(self,item):
        if isinstance(item,str):
            item = self.GetPropertyIndex(item)
            if item == cspace.csArrayItemNotFound:
              return None
        return self.GetPropertyValueIndex(item)

iPcProperties_swigregister = _blcelc.iPcProperties_swigregister
iPcProperties_swigregister(iPcProperties)
iPcProperties_scfGetVersion = _blcelc.iPcProperties_scfGetVersion

scfQuery_iPcProperties = _blcelc.scfQuery_iPcProperties
class iPcMover(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def Start(*args): return _blcelc.iPcMover_Start(*args)
    def MoveTo(*args): return _blcelc.iPcMover_MoveTo(*args)
    def Interrupt(*args): return _blcelc.iPcMover_Interrupt(*args)
    def GetSector(*args): return _blcelc.iPcMover_GetSector(*args)
    def GetPosition(*args): return _blcelc.iPcMover_GetPosition(*args)
    def GetUp(*args): return _blcelc.iPcMover_GetUp(*args)
    def GetSqRadius(*args): return _blcelc.iPcMover_GetSqRadius(*args)
    def IsMoving(*args): return _blcelc.iPcMover_IsMoving(*args)
    def IsSmoothMovement(*args): return _blcelc.iPcMover_IsSmoothMovement(*args)
    def SetSmoothMovement(*args): return _blcelc.iPcMover_SetSmoothMovement(*args)
    Sector = _swig_property(_blcelc.iPcMover_Sector_get, None, None,
                    "iPcMover.Sector -> iSector*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iSector* iPcMover::GetSector()")

    Position = _swig_property(_blcelc.iPcMover_Position_get, None, None,
                    "iPcMover.Position -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcMover::GetPosition()")

    Up = _swig_property(_blcelc.iPcMover_Up_get, None, None,
                    "iPcMover.Up -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcMover::GetUp()")

    SqRadius = _swig_property(_blcelc.iPcMover_SqRadius_get, None, None,
                    "iPcMover.SqRadius -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcMover::GetSqRadius()")

    Moving = _swig_property(_blcelc.iPcMover_Moving_get, None, None,
                    "iPcMover.Moving -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcMover::IsMoving()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMover,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMover_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMover
    __del__ = lambda self : None;
iPcMover_swigregister = _blcelc.iPcMover_swigregister
iPcMover_swigregister(iPcMover)
celCreateProperties = _blcelc.celCreateProperties
celGetSetProperties = _blcelc.celGetSetProperties
celGetProperties = _blcelc.celGetProperties
iPcMover_scfGetVersion = _blcelc.iPcMover_scfGetVersion

scfQuery_iPcMover = _blcelc.scfQuery_iPcMover
class iPcHover(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetHeightBeamCutoff(*args): return _blcelc.iPcHover_SetHeightBeamCutoff(*args)
    def SetAngularBeamOffset(*args): return _blcelc.iPcHover_SetAngularBeamOffset(*args)
    def SetAngularCutoffHeight(*args): return _blcelc.iPcHover_SetAngularCutoffHeight(*args)
    def SetAngularCorrectionStrength(*args): return _blcelc.iPcHover_SetAngularCorrectionStrength(*args)
    def SetFactors(*args): return _blcelc.iPcHover_SetFactors(*args)
    def SetHoverHeight(*args): return _blcelc.iPcHover_SetHoverHeight(*args)
    def HoverOn(*args): return _blcelc.iPcHover_HoverOn(*args)
    def HoverOff(*args): return _blcelc.iPcHover_HoverOff(*args)
    def GetHeight(*args): return _blcelc.iPcHover_GetHeight(*args)
    HeightBeamCutoff = _swig_property(None, _blcelc.iPcHover_HeightBeamCutoff_set, None,
                    "iPcHover.HeightBeamCutoff (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcHover::SetHeightBeamCutoff(float)")

    AngularBeamOffset = _swig_property(None, _blcelc.iPcHover_AngularBeamOffset_set, None,
                    "iPcHover.AngularBeamOffset (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcHover::SetAngularBeamOffset(float)")

    AngularCutoffHeight = _swig_property(None, _blcelc.iPcHover_AngularCutoffHeight_set, None,
                    "iPcHover.AngularCutoffHeight (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcHover::SetAngularCutoffHeight(float)")

    AngularCorrectionStrength = _swig_property(None, _blcelc.iPcHover_AngularCorrectionStrength_set, None,
                    "iPcHover.AngularCorrectionStrength (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcHover::SetAngularCorrectionStrength(float)")

    Factors = _swig_property(None, fix_args(_blcelc.iPcHover_SetFactors), None,
                    "iPcHover.Factors -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcHover::getmethod()\n\tset: void iPcHover::SetFactors(...)")

    HoverHeight = _swig_property(None, _blcelc.iPcHover_HoverHeight_set, None,
                    "iPcHover.HoverHeight (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcHover::SetHoverHeight(float)")

    Height = _swig_property(_blcelc.iPcHover_Height_get, None, None,
                    "iPcHover.Height -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcHover::GetHeight()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcHover,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcHover_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcHover
    __del__ = lambda self : None;
iPcHover_swigregister = _blcelc.iPcHover_swigregister
iPcHover_swigregister(iPcHover)
celCreateMover = _blcelc.celCreateMover
celGetSetMover = _blcelc.celGetSetMover
celGetMover = _blcelc.celGetMover
iPcHover_scfGetVersion = _blcelc.iPcHover_scfGetVersion

scfQuery_iPcHover = _blcelc.scfQuery_iPcHover
class iPcCraftController(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def StartTurnLeft(*args): return _blcelc.iPcCraftController_StartTurnLeft(*args)
    def StopTurnLeft(*args): return _blcelc.iPcCraftController_StopTurnLeft(*args)
    def StartTurnRight(*args): return _blcelc.iPcCraftController_StartTurnRight(*args)
    def StopTurnRight(*args): return _blcelc.iPcCraftController_StopTurnRight(*args)
    def StartTurnUp(*args): return _blcelc.iPcCraftController_StartTurnUp(*args)
    def StopTurnUp(*args): return _blcelc.iPcCraftController_StopTurnUp(*args)
    def StartTurnDown(*args): return _blcelc.iPcCraftController_StartTurnDown(*args)
    def StopTurnDown(*args): return _blcelc.iPcCraftController_StopTurnDown(*args)
    def SetAccTurn(*args): return _blcelc.iPcCraftController_SetAccTurn(*args)
    def SetAccPitch(*args): return _blcelc.iPcCraftController_SetAccPitch(*args)
    def SetMaxTurn(*args): return _blcelc.iPcCraftController_SetMaxTurn(*args)
    def SetMaxPitch(*args): return _blcelc.iPcCraftController_SetMaxPitch(*args)
    def SetRoll(*args): return _blcelc.iPcCraftController_SetRoll(*args)
    def SetThrustForce(*args): return _blcelc.iPcCraftController_SetThrustForce(*args)
    def SetTopSpeed(*args): return _blcelc.iPcCraftController_SetTopSpeed(*args)
    def SetRedirectVelocityRatio(*args): return _blcelc.iPcCraftController_SetRedirectVelocityRatio(*args)
    def SetDecelerationRate(*args): return _blcelc.iPcCraftController_SetDecelerationRate(*args)
    def SetBrakingSpeed(*args): return _blcelc.iPcCraftController_SetBrakingSpeed(*args)
    def ThrustOn(*args): return _blcelc.iPcCraftController_ThrustOn(*args)
    def ThrustOff(*args): return _blcelc.iPcCraftController_ThrustOff(*args)
    def IsThrusterOn(*args): return _blcelc.iPcCraftController_IsThrusterOn(*args)
    def SetAfterBurnerTopSpeed(*args): return _blcelc.iPcCraftController_SetAfterBurnerTopSpeed(*args)
    def AfterBurnerOn(*args): return _blcelc.iPcCraftController_AfterBurnerOn(*args)
    def AfterBurnerOff(*args): return _blcelc.iPcCraftController_AfterBurnerOff(*args)
    def BrakesOn(*args): return _blcelc.iPcCraftController_BrakesOn(*args)
    def BrakesOff(*args): return _blcelc.iPcCraftController_BrakesOff(*args)
    def SlideOn(*args): return _blcelc.iPcCraftController_SlideOn(*args)
    def SlideOff(*args): return _blcelc.iPcCraftController_SlideOff(*args)
    AccTurn = _swig_property(None, _blcelc.iPcCraftController_AccTurn_set, None,
                    "iPcCraftController.AccTurn (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetAccTurn(float)")

    AccPitch = _swig_property(None, _blcelc.iPcCraftController_AccPitch_set, None,
                    "iPcCraftController.AccPitch (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetAccPitch(float)")

    MaxTurn = _swig_property(None, _blcelc.iPcCraftController_MaxTurn_set, None,
                    "iPcCraftController.MaxTurn (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetMaxTurn(float)")

    MaxPitch = _swig_property(None, _blcelc.iPcCraftController_MaxPitch_set, None,
                    "iPcCraftController.MaxPitch (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetMaxPitch(float)")

    Roll = _swig_property(None, _blcelc.iPcCraftController_Roll_set, None,
                    "iPcCraftController.Roll (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetRoll(float)")

    ThrustForce = _swig_property(None, _blcelc.iPcCraftController_ThrustForce_set, None,
                    "iPcCraftController.ThrustForce (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetThrustForce(float)")

    TopSpeed = _swig_property(None, _blcelc.iPcCraftController_TopSpeed_set, None,
                    "iPcCraftController.TopSpeed (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetTopSpeed(float)")

    RedirectVelocityRatio = _swig_property(None, _blcelc.iPcCraftController_RedirectVelocityRatio_set, None,
                    "iPcCraftController.RedirectVelocityRatio (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetRedirectVelocityRatio(float)")

    DecelerationRate = _swig_property(None, _blcelc.iPcCraftController_DecelerationRate_set, None,
                    "iPcCraftController.DecelerationRate (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetDecelerationRate(float)")

    BrakingSpeed = _swig_property(None, _blcelc.iPcCraftController_BrakingSpeed_set, None,
                    "iPcCraftController.BrakingSpeed (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetBrakingSpeed(float)")

    ThrusterOn = _swig_property(_blcelc.iPcCraftController_ThrusterOn_get, None, None,
                    "iPcCraftController.ThrusterOn -> bool  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: bool iPcCraftController::IsThrusterOn()")

    AfterBurnerTopSpeed = _swig_property(None, _blcelc.iPcCraftController_AfterBurnerTopSpeed_set, None,
                    "iPcCraftController.AfterBurnerTopSpeed (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcCraftController::SetAfterBurnerTopSpeed(float)")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcCraftController,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcCraftController_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcCraftController
    __del__ = lambda self : None;
iPcCraftController_swigregister = _blcelc.iPcCraftController_swigregister
iPcCraftController_swigregister(iPcCraftController)
celCreateHover = _blcelc.celCreateHover
celGetSetHover = _blcelc.celGetSetHover
celGetHover = _blcelc.celGetHover
iPcCraftController_scfGetVersion = _blcelc.iPcCraftController_scfGetVersion

scfQuery_iPcCraftController = _blcelc.scfQuery_iPcCraftController
class iPcWheeled(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetWheelMesh(*args): return _blcelc.iPcWheeled_SetWheelMesh(*args)
    def SetTankMode(*args): return _blcelc.iPcWheeled_SetTankMode(*args)
    def GetTankMode(*args): return _blcelc.iPcWheeled_GetTankMode(*args)
    def SetABSEnabled(*args): return _blcelc.iPcWheeled_SetABSEnabled(*args)
    def GetABSEnabled(*args): return _blcelc.iPcWheeled_GetABSEnabled(*args)
    def SetDifferential(*args): return _blcelc.iPcWheeled_SetDifferential(*args)
    def SetAntiSway(*args): return _blcelc.iPcWheeled_SetAntiSway(*args)
    def SetAntiSwayFactor(*args): return _blcelc.iPcWheeled_SetAntiSwayFactor(*args)
    def SetAntiSwayLimit(*args): return _blcelc.iPcWheeled_SetAntiSwayLimit(*args)
    def GetDifferential(*args): return _blcelc.iPcWheeled_GetDifferential(*args)
    def GetAntiSway(*args): return _blcelc.iPcWheeled_GetAntiSway(*args)
    def GetAntiSwayFactor(*args): return _blcelc.iPcWheeled_GetAntiSwayFactor(*args)
    def GetAntiSwayLimit(*args): return _blcelc.iPcWheeled_GetAntiSwayLimit(*args)
    def SetABS(*args): return _blcelc.iPcWheeled_SetABS(*args)
    def GetABS(*args): return _blcelc.iPcWheeled_GetABS(*args)
    def AddWheelAuto(*args): return _blcelc.iPcWheeled_AddWheelAuto(*args)
    def AddWheel(*args): return _blcelc.iPcWheeled_AddWheel(*args)
    def DeleteWheel(*args): return _blcelc.iPcWheeled_DeleteWheel(*args)
    def DeleteAllWheels(*args): return _blcelc.iPcWheeled_DeleteAllWheels(*args)
    def DestroyWheel(*args): return _blcelc.iPcWheeled_DestroyWheel(*args)
    def DestroyAllWheels(*args): return _blcelc.iPcWheeled_DestroyAllWheels(*args)
    def RestoreWheel(*args): return _blcelc.iPcWheeled_RestoreWheel(*args)
    def RestoreAllWheels(*args): return _blcelc.iPcWheeled_RestoreAllWheels(*args)
    def SetOuterWheelSteerPreset(*args): return _blcelc.iPcWheeled_SetOuterWheelSteerPreset(*args)
    def SetFrontWheelPreset(*args): return _blcelc.iPcWheeled_SetFrontWheelPreset(*args)
    def SetRearWheelPreset(*args): return _blcelc.iPcWheeled_SetRearWheelPreset(*args)
    def Accelerate(*args): return _blcelc.iPcWheeled_Accelerate(*args)
    def GetAcceleratorAmount(*args): return _blcelc.iPcWheeled_GetAcceleratorAmount(*args)
    def Brake(*args): return _blcelc.iPcWheeled_Brake(*args)
    def GetBrakeAmount(*args): return _blcelc.iPcWheeled_GetBrakeAmount(*args)
    def Handbrake(*args): return _blcelc.iPcWheeled_Handbrake(*args)
    def IsHandbraking(*args): return _blcelc.iPcWheeled_IsHandbraking(*args)
    def SetSteerAmount(*args): return _blcelc.iPcWheeled_SetSteerAmount(*args)
    def SetBrakeForce(*args): return _blcelc.iPcWheeled_SetBrakeForce(*args)
    def GetSteerAmount(*args): return _blcelc.iPcWheeled_GetSteerAmount(*args)
    def GetSpeed(*args): return _blcelc.iPcWheeled_GetSpeed(*args)
    def SteerLeft(*args): return _blcelc.iPcWheeled_SteerLeft(*args)
    def SteerRight(*args): return _blcelc.iPcWheeled_SteerRight(*args)
    def Steer(*args): return _blcelc.iPcWheeled_Steer(*args)
    def SteerStraight(*args): return _blcelc.iPcWheeled_SteerStraight(*args)
    def Reverse(*args): return _blcelc.iPcWheeled_Reverse(*args)
    def Neutral(*args): return _blcelc.iPcWheeled_Neutral(*args)
    def SetAutoTransmission(*args): return _blcelc.iPcWheeled_SetAutoTransmission(*args)
    def SetGear(*args): return _blcelc.iPcWheeled_SetGear(*args)
    def GetGear(*args): return _blcelc.iPcWheeled_GetGear(*args)
    def SetGearSettings(*args): return _blcelc.iPcWheeled_SetGearSettings(*args)
    def GetGearVelocity(*args): return _blcelc.iPcWheeled_GetGearVelocity(*args)
    def GetGearForce(*args): return _blcelc.iPcWheeled_GetGearForce(*args)
    def GetTopGear(*args): return _blcelc.iPcWheeled_GetTopGear(*args)
    def SetAutoReverse(*args): return _blcelc.iPcWheeled_SetAutoReverse(*args)
    def GetBodyGroup(*args): return _blcelc.iPcWheeled_GetBodyGroup(*args)
    def SetWheelPosition(*args): return _blcelc.iPcWheeled_SetWheelPosition(*args)
    def SetWheelRotation(*args): return _blcelc.iPcWheeled_SetWheelRotation(*args)
    def SetWheelSuspensionSoftness(*args): return _blcelc.iPcWheeled_SetWheelSuspensionSoftness(*args)
    def SetWheelSuspensionDamping(*args): return _blcelc.iPcWheeled_SetWheelSuspensionDamping(*args)
    def SetWheelLeftSteerSensitivity(*args): return _blcelc.iPcWheeled_SetWheelLeftSteerSensitivity(*args)
    def SetWheelRightSteerSensitivity(*args): return _blcelc.iPcWheeled_SetWheelRightSteerSensitivity(*args)
    def SetWheelFriction(*args): return _blcelc.iPcWheeled_SetWheelFriction(*args)
    def SetWheelMass(*args): return _blcelc.iPcWheeled_SetWheelMass(*args)
    def SetWheelTurnSpeed(*args): return _blcelc.iPcWheeled_SetWheelTurnSpeed(*args)
    def SetWheelReturnSpeed(*args): return _blcelc.iPcWheeled_SetWheelReturnSpeed(*args)
    def SetWheelEnginePower(*args): return _blcelc.iPcWheeled_SetWheelEnginePower(*args)
    def SetWheelBrakePower(*args): return _blcelc.iPcWheeled_SetWheelBrakePower(*args)
    def SetWheelSteerInverted(*args): return _blcelc.iPcWheeled_SetWheelSteerInverted(*args)
    def SetWheelHandbrakeAffected(*args): return _blcelc.iPcWheeled_SetWheelHandbrakeAffected(*args)
    def GetWheelPosition(*args): return _blcelc.iPcWheeled_GetWheelPosition(*args)
    def GetWheelRotation(*args): return _blcelc.iPcWheeled_GetWheelRotation(*args)
    def GetWheelSuspensionSoftness(*args): return _blcelc.iPcWheeled_GetWheelSuspensionSoftness(*args)
    def GetWheelSuspensionDamping(*args): return _blcelc.iPcWheeled_GetWheelSuspensionDamping(*args)
    def GetWheelLeftSteerSensitivity(*args): return _blcelc.iPcWheeled_GetWheelLeftSteerSensitivity(*args)
    def GetWheelRightSteerSensitivity(*args): return _blcelc.iPcWheeled_GetWheelRightSteerSensitivity(*args)
    def GetWheelFriction(*args): return _blcelc.iPcWheeled_GetWheelFriction(*args)
    def GetWheelMass(*args): return _blcelc.iPcWheeled_GetWheelMass(*args)
    def GetWheelTurnSpeed(*args): return _blcelc.iPcWheeled_GetWheelTurnSpeed(*args)
    def GetWheelReturnSpeed(*args): return _blcelc.iPcWheeled_GetWheelReturnSpeed(*args)
    def GetWheelEnginePower(*args): return _blcelc.iPcWheeled_GetWheelEnginePower(*args)
    def GetWheelBrakePower(*args): return _blcelc.iPcWheeled_GetWheelBrakePower(*args)
    def GetWheelSteerInverted(*args): return _blcelc.iPcWheeled_GetWheelSteerInverted(*args)
    def GetWheelHandbrakeAffected(*args): return _blcelc.iPcWheeled_GetWheelHandbrakeAffected(*args)
    def GetWheelCount(*args): return _blcelc.iPcWheeled_GetWheelCount(*args)
    def GetWheelSpin(*args): return _blcelc.iPcWheeled_GetWheelSpin(*args)
    def GetAverageWheelSpin(*args): return _blcelc.iPcWheeled_GetAverageWheelSpin(*args)
    def GetWheelBody(*args): return _blcelc.iPcWheeled_GetWheelBody(*args)
    def GetWheelJoint(*args): return _blcelc.iPcWheeled_GetWheelJoint(*args)
    def GetBrakeMotor(*args): return _blcelc.iPcWheeled_GetBrakeMotor(*args)
    def SetCollisionCallbackEnabled(*args): return _blcelc.iPcWheeled_SetCollisionCallbackEnabled(*args)
    def IsCollisionCallbackEnabled(*args): return _blcelc.iPcWheeled_IsCollisionCallbackEnabled(*args)
    WheelMesh = _swig_property(None, fix_args(_blcelc.iPcWheeled_SetWheelMesh), None,
                    "iPcWheeled.WheelMesh -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcWheeled::getmethod()\n\tset: void iPcWheeled::SetWheelMesh(...)")

    TankMode = _swig_property(_blcelc.iPcWheeled_TankMode_get, _blcelc.iPcWheeled_TankMode_set, None,
                    "iPcWheeled.TankMode -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::GetTankMode()\n\tset: void iPcWheeled::SetTankMode(bool)")


    ABSEnabled = _swig_property(_blcelc.iPcWheeled_ABSEnabled_get, _blcelc.iPcWheeled_ABSEnabled_set, None,
                    "iPcWheeled.ABSEnabled -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::GetABSEnabled()\n\tset: void iPcWheeled::SetABSEnabled(bool)")


    Differential = _swig_property(_blcelc.iPcWheeled_Differential_get, _blcelc.iPcWheeled_Differential_set, None,
                    "iPcWheeled.Differential -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::GetDifferential()\n\tset: void iPcWheeled::SetDifferential(bool)")


    AntiSway = _swig_property(_blcelc.iPcWheeled_AntiSway_get, _blcelc.iPcWheeled_AntiSway_set, None,
                    "iPcWheeled.AntiSway -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::GetAntiSway()\n\tset: void iPcWheeled::SetAntiSway(bool)")


    AntiSwayFactor = _swig_property(_blcelc.iPcWheeled_AntiSwayFactor_get, _blcelc.iPcWheeled_AntiSwayFactor_set, None,
                    "iPcWheeled.AntiSwayFactor -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcWheeled::GetAntiSwayFactor()\n\tset: void iPcWheeled::SetAntiSwayFactor(float)")


    AntiSwayLimit = _swig_property(_blcelc.iPcWheeled_AntiSwayLimit_get, _blcelc.iPcWheeled_AntiSwayLimit_set, None,
                    "iPcWheeled.AntiSwayLimit -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcWheeled::GetAntiSwayLimit()\n\tset: void iPcWheeled::SetAntiSwayLimit(float)")


    ABS = _swig_property(_blcelc.iPcWheeled_ABS_get, _blcelc.iPcWheeled_ABS_set, None,
                    "iPcWheeled.ABS -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::GetABS()\n\tset: void iPcWheeled::SetABS(bool)")


    OuterWheelSteerPreset = _swig_property(None, _blcelc.iPcWheeled_OuterWheelSteerPreset_set, None,
                    "iPcWheeled.OuterWheelSteerPreset (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcWheeled::SetOuterWheelSteerPreset(float)")

    FrontWheelPreset = _swig_property(None, fix_args(_blcelc.iPcWheeled_SetFrontWheelPreset), None,
                    "iPcWheeled.FrontWheelPreset -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcWheeled::getmethod()\n\tset: void iPcWheeled::SetFrontWheelPreset(...)")

    RearWheelPreset = _swig_property(None, fix_args(_blcelc.iPcWheeled_SetRearWheelPreset), None,
                    "iPcWheeled.RearWheelPreset -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcWheeled::getmethod()\n\tset: void iPcWheeled::SetRearWheelPreset(...)")

    AcceleratorAmount = _swig_property(_blcelc.iPcWheeled_AcceleratorAmount_get, None, None,
                    "iPcWheeled.AcceleratorAmount -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcWheeled::GetAcceleratorAmount()")

    BrakeAmount = _swig_property(_blcelc.iPcWheeled_BrakeAmount_get, None, None,
                    "iPcWheeled.BrakeAmount -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcWheeled::GetBrakeAmount()")

    Handbraking = _swig_property(_blcelc.iPcWheeled_Handbraking_get, _blcelc.iPcWheeled_Handbraking_set, None,
                    "iPcWheeled.Handbraking -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::IsHandbraking()\n\tset: void iPcWheeled::Handbrake(bool)")


    SteerAmount = _swig_property(_blcelc.iPcWheeled_SteerAmount_get, _blcelc.iPcWheeled_SteerAmount_set, None,
                    "iPcWheeled.SteerAmount -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcWheeled::GetSteerAmount()\n\tset: void iPcWheeled::SetSteerAmount(float)")


    BrakeForce = _swig_property(None, _blcelc.iPcWheeled_BrakeForce_set, None,
                    "iPcWheeled.BrakeForce (write only) -> float\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcWheeled::SetBrakeForce(float)")

    Speed = _swig_property(_blcelc.iPcWheeled_Speed_get, None, None,
                    "iPcWheeled.Speed -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcWheeled::GetSpeed()")

    AutoTransmission = _swig_property(None, _blcelc.iPcWheeled_AutoTransmission_set, None,
                    "iPcWheeled.AutoTransmission (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcWheeled::SetAutoTransmission(bool)")

    Gear = _swig_property(_blcelc.iPcWheeled_GetGear, fix_args(_blcelc.iPcWheeled_SetGear), None,
                    "iPcWheeled.Gear -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcWheeled::GetGear()\n\tset: void iPcWheeled::SetGear(...)")

    TopGear = _swig_property(_blcelc.iPcWheeled_TopGear_get, None, None,
                    "iPcWheeled.TopGear -> int  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: int iPcWheeled::GetTopGear()")

    AutoReverse = _swig_property(None, _blcelc.iPcWheeled_AutoReverse_set, None,
                    "iPcWheeled.AutoReverse (write only) -> bool\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iPcWheeled::SetAutoReverse(bool)")

    BodyGroup = _swig_property(_blcelc.iPcWheeled_BodyGroup_get, None, None,
                    "iPcWheeled.BodyGroup -> iBodyGroup*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iBodyGroup* iPcWheeled::GetBodyGroup()")

    WheelCount = _swig_property(_blcelc.iPcWheeled_WheelCount_get, None, None,
                    "iPcWheeled.WheelCount -> size_t  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: size_t iPcWheeled::GetWheelCount()")

    AverageWheelSpin = _swig_property(_blcelc.iPcWheeled_AverageWheelSpin_get, None, None,
                    "iPcWheeled.AverageWheelSpin -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iPcWheeled::GetAverageWheelSpin()")

    CollisionCallbackEnabled = _swig_property(_blcelc.iPcWheeled_CollisionCallbackEnabled_get, _blcelc.iPcWheeled_CollisionCallbackEnabled_set, None,
                    "iPcWheeled.CollisionCallbackEnabled -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iPcWheeled::IsCollisionCallbackEnabled()\n\tset: void iPcWheeled::SetCollisionCallbackEnabled(bool)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcWheeled,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcWheeled_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcWheeled
    __del__ = lambda self : None;
iPcWheeled_swigregister = _blcelc.iPcWheeled_swigregister
iPcWheeled_swigregister(iPcWheeled)
celCreateCraftController = _blcelc.celCreateCraftController
celGetSetCraftController = _blcelc.celGetSetCraftController
celGetCraftController = _blcelc.celGetCraftController
iPcWheeled_scfGetVersion = _blcelc.iPcWheeled_scfGetVersion

scfQuery_iPcWheeled = _blcelc.scfQuery_iPcWheeled
class iPcMeshDeform(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMesh(*args): return _blcelc.iPcMeshDeform_SetMesh(*args)
    def GetMesh(*args): return _blcelc.iPcMeshDeform_GetMesh(*args)
    def DeformMesh(*args): return _blcelc.iPcMeshDeform_DeformMesh(*args)
    def ResetDeform(*args): return _blcelc.iPcMeshDeform_ResetDeform(*args)
    def SetDeformFactor(*args): return _blcelc.iPcMeshDeform_SetDeformFactor(*args)
    def SetNoise(*args): return _blcelc.iPcMeshDeform_SetNoise(*args)
    def SetMaxFrequency(*args): return _blcelc.iPcMeshDeform_SetMaxFrequency(*args)
    def SetMaxDeform(*args): return _blcelc.iPcMeshDeform_SetMaxDeform(*args)
    def SetRadius(*args): return _blcelc.iPcMeshDeform_SetRadius(*args)
    def GetDeformFactor(*args): return _blcelc.iPcMeshDeform_GetDeformFactor(*args)
    def GetNoise(*args): return _blcelc.iPcMeshDeform_GetNoise(*args)
    def GetMaxFrequency(*args): return _blcelc.iPcMeshDeform_GetMaxFrequency(*args)
    def GetMaxDeform(*args): return _blcelc.iPcMeshDeform_GetMaxDeform(*args)
    def GetRadius(*args): return _blcelc.iPcMeshDeform_GetRadius(*args)
    Mesh = _swig_property(_blcelc.iPcMeshDeform_Mesh_get, _blcelc.iPcMeshDeform_Mesh_set, None,
                    "iPcMeshDeform.Mesh -> iMeshWrapper*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iMeshWrapper* iPcMeshDeform::GetMesh()\n\tset: void iPcMeshDeform::SetMesh(iMeshWrapper*)")


    DeformFactor = _swig_property(_blcelc.iPcMeshDeform_DeformFactor_get, _blcelc.iPcMeshDeform_DeformFactor_set, None,
                    "iPcMeshDeform.DeformFactor -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMeshDeform::GetDeformFactor()\n\tset: void iPcMeshDeform::SetDeformFactor(float)")


    Noise = _swig_property(_blcelc.iPcMeshDeform_Noise_get, _blcelc.iPcMeshDeform_Noise_set, None,
                    "iPcMeshDeform.Noise -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMeshDeform::GetNoise()\n\tset: void iPcMeshDeform::SetNoise(float)")


    MaxFrequency = _swig_property(_blcelc.iPcMeshDeform_MaxFrequency_get, _blcelc.iPcMeshDeform_MaxFrequency_set, None,
                    "iPcMeshDeform.MaxFrequency -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMeshDeform::GetMaxFrequency()\n\tset: void iPcMeshDeform::SetMaxFrequency(float)")


    MaxDeform = _swig_property(_blcelc.iPcMeshDeform_MaxDeform_get, _blcelc.iPcMeshDeform_MaxDeform_set, None,
                    "iPcMeshDeform.MaxDeform -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMeshDeform::GetMaxDeform()\n\tset: void iPcMeshDeform::SetMaxDeform(float)")


    Radius = _swig_property(_blcelc.iPcMeshDeform_Radius_get, _blcelc.iPcMeshDeform_Radius_set, None,
                    "iPcMeshDeform.Radius -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcMeshDeform::GetRadius()\n\tset: void iPcMeshDeform::SetRadius(float)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcMeshDeform,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcMeshDeform_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcMeshDeform
    __del__ = lambda self : None;
iPcMeshDeform_swigregister = _blcelc.iPcMeshDeform_swigregister
iPcMeshDeform_swigregister(iPcMeshDeform)
celCreateWheeled = _blcelc.celCreateWheeled
celGetSetWheeled = _blcelc.celGetSetWheeled
celGetWheeled = _blcelc.celGetWheeled
iPcMeshDeform_scfGetVersion = _blcelc.iPcMeshDeform_scfGetVersion

scfQuery_iPcMeshDeform = _blcelc.scfQuery_iPcMeshDeform
class iPcDamage(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetDamage(*args): return _blcelc.iPcDamage_SetDamage(*args)
    def GetDamage(*args): return _blcelc.iPcDamage_GetDamage(*args)
    def SetDamageType(*args): return _blcelc.iPcDamage_SetDamageType(*args)
    def GetDamageType(*args): return _blcelc.iPcDamage_GetDamageType(*args)
    def SetFallOff(*args): return _blcelc.iPcDamage_SetFallOff(*args)
    def GetFallOff(*args): return _blcelc.iPcDamage_GetFallOff(*args)
    def SetDamageLocation(*args): return _blcelc.iPcDamage_SetDamageLocation(*args)
    def GetDamageSector(*args): return _blcelc.iPcDamage_GetDamageSector(*args)
    def GetDamagePosition(*args): return _blcelc.iPcDamage_GetDamagePosition(*args)
    def SetDamageSource(*args): return _blcelc.iPcDamage_SetDamageSource(*args)
    def GetDamageSource(*args): return _blcelc.iPcDamage_GetDamageSource(*args)
    def AreaDamage(*args): return _blcelc.iPcDamage_AreaDamage(*args)
    def BeamDamage(*args): return _blcelc.iPcDamage_BeamDamage(*args)
    def SingleDamage(*args): return _blcelc.iPcDamage_SingleDamage(*args)
    Damage = _swig_property(_blcelc.iPcDamage_Damage_get, _blcelc.iPcDamage_Damage_set, None,
                    "iPcDamage.Damage -> float\n\nThis is equivalent to calling the C++ cs methods:\n\tget: float iPcDamage::GetDamage()\n\tset: void iPcDamage::SetDamage(float)")


    DamageType = _swig_property(_blcelc.iPcDamage_DamageType_get, _blcelc.iPcDamage_DamageType_set, None,
                    "iPcDamage.DamageType -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcDamage::GetDamageType()\n\tset: void iPcDamage::SetDamageType(const char*)")


    FallOff = _swig_property(_blcelc.iPcDamage_FallOff_get, _blcelc.iPcDamage_FallOff_set, None,
                    "iPcDamage.FallOff -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcDamage::GetFallOff()\n\tset: void iPcDamage::SetFallOff(const char*)")


    DamageLocation = _swig_property(None, fix_args(_blcelc.iPcDamage_SetDamageLocation), None,
                    "iPcDamage.DamageLocation -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iPcDamage::getmethod()\n\tset: void iPcDamage::SetDamageLocation(...)")

    DamageSector = _swig_property(_blcelc.iPcDamage_DamageSector_get, None, None,
                    "iPcDamage.DamageSector -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iPcDamage::GetDamageSector()")

    DamagePosition = _swig_property(_blcelc.iPcDamage_DamagePosition_get, None, None,
                    "iPcDamage.DamagePosition -> const csVector3&  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const csVector3& iPcDamage::GetDamagePosition()")

    DamageSource = _swig_property(_blcelc.iPcDamage_DamageSource_get, _blcelc.iPcDamage_DamageSource_set, None,
                    "iPcDamage.DamageSource -> const char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: const char* iPcDamage::GetDamageSource()\n\tset: void iPcDamage::SetDamageSource(const char*)")


    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcDamage,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcDamage_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcDamage
    __del__ = lambda self : None;
iPcDamage_swigregister = _blcelc.iPcDamage_swigregister
iPcDamage_swigregister(iPcDamage)
celCreateMeshDeform = _blcelc.celCreateMeshDeform
celGetSetMeshDeform = _blcelc.celGetSetMeshDeform
celGetMeshDeform = _blcelc.celGetMeshDeform
iPcDamage_scfGetVersion = _blcelc.iPcDamage_scfGetVersion

scfQuery_iPcDamage = _blcelc.scfQuery_iPcDamage
class iQuest(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SwitchState(*args): return _blcelc.iQuest_SwitchState(*args)
    def GetCurrentState(*args): return _blcelc.iQuest_GetCurrentState(*args)
    def FindSequence(*args): return _blcelc.iQuest_FindSequence(*args)
    def Activate(*args): return _blcelc.iQuest_Activate(*args)
    def Deactivate(*args): return _blcelc.iQuest_Deactivate(*args)
    CurrentState = _swig_property(_blcelc.iQuest_CurrentState_get, None, None,
                    "iQuest.CurrentState -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iQuest::GetCurrentState()")

    __swig_destroy__ = _blcelc.delete_iQuest
    __del__ = lambda self : None;
iQuest_swigregister = _blcelc.iQuest_swigregister
iQuest_swigregister(iQuest)
celCreateDamage = _blcelc.celCreateDamage
celGetSetDamage = _blcelc.celGetSetDamage
celGetDamage = _blcelc.celGetDamage

class iQuestTriggerResponseFactory(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetTriggerFactory(*args): return _blcelc.iQuestTriggerResponseFactory_SetTriggerFactory(*args)
    def AddRewardFactory(*args): return _blcelc.iQuestTriggerResponseFactory_AddRewardFactory(*args)
    TriggerFactory = _swig_property(None, _blcelc.iQuestTriggerResponseFactory_TriggerFactory_set, None,
                    "iQuestTriggerResponseFactory.TriggerFactory (write only) -> iQuestTriggerFactory*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iQuestTriggerResponseFactory::SetTriggerFactory(iQuestTriggerFactory*)")

    __swig_destroy__ = _blcelc.delete_iQuestTriggerResponseFactory
    __del__ = lambda self : None;
iQuestTriggerResponseFactory_swigregister = _blcelc.iQuestTriggerResponseFactory_swigregister
iQuestTriggerResponseFactory_swigregister(iQuestTriggerResponseFactory)

class iQuestStateFactory(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetName(*args): return _blcelc.iQuestStateFactory_GetName(*args)
    def CreateTriggerResponseFactory(*args): return _blcelc.iQuestStateFactory_CreateTriggerResponseFactory(*args)
    def AddInitRewardFactory(*args): return _blcelc.iQuestStateFactory_AddInitRewardFactory(*args)
    def AddExitRewardFactory(*args): return _blcelc.iQuestStateFactory_AddExitRewardFactory(*args)
    Name = _swig_property(_blcelc.iQuestStateFactory_Name_get, None, None,
                    "iQuestStateFactory.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iQuestStateFactory::GetName()")

    __swig_destroy__ = _blcelc.delete_iQuestStateFactory
    __del__ = lambda self : None;
iQuestStateFactory_swigregister = _blcelc.iQuestStateFactory_swigregister
iQuestStateFactory_swigregister(iQuestStateFactory)

class iQuestFactory(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetQuestManager(*args): return _blcelc.iQuestFactory_GetQuestManager(*args)
    def GetName(*args): return _blcelc.iQuestFactory_GetName(*args)
    def CreateQuest(*args): return _blcelc.iQuestFactory_CreateQuest(*args)
    def Load(*args): return _blcelc.iQuestFactory_Load(*args)
    def GetState(*args): return _blcelc.iQuestFactory_GetState(*args)
    def CreateState(*args): return _blcelc.iQuestFactory_CreateState(*args)
    def GetSequence(*args): return _blcelc.iQuestFactory_GetSequence(*args)
    def CreateSequence(*args): return _blcelc.iQuestFactory_CreateSequence(*args)
    def SetDefaultParameter(*args): return _blcelc.iQuestFactory_SetDefaultParameter(*args)
    def ClearDefaultParameters(*args): return _blcelc.iQuestFactory_ClearDefaultParameters(*args)
    Name = _swig_property(_blcelc.iQuestFactory_Name_get, None, None,
                    "iQuestFactory.Name -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iQuestFactory::GetName()")

    __swig_destroy__ = _blcelc.delete_iQuestFactory
    __del__ = lambda self : None;
iQuestFactory_swigregister = _blcelc.iQuestFactory_swigregister
iQuestFactory_swigregister(iQuestFactory)

class iQuestManager(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def RegisterTriggerType(*args): return _blcelc.iQuestManager_RegisterTriggerType(*args)
    def GetTriggerType(*args): return _blcelc.iQuestManager_GetTriggerType(*args)
    def RegisterRewardType(*args): return _blcelc.iQuestManager_RegisterRewardType(*args)
    def GetRewardType(*args): return _blcelc.iQuestManager_GetRewardType(*args)
    def RegisterSeqOpType(*args): return _blcelc.iQuestManager_RegisterSeqOpType(*args)
    def GetSeqOpType(*args): return _blcelc.iQuestManager_GetSeqOpType(*args)
    def GetQuestFactory(*args): return _blcelc.iQuestManager_GetQuestFactory(*args)
    def RemoveQuestFactory(*args): return _blcelc.iQuestManager_RemoveQuestFactory(*args)
    def RemoveQuestFactories(*args): return _blcelc.iQuestManager_RemoveQuestFactories(*args)
    def CreateQuestFactory(*args): return _blcelc.iQuestManager_CreateQuestFactory(*args)
    def Load(*args): return _blcelc.iQuestManager_Load(*args)
    def AddNewStateReward(*args): return _blcelc.iQuestManager_AddNewStateReward(*args)
    def AddDebugPrintReward(*args): return _blcelc.iQuestManager_AddDebugPrintReward(*args)
    def AddInventoryReward(*args): return _blcelc.iQuestManager_AddInventoryReward(*args)
    def AddSequenceReward(*args): return _blcelc.iQuestManager_AddSequenceReward(*args)
    def AddCsSequenceReward(*args): return _blcelc.iQuestManager_AddCsSequenceReward(*args)
    def AddSequenceFinishReward(*args): return _blcelc.iQuestManager_AddSequenceFinishReward(*args)
    def AddChangePropertyReward(*args): return _blcelc.iQuestManager_AddChangePropertyReward(*args)
    def AddCreateEntityReward(*args): return _blcelc.iQuestManager_AddCreateEntityReward(*args)
    def AddDestroyEntityReward(*args): return _blcelc.iQuestManager_AddDestroyEntityReward(*args)
    def AddActionReward(*args): return _blcelc.iQuestManager_AddActionReward(*args)
    def AddMessageReward(*args): return _blcelc.iQuestManager_AddMessageReward(*args)
    def SetTimeoutTrigger(*args): return _blcelc.iQuestManager_SetTimeoutTrigger(*args)
    def SetEnterSectorTrigger(*args): return _blcelc.iQuestManager_SetEnterSectorTrigger(*args)
    def SetMeshEnterSectorTrigger(*args): return _blcelc.iQuestManager_SetMeshEnterSectorTrigger(*args)
    def SetSequenceFinishTrigger(*args): return _blcelc.iQuestManager_SetSequenceFinishTrigger(*args)
    def SetPropertyChangeTrigger(*args): return _blcelc.iQuestManager_SetPropertyChangeTrigger(*args)
    def SetTriggerTrigger(*args): return _blcelc.iQuestManager_SetTriggerTrigger(*args)
    def SetWatchTrigger(*args): return _blcelc.iQuestManager_SetWatchTrigger(*args)
    def SetOperationTrigger(*args): return _blcelc.iQuestManager_SetOperationTrigger(*args)
    def SetInventoryTrigger(*args): return _blcelc.iQuestManager_SetInventoryTrigger(*args)
    def SetMessageTrigger(*args): return _blcelc.iQuestManager_SetMessageTrigger(*args)
    def SetMeshSelectTrigger(*args): return _blcelc.iQuestManager_SetMeshSelectTrigger(*args)
    TimeoutTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetTimeoutTrigger), None,
                    "iQuestManager.TimeoutTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetTimeoutTrigger(...)")

    EnterSectorTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetEnterSectorTrigger), None,
                    "iQuestManager.EnterSectorTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetEnterSectorTrigger(...)")

    MeshEnterSectorTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetMeshEnterSectorTrigger), None,
                    "iQuestManager.MeshEnterSectorTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetMeshEnterSectorTrigger(...)")

    SequenceFinishTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetSequenceFinishTrigger), None,
                    "iQuestManager.SequenceFinishTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetSequenceFinishTrigger(...)")

    PropertyChangeTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetPropertyChangeTrigger), None,
                    "iQuestManager.PropertyChangeTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetPropertyChangeTrigger(...)")

    TriggerTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetTriggerTrigger), None,
                    "iQuestManager.TriggerTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetTriggerTrigger(...)")

    WatchTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetWatchTrigger), None,
                    "iQuestManager.WatchTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetWatchTrigger(...)")

    OperationTrigger = _swig_property(None, fix_args(_blcelc.iQuestManager_SetOperationTrigger), None,
                    "iQuestManager.OperationTrigger -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iQuestManager::getmethod()\n\tset: void iQuestManager::SetOperationTrigger(...)")

    scfGetVersion = staticmethod(_blcelc.iQuestManager_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iQuestManager
    __del__ = lambda self : None;
iQuestManager_swigregister = _blcelc.iQuestManager_swigregister
iQuestManager_swigregister(iQuestManager)
iQuestManager_scfGetVersion = _blcelc.iQuestManager_scfGetVersion

class iNewStateQuestRewardFactory(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetStateParameter(*args): return _blcelc.iNewStateQuestRewardFactory_SetStateParameter(*args)
    def SetEntityParameter(*args): return _blcelc.iNewStateQuestRewardFactory_SetEntityParameter(*args)
    def SetTagParameter(*args): return _blcelc.iNewStateQuestRewardFactory_SetTagParameter(*args)
    def SetClassParameter(*args): return _blcelc.iNewStateQuestRewardFactory_SetClassParameter(*args)
    StateParameter = _swig_property(None, _blcelc.iNewStateQuestRewardFactory_StateParameter_set, None,
                    "iNewStateQuestRewardFactory.StateParameter (write only) -> const char*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iNewStateQuestRewardFactory::SetStateParameter(const char*)")

    EntityParameter = _swig_property(None, fix_args(_blcelc.iNewStateQuestRewardFactory_SetEntityParameter), None,
                    "iNewStateQuestRewardFactory.EntityParameter -> type\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iNewStateQuestRewardFactory::getmethod()\n\tset: void iNewStateQuestRewardFactory::SetEntityParameter(...)")

    TagParameter = _swig_property(None, _blcelc.iNewStateQuestRewardFactory_TagParameter_set, None,
                    "iNewStateQuestRewardFactory.TagParameter (write only) -> const char*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iNewStateQuestRewardFactory::SetTagParameter(const char*)")

    ClassParameter = _swig_property(None, _blcelc.iNewStateQuestRewardFactory_ClassParameter_set, None,
                    "iNewStateQuestRewardFactory.ClassParameter (write only) -> const char*\n\nWriting to this is equivalent to calling the C++ cel method:\n\tvoid iNewStateQuestRewardFactory::SetClassParameter(const char*)")

    __swig_destroy__ = _blcelc.delete_iNewStateQuestRewardFactory
    __del__ = lambda self : None;
iNewStateQuestRewardFactory_swigregister = _blcelc.iNewStateQuestRewardFactory_swigregister
iNewStateQuestRewardFactory_swigregister(iNewStateQuestRewardFactory)

class iPcQuest(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def NewQuest(*args): return _blcelc.iPcQuest_NewQuest(*args)
    def StopQuest(*args): return _blcelc.iPcQuest_StopQuest(*args)
    def GetQuest(*args): return _blcelc.iPcQuest_GetQuest(*args)
    def GetQuestName(*args): return _blcelc.iPcQuest_GetQuestName(*args)
    Quest = _swig_property(_blcelc.iPcQuest_Quest_get, None, None,
                    "iPcQuest.Quest -> iQuest*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iQuest* iPcQuest::GetQuest()")

    QuestName = _swig_property(_blcelc.iPcQuest_QuestName_get, None, None,
                    "iPcQuest.QuestName -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iPcQuest::GetQuestName()")

    _PC = None
    def __getattr__(self,attr):
         if hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             return getattr(_PC,attr)
         else:
             return self.GetterFallback(attr)
    def __setattr__(self,attr,value):
         if hasattr(iPcQuest,attr):
             return object.__setattr__(self,attr,value)
         elif hasattr(iCelPropertyClass,attr):
             _PC = self.QueryInterface(iCelPropertyClass)
             setattr(_PC,attr,value)
         else:
             return self.SetterFallback(attr,value)

    scfGetVersion = staticmethod(_blcelc.iPcQuest_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcQuest
    __del__ = lambda self : None;
iPcQuest_swigregister = _blcelc.iPcQuest_swigregister
iPcQuest_swigregister(iPcQuest)
iPcQuest_scfGetVersion = _blcelc.iPcQuest_scfGetVersion

scfQuery_iPcQuest = _blcelc.scfQuery_iPcQuest
class iCelEdge(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetState(*args): return _blcelc.iCelEdge_SetState(*args)
    def SetSuccessor(*args): return _blcelc.iCelEdge_SetSuccessor(*args)
    def GetState(*args): return _blcelc.iCelEdge_GetState(*args)
    def GetSuccessor(*args): return _blcelc.iCelEdge_GetSuccessor(*args)
    def GetWeight(*args): return _blcelc.iCelEdge_GetWeight(*args)
    def SetWeight(*args): return _blcelc.iCelEdge_SetWeight(*args)
    State = _swig_property(_blcelc.iCelEdge_State_get, _blcelc.iCelEdge_State_set, None,
                    "iCelEdge.State -> bool\n\nThis is equivalent to calling the C++ cs methods:\n\tget: bool iCelEdge::GetState()\n\tset: void iCelEdge::SetState(bool)")


    Successor = _swig_property(_blcelc.iCelEdge_Successor_get, _blcelc.iCelEdge_Successor_set, None,
                    "iCelEdge.Successor -> iCelNode*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelNode* iCelEdge::GetSuccessor()\n\tset: void iCelEdge::SetSuccessor(iCelNode*)")


    __swig_destroy__ = _blcelc.delete_iCelEdge
    __del__ = lambda self : None;
iCelEdge_swigregister = _blcelc.iCelEdge_swigregister
iCelEdge_swigregister(iCelEdge)
celCreateQuest = _blcelc.celCreateQuest
celGetSetQuest = _blcelc.celGetSetQuest
celGetQuest = _blcelc.celGetQuest

class iCelNode(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetMapNode(*args): return _blcelc.iCelNode_SetMapNode(*args)
    def SetParent(*args): return _blcelc.iCelNode_SetParent(*args)
    def SetName(*args): return _blcelc.iCelNode_SetName(*args)
    def Heuristic(*args): return _blcelc.iCelNode_Heuristic(*args)
    def GetMapNode(*args): return _blcelc.iCelNode_GetMapNode(*args)
    def GetPosition(*args): return _blcelc.iCelNode_GetPosition(*args)
    def GetName(*args): return _blcelc.iCelNode_GetName(*args)
    def GetParent(*args): return _blcelc.iCelNode_GetParent(*args)
    def GetSuccessors(*args): return _blcelc.iCelNode_GetSuccessors(*args)
    def GetAllSuccessors(*args): return _blcelc.iCelNode_GetAllSuccessors(*args)
    def GetHeuristic(*args): return _blcelc.iCelNode_GetHeuristic(*args)
    def GetCost(*args): return _blcelc.iCelNode_GetCost(*args)
    def GetEdgeCount(*args): return _blcelc.iCelNode_GetEdgeCount(*args)
    def GetEdge(*args): return _blcelc.iCelNode_GetEdge(*args)
    def RemoveEdge(*args): return _blcelc.iCelNode_RemoveEdge(*args)
    def AddSuccessor(*args): return _blcelc.iCelNode_AddSuccessor(*args)
    def GetEdges(*args): return _blcelc.iCelNode_GetEdges(*args)
    MapNode = _swig_property(_blcelc.iCelNode_MapNode_get, _blcelc.iCelNode_MapNode_set, None,
                    "iCelNode.MapNode -> iMapNode*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iMapNode* iCelNode::GetMapNode()\n\tset: void iCelNode::SetMapNode(iMapNode*)")


    Parent = _swig_property(_blcelc.iCelNode_Parent_get, _blcelc.iCelNode_Parent_set, None,
                    "iCelNode.Parent -> iCelNode*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: iCelNode* iCelNode::GetParent()\n\tset: void iCelNode::SetParent(iCelNode*)")


    Name = _swig_property(_blcelc.iCelNode_Name_get, _blcelc.iCelNode_Name_set, None,
                    "iCelNode.Name -> char*\n\nThis is equivalent to calling the C++ cs methods:\n\tget: char* iCelNode::GetName()\n\tset: void iCelNode::SetName(char*)")


    Position = _swig_property(_blcelc.iCelNode_Position_get, None, None,
                    "iCelNode.Position -> csVector3  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csVector3 iCelNode::GetPosition()")

    Successors = _swig_property(_blcelc.iCelNode_Successors_get, None, None,
                    "iCelNode.Successors -> csArray<iCelNode*  >  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csArray<iCelNode*  > iCelNode::GetSuccessors()")

    AllSuccessors = _swig_property(_blcelc.iCelNode_AllSuccessors_get, None, None,
                    "iCelNode.AllSuccessors -> csArray<iCelNode*  >  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: csArray<iCelNode*  > iCelNode::GetAllSuccessors()")

    Cost = _swig_property(_blcelc.iCelNode_Cost_get, None, None,
                    "iCelNode.Cost -> float  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: float iCelNode::GetCost()")

    __swig_destroy__ = _blcelc.delete_iCelNode
    __del__ = lambda self : None;
iCelNode_swigregister = _blcelc.iCelNode_swigregister
iCelNode_swigregister(iCelNode)

class iCelPath(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryObject(*args): return _blcelc.iCelPath_QueryObject(*args)
    def AddNode(*args): return _blcelc.iCelPath_AddNode(*args)
    def InsertNode(*args): return _blcelc.iCelPath_InsertNode(*args)
    def Next(*args): return _blcelc.iCelPath_Next(*args)
    def Previous(*args): return _blcelc.iCelPath_Previous(*args)
    def Current(*args): return _blcelc.iCelPath_Current(*args)
    def CurrentPosition(*args): return _blcelc.iCelPath_CurrentPosition(*args)
    def CurrentSector(*args): return _blcelc.iCelPath_CurrentSector(*args)
    def HasNext(*args): return _blcelc.iCelPath_HasNext(*args)
    def HasPrevious(*args): return _blcelc.iCelPath_HasPrevious(*args)
    def Restart(*args): return _blcelc.iCelPath_Restart(*args)
    def Clear(*args): return _blcelc.iCelPath_Clear(*args)
    def GetFirst(*args): return _blcelc.iCelPath_GetFirst(*args)
    def GetLast(*args): return _blcelc.iCelPath_GetLast(*args)
    def Invert(*args): return _blcelc.iCelPath_Invert(*args)
    def GetNodeCount(*args): return _blcelc.iCelPath_GetNodeCount(*args)
    First = _swig_property(_blcelc.iCelPath_First_get, None, None,
                    "iCelPath.First -> iMapNode*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iMapNode* iCelPath::GetFirst()")

    Last = _swig_property(_blcelc.iCelPath_Last_get, None, None,
                    "iCelPath.Last -> iMapNode*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iMapNode* iCelPath::GetLast()")

    __swig_destroy__ = _blcelc.delete_iCelPath
    __del__ = lambda self : None;
iCelPath_swigregister = _blcelc.iCelPath_swigregister
iCelPath_swigregister(iCelPath)

class iCelGraph(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def QueryObject(*args): return _blcelc.iCelGraph_QueryObject(*args)
    def CreateNode(*args): return _blcelc.iCelGraph_CreateNode(*args)
    def AddNode(*args): return _blcelc.iCelGraph_AddNode(*args)
    def AddEdgeByNames(*args): return _blcelc.iCelGraph_AddEdgeByNames(*args)
    def GetClosest(*args): return _blcelc.iCelGraph_GetClosest(*args)
    def ShortestPath(*args): return _blcelc.iCelGraph_ShortestPath(*args)
    def RandomPath(*args): return _blcelc.iCelGraph_RandomPath(*args)
    def GetNodeCount(*args): return _blcelc.iCelGraph_GetNodeCount(*args)
    def GetNode(*args): return _blcelc.iCelGraph_GetNode(*args)
    def RemoveNode(*args): return _blcelc.iCelGraph_RemoveNode(*args)
    def RemoveEdge(*args): return _blcelc.iCelGraph_RemoveEdge(*args)
    def AddEdge(*args): return _blcelc.iCelGraph_AddEdge(*args)
    def CreateEmptyNode(*args): return _blcelc.iCelGraph_CreateEmptyNode(*args)
    def ShortestPath2(*args): return _blcelc.iCelGraph_ShortestPath2(*args)
    scfGetVersion = staticmethod(_blcelc.iCelGraph_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iCelGraph
    __del__ = lambda self : None;
iCelGraph_swigregister = _blcelc.iCelGraph_swigregister
iCelGraph_swigregister(iCelGraph)
iCelGraph_scfGetVersion = _blcelc.iCelGraph_scfGetVersion

class iCelConsoleCommand(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetCommand(*args): return _blcelc.iCelConsoleCommand_GetCommand(*args)
    def GetDescription(*args): return _blcelc.iCelConsoleCommand_GetDescription(*args)
    def Help(*args): return _blcelc.iCelConsoleCommand_Help(*args)
    def Execute(*args): return _blcelc.iCelConsoleCommand_Execute(*args)
    Command = _swig_property(_blcelc.iCelConsoleCommand_Command_get, None, None,
                    "iCelConsoleCommand.Command -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelConsoleCommand::GetCommand()")

    Description = _swig_property(_blcelc.iCelConsoleCommand_Description_get, None, None,
                    "iCelConsoleCommand.Description -> const char*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: const char* iCelConsoleCommand::GetDescription()")

    __swig_destroy__ = _blcelc.delete_iCelConsoleCommand
    __del__ = lambda self : None;
iCelConsoleCommand_swigregister = _blcelc.iCelConsoleCommand_swigregister
iCelConsoleCommand_swigregister(iCelConsoleCommand)

class iCelConsole(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def GetInputConsole(*args): return _blcelc.iCelConsole_GetInputConsole(*args)
    def GetOutputConsole(*args): return _blcelc.iCelConsole_GetOutputConsole(*args)
    def RegisterCommand(*args): return _blcelc.iCelConsole_RegisterCommand(*args)
    InputConsole = _swig_property(_blcelc.iCelConsole_InputConsole_get, None, None,
                    "iCelConsole.InputConsole -> iConsoleInput*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iConsoleInput* iCelConsole::GetInputConsole()")

    OutputConsole = _swig_property(_blcelc.iCelConsole_OutputConsole_get, None, None,
                    "iCelConsole.OutputConsole -> iConsoleOutput*  (read-only)\n\nThis is equivalent to calling the C++ cs method:\n\tget: iConsoleOutput* iCelConsole::GetOutputConsole()")

    __swig_destroy__ = _blcelc.delete_iCelConsole
    __del__ = lambda self : None;
iCelConsole_swigregister = _blcelc.iCelConsole_swigregister
iCelConsole_swigregister(iCelConsole)

csQueryRegistry_iCelConsole = _blcelc.csQueryRegistry_iCelConsole
class PcCommonBase(iCelPropertyClass,iCelTimerListener,iMessageSender):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.PcCommonBase_IncRef(*args)
    def DecRef(*args): return _blcelc.PcCommonBase_DecRef(*args)
    def GetRefCount(*args): return _blcelc.PcCommonBase_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.PcCommonBase_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.PcCommonBase_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.PcCommonBase_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.PcCommonBase_GetInterfaceMetadata(*args)
PcCommonBase_swigregister = _blcelc.PcCommonBase_swigregister
PcCommonBase_swigregister(PcCommonBase)

class Property(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    id = _swig_property(_blcelc.Property_id_get, _blcelc.Property_id_set)
    datatype = _swig_property(_blcelc.Property_datatype_get, _blcelc.Property_datatype_set)
    readonly = _swig_property(_blcelc.Property_readonly_get, _blcelc.Property_readonly_set)
    desc = _swig_property(_blcelc.Property_desc_get)
    def __init__(self, *args): 
        this = _blcelc.new_Property(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_Property
    __del__ = lambda self : None;
Property_swigregister = _blcelc.Property_swigregister
Property_swigregister(Property)

class PropertyHolder(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    properties = _swig_property(_blcelc.PropertyHolder_properties_get, _blcelc.PropertyHolder_properties_set)
    propertycount = _swig_property(_blcelc.PropertyHolder_propertycount_get, _blcelc.PropertyHolder_propertycount_set)
    actions_done = _swig_property(_blcelc.PropertyHolder_actions_done_get, _blcelc.PropertyHolder_actions_done_set)
    mask = _swig_property(_blcelc.PropertyHolder_mask_get, _blcelc.PropertyHolder_mask_set)
    constants = _swig_property(_blcelc.PropertyHolder_constants_get, _blcelc.PropertyHolder_constants_set)
    new_constants = _swig_property(_blcelc.PropertyHolder_new_constants_get, _blcelc.PropertyHolder_new_constants_set)
    def __init__(self, *args): 
        this = _blcelc.new_PropertyHolder(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_PropertyHolder
    __del__ = lambda self : None;
    def SetCount(*args): return _blcelc.PropertyHolder_SetCount(*args)
PropertyHolder_swigregister = _blcelc.PropertyHolder_swigregister
PropertyHolder_swigregister(PropertyHolder)

class celPcCommon(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_celPcCommon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_celPcCommon
    __del__ = lambda self : None;
    def HavePropertyClassesChanged(*args): return _blcelc.celPcCommon_HavePropertyClassesChanged(*args)
    def SetTag(*args): return _blcelc.celPcCommon_SetTag(*args)
    def GetTag(*args): return _blcelc.celPcCommon_GetTag(*args)
    def GetName(*args): return _blcelc.celPcCommon_GetName(*args)
    def SetName(*args): return _blcelc.celPcCommon_SetName(*args)
    def QueryObject(*args): return _blcelc.celPcCommon_QueryObject(*args)
    def GetEntity(*args): return _blcelc.celPcCommon_GetEntity(*args)
    def SetEntity(*args): return _blcelc.celPcCommon_SetEntity(*args)
    def AddPropertyChangeCallback(*args): return _blcelc.celPcCommon_AddPropertyChangeCallback(*args)
    def RemovePropertyChangeCallback(*args): return _blcelc.celPcCommon_RemovePropertyChangeCallback(*args)
    def SetPropertyIndexed(*args): return _blcelc.celPcCommon_SetPropertyIndexed(*args)
    def SetProperty(*args): return _blcelc.celPcCommon_SetProperty(*args)
    def GetPropertyIndexed(*args): return _blcelc.celPcCommon_GetPropertyIndexed(*args)
    def GetPropertyLongByID(*args): return _blcelc.celPcCommon_GetPropertyLongByID(*args)
    def GetPropertyFloatByID(*args): return _blcelc.celPcCommon_GetPropertyFloatByID(*args)
    def GetPropertyBoolByID(*args): return _blcelc.celPcCommon_GetPropertyBoolByID(*args)
    def GetPropertyStringByID(*args): return _blcelc.celPcCommon_GetPropertyStringByID(*args)
    def GetPropertyVectorByID(*args): return _blcelc.celPcCommon_GetPropertyVectorByID(*args)
    def GetPropertyColorByID(*args): return _blcelc.celPcCommon_GetPropertyColorByID(*args)
    def GetPropertyPClassByID(*args): return _blcelc.celPcCommon_GetPropertyPClassByID(*args)
    def GetPropertyEntityByID(*args): return _blcelc.celPcCommon_GetPropertyEntityByID(*args)
    def GetPropertyIBaseByID(*args): return _blcelc.celPcCommon_GetPropertyIBaseByID(*args)
    def PerformAction(*args): return _blcelc.celPcCommon_PerformAction(*args)
    def PerformActionIndexed(*args): return _blcelc.celPcCommon_PerformActionIndexed(*args)
    def GetPropertyOrActionDescription(*args): return _blcelc.celPcCommon_GetPropertyOrActionDescription(*args)
    def GetPropertyAndActionCount(*args): return _blcelc.celPcCommon_GetPropertyAndActionCount(*args)
    def GetPropertyOrActionID(*args): return _blcelc.celPcCommon_GetPropertyOrActionID(*args)
    def PropertyClassesHaveChanged(*args): return _blcelc.celPcCommon_PropertyClassesHaveChanged(*args)
    def GetPropertyOrActionType(*args): return _blcelc.celPcCommon_GetPropertyOrActionType(*args)
    def IsPropertyReadOnly(*args): return _blcelc.celPcCommon_IsPropertyReadOnly(*args)
    def GetPersistentData(*args): return _blcelc.celPcCommon_GetPersistentData(*args)
    def SetPersistentData(*args): return _blcelc.celPcCommon_SetPersistentData(*args)
    def QueryPositionInfo(*args): return _blcelc.celPcCommon_QueryPositionInfo(*args)
    def Activate(*args): return _blcelc.celPcCommon_Activate(*args)
    def Deactivate(*args): return _blcelc.celPcCommon_Deactivate(*args)
    def MarkBaseline(*args): return _blcelc.celPcCommon_MarkBaseline(*args)
    def IsModifiedSinceBaseline(*args): return _blcelc.celPcCommon_IsModifiedSinceBaseline(*args)
    def SaveModifications(*args): return _blcelc.celPcCommon_SaveModifications(*args)
    def RestoreModifications(*args): return _blcelc.celPcCommon_RestoreModifications(*args)
    def TickEveryFrame(*args): return _blcelc.celPcCommon_TickEveryFrame(*args)
    def TickOnce(*args): return _blcelc.celPcCommon_TickOnce(*args)
    def MessageDispatcherRemoved(*args): return _blcelc.celPcCommon_MessageDispatcherRemoved(*args)
    def ReceiveMessage(*args): return _blcelc.celPcCommon_ReceiveMessage(*args)
celPcCommon_swigregister = _blcelc.celPcCommon_swigregister
celPcCommon_swigregister(celPcCommon)

class swigPcCommonFactory(iCelPropertyClassFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigPcCommonFactory_IncRef(*args)
    def DecRef(*args): return _blcelc.swigPcCommonFactory_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigPcCommonFactory_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigPcCommonFactory_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigPcCommonFactory_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigPcCommonFactory_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigPcCommonFactory_GetInterfaceMetadata(*args)
swigPcCommonFactory_swigregister = _blcelc.swigPcCommonFactory_swigregister
swigPcCommonFactory_swigregister(swigPcCommonFactory)

class swigPcCommon(celPcCommon):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigPcCommon_IncRef(*args)
    def DecRef(*args): return _blcelc.swigPcCommon_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigPcCommon_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigPcCommon_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigPcCommon_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigPcCommon_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigPcCommon_GetInterfaceMetadata(*args)
swigPcCommon_swigregister = _blcelc.swigPcCommon_swigregister
swigPcCommon_swigregister(swigPcCommon)

class PcCommon(swigPcCommon):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _blcelc.new_PcCommon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_PcCommon
    __del__ = lambda self : None;
PcCommon_swigregister = _blcelc.PcCommon_swigregister
PcCommon_swigregister(PcCommon)

class PcCommonFactory(swigPcCommonFactory):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == PcCommonFactory:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _blcelc.new_PcCommonFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_PcCommonFactory
    __del__ = lambda self : None;
    def GetName(*args): return _blcelc.PcCommonFactory_GetName(*args)
    def CreatePropertyClass(*args): return _blcelc.PcCommonFactory_CreatePropertyClass(*args)
    def CreateScriptPropertyClass(*args): return _blcelc.PcCommonFactory_CreateScriptPropertyClass(*args)
    def __disown__(self):
        self.this.disown()
        _blcelc.disown_PcCommonFactory(self)
        return weakref_proxy(self)
PcCommonFactory_swigregister = _blcelc.PcCommonFactory_swigregister
PcCommonFactory_swigregister(PcCommonFactory)

class CelConsoleOut:
	"""Class that can be assigned to sys.stdout or sys.stderr"""
	def __init__(self,oreg):
		self.oreg = oreg
	def write(self,s):
		csQueryRegistry_iCelConsole(self.oreg).GetOutputConsole().PutText(str(s))

class CelConsoleOutOverride:
	"""Class that redirects stdout and stderr to celconsole"""
	def __init__(self,oreg):
		import sys
		self.oldstdout = sys.stdout
		self.oldstderr = sys.stderr
		sys.stdout = CelConsoleOut(oreg)
		sys.stderr = CelConsoleOut(oreg)
	def __del__(self):
		import sys
		sys.stdout = self.oldstdout
		sys.stderr = self.oldstderr

class iPcPython(cspace.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def SetPythonObject(*args): return _blcelc.iPcPython_SetPythonObject(*args)
    def GetPythonObject(*args): return _blcelc.iPcPython_GetPythonObject(*args)
    scfGetVersion = staticmethod(_blcelc.iPcPython_scfGetVersion)
    __swig_destroy__ = _blcelc.delete_iPcPython
    __del__ = lambda self : None;
iPcPython_swigregister = _blcelc.iPcPython_swigregister
iPcPython_swigregister(iPcPython)
iPcPython_scfGetVersion = _blcelc.iPcPython_scfGetVersion

class swigPyPcCommon(PcCommon,iPcPython):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigPyPcCommon_IncRef(*args)
    def DecRef(*args): return _blcelc.swigPyPcCommon_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigPyPcCommon_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigPyPcCommon_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigPyPcCommon_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigPyPcCommon_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigPyPcCommon_GetInterfaceMetadata(*args)
swigPyPcCommon_swigregister = _blcelc.swigPyPcCommon_swigregister
swigPyPcCommon_swigregister(swigPyPcCommon)

class pyPcCommon(swigPyPcCommon):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    oreg = _swig_property(_blcelc.pyPcCommon_oreg_get, _blcelc.pyPcCommon_oreg_set)
    def __init__(self, *args): 
        if self.__class__ == pyPcCommon:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _blcelc.new_pyPcCommon(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_pyPcCommon
    __del__ = lambda self : None;
    def SetPythonObject(*args): return _blcelc.pyPcCommon_SetPythonObject(*args)
    def GetPythonObject(*args): return _blcelc.pyPcCommon_GetPythonObject(*args)
    def PerformAction(*args): return _blcelc.pyPcCommon_PerformAction(*args)
    def GetPropertyLongByID(*args): return _blcelc.pyPcCommon_GetPropertyLongByID(*args)
    def GetPropertyFloatByID(*args): return _blcelc.pyPcCommon_GetPropertyFloatByID(*args)
    def GetPropertyBoolByID(*args): return _blcelc.pyPcCommon_GetPropertyBoolByID(*args)
    def SetEntity(*args): return _blcelc.pyPcCommon_SetEntity(*args)
    def GetPropertyStringByID(*args): return _blcelc.pyPcCommon_GetPropertyStringByID(*args)
    def GetPropertyVectorByID(*args): return _blcelc.pyPcCommon_GetPropertyVectorByID(*args)
    def GetPropertyColorByID(*args): return _blcelc.pyPcCommon_GetPropertyColorByID(*args)
    def GetPropertyEntityByID(*args): return _blcelc.pyPcCommon_GetPropertyEntityByID(*args)
    def GetPropertyPClassByID(*args): return _blcelc.pyPcCommon_GetPropertyPClassByID(*args)
    def GetPropertyIBaseByID(*args): return _blcelc.pyPcCommon_GetPropertyIBaseByID(*args)
    def PropertyClassesHaveChanged(*args): return _blcelc.pyPcCommon_PropertyClassesHaveChanged(*args)
    def SetProperty(*args): return _blcelc.pyPcCommon_SetProperty(*args)
    def GetPropertyAndActionCount(*args): return _blcelc.pyPcCommon_GetPropertyAndActionCount(*args)
    def GetPropertyOrActionType(*args): return _blcelc.pyPcCommon_GetPropertyOrActionType(*args)
    def GetPL(*args): return _blcelc.pyPcCommon_GetPL(*args)
    def PerformActionIndexed(self,id,celParBlock,ret):
      print "indexed action"
    pl = property(GetPL)

    def __disown__(self):
        self.this.disown()
        _blcelc.disown_pyPcCommon(self)
        return weakref_proxy(self)
pyPcCommon_swigregister = _blcelc.pyPcCommon_swigregister
pyPcCommon_swigregister(pyPcCommon)

class swigpyMessageSender(iMessageSender):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigpyMessageSender_IncRef(*args)
    def DecRef(*args): return _blcelc.swigpyMessageSender_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigpyMessageSender_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigpyMessageSender_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigpyMessageSender_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigpyMessageSender_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigpyMessageSender_GetInterfaceMetadata(*args)
swigpyMessageSender_swigregister = _blcelc.swigpyMessageSender_swigregister
swigpyMessageSender_swigregister(swigpyMessageSender)

class pyMessageSender(swigpyMessageSender):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == pyMessageSender:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _blcelc.new_pyMessageSender(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_pyMessageSender
    __del__ = lambda self : None;
    def MessageDispatcherRemoved(*args): return _blcelc.pyMessageSender_MessageDispatcherRemoved(*args)
    def __disown__(self):
        self.this.disown()
        _blcelc.disown_pyMessageSender(self)
        return weakref_proxy(self)
pyMessageSender_swigregister = _blcelc.pyMessageSender_swigregister
pyMessageSender_swigregister(pyMessageSender)

class swigpyMessageReceiver(iMessageReceiver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigpyMessageReceiver_IncRef(*args)
    def DecRef(*args): return _blcelc.swigpyMessageReceiver_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigpyMessageReceiver_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigpyMessageReceiver_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigpyMessageReceiver_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigpyMessageReceiver_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigpyMessageReceiver_GetInterfaceMetadata(*args)
swigpyMessageReceiver_swigregister = _blcelc.swigpyMessageReceiver_swigregister
swigpyMessageReceiver_swigregister(swigpyMessageReceiver)

class pyMessageReceiver(swigpyMessageReceiver):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == pyMessageReceiver:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _blcelc.new_pyMessageReceiver(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_pyMessageReceiver
    __del__ = lambda self : None;
    def ReceiveMessage(*args): return _blcelc.pyMessageReceiver_ReceiveMessage(*args)
    def __disown__(self):
        self.this.disown()
        _blcelc.disown_pyMessageReceiver(self)
        return weakref_proxy(self)
pyMessageReceiver_swigregister = _blcelc.pyMessageReceiver_swigregister
pyMessageReceiver_swigregister(pyMessageReceiver)

class swigpyPcPropertyListener(iPcPropertyListener):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigpyPcPropertyListener_IncRef(*args)
    def DecRef(*args): return _blcelc.swigpyPcPropertyListener_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigpyPcPropertyListener_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigpyPcPropertyListener_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigpyPcPropertyListener_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigpyPcPropertyListener_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigpyPcPropertyListener_GetInterfaceMetadata(*args)
swigpyPcPropertyListener_swigregister = _blcelc.swigpyPcPropertyListener_swigregister
swigpyPcPropertyListener_swigregister(swigpyPcPropertyListener)

class pyPcPropertyListener(swigpyPcPropertyListener):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == pyPcPropertyListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _blcelc.new_pyPcPropertyListener(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_pyPcPropertyListener
    __del__ = lambda self : None;
    def PropertyChanged(*args): return _blcelc.pyPcPropertyListener_PropertyChanged(*args)
    def __disown__(self):
        self.this.disown()
        _blcelc.disown_pyPcPropertyListener(self)
        return weakref_proxy(self)
pyPcPropertyListener_swigregister = _blcelc.pyPcPropertyListener_swigregister
pyPcPropertyListener_swigregister(pyPcPropertyListener)

class swigpyPcInventoryListener(iPcInventoryListener):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    def IncRef(*args): return _blcelc.swigpyPcInventoryListener_IncRef(*args)
    def DecRef(*args): return _blcelc.swigpyPcInventoryListener_DecRef(*args)
    def GetRefCount(*args): return _blcelc.swigpyPcInventoryListener_GetRefCount(*args)
    def QueryInterface(*args): return _blcelc.swigpyPcInventoryListener_QueryInterface(*args)
    def AddRefOwner(*args): return _blcelc.swigpyPcInventoryListener_AddRefOwner(*args)
    def RemoveRefOwner(*args): return _blcelc.swigpyPcInventoryListener_RemoveRefOwner(*args)
    def GetInterfaceMetadata(*args): return _blcelc.swigpyPcInventoryListener_GetInterfaceMetadata(*args)
swigpyPcInventoryListener_swigregister = _blcelc.swigpyPcInventoryListener_swigregister
swigpyPcInventoryListener_swigregister(swigpyPcInventoryListener)

class pyPcInventoryListener(swigpyPcInventoryListener):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == pyPcInventoryListener:
            args = (None,) + args
        else:
            args = (self,) + args
        this = _blcelc.new_pyPcInventoryListener(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _blcelc.delete_pyPcInventoryListener
    __del__ = lambda self : None;
    def AddChild(*args): return _blcelc.pyPcInventoryListener_AddChild(*args)
    def RemoveChild(*args): return _blcelc.pyPcInventoryListener_RemoveChild(*args)
    def __disown__(self):
        self.this.disown()
        _blcelc.disown_pyPcInventoryListener(self)
        return weakref_proxy(self)
pyPcInventoryListener_swigregister = _blcelc.pyPcInventoryListener_swigregister
pyPcInventoryListener_swigregister(pyPcInventoryListener)



