<world>
    <textures>
        <texture name="picture1">
	    <file>/cellib/images/to_the_tavern.jpg</file>
	    <keepimage />
        </texture>
        <texture name="leaves">
	    <file>/cellib/images/leaves.png</file>
	    <keepimage />
        </texture>
        <texture name="light_wood">
	    <file>/cellib/images/light_wood.png</file>
	    <keepimage />
        </texture>
        <texture name="dark_wood">
	    <file>/cellib/images/dark_wood.png</file>
	    <keepimage />
        </texture>
        <texture name="sand_stone">
	    <file>/cellib/images/sand_stone.png</file>
	    <keepimage />
        </texture>
        <texture name="marble">
	    <file>/cellib/images/marble.png</file>
	    <keepimage />
        </texture>
        <texture name="chocolate">
	    <file>/cellib/images/chocolate.png</file>
	    <keepimage />
        </texture>
        <texture name="slanted_stone">
	    <file>/cellib/images/slanted_stone.png</file>
	    <keepimage />
        </texture>
        <texture name="hero">
	    <file>/cellib/images/hero.png</file>
	    <transparent red="1" green="1" blue="1" />
	    <keepimage />
        </texture>
    </textures>
    <materials>
	<material name="picture1"> <texture>picture1</texture> </material>
        <material name="leaves"> <texture>leaves</texture> </material>
        <material name="light_wood"> <texture>light_wood</texture> </material>
        <material name="dark_wood"> <texture>dark_wood</texture> </material>
        <material name="sand_stone"> <texture>sand_stone</texture> </material>
        <material name="marble"> <texture>marble</texture> </material>
        <material name="chocolate"> <texture>chocolate</texture> </material>
        <material name="slanted_stone"> <texture>slanted_stone</texture> </material>
        <material name="hero"> <texture>hero</texture> </material>
    </materials>
    <sounds>
        <sound name="boing"> <file>/cellib/sounds/boing_x.wav</file> </sound>
        <sound name="click"> <file>/cellib/sounds/click_x.wav</file> </sound>
    </sounds>
    <settings>
        <clearscreen>yes</clearscreen>
        <clearzbuf>yes</clearzbuf>
    </settings>
    <plugins>
        <plugin name="celentity">cel.addons.celentity</plugin>
        <plugin name="xmlscripts">cel.addons.xmlscripts</plugin>
    </plugins>

    <addon plugin="xmlscripts">
        <pcfactory>cel.pcfactory.mesh</pcfactory>
        <pcfactory>cel.pcfactory.solid</pcfactory>
        <pcfactory>cel.pcfactory.gravity</pcfactory>
        <pcfactory>cel.pcfactory.movable</pcfactory>
        <pcfactory>cel.pcfactory.billboard</pcfactory>
        <pcfactory>cel.pcfactory.properties</pcfactory>
        <pcfactory>cel.pcfactory.timer</pcfactory>
        <pcfactory>cel.pcfactory.inventory</pcfactory>
        <pcfactory>cel.pcfactory.pckeyinput</pcfactory>

	<!-- *****************************************************
	  - This script handles the menu system of xmlgames.
	  -  ***************************************************** -->
	<script name="menu">
	    <!--
	      - Initialization.
	      -->
	    <event name="init">
	        <print value="'Start initializing menu...'" />

		<!-- Puzzle game button -->
		<var name="material" value="picture1" />
		<createentity name="puzzle_button" behaviour="game_button" />
		<default propclass="pc(puzzle_button,pcbillboard)" />
	        <property id="propid(x)" value="10000" />
	        <property id="propid(y)" value="10000" />
		<var entity="puzzle_button" name="game" value="puzzle_main" />

		<!-- Maze game button -->
		<var name="material" value="slanted_stone" />
		<createentity name="maze_button" behaviour="game_button" />
		<default propclass="pc(maze_button,pcbillboard)" />
	        <property id="propid(x)" value="10000" />
	        <property id="propid(y)" value="70000" />
		<var entity="maze_button" name="game" value="maze_main" />
	    </event>

	    <!--
	      - Call this event to start a game. This will destroy the menu
	      - and create the game entity. Needs the ?game variable to be
	      - set to the name of the game (the button will do that).
	      -->
	    <event name="startgame">
	        <print value="'Start destroying menu...'" />
	        <destroyentity name="puzzle_button" />
	        <destroyentity name="maze_button" />
		<createentity name="?game" behaviour="?game" />
	    </event>
	</script>

	<!-- *****************************************************
	  - Generic back button handler for returning to the main menu.
	  - Users of this behaviour should set the 'game_entity' variable
	  - of the entity which controls this script to the entity controlling
	  - the game. It will call 'destroy' on that entity as soon as
	  - the button is clicked.
	  -  ***************************************************** -->
        <script name="back_button">
	    <!--
	      - Initialize the back button.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
	        <createpropclass name="pcproperties" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="picture1" />
	        <property id="propid(materialname)" value="picture1" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="20000" />
	        <property id="propid(height)" value="20000" />
	        <property id="propid(x)" value="295000" />
	        <property id="propid(y)" value="100" />
	    </event>

	    <!--
	      - Go to the main menu.
	      -->
	    <event name="pcbillboard_select">
		<call event="destroygame" />
		<call entity="menu" event="init" />
		<destroyentity name="?game_entity" />
	    </event>

	    <!--
	      - Destroy all resources created by the current game.
	      -->
	    <event name="destroygame">
	        <print value="'Start destroying game...'" />
		<inventory propclass="pc(?game_entity,pcinventory)" />
		<while eval="inventory_count()>0" >
		    <var name="child" value="inventory_get(0)" />
		    <print value="'    destroy '+?child" />
		    <inventory_rem child="?child" />
		    <destroyentity name="?child" />
		</while>
	    </event>

	</script>

	<!-- *****************************************************
	  - This script handles the button for a game.
	  - Needs the ?menu.material variable for the material of
	  - the button.
	  -  ***************************************************** -->
	<script name="game_button">
	    <!--
	      - Initialization.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
	        <createpropclass name="pcproperties" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="picture1" />
	        <property id="propid(materialname)" value="?menu.material" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="50000" />
	        <property id="propid(height)" value="50000" />
	    </event>

	    <!--
	      - Select this button. Fire up the 'puzzle' game.
	      -->
	    <event name="pcbillboard_select">
	    	<sound name="boing" loop="false" />
		<var entity="menu" name="game" value="?game" />
	        <call entity="menu" event="startgame" />
	    </event>
	</script>

	<!-- *****************************************************
	  -  *****************************************************
	  - This is the puzzle game script.
	  -  *****************************************************
	  -  ***************************************************** -->
	<script name="puzzle_main">
	    <!--
	      - Initialize the puzzle game.
	      - The main puzzle entity maintains various variables to
	      - keep board state:
	      -    - grid<x>_<y>: an 2D array containing the name of the tile entity
	      -      at location x,y. Or '' if this is the empty tile.
	      -    - emptyx, emptyy: the location of the empty tile.
	      -    - allowmove: if true the player can move tiles.
	      -    - shuffle_count: if greater than 0 then we are randomizing the board.
	      -    - speed: a float indicating the speed with which tiles should move.
	      -    - dimension: the board size.
	      -    - tiledim: size of one tile.
	      -    - tiledimuv: size of one tile in texture coordinates.
	      -->
	    <event name="init">
	        <createpropclass name="pcinventory" />

		<!-- Set some defaults -->
		<!--
		<var name="dimension" value="4" />
		<var name="tiledim" value="70000" />
		<var name="tiledimuv" value=".25" />
		<var name="shuffle_count" value="30" />
		-->
		<var name="dimension" value="5" />
		<var name="tiledim" value="56000" />
		<var name="tiledimuv" value=".2" />
		<var name="shuffle_count" value="50" />

		<!-- Create the menu back button -->
		<createentity name="back_button" behaviour="back_button" />
		<var entity="back_button" name="game_entity" value="ent()" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="back_button" />

		<!-- Create the tiles of the board -->
	        <var name="uvtl" value="[0,0]" />
		<for var="y" start="0" end="?dimension-1">
		    <for var="x" start="0" end="?dimension-1" exec="inittile" />
	        </for>

		<!-- Clear the item at 0,0. This is the empty tile -->
		<property propclass="pc(p0_0,pcbillboard)"
			id="propid(visible)" value="false" />
		<property propclass="pc(p0_0,pcbillboard)"
			id="propid(clickable)" value="false" />
	        <var name="'grid'+0+'_'+0" value="''" />
	        <var name="emptyx" value="0" />
	        <var name="emptyy" value="0" />

		<var name="speed" value="0.03" />
		<var name="allowmove" value="false" />
		<!-- Start randomizing -->
		<var name="prev_dxdy" value="1" />
		<call event="fast_shuffle" />
	    </event>

	    <!--
	      - Initialize one tile. This will create the entity representing
	      - the tile and it will set it at the right position on the puzzle
	      - board.
	      - This event uses ?x and ?y which should be set outside this routine.
	      - It also uses ?uvtl for the texture mapping coordinates.
	      -->
	    <event name="inittile">
	        <var name="ent" value="'p'+?x+'_'+?y" />
		<print value="'Creating '+?ent" />
		<createentity name="?ent" behaviour="moving_tile" />
		<var name="ent" value="ent(?ent)" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="?ent" />
		<default propclass="pc(?ent,pcbillboard)" />
	        <property id="propid(x)" value="1000+?tiledim*?x" />
	        <property id="propid(y)" value="1000+?tiledim*?y" />
		<var name="tl" value="[?x,?y]*?tiledimuv" />
	        <property id="propid(uv_topleft)" value="?tl" />
	        <property id="propid(uv_botright)" value="?tl+[?tiledimuv,?tiledimuv]" />
		<!-- Set the 2d grid to contain the current entity -->
	        <var name="'grid'+?x+'_'+?y" value="?ent" />
	    </event>

	    <!--
	      - This routine is responsible for initiating a random move to
	      - randomize the board. The tile that moved will itself call this
	      - routine again if ?shuffle_count > 0. This routine will make sure
	      - that a tile doesn't move to where it was before. It uses
	      - ?prev_dxdy to do that.
	      -->
	    <event name="fast_shuffle">
	    	<!-- Try one of the four possible directions -->
	        <var name="dxdy" value="int(rand(4.0))" />
		<!-- If the direction is the opposite of the previous direction
		     we change it -->
		<var name="dxdy"
		    value="if(?prev_dxdy==(?dxdy^1),(?dxdy+1)%4,?dxdy)" />
		<var name="prev_dxdy" value="?dxdy" />
		<!-- Set ?dx and ?dy based on the four possible outcomes -->
		<if eval="?dxdy&2">
		    <true>
		        <var name="dx" value="0" />
		        <var name="dy" value="if(?dxdy&1,1,-1)" />
		    </true>
		    <false>
		        <var name="dx" value="if(?dxdy&1,1,-1)" />
		        <var name="dy" value="0" />
		    </false>
		</if>
		<!-- Location of the tile we want to move -->
		<var name="bx" value="?emptyx+?dx" />
		<var name="by" value="?emptyy+?dy" />
		<!-- Check if this is a valid location. If so we move it -->
		<if eval="?bx < ?dimension && ?bx >= 0 && ?by < ?dimension && ?by >= 0">
		    <true>
		        <var name="ent" value="?('grid'+?bx+'_'+?by)" />
		        <var entity="?ent" name="dx" value="-?dx" />
		        <var entity="?ent" name="dy" value="-?dy" />
			<call entity="?ent" event="move" />
		    </true>
		    <false>
		    	<!-- Try again -->
		        <call event="fast_shuffle" />
		    </false>
		</if>
	    </event>

	    <!--
	      - Start the game for real.
	      -->
	    <event name="start_game">
		<var name="speed" value="0.01" />
	        <var name="allowmove" value="true" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script handles all operations on a tile in the puzzle game.
	  -  ***************************************************** -->
        <script name="moving_tile">
	    <!--
	      - Initialize this tile.
	      - It assumes ?puzzle_main.x and ?puzzle_main.y are set to the
	      - location of the tile.
	      -->
	    <event name="init">
	    	<!-- Create timer so we can do smooth movement of this tile -->
	        <createpropclass name="pctimer" />
	        <createpropclass name="pcbillboard" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="picture1" />
	        <property id="propid(materialname)" value="picture1" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="?puzzle_main.tiledim" />
	        <property id="propid(height)" value="?puzzle_main.tiledim" />
		<var name="rightx" value="?puzzle_main.x" />
		<var name="righty" value="?puzzle_main.y" />
		<var name="curx" value="?rightx" />
		<var name="cury" value="?righty" />
	    </event>

	    <!--
	      - If this tile is moving then this event will be triggered
	      - every frame. Here we check how much time has elapsed and
	      - move the tile accordingly. If the tile has reached its
	      - destination then we call 'stoptimer'.
	      - The global ?puzzle_main.speed variable is used to control
	      - movement speed.
	      -->
	    <event name="pctimer_wakeupframe">
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(x)"
			value="1000+intpol(?delta,?intx1,?intx2)*?puzzle_main.tiledim" />
	        <property id="propid(y)"
			value="1000+intpol(?delta,?inty1,?inty2)*?puzzle_main.tiledim" />
		<if eval="?delta>=1" true="stoptimer" />
		<var name="delta" value="?delta+?puzzle_main.speed*
			param(parid(elapsedticks))" />
	    </event>

	    <!--
	      - The tile has moved its destination. Stop the timer.
	      - If we are in shuffle mode (i.e. randomizing the board) then
	      - we signal the main 'puzzle_main' entity to start moving another
	      - tile. Otherwise we set ?puzzle_main.allowmove to true so that
	      - the player can move another tile.
	      -->
	    <event name="stoptimer">
		<action propclass="pc(pctimer)" id="propid(Clear)" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(x)" value="1000+?curx*?puzzle_main.tiledim" />
	        <property id="propid(y)" value="1000+?cury*?puzzle_main.tiledim" />
		<if eval="?puzzle_main.shuffle_count>0">
		    <true>
		        <var entity="puzzle_main" name="shuffle_count"
				value="?puzzle_main.shuffle_count-1" />
		        <call entity="puzzle_main" event="fast_shuffle" />
		    </true>
		    <false>
		    	<call entity="puzzle_main" event="start_game" />
		    </false>
		</if>
	    </event>

	    <!--
	      - Initiate the move of this tile to the location specified
	      - by local variables ?dx and ?dy. Doing this will disable
	      - other moves.
	      -->
	    <event name="move">
		<var entity="puzzle_main" name="allowmove" value="false" />
		<var entity="puzzle_main" name="emptyx" value="?curx" />
		<var entity="puzzle_main" name="emptyy" value="?cury" />
		<var name="intx1" value="float(?curx)" />
		<var name="inty1" value="float(?cury)" />
		<!-- Make current grid item empty -->
	        <var entity="puzzle_main" name="'grid'+?curx+'_'+?cury"
			value="''" />
		<var name="curx" value="?curx+?dx" />
		<var name="cury" value="?cury+?dy" />
		<!-- Fill new grid item with current entity -->
	        <var entity="puzzle_main" name="'grid'+?curx+'_'+?cury"
			value="ent()" />
		<var name="intx2" value="float(?curx)" />
		<var name="inty2" value="float(?cury)" />
		<var name="delta" value="0.0" />
		<action propclass="pc(pctimer)" id="propid(WakeUpFrame)" />
	    </event>

	    <!--
	      - Select this tile. If movement is allowed then this will
	      - check if the empty location is next to this block and if
	      - so it will call 'move' to initiate the movement.
	      -->
	    <event name="pcbillboard_select">
	        <if eval="?puzzle_main.allowmove">
		    <var name="dx" value="?puzzle_main.emptyx-?curx" />
		    <var name="dy" value="?puzzle_main.emptyy-?cury" />
		    <if eval="(abs(?dx)==1&&?dy==0)||(abs(?dy)==1&&?dx==0)">
	    	        <sound name="click" loop="false" />
			<call event="move"/>
		    </if>
		</if>
	    </event>
	</script>

	<!-- *****************************************************
	  -  *****************************************************
	  - This is the maze game script.
	  -  *****************************************************
	  -  ***************************************************** -->
	<script name="maze_main">
	    <event name="init">
	        <print value="MAZE"/>
	        <createpropclass name="pcinventory" />

		<!-- Set some defaults -->
		<var name="dimension" value="16" />
		<var name="blockdim" value="18000" />

		<!-- Create the menu back button -->
		<createentity name="back_button" behaviour="back_button" />
		<var entity="back_button" name="game_entity" value="ent()" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="back_button" />

		<!--  Create the maze -->
		<var name="row0"  value="'BBBBBBBBBBBBBBBB'" />
		<var name="row1"  value="'B      B       B'" />
		<var name="row2"  value="'B BBBB B BBBBB B'" />
		<var name="row3"  value="'B B    B B   B B'" />
		<var name="row4"  value="'B B B BB B B B B'" />
		<var name="row5"  value="'B B B B    BBB B'" />
		<var name="row6"  value="'B   B B B      B'" />
		<var name="row7"  value="'BBBBB   B BBBBBB'" />
		<var name="row8"  value="'B     BBB B    B'" />
		<var name="row9"  value="'B BBBBB   BB B B'" />
		<var name="row10" value="'B B     B  B B B'" />
		<var name="row11" value="'B BB BB BB B B B'" />
		<var name="row12" value="'B B   B B    B B'" />
		<var name="row13" value="'B BBBBB B BBBB B'" />
		<var name="row14" value="'B       B      B'" />
		<var name="row15" value="'BBBBBBBBBBBBBBBB'" />
		<for var="y" start="0" end="?dimension-1">
		    <var name="row" value="?(row+?y)" />
		    <for var="x" start="0" end="?dimension-1">
		        <var name="maze+?x+'_'+?y" value="strsub(?row,?x,1)" />
		        <if eval="?(maze+?x+'_'+?y)=='B'" true="initblock" />
		    </for>
		</for>

		<createentity name="hero" behaviour="hero" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="?ent" />
	    </event>

	    <!--
	      - Initialize one block. This will create the entity representing
	      - the block and it will set it at the right position on the puzzle
	      - board.
	      - This event uses ?x and ?y which should be set outside this routine.
	      -->
	    <event name="initblock">
	        <var name="ent" value="'p'+?x+'_'+?y" />
		<print value="'Creating '+?ent" />
		<createentity name="?ent" behaviour="block" />
		<var name="ent" value="ent(?ent)" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="?ent" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script controls the behaviour of our hero.
	  -  ***************************************************** -->
	<script name="hero">
	    <!--
	      - Initialize our hero.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
	        <createpropclass name="pckeyinput" />
		<default propclass="pc(pcbillboard)" />
		<var name="herox" value="1" />
		<var name="heroy" value="1" />
	        <property id="propid(name)" value="hero" />
	        <property id="propid(materialname)" value="hero" />
	        <property id="propid(movable)" value="true" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="?maze_main.blockdim" />
	        <property id="propid(height)" value="?maze_main.blockdim" />
	        <property id="propid(x)" value="?herox*?maze_main.blockdim" />
	        <property id="propid(y)" value="?heroy*?maze_main.blockdim" />
		<default propclass="pc(pckeyinput)" />
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="right" />
		    <par id="parid(command)" value="right" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="left" />
		    <par id="parid(command)" value="left" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="up" />
		    <par id="parid(command)" value="up" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="down" />
		    <par id="parid(command)" value="down" />
		</action>
	    </event>

	    <!--
	      - Check if a move is possible and perform the move
	      - if so. Uses ?dx and ?dy to get the move direction and
	      - ?herox and ?heroy for current position.
	      -->
	    <event name="checkmove">
		<if eval="?maze_main.(maze+(?herox+?dx)+'_'+(?heroy+?dy))==' '">
		    <var name="herox" value="?herox+?dx" />
		    <var name="heroy" value="?heroy+?dy" />
		    <default propclass="pc(pcbillboard)" />
	            <property id="propid(x)" value="?herox*?maze_main.blockdim" />
	            <property id="propid(y)" value="?heroy*?maze_main.blockdim" />
		</if>
	    </event>

	    <!--
	      - Movement events.
	      -->
	    <event name="pckeyinput_right1">
	    	<var name="dx" value="1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_left1">
	    	<var name="dx" value="-1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_down1">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="1" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_up1">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="-1" />
		<call event="checkmove" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script handles all operations on a block in the maze game.
	  -  ***************************************************** -->
        <script name="block">
	    <!--
	      - Initialize this block.
	      - It assumes ?maze_main.x and ?maze_main.y are set to the
	      - x,y index of the block.
	      - Also uses ?maze_main.blockdim.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="block" />
	        <property id="propid(materialname)" value="slanted_stone" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="false" />
	        <property id="propid(restack)" value="false" />
	        <property id="propid(width)" value="500+?maze_main.blockdim" />
	        <property id="propid(height)" value="500+?maze_main.blockdim" />
	        <property id="propid(x)" value="?maze_main.x*?maze_main.blockdim" />
	        <property id="propid(y)" value="?maze_main.y*?maze_main.blockdim" />
	    </event>
	</script>

    </addon>

    <addon plugin="celentity" entityname="menu">
        <behaviour name="menu" />
    </addon>
</world>

