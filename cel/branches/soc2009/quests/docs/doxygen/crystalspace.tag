<tagfile>
  <compound kind="class">
    <name>awsEmbeddedComponent</name>
    <base>iAwsComponent</base>
    <filename>classawsEmbeddedComponent.html</filename>
    <member kind="function">
      <name>awsEmbeddedComponent</name>
      <anchor>66068af5345fd4bf6dff492fa9c44a02</anchor>
      <arglist>(iAws *mgr)</arglist>
    </member>
    <member kind="function">
      <name>DoFindChild</name>
      <anchor>71e54af043d2b7a97f30342b40e61fbe</anchor>
      <arglist>(unsigned int id)</arglist>
    </member>
    <member kind="function">
      <name>GetManager</name>
      <anchor>99be1c125c56ea5dd489280ac71c5d03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~awsEmbeddedComponent</name>
      <anchor>0a1b3b862af0109c9680e9ce4182df2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddChild</name>
      <anchor>bfd43cf5668dc3c24ca733d29676fc49</anchor>
      <arglist>(iAwsComponent *child)</arglist>
    </member>
    <member kind="function">
      <name>AddToLayout</name>
      <anchor>afa87966a356671bde21cd187024fd36</anchor>
      <arglist>(iAwsComponent *cmp, iAwsComponentNode *settings)</arglist>
    </member>
    <member kind="function">
      <name>AddToTabOrder</name>
      <anchor>45483e5c7026c224485e4db3a277e9f8</anchor>
      <arglist>(iAwsComponent *cmp)</arglist>
    </member>
    <member kind="function">
      <name>Broadcast</name>
      <anchor>567b62acc95c1d077e641441f7e8c439</anchor>
      <arglist>(uint32 signal)</arglist>
    </member>
    <member kind="function">
      <name>ChildAt</name>
      <anchor>fec13a8ff9d052c660c3bb6b7fcdd19d</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>ClearFlag</name>
      <anchor>cc51f0c7b51469aba01525966b47fcc8</anchor>
      <arglist>(unsigned int flag)</arglist>
    </member>
    <member kind="function">
      <name>clearPreferredSize</name>
      <anchor>a0c40015bc06ba4ad7bf0a0fed83b376</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClientFrame</name>
      <anchor>2ff5b623ed16e8737dc239869c6b5799</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ComponentAbove</name>
      <anchor>778b063756a14dc14bc26900f3b76699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ComponentBelow</name>
      <anchor>a96b3052e6451af7b555cd5a6ad50bdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Create</name>
      <anchor>6e6dd65b9b39e6ed175f49ad57effe93</anchor>
      <arglist>(iAws *m, iAwsComponent *parent, iAwsComponentNode *settings)</arglist>
    </member>
    <member kind="function">
      <name>Execute</name>
      <anchor>107ffe612f6682df02bc0bc2b85a5954</anchor>
      <arglist>(const char *action, iAwsParmList *parmlist)</arglist>
    </member>
    <member kind="function">
      <name>FindChild</name>
      <anchor>1cbf859b6152d6d0d3d83bd2596ed58d</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>Flags</name>
      <anchor>7913dae228ae5edcc1d8123b39d87392</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Focusable</name>
      <anchor>28f1714cd3955bc14772b3c47b10faee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Frame</name>
      <anchor>a094e34a91f0771a8d96b0c39ddc8e3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetChildCount</name>
      <anchor>3a017d9165aeb3b32590b98ce9dfc04b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetComponent</name>
      <anchor>4c13ca39931c1eaf47b0a664008b0c7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFirstFocusableChild</name>
      <anchor>a73eb2957f385a54161229c86305524d</anchor>
      <arglist>(iAwsComponent *comp)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>1e128a37bbf5be2e9fecd70c9e5d86d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getInsets</name>
      <anchor>ccd2bce57a1f46107db573cfd9221830</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetMarkToDelete</name>
      <anchor>b9d02a50a6c8ba3517dd5e712edd97b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getMinimumSize</name>
      <anchor>733b114b36aabc4502dd2e98525247d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>getPreferredSize</name>
      <anchor>6058db4fa0b313bf1fa1a7d0527d8c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetProperty</name>
      <anchor>69a09a2fcd8c6593b102e218ba1d61de</anchor>
      <arglist>(const char *name, void **parm)</arglist>
    </member>
    <member kind="function">
      <name>GetProperty</name>
      <anchor>cd5690057fb7abd4d528b76f15eba1f6</anchor>
      <arglist>(const char *name, intptr_t *parm)</arglist>
    </member>
    <member kind="function">
      <name>GetTabComponent</name>
      <anchor>4ab5fbe8bba97f3bf476cc3169daa4c7</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>GetTabLength</name>
      <anchor>3bd75818ad8b65043046144b4fa4e726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTopChild</name>
      <anchor>48569b2f1021470b334c9a5a96168a95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>493f93421903521f0174e149352b804e</anchor>
      <arglist>(iEvent &amp;Event)</arglist>
    </member>
    <member kind="function">
      <name>HasChildren</name>
      <anchor>0175c718accb449baecf9c052f42a7cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Hide</name>
      <anchor>03e255958ae85df69d83a2229b3b5a28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>5f76ad95840ef813506c767ea3049aa8</anchor>
      <arglist>(iAwsComponent *component)</arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>7b9294817bdfe86677eaa48f5f2c3409</anchor>
      <arglist>(csRect area)</arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>fbe1a2a95988e5c139a466955cf68358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isDeaf</name>
      <anchor>06fec56f9c8b7ae3085bfadfdb206851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isFocused</name>
      <anchor>a1fd252b6530930df71ad3e731fe7764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>isHidden</name>
      <anchor>7723ffab176c324c394bf67cf4761694</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsMaximized</name>
      <anchor>f0db0ebdc3030840a7dcbf043b090f92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Layout</name>
      <anchor>78a6d639ec310fde1a9e8fa4cb2d5fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LayoutChildren</name>
      <anchor>b78cc624357d1b4a4221ab4a1c9248e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LinkAbove</name>
      <anchor>5cb25dc9064b4ce1bd5b514db92be249</anchor>
      <arglist>(iAwsComponent *c)</arglist>
    </member>
    <member kind="function">
      <name>LinkBelow</name>
      <anchor>9635ca5d488bafe2cf6175dd91d9fa38</anchor>
      <arglist>(iAwsComponent *c)</arglist>
    </member>
    <member kind="function">
      <name>Lower</name>
      <anchor>737c77890bd80d8360e228f5e564773a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MarkToDelete</name>
      <anchor>bfe0882bda617fc83255aa67edccdbc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Maximize</name>
      <anchor>b72f767cf499e2dea28635d00bc9911b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Move</name>
      <anchor>05333866f6754fd4849bec4a08a0d044</anchor>
      <arglist>(int delta_x, int delta_y)</arglist>
    </member>
    <member kind="function">
      <name>MoveTo</name>
      <anchor>b766dce4b168874252bd8cdf194dd123</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>OnAdded</name>
      <anchor>a6ae1ab8d78733bb8389da1c5f3c9e13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnChildHide</name>
      <anchor>df37a00d6545a564725186aad22695c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnChildMoved</name>
      <anchor>821fd0d2d7204f613e3997bacefd5056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnChildShow</name>
      <anchor>7257f6b5eeceb2484697b92a208a8237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnDraw</name>
      <anchor>b4ff7204822fbedeba56b8ea15934936</anchor>
      <arglist>(csRect clip)</arglist>
    </member>
    <member kind="function">
      <name>OnFrame</name>
      <anchor>d819399afddde9898d5ab93d35d0cda8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnGainFocus</name>
      <anchor>93faa8ae38a55b51a420a02dfac9c5be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnKeyboard</name>
      <anchor>7f23a6602b5dd3de5acba09616d7d8c3</anchor>
      <arglist>(const csKeyEventData &amp;eventData)</arglist>
    </member>
    <member kind="function">
      <name>OnLostFocus</name>
      <anchor>e7826786995ed2b88528b034df678f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnLower</name>
      <anchor>f7d9f4e5e402d9a6ba66312c2c0d9b3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnMouseClick</name>
      <anchor>0fc6d76f24089372f0efe0945291abbd</anchor>
      <arglist>(int button, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseDoubleClick</name>
      <anchor>9046ab0c3ab72e87a4fc9535749ca18b</anchor>
      <arglist>(int button, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseDown</name>
      <anchor>a20e9981b07246293f72cd4ef4f2c7e7</anchor>
      <arglist>(int button, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseEnter</name>
      <anchor>65566b10c00e8de3167c080f64a8f466</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnMouseExit</name>
      <anchor>23a2179fe5706be8168a17af85d4d295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnMouseMove</name>
      <anchor>623fe0ed0cfeb7e8ed8d4d1b7fe0e9da</anchor>
      <arglist>(int button, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseUp</name>
      <anchor>59d87cb2866f98e5fe49889a762f1872</anchor>
      <arglist>(int button, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>OnRaise</name>
      <anchor>cfaa1622cc992dc39901174e8046c7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnResized</name>
      <anchor>00dfdb64ba0dbad3b4da14e7819be932</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnSetFocus</name>
      <anchor>3288274db5b5bb842fa6b9056417c34f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnUnsetFocus</name>
      <anchor>f3cf449b4ab3cb9a69f1179a792f5556</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Overlaps</name>
      <anchor>389e711958e5392921bd599a39f7ed6a</anchor>
      <arglist>(csRect &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>Parent</name>
      <anchor>d909f6a9196c553dd29fcbfd33bc7c61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Raise</name>
      <anchor>4e49a2650cfd95369c9680be2c713ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RedrawTag</name>
      <anchor>652c2ceeffe9be3bb6d8aa79cf8e6e29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RegisterSlot</name>
      <anchor>2b7eb5276adda0924ac3ba6f9869988b</anchor>
      <arglist>(iAwsSlot *slot, unsigned long signal)</arglist>
    </member>
    <member kind="function">
      <name>RemoveChild</name>
      <anchor>c34207a891fd16a342ba0c54e6cf88bc</anchor>
      <arglist>(iAwsComponent *child)</arglist>
    </member>
    <member kind="function">
      <name>Resize</name>
      <anchor>1a9214d8c5081dcec5aadeb6cd273e7d</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>ResizeTo</name>
      <anchor>966db58508abef471b7dbc19514c918e</anchor>
      <arglist>(csRect newFrame)</arglist>
    </member>
    <member kind="function">
      <name>SetComponentAbove</name>
      <anchor>cff0de7a890ffcfb8431798fea19e490</anchor>
      <arglist>(iAwsComponent *cmp)</arglist>
    </member>
    <member kind="function">
      <name>SetComponentBelow</name>
      <anchor>0f614120caf565aa53a5d3fbe678fd28</anchor>
      <arglist>(iAwsComponent *cmp)</arglist>
    </member>
    <member kind="function">
      <name>SetDeaf</name>
      <anchor>c25ebee0996cebccb5e523decce2705d</anchor>
      <arglist>(bool isDeaf)</arglist>
    </member>
    <member kind="function">
      <name>SetFlag</name>
      <anchor>e2176a2645031283f5e588d58f27cd2d</anchor>
      <arglist>(unsigned int flag)</arglist>
    </member>
    <member kind="function">
      <name>SetFocus</name>
      <anchor>ad4ad67518be872d17d4b62e5f69d329</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetFocusable</name>
      <anchor>a4562eb3f3586490ca7c0bf5f06c1af3</anchor>
      <arglist>(bool focusable)</arglist>
    </member>
    <member kind="function">
      <name>SetID</name>
      <anchor>cdaa33ee5652190d3ee70969c0eeb766</anchor>
      <arglist>(unsigned long id)</arglist>
    </member>
    <member kind="function">
      <name>SetLayout</name>
      <anchor>7695190c06751446a9192655f15b8749</anchor>
      <arglist>(iAwsLayoutManager *layoutMgr)</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>8ebc34b1e42415f235b70099136a6b0d</anchor>
      <arglist>(iAwsComponent *parent)</arglist>
    </member>
    <member kind="function">
      <name>setPreferredSize</name>
      <anchor>01c1d37db9671859fcfd95ad4505b342</anchor>
      <arglist>(const csRect &amp;size)</arglist>
    </member>
    <member kind="function">
      <name>SetProperty</name>
      <anchor>6bc60399e5c08db38d230af1ee355e71</anchor>
      <arglist>(const char *name, void *parm)</arglist>
    </member>
    <member kind="function">
      <name>SetProperty</name>
      <anchor>da2609e69941f101ee7d3da26cd6c84a</anchor>
      <arglist>(const char *name, intptr_t parm)</arglist>
    </member>
    <member kind="function">
      <name>SetRedrawTag</name>
      <anchor>40fca03b9fc3d3973fe1c192ac661a92</anchor>
      <arglist>(unsigned int tag)</arglist>
    </member>
    <member kind="function">
      <name>SetTopChild</name>
      <anchor>ae1af5474b1f1d01c274625a913d993d</anchor>
      <arglist>(iAwsComponent *child)</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>74e6305f975f10eefad878f4c938a9e6</anchor>
      <arglist>(iAws *wmgr, iAwsComponentNode *settings)</arglist>
    </member>
    <member kind="function">
      <name>Show</name>
      <anchor>b3f1b8bb3e25f6a3b96354a6227b7d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TabNext</name>
      <anchor>1ad0cf66998f627ed435c033fc7813be</anchor>
      <arglist>(iAwsComponent *cmp)</arglist>
    </member>
    <member kind="function">
      <name>TabPrev</name>
      <anchor>f34357a8512ef15f97bc6e50efb57c68</anchor>
      <arglist>(iAwsComponent *cmp)</arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>687cd8bb49322fe02c70a99625b06810</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Unlink</name>
      <anchor>5b35981c96c7be2233f596b2e55036f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnMaximize</name>
      <anchor>cb8ed5401f8973f2d3725a583dcbd907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnregisterSlot</name>
      <anchor>88f0d1aca7aa407590f0901e4fec73ed</anchor>
      <arglist>(iAwsSlot *slot, unsigned long signal)</arglist>
    </member>
    <member kind="function">
      <name>UnsetFocus</name>
      <anchor>f584ca1ab24940cb2e166c1853556456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Window</name>
      <anchor>51f403395a4ba2d4274f4186cdb2798f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WindowManager</name>
      <anchor>d3201b8ee931770b670029b3fea755c1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>awsEmbeddedComponentFactory</name>
    <base>iAwsComponentFactory</base>
    <filename>classawsEmbeddedComponentFactory.html</filename>
    <member kind="function">
      <name>wmgr</name>
      <anchor>d34646ee18a55f9e19a39c350ae5bc04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>awsEmbeddedComponentFactory</name>
      <anchor>6d0a3e8ddd9cadf679bab1e9d540fdee</anchor>
      <arglist>(iAws *_wmgr)</arglist>
    </member>
    <member kind="function">
      <name>~awsEmbeddedComponentFactory</name>
      <anchor>95f368fe0b7f8a9a22fd0799922730dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>88cdebe5ada7439fa13f708de5a149d2</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function">
      <name>RegisterConstant</name>
      <anchor>04a6a2b7c23c0e5c20a3cdb386eafa27</anchor>
      <arglist>(const char *name, int value)</arglist>
    </member>
    <member kind="function">
      <name>WindowManager</name>
      <anchor>03381fac6d8ce6dc725deb6b727f6318</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::CowWrapper</name>
    <filename>classCS_1_1CowWrapper.html</filename>
    <member kind="function">
      <name>CowWrapper::allocSize</name>
      <anchor>d67ec763181398cbbba500f71b04fbe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CowWrapper::CowWrapper</name>
      <anchor>9bed6919141dbe1aac3708367e8641d9</anchor>
      <arglist>(const CowWrapper &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>CowWrapper::CowWrapper</name>
      <anchor>041c1152ca5b28f7808b5041f319ec9c</anchor>
      <arglist>(const T &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>CowWrapper::operator *</name>
      <anchor>649b992bc45e17dbe3a76223c061d9bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CowWrapper::operator *</name>
      <anchor>803d8ead4e91477282bcc9e6ec4c794d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>CowWrapper::operator-&gt;</name>
      <anchor>071b643a9ec30d989db6fcb68e3a4acf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CowWrapper::operator-&gt;</name>
      <anchor>5a11d334c8fc1946bc530e8ad8ff3959</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::DocumentHelper::Implementation::FilterDocumentNodeIterator</name>
    <base>scfImplementation1</base>
    <filename>classCS_1_1DocumentHelper_1_1Implementation_1_1FilterDocumentNodeIterator.html</filename>
    <member kind="function">
      <name>DocumentHelper::Implementation::FilterDocumentNodeIterator::FilterDocumentNodeIterator</name>
      <anchor>078e1af5feeeab28b850430a89f7640c</anchor>
      <arglist>(csRef&lt; iDocumentNodeIterator &gt; parent, T filter)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::Implementation::FilterDocumentNodeIterator::HasNext</name>
      <anchor>c87b928debf7f43cf19072fa648199dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::Implementation::FilterDocumentNodeIterator::Next</name>
      <anchor>a84f85cee1677a14932fd99e6db1383a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ImageAutoConvert</name>
    <filename>classCS_1_1ImageAutoConvert.html</filename>
    <member kind="function">
      <name>ImageAutoConvert::ImageAutoConvert</name>
      <anchor>97f0b14081ae9e7fa676f6c7d9f76677</anchor>
      <arglist>(iImage *image, int desiredFormat)</arglist>
    </member>
    <member kind="function">
      <name>ImageAutoConvert::operator iImage *</name>
      <anchor>30fe827f697562b34c939abcf8fbee6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImageAutoConvert::operator-&gt;</name>
      <anchor>07daa7d016608ea82fa6786b793c9dfb</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Implementation::NonCopyable_</name>
    <filename>classCS_1_1Implementation_1_1NonCopyable__.html</filename>
    <member kind="function">
      <name>Implementation::NonCopyable_::NonCopyable_</name>
      <anchor>787732b2dc8dacdac3729f6c967b00e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Implementation::NonCopyable_::~NonCopyable_</name>
      <anchor>ac27e1553f08fbb287529890a1c8b3e0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ImportKit</name>
    <filename>classCS_1_1ImportKit.html</filename>
    <member kind="function">
      <name>ImportKit::ImportKit</name>
      <anchor>36f7d68620381346b78985a70557463f</anchor>
      <arglist>(iObjectRegistry *objectReg)</arglist>
    </member>
    <member kind="function">
      <name>ImportKit::OpenContainer</name>
      <anchor>084dac887e1d1fcfa8606c45d3e5f5a7</anchor>
      <arglist>(const char *filename, const char *path=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ImportKit::Container</name>
    <filename>classCS_1_1ImportKit_1_1Container.html</filename>
    <member kind="function">
      <name>ImportKit::Container::materials</name>
      <anchor>e9645cf058dd0bbee17a8781893c5802</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::models</name>
      <anchor>3a634b2b36a79a6a45640dca0372dd9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::ImportKit</name>
      <anchor>8fd5f83bf6780642273df95b08c8a545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::ImportKitImpl::Glue</name>
      <anchor>bfd99b861ae70e5bd7ac6777e23ea944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::GetMaterial</name>
      <anchor>19bd10bbf07566a901d2b5c75f5b2c18</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::GetMaterialCount</name>
      <anchor>a805bf4bbc876a97a141d0d9e513ceda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::GetModel</name>
      <anchor>b88a45d78a9c24b69491310de41ed3e2</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::GetModelCount</name>
      <anchor>47670c5ffba0b5dbaf4f14bf485acc4c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ImportKit::Container::Material</name>
    <filename>classCS_1_1ImportKit_1_1Container_1_1Material.html</filename>
    <member kind="function">
      <name>ImportKit::Container::Material::Material</name>
      <anchor>8e3f02e893d4317ea596e961805d848c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Material::name</name>
      <anchor>8dacc2ce73d8ee9dbe11040ee6177146</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Material::texture</name>
      <anchor>aa4e29dadf1f88a9b55683fc8cc68951</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Material::Container</name>
      <anchor>ee29d97f7e87f0263024133085c28e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Material::ImportKitImpl::Glue</name>
      <anchor>bfd99b861ae70e5bd7ac6777e23ea944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Material::GetName</name>
      <anchor>5dcd098c8c82b97ca38fe3fcb97198d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Material::GetTextureFile</name>
      <anchor>af614d640f5dcedf7e6d08075bd1c638</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ImportKit::Container::Model</name>
    <filename>classCS_1_1ImportKit_1_1Container_1_1Model.html</filename>
    <member kind="function">
      <name>ImportKit::Container::Model::GetType</name>
      <anchor>98cf331552f1471b7b3ee81dd065a24a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Model</name>
      <anchor>7434cc263385b6a9ba3b7ee27b32978b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::glueModel</name>
      <anchor>705c07decea4d4a4c0ef538cf76cc49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::meshes</name>
      <anchor>832f0847cde2a4d673111904506ccab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::name</name>
      <anchor>d1c02455ecb95fa31f3ccd94ab7fe74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::type</name>
      <anchor>012de7fbcf2326c840bf656a4402f91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Container</name>
      <anchor>ee29d97f7e87f0263024133085c28e3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::ImportKitImpl::Glue</name>
      <anchor>bfd99b861ae70e5bd7ac6777e23ea944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::ModelType</name>
      <anchor>ae39a6153821841af7e46253b46cfb95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>actory</name>
      <anchor>ae39a6153821841af7e46253b46cfb9586ccb94f951d71d7576ed9447223cd7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bject</name>
      <anchor>ae39a6153821841af7e46253b46cfb9544e4a1915112101620dd6b5d893c1a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::GetMesh</name>
      <anchor>230e544850644dac7aacbb18c7bff59d</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::GetMeshCount</name>
      <anchor>900af8443ea7a39536572b7d4e68dc60</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::GetName</name>
      <anchor>78680abb3088cebe74e5864cc757790a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ImportKit::Container::Model::Mesh</name>
    <filename>classCS_1_1ImportKit_1_1Container_1_1Model_1_1Mesh.html</filename>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::material</name>
      <anchor>fe08ed7d7ad6fb04775fb24ab7556927</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::normals</name>
      <anchor>96080626afa060592ae8bbecd6d460b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::texcoords</name>
      <anchor>18ce38cf29ab9a1cf5e54ab190a6b26b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::triCount</name>
      <anchor>1c12705e78ea97761823b633e66cdf79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::tris</name>
      <anchor>672be3c1567d0d46e762e3ecc03b462a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::vertexCount</name>
      <anchor>6748253637583d75b7919ed419395b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::verts</name>
      <anchor>88f281ae5445569fa39d02de59a84624</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::ImportKitImpl::Glue</name>
      <anchor>bfd99b861ae70e5bd7ac6777e23ea944</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::Model</name>
      <anchor>2bf2a0e9b454c55aa5dcb5aa4698697b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetMaterial</name>
      <anchor>b111397a5e71f095a93bcdc34d58ef7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetNormals</name>
      <anchor>36d844ba7e7686ddd271601dfaf85180</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetTexCoords</name>
      <anchor>d9f852752631227d9ccb7b580a69ad4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetTriangleCount</name>
      <anchor>850fb83b5c2f0509571fbf16f4e564ae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetTriangles</name>
      <anchor>7a9bf563c20e4415ca5f1e7394cf4d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetVertexCount</name>
      <anchor>e61c55e3d0cf8cfa19ee8a8d73440dd1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ImportKit::Container::Model::Mesh::GetVertices</name>
      <anchor>06e52455c63949a6a0898eeed058fdc9</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Math::Ode45</name>
    <filename>classCS_1_1Math_1_1Ode45.html</filename>
    <member kind="function">
      <name>Math::Ode45::Step</name>
      <anchor>c8085461e3e8b411a67a99c070cb33b7</anchor>
      <arglist>(FuncType &amp;f, ArgType h, ArgType t0, ArgType y0, ArgType &amp;yout)</arglist>
    </member>
    <member kind="function">
      <name>Math::Ode45::Step</name>
      <anchor>0a9fc38bbee91c52e0edf079dd51acb4</anchor>
      <arglist>(FuncType &amp;f, ArgType h, ArgType t0, csVector3 y0, csVector3 &amp;yout)</arglist>
    </member>
    <member kind="function">
      <name>Math::Ode45::Step</name>
      <anchor>eb07d672fb71fe274e22b6ac768fb30c</anchor>
      <arglist>(FuncType &amp;f, ArgType h, ArgType t0, ArgType *y0, ArgType *yout, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::MeasureTime</name>
    <filename>classCS_1_1MeasureTime.html</filename>
    <member kind="function">
      <name>MeasureTime::~MeasureTime</name>
      <anchor>33dae9eea229063ca2fc1602c01cfbd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MeasureTime::offsetTime</name>
      <anchor>11ea32b220fdbd3cbff6629491a45422</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MeasureTime::text</name>
      <anchor>162d3fe7ca561490e289e65344fef807</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MeasureTime::MeasureTime</name>
      <anchor>305f7ccf5210101f1038fb0c1762c0f8</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <name>MeasureTime::PrintIntermediate</name>
      <anchor>c7178997ae62bb66eea28937f0c5fa8a</anchor>
      <arglist>(const char *descr,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::AllocatorAlign</name>
    <filename>classCS_1_1Memory_1_1AllocatorAlign.html</filename>
    <member kind="function">
      <name>Memory::AllocatorAlign::Realloc</name>
      <anchor>1459d0da19991a008eaaace55da6c1f1</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorAlign::SetMemTrackerInfo</name>
      <anchor>ad87ab278f8c990889b4cf2b991fda9b</anchor>
      <arglist>(const char *info)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorAlign::Alloc</name>
      <anchor>0af0311b3d96698570df51a452fe5931</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorAlign::Free</name>
      <anchor>91e940f351ae5f185115a8dba225ea96</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::AllocatorHeap</name>
    <base>CS::Memory::AllocatorHeapBase</base>
    <filename>classCS_1_1Memory_1_1AllocatorHeap.html</filename>
  </compound>
  <compound kind="class">
    <name>CS::Memory::AllocatorHeapBase</name>
    <filename>classCS_1_1Memory_1_1AllocatorHeapBase.html</filename>
    <member kind="function">
      <name>Memory::AllocatorHeapBase::AllocatorHeapBase</name>
      <anchor>928ab003fcc315bd1d43f77213e0fd44</anchor>
      <arglist>(const HeapAccess &amp;heap)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorHeapBase::AllocatorHeapBase</name>
      <anchor>b617631fe3f1530fcd32cdb1e24952e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorHeapBase::Alloc</name>
      <anchor>8c3a33074fec52234ae2edd4d6f0e2a7</anchor>
      <arglist>(const size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorHeapBase::Free</name>
      <anchor>bb570cf6349ed2de0c24034c0a7d97b7</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorHeapBase::Realloc</name>
      <anchor>4bef794b1fe6b684af91b18687707074</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorHeapBase::SetMemTrackerInfo</name>
      <anchor>b0c98707372ec37938f584843c2561ba</anchor>
      <arglist>(const char *info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::AllocatorMalloc</name>
    <filename>classCS_1_1Memory_1_1AllocatorMalloc.html</filename>
    <member kind="function">
      <name>Memory::AllocatorMalloc::Alloc</name>
      <anchor>fa17d40dbfdc7cf1b6d60ef3b827bc04</anchor>
      <arglist>(const size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorMalloc::Free</name>
      <anchor>193aeb12cd9693952e567f62cdca8afe</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorMalloc::Realloc</name>
      <anchor>862553872b0e7205c02c76b1212886e3</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorMalloc::SetMemTrackerInfo</name>
      <anchor>917b34d5fc3507c18d86b9924f74e7dc</anchor>
      <arglist>(const char *info)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::Heap</name>
    <filename>classCS_1_1Memory_1_1Heap.html</filename>
    <member kind="function">
      <name>Memory::Heap::Alloc</name>
      <anchor>8a52d84e6a5e9e95a9b4e1cc90c0a80a</anchor>
      <arglist>(const size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Memory::Heap::Free</name>
      <anchor>9a1d94499a562e232c99ecf9c88dcc76</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>Memory::Heap::Realloc</name>
      <anchor>14e49de03ced0e98cb9f3397af3e02e7</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Memory::Heap::Trim</name>
      <anchor>1f66ec49b5d6f68f4dba908de9a53803</anchor>
      <arglist>(size_t pad=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::LocalBufferAllocator</name>
    <filename>classCS_1_1Memory_1_1LocalBufferAllocator.html</filename>
    <member kind="function">
      <name>Memory::LocalBufferAllocator::Alloc</name>
      <anchor>2cac68c57f9f48e066c896db4c328125</anchor>
      <arglist>(size_t allocSize)</arglist>
    </member>
    <member kind="function">
      <name>Memory::LocalBufferAllocator::Free</name>
      <anchor>f2a4045ea903c443321001a77d28627a</anchor>
      <arglist>(T *mem)</arglist>
    </member>
    <member kind="function">
      <name>Memory::LocalBufferAllocator::LocalBufferAllocator</name>
      <anchor>f10b53133eb1c31903df55d132c8301a</anchor>
      <arglist>(const ExcessAllocator &amp;xalloc)</arglist>
    </member>
    <member kind="function">
      <name>Memory::LocalBufferAllocator::LocalBufferAllocator</name>
      <anchor>1e68557b7c0a4b7602669a1d2d0c330f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Memory::LocalBufferAllocator::Realloc</name>
      <anchor>19c8a164c882063e6f466adf9c16661b</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::NumberedFilenameHelper</name>
    <filename>classCS_1_1NumberedFilenameHelper.html</filename>
    <member kind="function">
      <name>NumberedFilenameHelper::NumberedFilenameHelper</name>
      <anchor>2e214ed885a507d9ab3cbb7d1dd4d361</anchor>
      <arglist>(const char *mask=0)</arglist>
    </member>
    <member kind="function">
      <name>NumberedFilenameHelper::FindNextFilename</name>
      <anchor>6deed242890456568dc027a383e4f7cd</anchor>
      <arglist>(iVFS *vfs=0)</arglist>
    </member>
    <member kind="function">
      <name>NumberedFilenameHelper::NextFilename</name>
      <anchor>ed54767b71d007d7677259348e1f3b85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NumberedFilenameHelper::Reset</name>
      <anchor>d27563eb6e305c14d23744c3abf83d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NumberedFilenameHelper::SetMask</name>
      <anchor>93480e0f4fd385df6d839cbacab31593</anchor>
      <arglist>(const char *mask)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ShaderVariableContextImpl</name>
    <base>iShaderVariableContext</base>
    <filename>classCS_1_1ShaderVariableContextImpl.html</filename>
    <member kind="function">
      <name>ShaderVariableContextImpl::variables</name>
      <anchor>312d0565f1fcd26d3599e530507d3976</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::AddVariable</name>
      <anchor>256209c72cce9df47f507e674f1d3f7b</anchor>
      <arglist>(csShaderVariable *variable)</arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::Clear</name>
      <anchor>52bad6fa7ed45b862bbdcd3796414f14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::GetShaderVariables</name>
      <anchor>8fcf9d57cd61dfbf905990ff66349f7b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::GetVariable</name>
      <anchor>b5b44a6967413e57494ffb7c91a5da19</anchor>
      <arglist>(csStringID name) const </arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::IsEmpty</name>
      <anchor>5566b12c7bac8df3df4d2dc2acb6ae2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::PushVariables</name>
      <anchor>c2ed7213e0ecb128a7034b33152c049d</anchor>
      <arglist>(iShaderVarStack *stacks) const </arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::RemoveVariable</name>
      <anchor>769e9ec74d745b269520a2b073370322</anchor>
      <arglist>(csShaderVariable *variable)</arglist>
    </member>
    <member kind="function">
      <name>ShaderVariableContextImpl::ReplaceVariable</name>
      <anchor>8522b5eee4caa57cd3ba074e838b1047</anchor>
      <arglist>(csShaderVariable *variable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::PCMSampleConverter</name>
    <filename>classCS_1_1SndSys_1_1PCMSampleConverter.html</filename>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::last_sample</name>
      <anchor>70e82d8486b0076de29741816f80145c</anchor>
      <arglist>[CS_SOUND_ELEMENT_MAX_CHANNELS]</arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::position_offset</name>
      <anchor>c6eef20af5e344f482599e5374ddee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::src_bytes</name>
      <anchor>fa4a2bafed16ba790bc11ba7efc3abe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::src_channels</name>
      <anchor>5e5861a7fc5d54e2d46353a70515f911</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::src_frequency</name>
      <anchor>4237ae3a26ab9e22f02ecb112d02df87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::swap_16</name>
      <anchor>44285cd8226e6cd619aef599e4ef87ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::PCMSampleConverter</name>
      <anchor>ff600470124d5b919f1a489be8ed908f</anchor>
      <arglist>(int source_channels, int source_bitspersample, int source_frequency, bool swap16=false)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::ConvertBuffer</name>
      <anchor>37ac375ff754462f60c171e6c16d11cc</anchor>
      <arglist>(const void *source, size_t source_len, void *dest, int dest_channels, int dest_bitspersample, int dest_frequency)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::GetRequiredOutputBufferMultiple</name>
      <anchor>69e9cb5b6a07be2293225060c70d0a15</anchor>
      <arglist>(int dest_channels, int dest_bitspersample, int dest_frequency)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::PCMSampleConverter::SetSourceProperties</name>
      <anchor>44c8074a80383cd7a0f43cdbfd7fff28</anchor>
      <arglist>(int source_channels, int source_bitspersample, int source_frequency)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::QEntry</name>
    <filename>classCS_1_1SndSys_1_1QEntry.html</filename>
    <member kind="function">
      <name>SndSys::QEntry::data</name>
      <anchor>68a472a34f6dab74ba8867a700345f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::QEntry::next</name>
      <anchor>5455e2c660b7da8d1e491262dd1f024e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::QEntry::prev</name>
      <anchor>7e0668ed138e2e33da2ca9287b9f4046</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::Queue</name>
    <filename>classCS_1_1SndSys_1_1Queue.html</filename>
    <member kind="function">
      <name>SndSys::Queue::~Queue</name>
      <anchor>202cd92a38bfa5bcac553cb6663a40c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::QueueIterator&lt; T &gt;</name>
      <anchor>8ad2dc581d508c66de7abccf64e7d4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::Queue</name>
      <anchor>797658784eb71da7e9376e04c2f048e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::Clear</name>
      <anchor>be5e3c2036214db5c8c5eba8ceb9bfda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::DequeueEntry</name>
      <anchor>3c9ce58e3e187375c943a2670f88e3ac</anchor>
      <arglist>(bool bWait=false)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::Find</name>
      <anchor>6d049ba0d13f55d1b3e12b9485b6e11a</anchor>
      <arglist>(T *data)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::GetClosed</name>
      <anchor>c61bdd1f8527bbe894277163d85fbe8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::GetDupecheck</name>
      <anchor>3b1c3ada8c5aa3e2ad6c595ffc7b2887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::GetIterator</name>
      <anchor>f5c7873438801b0820c0ebc2571c3e84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::Length</name>
      <anchor>abd8d5d95c556eb2cbb902b05b45e6de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::Lock</name>
      <anchor>1047b67a91e98ccb14cdd18811e29350</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::QueueEntry</name>
      <anchor>6fa11ca09e82a911ee28e85634ddc2aa</anchor>
      <arglist>(T *pData)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::SetClosed</name>
      <anchor>8460e64c36abe9eac89b8d7b53278f20</anchor>
      <arglist>(bool Closed)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::SetDupecheck</name>
      <anchor>c45f24a87141b79d3b6d5927f0d5e361</anchor>
      <arglist>(bool Check)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::Unlock</name>
      <anchor>a13a3c1ad76e9537bf02a63ce559d67d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_bClosed</name>
      <anchor>656749073aabb0fba4f7c264a145c820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_bDupeCheck</name>
      <anchor>9203a8b455810d1d786d44dbf5793a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_EntryCount</name>
      <anchor>7ed210a3a0f527877aefdabd8a371de5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_pAccessMutex</name>
      <anchor>05506659009b3e8ec622d1b10314883d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_pEntryReadyCondition</name>
      <anchor>7ec1392de828361fe088a4f522ce80aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_pHead</name>
      <anchor>34bdcdf452d4da025e8a9ed4f01907c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::Queue::m_pTail</name>
      <anchor>fb8643a7080346f9046b3c3eb3dc53fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::QueueIterator</name>
    <filename>classCS_1_1SndSys_1_1QueueIterator.html</filename>
    <member kind="function">
      <name>SndSys::QueueIterator::First</name>
      <anchor>4e5aa5970bc2944b3afd7eedcd72c638</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::Last</name>
      <anchor>b69feebdff10cfc7df26f6b170d20fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::Next</name>
      <anchor>94022c9fd464f65d49422e1ed29564a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::Prev</name>
      <anchor>f450623570990560ef1112ad93d09362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::QueueIterator</name>
      <anchor>74a679cb27e7d7ba98214e5d17d7da79</anchor>
      <arglist>(Queue&lt; T &gt; *queue)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::~QueueIterator</name>
      <anchor>b2ef73961e5ac0cb5a793952df9160c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::current</name>
      <anchor>726d6a45af816db97537a5aeb7422054</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueIterator::q</name>
      <anchor>c5f4af6756176fb3703a2df963d15511</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::SndSysBasicData</name>
    <base>scfImplementation1</base>
    <filename>classCS_1_1SndSys_1_1SndSysBasicData.html</filename>
    <member kind="function">
      <name>SndSys::SndSysBasicData::CreateStream</name>
      <anchor>ed95d7e0c88c142a1bc14db10a7ce08d</anchor>
      <arglist>(csSndSysSoundFormat *pRenderFormat, int Mode3D)=0</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::GetDataSize</name>
      <anchor>20ba69335e582ca52d326030c7b26dbc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::GetDescription</name>
      <anchor>a5988c9cd7b6b1edd2ac9abdf11bba79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::GetFormat</name>
      <anchor>3f42d77026ce4fd6f6ad95e145d666af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::GetFrameCount</name>
      <anchor>86c4259f2f517f85cf6c84b679f1e552</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::Initialize</name>
      <anchor>260ecd938c4eb1430ee2f289cee27709</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::SetDescription</name>
      <anchor>2bbfd26e628c533a98a950ac6a9488ef</anchor>
      <arglist>(const char *pDescription)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::m_bInfoReady</name>
      <anchor>f895e33412560483c4d32d2ecfb776e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::m_FrameCount</name>
      <anchor>94fb2827f6247cb27de6807f6dd79a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::m_pDescription</name>
      <anchor>d2b107809bcac02d165df98c8bad7b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicData::m_SoundFormat</name>
      <anchor>bd3297c1100a80b7a720c88b9b76c789</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::SndSysBasicStream</name>
    <base>scfImplementation1</base>
    <filename>classCS_1_1SndSys_1_1SndSysBasicStream.html</filename>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::StreamNotificationType</name>
      <anchor>76e4566d647662f1098b92bf661c3250</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::AdvancePosition</name>
      <anchor>62bab7900a68ef1e199a03cb492d0fa6</anchor>
      <arglist>(size_t frame_delta)=0</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::CopyBufferBytes</name>
      <anchor>cdc756c9e292e88068ac871782c17df6</anchor>
      <arglist>(size_t max_dest_bytes)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::Get3dMode</name>
      <anchor>373d8eff94729fc78bb62e4400426e74</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetAutoUnregister</name>
      <anchor>0b88b49f8b7156f804926129501e49af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetAutoUnregisterRequested</name>
      <anchor>73d3270b03c354a19b4be31204ab1b67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetDataPointers</name>
      <anchor>3ae2b0b0ff8426459a516be10f6f05ea</anchor>
      <arglist>(size_t *position_marker, size_t max_requested_length, void **buffer1, size_t *buffer1_bytes, void **buffer2, size_t *buffer2_bytes)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetDescription</name>
      <anchor>1dd55274234d28c78973057ac9a87283</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetFrameCount</name>
      <anchor>ee89c6117b6dd0d612a4606820710800</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetLoopState</name>
      <anchor>53fbb137901a84d3300d568d7ba7e3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetPauseState</name>
      <anchor>a47a8505070821d2c0009494ef443668</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetPlayRatePercent</name>
      <anchor>d5fa2d7bf8b1601fd1d6f24b86ee0656</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetPosition</name>
      <anchor>ce0344fe88b3f27cf9fb8ed638c60a07</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::GetRenderedFormat</name>
      <anchor>d29e3867d8a22a825d89b56238faa39c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::InitializeSourcePositionMarker</name>
      <anchor>4ed9903e1187e4df4b1ee28081dd03f3</anchor>
      <arglist>(size_t *position_marker)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::Pause</name>
      <anchor>5b25dabcb2400a66519e205326067a8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::ProcessNotifications</name>
      <anchor>fdb1bb30b6d6aefcba6980cbc53415a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::QueueNotificationEvent</name>
      <anchor>9673db6bcac49c3ca4f5d6a55ed77b03</anchor>
      <arglist>(StreamNotificationType NotifyType, size_t FrameNum)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::RegisterCallback</name>
      <anchor>968d1654430e55ae58856a621621df66</anchor>
      <arglist>(iSndSysStreamCallback *pCallback)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::RegisterFrameNotification</name>
      <anchor>6a4cd82ec062181289c5f550eb301afe</anchor>
      <arglist>(size_t frame_number)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::ResetPosition</name>
      <anchor>be35f5e5fcd3a4f24584ad571c660b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::SetAutoUnregister</name>
      <anchor>d9a5caa4685c26af3b7d73fa89dd7353</anchor>
      <arglist>(bool autounreg)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::SetLoopState</name>
      <anchor>9e3c9202880d022ef066f46688063bf9</anchor>
      <arglist>(int loopstate)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::SetPlayRatePercent</name>
      <anchor>a2d40858419dc33d228bbd6636d89d24</anchor>
      <arglist>(int percent)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::SetPosition</name>
      <anchor>68c8a1d7d997c96b7b68c84abae56a4d</anchor>
      <arglist>(size_t newposition)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::Unpause</name>
      <anchor>b562def65b9d6ce0f5d42c66603de772</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::UnregisterCallback</name>
      <anchor>2eeccf36a0ef650231b1c93d68850932</anchor>
      <arglist>(iSndSysStreamCallback *pCallback)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::InvalidPosition</name>
      <anchor>86804c52aca343c2525bf73a5dd69fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_3DMode</name>
      <anchor>8dabf6445e95167889a7850d16a26277</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_bAutoUnregisterReady</name>
      <anchor>ab161cc9be7635077b6d69b8a1dd95f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_bAutoUnregisterRequested</name>
      <anchor>f24b34168907645d9b1fac719a9806a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_bLooping</name>
      <anchor>ae2ef6631db2825724b925ff8990c014</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_bPaused</name>
      <anchor>912291d919b7f964bfb2d0fb577ce7c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_bPlaybackReadComplete</name>
      <anchor>5dd5b15236fd53db8a9c300d86dcc120</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_CallbackList</name>
      <anchor>e51e337e55d531dfe7d5e3f282e70f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_MostAdvancedReadPointer</name>
      <anchor>3752df1544fdab1f1b8c9023fffeb739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_NewOutputFrequency</name>
      <anchor>b7b9559f44749840ed67c1ef10770f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_NewPosition</name>
      <anchor>8e863b1d76cbbb06ba3147435e0f9ed2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_NotificationQueue</name>
      <anchor>ca46c0f8a44c2d6318dc9183fbe047f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_OutputFrequency</name>
      <anchor>a13beeaabe1915f87748ed22484d1f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_pCyclicBuffer</name>
      <anchor>70ae4d719679a9227efab043f3a7dbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_PlaybackPercent</name>
      <anchor>f7b1ea8cd9f7ff5ee1f352b116884a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_pPCMConverter</name>
      <anchor>477813212199c383b413a9fe53c3d143</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_pPreparedDataBuffer</name>
      <anchor>9d34331eda44cc2fefda80890d3259f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_PreparedDataBufferSize</name>
      <anchor>760b875861a689c90191bb6b382e5720</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_PreparedDataBufferStart</name>
      <anchor>0daaabd14525f2eb9186e7e37bf4f4b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_PreparedDataBufferUsage</name>
      <anchor>d0c86385b34b28e240b14eb2daa5143c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_RenderFormat</name>
      <anchor>868b9d1503762f5c980c27eae8c84a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::m_RenderFrameSize</name>
      <anchor>2f5ac02b43a5bee792c5acf0ea6ccc7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::SoundCyclicBuffer</name>
    <filename>classCS_1_1SndSys_1_1SoundCyclicBuffer.html</filename>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::SoundCyclicBuffer</name>
      <anchor>19a67044c463e35762d721243366cebc</anchor>
      <arglist>(size_t buffer_size)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::AddBytes</name>
      <anchor>6d6f75b92d95ee98ceba0cec921e8839</anchor>
      <arglist>(void *bytes_ptr, size_t bytes_length)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::AdvanceStartValue</name>
      <anchor>f7efbf24f0c1b9c72e99e4b49bc5fcb2</anchor>
      <arglist>(size_t advance_amount)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::Clear</name>
      <anchor>915ca52969321e7242450265d06ab339</anchor>
      <arglist>(long value=0)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::GetDataPointersFromPosition</name>
      <anchor>0b1438c8ca8909941d5dba8288ad5bd8</anchor>
      <arglist>(size_t *position_value, size_t max_length, uint8 **buffer1, size_t *buffer1_length, uint8 **buffer2, size_t *buffer2_length)</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::GetEndValue</name>
      <anchor>69e6fb1eaddd7ae3ec75b3981a85e106</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::GetFreeBytes</name>
      <anchor>c0a4fdefe97703ceca215c6b035dcbdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::GetLength</name>
      <anchor>999ada136bfaca226586fba89680ad60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SndSys::SoundCyclicBuffer::GetStartValue</name>
      <anchor>e5a937e060db5eb602493d68fe7aaf68</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SpinLock</name>
    <filename>classCS_1_1SpinLock.html</filename>
    <member kind="function">
      <name>SpinLock::LockTry</name>
      <anchor>160c1d907e2c0d1fb54d990eff33461d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SpinLock::LockWait</name>
      <anchor>af6d17a8895b4067c3bef07f0282a1e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SpinLock::Release</name>
      <anchor>3d09278a40ea95cd926c8c82a08f990c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SpinLock::SpinLock</name>
      <anchor>b2f26e062610239a36bae5679c7d5513</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SpinLock::~SpinLock</name>
      <anchor>1c342efda4ae6b79059b6e7eda224d9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::AtomicOperationsBase</name>
    <filename>classCS_1_1Threading_1_1AtomicOperationsBase.html</filename>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::CompareAndSet</name>
      <anchor>2bd72f8102e1e5302c6a5a00c5b5e960</anchor>
      <arglist>(void **target, void *value, void *comparand)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::CompareAndSet</name>
      <anchor>6702b4cfd34450b116015f6281465049</anchor>
      <arglist>(int32 *target, int32 value, int32 comparand)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::Decrement</name>
      <anchor>c25d5d5252d6d6a0edcc6d652620c803</anchor>
      <arglist>(int32 *target)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::Increment</name>
      <anchor>9f8998687c7be0033093aa676bc04e67</anchor>
      <arglist>(int32 *target)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::Read</name>
      <anchor>b1d28f7c187d680f5ec041f421bb99c8</anchor>
      <arglist>(void **target)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::Read</name>
      <anchor>b9772579b40cbf25124a51a7601dfd67</anchor>
      <arglist>(int32 *target)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::Set</name>
      <anchor>4684b87f483886bce2d7a878ea12f018</anchor>
      <arglist>(void **target, void *value)</arglist>
    </member>
    <member kind="function">
      <name>Threading::AtomicOperationsBase::Set</name>
      <anchor>5e82929a142c8bd4f69a067b24989edd</anchor>
      <arglist>(int32 *target, int32 value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::Condition</name>
    <base>CS::Implementation::NonCopyable_</base>
    <filename>classCS_1_1Threading_1_1Condition.html</filename>
    <member kind="function">
      <name>Threading::Condition::Condition</name>
      <anchor>090da67a5672e6092ab917d71999d878</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::Condition::NotifyAll</name>
      <anchor>7434ea57fb4d50d997dfe9c5146d0107</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::Condition::NotifyOne</name>
      <anchor>8713c7f7c44839dc1d003522e0984711</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::Condition::Wait</name>
      <anchor>f0a868b490406638cf6a2e08aea5a1a8</anchor>
      <arglist>(LockType &amp;lock)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::MutexImpl</name>
    <base>CS::Implementation::NonCopyable_</base>
    <filename>classCS_1_1Threading_1_1MutexImpl.html</filename>
    <member kind="function">
      <name>Threading::MutexImpl::ConditionBase</name>
      <anchor>456995844ac1f1ddad02c28161fe211f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::MutexImpl::MutexImpl</name>
      <anchor>2166e99cada67e17ffd296b2c2d5c318</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::MutexImpl::~MutexImpl</name>
      <anchor>67dafe9e16692afb83d2dbd3bdc02cf8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::MutexImpl::IsLocked</name>
      <anchor>a55bee9fceb5f914344a9615253cab75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::MutexImpl::Lock</name>
      <anchor>d34e0160362cdd1d6805e58a84d4a406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::MutexImpl::TryLock</name>
      <anchor>93f2bf37a3fd1214caa5e9dd3d797271</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::MutexImpl::Unlock</name>
      <anchor>e915b3d20f21b4d89246d2fc10109cca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::Runnable</name>
    <base>csRefCount</base>
    <base>CS::Implementation::NonCopyable_</base>
    <filename>classCS_1_1Threading_1_1Runnable.html</filename>
    <member kind="function">
      <name>Threading::Runnable::Run</name>
      <anchor>6a8cbf3365f61f29a7a5eb22fa202ad2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::ScopedLock</name>
    <filename>classCS_1_1Threading_1_1ScopedLock.html</filename>
    <member kind="function">
      <name>Threading::ScopedLock::ScopedLock</name>
      <anchor>79e6c5ff51f56878ba40bb543a2db1b0</anchor>
      <arglist>(T &amp;lockObj)</arglist>
    </member>
    <member kind="function">
      <name>Threading::ScopedLock::~ScopedLock</name>
      <anchor>2bdefaa142d8ef263299ddcd339fa0e2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::Thread</name>
    <base>csRefCount</base>
    <base>CS::Implementation::NonCopyable_</base>
    <filename>classCS_1_1Threading_1_1Thread.html</filename>
    <member kind="function">
      <name>Threading::Thread::~Thread</name>
      <anchor>3c82cd91989c75e641e0a18c89600df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Thread</name>
      <anchor>b40af15a1d2a0ecd379cd0b9b54e31cb</anchor>
      <arglist>(Runnable *runnable, bool start=false)</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Thread</name>
      <anchor>e89625f13d8408f860470aa8b8d1fbc1</anchor>
      <arglist>(Runnable *runnable, ThreadPriority prio)</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Thread</name>
      <anchor>ce9e07c95633cf5c6ea2853f2c8a5af5</anchor>
      <arglist>(Runnable *runnable, bool start, ThreadPriority prio)</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::GetPriority</name>
      <anchor>017309d6afe89b0aca82f4e2b4d1a380</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::IsRunning</name>
      <anchor>3c1a385d800c5f8e98e184f7c53d6681</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::SetPriority</name>
      <anchor>eedcf5ea513846f6df99d270e82e52e1</anchor>
      <arglist>(ThreadPriority prio)</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Start</name>
      <anchor>4f8faa0dc54ad247f46664759bc20ec8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Stop</name>
      <anchor>55ac5876b0b8814493ec2886618ce2ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Wait</name>
      <anchor>d3188de0c90be2d4f700a76c638c78f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Threading::Thread::Yield</name>
      <anchor>e4677e099d747e76715e22a5cb24e7bd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Threading::ThreadGroup</name>
    <base>CS::Implementation::NonCopyable_</base>
    <filename>classCS_1_1Threading_1_1ThreadGroup.html</filename>
    <member kind="function">
      <name>Threading::ThreadGroup::Add</name>
      <anchor>ba2a15329d6f104d1d7b5c20be3ea6ef</anchor>
      <arglist>(Thread *thread)</arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadGroup::GetSize</name>
      <anchor>3613548b3e848eee2c2d64cf3184c6c6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadGroup::GetThread</name>
      <anchor>0979401738730891e7248d8251ebf147</anchor>
      <arglist>(size_t index) const </arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadGroup::Remove</name>
      <anchor>c699e578b17ae9b70cc58d614bbea469</anchor>
      <arglist>(Thread *thread)</arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadGroup::StartAll</name>
      <anchor>8d8e8e8037bb39e9c93b11d1b8c10004</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadGroup::StopAll</name>
      <anchor>934a90c25ab8e45c421f0a4a14bd0828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadGroup::WaitAll</name>
      <anchor>c440785265a585a6fd38c3ac7b9413de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TriangleIndicesStream</name>
    <filename>classCS_1_1TriangleIndicesStream.html</filename>
    <member kind="function">
      <name>TriangleIndicesStream::HasNextTri</name>
      <anchor>3469b5fec5f88faf5d506924338a4e31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::NextTriangle</name>
      <anchor>c00af632a961fd7ec7bfaa818fd7c35c</anchor>
      <arglist>(T &amp;a, T &amp;b, T &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::~TriangleIndicesStream</name>
      <anchor>353965c85853556da4a24842aade6923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::TriangleIndicesStream</name>
      <anchor>5afe8f2139400f9537f3453ac0f70f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::TriangleIndicesStream</name>
      <anchor>340947171db7b1ddcb6418c186cc46df</anchor>
      <arglist>(iRenderBuffer *indices, csRenderMeshType meshtype, size_t indexStart=0, size_t indexEnd=(size_t)~0)</arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::BeginTriangulate</name>
      <anchor>70568e6b97970d2cedde3954cbfa9c73</anchor>
      <arglist>(iRenderBuffer *indices, csRenderMeshType meshtype, size_t indexStart=0, size_t indexEnd=(size_t)~0)</arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::BeginTriangulate</name>
      <anchor>d00018f04234b881ee31f9e0fe702d60</anchor>
      <arglist>(const uint8 *index, const uint8 *indexEnd, size_t stride, csRenderBufferComponentType compType, csRenderMeshType meshtype)</arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::HasNext</name>
      <anchor>2c49df8a4680a3e91f93d2d411c4151b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>TriangleIndicesStream::Next</name>
      <anchor>f6a1ae4a6c7331d1b270da7cac6c8a49</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::UberScreenshotMaker</name>
    <filename>classCS_1_1UberScreenshotMaker.html</filename>
    <member kind="function">
      <name>UberScreenshotMaker::engine</name>
      <anchor>561179d500f7267aace831b5c7d34168</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::g2d</name>
      <anchor>067ca9347d21eaf90dd095b964c9fffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::g3d</name>
      <anchor>6bed897ad23044a66edc40f6e113e98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::UberScreenshotMaker</name>
      <anchor>8072bf1206324b492190ad18e3289d9d</anchor>
      <arglist>(uint width, uint height, iCamera *camera, iEngine *engine, iGraphics3D *g3d)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::UberScreenshotMaker</name>
      <anchor>78424208df86d3f38a41719c80fa6536</anchor>
      <arglist>(uint width, uint height, iView *view)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::~UberScreenshotMaker</name>
      <anchor>ead4045a19a73e54509428cc17eb71be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::DrawTile3D</name>
      <anchor>5a1719979036fdeddc0f85d7c5ea530a</anchor>
      <arglist>(uint tileLeft, uint tileTop, uint tileRight, uint tileBottom)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::PostProcessImage</name>
      <anchor>0cc14ede3e11fe4a46b824dcb88a9892</anchor>
      <arglist>(csImageMemory *img)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::Setup</name>
      <anchor>f1e160de0f85b0359932ab50b55e7488</anchor>
      <arglist>(iCamera *camera, iEngine *engine, iGraphics3D *g3d)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::Shoot</name>
      <anchor>495eeda78862acaf985635f9b32ba39d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::ShootTile</name>
      <anchor>40d35dbf2afff016cb896912a82cf478</anchor>
      <arglist>(uint tileLeft, uint tileTop, uint tileRight, uint tileBottom)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::TakeScreenshot</name>
      <anchor>fc9ce95fbda5616d50cefbbd0148eeb1</anchor>
      <arglist>(uint tileLeft, uint tileTop, uint tileRight, uint tileBottom)</arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::screenH</name>
      <anchor>e3c68cc4211735e7855eec9150d8dffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::screenW</name>
      <anchor>f3f9b0545b63c28572eeb46438cd5a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::shotView</name>
      <anchor>1cd91fd4469bcc4f6061914dd9562530</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::ubershotH</name>
      <anchor>4a4227ba72a9d3f9eae3edc00aaef4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UberScreenshotMaker::ubershotW</name>
      <anchor>8246e7335c83c36594f5742fcc036e40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::WeakReferenced</name>
    <filename>classCS_1_1WeakReferenced.html</filename>
    <member kind="function">
      <name>WeakReferenced::AddRefOwner</name>
      <anchor>f378c980267f3bb06574b1ab5fb1bd4e</anchor>
      <arglist>(void **ref_owner)</arglist>
    </member>
    <member kind="function">
      <name>WeakReferenced::RemoveRefOwner</name>
      <anchor>b35de37b932c180c870ee4863e2c0dad</anchor>
      <arglist>(void **ref_owner)</arglist>
    </member>
    <member kind="function">
      <name>WeakReferenced::WeakReferenced</name>
      <anchor>bb96cfea271cc13de25d2479ae08143c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WeakReferenced::~WeakReferenced</name>
      <anchor>ee34869a6a1bdde760e7d6e23cd24c9c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAddonReference</name>
    <base>scfImplementationExt2&lt; csAddonReference</base>
    <base> csObject</base>
    <base> iAddonReference</base>
    <base> iSelfDestruct &gt;</base>
    <filename>classcsAddonReference.html</filename>
    <member kind="function">
      <name>csAddonReference</name>
      <anchor>70bab78820b31849ec1abe7b6070831a</anchor>
      <arglist>(const char *plugin, const char *paramsfile, iBase *addonobj=0)</arglist>
    </member>
    <member kind="function">
      <name>~csAddonReference</name>
      <anchor>b83cba29c6573fd646111014a342e360</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAddonObject</name>
      <anchor>da714f9a3a5b036b4bb69a7c5d9babb0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetParamsFile</name>
      <anchor>b66a1e1bc451f1282ee2a4d9e801e781</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPlugin</name>
      <anchor>f9ca437de99cb387c7ef00ed185bcbe7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>4e0bb58341be550312a16343e5ee335f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SelfDestruct</name>
      <anchor>61e5c817e970c0347dfec36dfb40971c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAnimatedPixmap</name>
    <base>csPixmap</base>
    <filename>classcsAnimatedPixmap.html</filename>
    <member kind="function">
      <name>csAnimatedPixmap</name>
      <anchor>bbf984fb053b460b76fc78dbb8a7aff7</anchor>
      <arglist>(csAnimationTemplate *tpl)</arglist>
    </member>
    <member kind="function">
      <name>~csAnimatedPixmap</name>
      <anchor>249c07c79c2e6b7e17825ca322320c22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Advance</name>
      <anchor>eab6e7928a878a327a943b7a4e6b4e77</anchor>
      <arglist>(csTicks ElapsedTime)</arglist>
    </member>
    <member kind="function">
      <name>DrawScaled</name>
      <anchor>c60016f958c9cbbdd520daf605121e0b</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>DrawTiled</name>
      <anchor>c998cc158cc860a577f521c2d2e48281</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, int orgx, int orgy, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>GetTextureHandle</name>
      <anchor>c662acd86e25cc506e6c958820138dde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>48ec4164bddd601e943597bbcf327582</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>615ce7c31150f207005557b726861b4f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAnimationTemplate</name>
    <filename>classcsAnimationTemplate.html</filename>
    <member kind="function">
      <name>csAnimationTemplate</name>
      <anchor>4a4178128d922b8b46540f3a1441d3ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csAnimationTemplate</name>
      <anchor>c74b84885cee40083ac50ea7c5e9f50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddFrame</name>
      <anchor>4093c9097566a8e7fb9c13eef340b21f</anchor>
      <arglist>(csTicks Delay, iTextureHandle *Tex, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>AddFrame</name>
      <anchor>d9ccf58a0daed803f9086e06413ca14d</anchor>
      <arglist>(csTicks Delay, iTextureHandle *Tex)</arglist>
    </member>
    <member kind="function">
      <name>AddFrame</name>
      <anchor>fbdf45ab108795a7c2ea68a6965545da</anchor>
      <arglist>(csTicks Delay, csPixmap *s)</arglist>
    </member>
    <member kind="function">
      <name>CreateInstance</name>
      <anchor>58f31d8a2c1947f3bde10561e27b2cf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFrame</name>
      <anchor>27d3cf5d62360840c43aed5f04241dc5</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetFrameByTime</name>
      <anchor>a4bedc3dae27c886edcad843c7bc258d</anchor>
      <arglist>(csTicks Time)</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>10dc2ab6a572ad39f4a8d9e3c7b9704c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetLength</name>
      <anchor>d6aafce70936077881ca5586f3e38846</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAnsiParser</name>
    <filename>classcsAnsiParser.html</filename>
    <member kind="function">
      <name>Command</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdUnknown</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a09280b4ed97dcbd0402e3a34242ca1639</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdFormatAttrReset</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a00fbd161df8847ce668e9753800c69f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdFormatAttrEnable</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a08153dc8904d5b2ff1307e05ee71b9d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdFormatAttrDisable</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a0f8f58bae0d55db7e7bd21bdcd1543cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdFormatAttrForeground</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a042c3f53281d8e4c554da647e9ad657cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdFormatAttrBackground</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a0890f0ee802952d5b59999a04dea2a089</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdClearScreen</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a02b5a1ea6e5384ad65a6ea750dc293b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdClearLine</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a0073550261fe0f54efcbefeb9fd09cb9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdCursorSetPosition</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a0fa7fd47c7b37898827427ba8ecda4385</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mdCursorMoveRelative</name>
      <anchor>5e0169d838a8621d116dc08b6b36c7a02d61b66cc824db535c6fc7c58203243a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CommandClass</name>
      <anchor>aad88e11bf47c66db29e97380a2ce14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lassNone</name>
      <anchor>aad88e11bf47c66db29e97380a2ce14c3d56c807b4e666efc34e8cb47229a2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lassUnknown</name>
      <anchor>aad88e11bf47c66db29e97380a2ce14c57cc8e863fc0798209a80432038e0d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lassFormat</name>
      <anchor>aad88e11bf47c66db29e97380a2ce14c51d444625a2df9be1562e867f130343b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lassClear</name>
      <anchor>aad88e11bf47c66db29e97380a2ce14cdf1e57426fb0b53f2f256c65cf6e29d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lassCursor</name>
      <anchor>aad88e11bf47c66db29e97380a2ce14cadfa89111be5826638252624059dfe17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FormatAttr</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrBold</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f478a9040a4ab7232acda1051d250d2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrItalics</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f09d2971728a81e7739930700274a916d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrUnderline</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f5bc3258e3ccbae8f49a6cbd2a350d5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrBlink</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f1d48e1ac2bc210111627ab986272b358</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrReverse</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f94920104605144deb3a6e56b8cf58370</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrStrikethrough</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4fd9efc8048abec925fb97ad9d66cba8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrDim</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f47b2979e61861d602a83d123ac72906f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ttrInvisible</name>
      <anchor>17df6b7c32f650c1fcdd8839a2401c4f022b37c307458b00da058e43a75a090e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FormatColor</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olNone</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef41bee08d377617cc094ca20636ca5846</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olBlack</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003efed9fbbf5f1f1c07341eafc263b5fb9b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olRed</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef3a18966e693044ee8db145c5236cca4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olGreen</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef609c119cf39228db92c06ef959fbf550</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olYellow</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003efe1dbaac328ca756db76f7401fa9150fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olBlue</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef15d572370d3a58b32a768bb19b164d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olMagenta</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef223fea652f8540072fbd3e6e5f8beaf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olCyan</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003ef5db89a5232714e0749ec9910f4f3b399</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>olWhite</name>
      <anchor>a8fc920cc044ff4caadcb72f0b0003eff8d77bdbd6b75b9597a626cbb5cdaf1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DecodeCommand</name>
      <anchor>636d022fe5369bea3a9005f11005cead</anchor>
      <arglist>(const char *&amp;cmd, size_t &amp;cmdLen, Command &amp;command, CommandParams &amp;commandParams)</arglist>
    </member>
    <member kind="function">
      <name>ParseAnsi</name>
      <anchor>a60deffe6d9de354d87276f3609bfa10</anchor>
      <arglist>(const char *str, size_t &amp;ansiCommandLen, CommandClass &amp;cmdClass, size_t &amp;textLen)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csApplicationFramework</name>
    <base>csInitializer</base>
    <filename>classcsApplicationFramework.html</filename>
    <member kind="function">
      <name>csApplicationFramework</name>
      <anchor>3f4ce5f2223f92b11e98a484313c412d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csApplicationFramework</name>
      <anchor>93d67691824e79d782b622bc4258391f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Application</name>
      <anchor>eb8d8367155993f5400754832dec6a77</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DoRestart</name>
      <anchor>f8da2559431cd694c891dfa70440a0cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetApplicationName</name>
      <anchor>5c99be19270b1d7cd1a927da5c36475e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetObjectRegistry</name>
      <anchor>eaf67d08b0f0a4ec074a8b97b06f792f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Main</name>
      <anchor>d407c48ad0714efaf5ffa741cdfdad26</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
    <member kind="function">
      <name>OnCommandLineHelp</name>
      <anchor>92400d642145ae76a9b9b7dfdb9d6f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnExit</name>
      <anchor>8fe612efbeb9258146114a9851292c92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OnInitialize</name>
      <anchor>23fbeb882689a031b267b27495361d61</anchor>
      <arglist>(int argc, char *argv[])=0</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>fed0ce5ce751b24d32cf2f8b4352f4b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator iObjectRegistry *</name>
      <anchor>21e37a84722b53b0813592612c55d5e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Quit</name>
      <anchor>515d12756c313e82e93110e8fe227b71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ReportError</name>
      <anchor>cd34713bf43f64914c8b29d45eb922d9</anchor>
      <arglist>(const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportInfo</name>
      <anchor>82bf5c04d79a4f87c7296ca0c55c2327</anchor>
      <arglist>(const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportWarning</name>
      <anchor>0d4a1b45aed17de9c919f4230f1fc980</anchor>
      <arglist>(const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>Restart</name>
      <anchor>d991757ed1c13036979031d427d0a4e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Run</name>
      <anchor>72520e3195cce8d1058856b416600206</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetApplicationName</name>
      <anchor>c7c47b19df2243f6fc5c52f8489226f2</anchor>
      <arglist>(char *name)</arglist>
    </member>
    <member kind="function">
      <name>SetupConfigManager</name>
      <anchor>21c8a30c114ef438ef083efb4c0add88</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *configName)</arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>4f3efd40b1342ee2df37cb4ea71719a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csApplicationRunner</name>
    <filename>classcsApplicationRunner.html</filename>
    <member kind="function">
      <name>Run</name>
      <anchor>caa31a652915f6da5448b7cbb6e5152b</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArchive</name>
    <filename>classcsArchive.html</filename>
    <member kind="function">
      <name>hdr_central</name>
      <anchor>38dfd25c924ef1be36f131099021f661</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>hdr_endcentral</name>
      <anchor>c19e9e5a0cfe053e7060787d33474e93</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>hdr_extlocal</name>
      <anchor>2e2975455aefb812999424f75c333e05</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>hdr_local</name>
      <anchor>86d4a8bdb0835c08c77acc923cbe1627</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>ArchiveEntry</name>
      <anchor>2c805543fb866c6d58bbbcf19c1c94c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csArchive</name>
      <anchor>30b000676a80e26937b62fe8d50b2108</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <name>~csArchive</name>
      <anchor>47af21792fb88d3d918be948baf51c76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteFile</name>
      <anchor>20c0b6f58a43d40ed176309ebd19e380</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>Dir</name>
      <anchor>f7bfe98ef76db280fdbd8e0be4b8dba5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>FileExists</name>
      <anchor>9f8b2569d7eda1a09870905833cf5624</anchor>
      <arglist>(const char *name, size_t *size=0) const </arglist>
    </member>
    <member kind="function">
      <name>FindName</name>
      <anchor>ea9df231a724753c662bf13259de42e2</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>228bdb6b8f8841dc0884659a62002144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>fd613fe7bb6cbd030ac75b2e2a8abc46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFile</name>
      <anchor>dc740f22d9b922f4760018c4faed2519</anchor>
      <arglist>(size_t no)</arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>c1c2868cc5058eb7ee5ea312b351623f</anchor>
      <arglist>(void *entry) const </arglist>
    </member>
    <member kind="function">
      <name>GetFileSize</name>
      <anchor>a512dbd02901d6a9519b0a89564efa27</anchor>
      <arglist>(void *entry) const </arglist>
    </member>
    <member kind="function">
      <name>GetFileTime</name>
      <anchor>c61619ebe3f3c053b026dabbee37a727</anchor>
      <arglist>(void *entry, csFileTime &amp;ztime) const </arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>b56f2659ca38157b72977609968a2f23</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>NewFile</name>
      <anchor>1bc606a3e5b621b5b4ea485abd84c030</anchor>
      <arglist>(const char *name, size_t size=0, bool pack=true)</arglist>
    </member>
    <member kind="function">
      <name>Read</name>
      <anchor>20a4acdaa93fec58611bf450d145a312</anchor>
      <arglist>(const char *name, size_t *size=0)</arglist>
    </member>
    <member kind="function">
      <name>SetFileTime</name>
      <anchor>d05c5482c45327c84d232fedcb378699</anchor>
      <arglist>(void *entry, const csFileTime &amp;ztime)</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>bd448aab462cf95f6c1d9589323660f7</anchor>
      <arglist>(void *entry, const char *data, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArray</name>
    <filename>classcsArray.html</filename>
    <member kind="function">
      <name>AllocatorType</name>
      <anchor>a8e73daa579911f9e2587a6e8785657a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CapacityHandlerType</name>
      <anchor>b79f90257eecbab19b344c2b057002ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ElementHandlerType</name>
      <anchor>966605610c493decc7b9a8f5a705ab4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThisType</name>
      <anchor>6804fe165e386d4ffe8405d3c994cc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ValueType</name>
      <anchor>8602bf8863c1190e938d7ba1ca440091</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>e7b1fe80decbec05b7fe3d2c1b40635f</anchor>
      <arglist>(const csArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>SetLength</name>
      <anchor>5d2137bcdb886ffa31e251e82de781f6</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>csArray</name>
      <anchor>41ac6b13d0081dd671f9f2679d73c731</anchor>
      <arglist>(size_t in_capacity=0, const CapacityHandler &amp;ch=CapacityHandler())</arglist>
    </member>
    <member kind="function">
      <name>csArray</name>
      <anchor>d35290d61c98e60a09e9ee2126000221</anchor>
      <arglist>(size_t in_capacity, const MemoryAllocator &amp;alloc, const CapacityHandler &amp;ch)</arglist>
    </member>
    <member kind="function">
      <name>~csArray</name>
      <anchor>d598c4acf6b22b4fa3a2b63514387e58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csArray</name>
      <anchor>aa2b7cfe6672b5a6fe156ba145916a9d</anchor>
      <arglist>(const csArray &amp;source)</arglist>
    </member>
    <member kind="function">
      <name>Capacity</name>
      <anchor>6eb5c8a014a4e5d69e15170e0cfdfb4f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>dc10553fa3fb5fe3a979ca7520292397</anchor>
      <arglist>(T const &amp;which) const </arglist>
    </member>
    <member kind="function">
      <name>DefaultCompare</name>
      <anchor>cb2a5c2ae5353aac0530d22003c95397</anchor>
      <arglist>(T const &amp;r1, T const &amp;r2)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>34ba9b935aad19665f01e61873a25cc2</anchor>
      <arglist>(T const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>2b5ebb745f73aefdbbe3210853b648bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteFast</name>
      <anchor>1f4fa6bd6f7f8e1a7a6f0174e5dfe1d8</anchor>
      <arglist>(T const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>10a2afd5172c671fb32c70b4f6e538e8</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndexFast</name>
      <anchor>a82497a8ba6e336fa16a1d86f245d07e</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>DeleteRange</name>
      <anchor>d40b13bfff60af463943fc5ca66e180e</anchor>
      <arglist>(size_t start, size_t end)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>e602bfe2feb67cac781c27bf2bef3e91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>66f21545aa88595592e803960cb4a6ac</anchor>
      <arglist>(T const &amp;which) const </arglist>
    </member>
    <member kind="function">
      <name>FindKey</name>
      <anchor>04fc25cd2e31c687b3b83bbeb05a30f8</anchor>
      <arglist>(csArrayCmp&lt; T, K &gt; comparekey) const </arglist>
    </member>
    <member kind="function">
      <name>FindSortedKey</name>
      <anchor>eb23011335b0d46ead40440ecd53d59b</anchor>
      <arglist>(csArrayCmp&lt; T, K &gt; comparekey, size_t *candidate=0) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>ef8deddaeb679f0a55ebc78c3aa5fda7</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>b4deb6da0262469c90355af478ed88a1</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>GetAllocator</name>
      <anchor>b5bb1cf3d58cdc757365c30b1e5a24b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetExtend</name>
      <anchor>f430197d9a9246095e231ae83624ea25</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>GetIndex</name>
      <anchor>0a1cbb95e6bb3b90212f50a0096b9f53</anchor>
      <arglist>(const T *which) const </arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>c7f1162e02bd1ebb4312130135821cd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>3cda67933291c4f269dd217c177f8279</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>d9707ffab9a7c3f30f76189f6a1ac7c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>InitRegion</name>
      <anchor>96274d7419dd2017c1dda1080da1b6d9</anchor>
      <arglist>(size_t start, size_t count)</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>cb7c457a1f3c1f34be11ec3e1de7100c</anchor>
      <arglist>(size_t n, T const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>InsertSorted</name>
      <anchor>be2ff9bd078ded1a2b2f4dec2b35c1fa</anchor>
      <arglist>(const T &amp;item, int(*compare)(T const &amp;, T const &amp;)=DefaultCompare, size_t *equal_index=0)</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>18b2ea2b0161b083a7ce1037738eb872</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>8cc02d22dba31e4065f09fc16ef107a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>17005d3eecdc01075d373f23ad7f2ee8</anchor>
      <arglist>(const csArray &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>f0baa6b289636734fd93d1db8d981e7e</anchor>
      <arglist>(const csArray &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>34189c6f98f890043f395769b6aa4639</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>e47c9b15b882b3147b33c38d5faa9867</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>655e373ba6de12e2fe2ceda2880f1f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>6c1acc9a8bdc9d19272f5236089c6b5b</anchor>
      <arglist>(T const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>PushSmart</name>
      <anchor>ac632c8f648e7b6aa6c2fbedaa6e565a</anchor>
      <arglist>(T const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>4e1d8e26fcf42cfb0b296b24da03163b</anchor>
      <arglist>(size_t n, T const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>Section</name>
      <anchor>61e3a8761de259cb253b9c2f84debc8e</anchor>
      <arglist>(size_t low, size_t high) const </arglist>
    </member>
    <member kind="function">
      <name>SetCapacity</name>
      <anchor>afd4afde5d98aba21ca54c4dbd9198b1</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetLength</name>
      <anchor>256202d18a82451e948c952ba788c44c</anchor>
      <arglist>(size_t n, T const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>SetMinimalCapacity</name>
      <anchor>61c5612effa7e18121df9b9f5a65ef72</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>ca2e983290d5e5c6d3e18aacc2447fb6</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>3f69105af97a9482396260e379a45f37</anchor>
      <arglist>(size_t n, T const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>ShrinkBestFit</name>
      <anchor>d4ba5bb3e96e26c2c6623c0d1d94b411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>360f8dcebc163d0437331324bc3cded3</anchor>
      <arglist>(int(*compare)(T const &amp;, T const &amp;)=DefaultCompare)</arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>b123bee407a91aaf8576de1ebf37caf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>25785dbdde584b3f516aeba93f5a9819</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>TransferTo</name>
      <anchor>971a4a85e7bf524f3cfa9fcec2c9f3cd</anchor>
      <arglist>(csArray &amp;destination)</arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>510c6484ddc358bc86919aecee24724b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArray::ConstIterator</name>
    <filename>classcsArray_1_1ConstIterator.html</filename>
    <member kind="function">
      <name>ConstIterator::ConstIterator</name>
      <anchor>af4dcb6d83384edaa00a4ea11aa326f8</anchor>
      <arglist>(const csArray&lt; T, ElementHandler &gt; &amp;newarray)</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::csArray&lt; T, ElementHandler &gt;</name>
      <anchor>513d4f4d054958d67d536c6c3c501fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::ConstIterator</name>
      <anchor>07662fbb990f591ffe5300d67f651a89</anchor>
      <arglist>(ConstIterator const &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::HasNext</name>
      <anchor>f76f7541d1734c26ce9cc5f976c9d2cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::Next</name>
      <anchor>4094b758f2cd6c13faccf42cf44d383f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::operator=</name>
      <anchor>7a0f499b62c54e670de022383c19fd48</anchor>
      <arglist>(ConstIterator const &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::Reset</name>
      <anchor>3fbaa85fa069b2d95412d9523e9cfb04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArray::Iterator</name>
    <filename>classcsArray_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>59c7e935cfc8a11e9db88be73af2fcfe</anchor>
      <arglist>(csArray&lt; T, ElementHandler &gt; &amp;newarray)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::csArray&lt; T, ElementHandler &gt;</name>
      <anchor>513d4f4d054958d67d536c6c3c501fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>0b8a3448f379841606849b1d9af27fcc</anchor>
      <arglist>(Iterator const &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::HasNext</name>
      <anchor>d7a2da9d2ef978fb5d14a6a749b0ea13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::Next</name>
      <anchor>a83db1103b09caff76e6c7493feb0629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator=</name>
      <anchor>fb4c4cd108c00d5905fc6fbd904e44e9</anchor>
      <arglist>(Iterator const &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Reset</name>
      <anchor>cbf17a1f1976be28c2538a858bdb955e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArrayCapacityLinear</name>
    <filename>classcsArrayCapacityLinear.html</filename>
    <member kind="function">
      <name>csArrayCapacityLinear</name>
      <anchor>05fd2f201f29aeeeb6e34feca8986c91</anchor>
      <arglist>(const Threshold &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <name>csArrayCapacityLinear</name>
      <anchor>9dc09bc33ecb25ad1b49cd005ec0c829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csArrayCapacityLinear</name>
      <anchor>e02fadd6cda86bf8fc1c69266ed4750e</anchor>
      <arglist>(const size_t x)</arglist>
    </member>
    <member kind="function">
      <name>GetCapacity</name>
      <anchor>ed7fca76a223c600c678a0a88e1dea19</anchor>
      <arglist>(size_t count) const </arglist>
    </member>
    <member kind="function">
      <name>IsCapacityExcessive</name>
      <anchor>a6b149d02c1a9161dfc48279930e993e</anchor>
      <arglist>(size_t capacity, size_t count) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArrayCmp</name>
    <filename>classcsArrayCmp.html</filename>
    <member kind="function">
      <name>CF</name>
      <anchor>59d3e86e3b9fe80e52af5c7ab70df259</anchor>
      <arglist>(T const &amp;, K const &amp;)</arglist>
    </member>
    <member kind="function">
      <name>csArrayCmp</name>
      <anchor>69e1b40e4b6388d49e2f7982e64451c7</anchor>
      <arglist>(K const &amp;k, CF c=DefaultCompare)</arglist>
    </member>
    <member kind="function">
      <name>csArrayCmp</name>
      <anchor>ad5c91353a569566cfcdccd1aa40a2a7</anchor>
      <arglist>(csArrayCmp const &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>DefaultCompare</name>
      <anchor>25d4277adeb9223836151fcee75d642a</anchor>
      <arglist>(T const &amp;r, K const &amp;k)</arglist>
    </member>
    <member kind="function">
      <name>operator CF</name>
      <anchor>0bcd41e960d9a5f1e5ba82e5deccf175</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator K const &amp;</name>
      <anchor>0362c8177dd3ac9497bdec66aa62a4ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>7cf2d8d19fe8fc9d1984687366861355</anchor>
      <arglist>(T const &amp;r) const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>1946bcbb1e5fd2216ad4c4deb6e9d815</anchor>
      <arglist>(csArrayCmp const &amp;o)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArrayElementHandler</name>
    <filename>classcsArrayElementHandler.html</filename>
    <member kind="function">
      <name>Construct</name>
      <anchor>162d64ec96cc752bb0e48259eb7dcd92</anchor>
      <arglist>(T *address, T const &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>Construct</name>
      <anchor>cba25688bf4190ec27ff6b397d003e31</anchor>
      <arglist>(T *address)</arglist>
    </member>
    <member kind="function">
      <name>Destroy</name>
      <anchor>7da1c67cb77fe2e33d9e658aec83b367</anchor>
      <arglist>(T *address)</arglist>
    </member>
    <member kind="function">
      <name>InitRegion</name>
      <anchor>96ed524241350f4066e708c0b763c01f</anchor>
      <arglist>(T *address, size_t count)</arglist>
    </member>
    <member kind="function">
      <name>MoveElements</name>
      <anchor>1ad9e61f99b860efc9679453dcc817ef</anchor>
      <arglist>(T *mem, size_t dest, size_t src, size_t count)</arglist>
    </member>
    <member kind="function">
      <name>ResizeRegion</name>
      <anchor>83d3a8ffda7bd1d666001cdc6e0a5a28</anchor>
      <arglist>(Allocator &amp;alloc, T *mem, size_t relevantcount, size_t oldcount, size_t newcount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArraySafeCopyElementHandler</name>
    <filename>classcsArraySafeCopyElementHandler.html</filename>
    <member kind="function">
      <name>Construct</name>
      <anchor>bdc3391209e102888b312ee9cd51fc95</anchor>
      <arglist>(T *address, T const &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>Construct</name>
      <anchor>9e8dfcf3ca35bcad711e24f46ba2133b</anchor>
      <arglist>(T *address)</arglist>
    </member>
    <member kind="function">
      <name>Destroy</name>
      <anchor>a663011644e45cbbb76795a4608a1f7a</anchor>
      <arglist>(T *address)</arglist>
    </member>
    <member kind="function">
      <name>InitRegion</name>
      <anchor>ab0fe50fc20cda4f704c116c89c1e4b2</anchor>
      <arglist>(T *address, size_t count)</arglist>
    </member>
    <member kind="function">
      <name>MoveElements</name>
      <anchor>f0c17e05205e65ce8f2558df260c6fc9</anchor>
      <arglist>(T *mem, size_t dest, size_t src, size_t count)</arglist>
    </member>
    <member kind="function">
      <name>ResizeRegion</name>
      <anchor>8e907aaf15eca71037265258d744a26f</anchor>
      <arglist>(Allocator &amp;alloc, T *mem, size_t relevantcount, size_t oldcount, size_t newcount)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArrayThresholdFixed</name>
    <filename>classcsArrayThresholdFixed.html</filename>
    <member kind="function">
      <name>operator=</name>
      <anchor>9a308799962d5b622daabfed8c7860eb</anchor>
      <arglist>(const csArrayThresholdFixed &amp;)</arglist>
    </member>
    <member kind="function">
      <name>csArrayThresholdFixed</name>
      <anchor>2ddafd70d26a28321d788c5c66921286</anchor>
      <arglist>(size_t x=0)</arglist>
    </member>
    <member kind="function">
      <name>GetThreshold</name>
      <anchor>9a08e9b3872d44e797c40a4ed97a9b81</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArrayThresholdVariable</name>
    <filename>classcsArrayThresholdVariable.html</filename>
    <member kind="function">
      <name>csArrayThresholdVariable</name>
      <anchor>7634f67821df41ad50490e5bb8c7a968</anchor>
      <arglist>(size_t in_threshold=0)</arglist>
    </member>
    <member kind="function">
      <name>GetThreshold</name>
      <anchor>83589e6faa9d90e8abefd1481ffb49ec</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBakeKeyColor</name>
    <filename>classcsBakeKeyColor.html</filename>
  </compound>
  <compound kind="class">
    <name>csBaseEventHandler</name>
    <filename>classcsBaseEventHandler.html</filename>
    <member kind="function">
      <name>GenericID</name>
      <anchor>dfbee7eb86a4ca9243b9653a419b2074</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;reg) const </arglist>
    </member>
    <member kind="function">
      <name>eventh</name>
      <anchor>a0633742e8514096cb1b0a253a96bf2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FinalProcess</name>
      <anchor>f649dc1b8d1456fdbf9db3a565a8d4e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FrameEvent</name>
      <anchor>e83bbcaec4dd7edb50da452ac3774659</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_registry</name>
      <anchor>0b681f7d992dd179a15f6009308bf97f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PostProcess</name>
      <anchor>37f20cdea327f763379045178f64ecb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PreProcess</name>
      <anchor>f205fa6465d7afd0c023346be5529bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Process</name>
      <anchor>20cd212a7359b3ca9db7a75be0dfd5c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>self</name>
      <anchor>e9931051fd8afa7053b18dc537452dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csBaseEventHandler</name>
      <anchor>8299ea111d172f2b05efefa3b2b1f0f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csBaseEventHandler</name>
      <anchor>2b027cb6a9fb18cf4416e72b0f778272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Frame</name>
      <anchor>f2296a2c7c174832ddced455b67904c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GenericName</name>
      <anchor>5f4f8280f0a2934d327580b51e102c27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>8ea9d05c551cc655cbd6d9a5eb1331bf</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>6b776d26ad94d2b2c4eb9d2f55ffaf57</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>61445a3184392dd59154ab3bf613cf57</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>4cb58717c172239666ecd72093faf255</anchor>
      <arglist>(iObjectRegistry *registry)</arglist>
    </member>
    <member kind="function">
      <name>InstancePrec</name>
      <anchor>a62e33afd252175f8bfddcda4528992b</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>InstanceSucc</name>
      <anchor>651b4bc68669f0589c217aa692157b3c</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>OnJoystickDown</name>
      <anchor>fad5d6f381ed0a76bde871fbe766bc47</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnJoystickMove</name>
      <anchor>17cbaa867425955baea9d15e4bd7b374</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnJoystickUp</name>
      <anchor>67e305f97bbd88b7640f36b96fe6a62c</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnKeyboard</name>
      <anchor>f901748a873b9491c57d3a389e8e9f3b</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseClick</name>
      <anchor>dc060e49afaf8d076de23a3117df0482</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseDoubleClick</name>
      <anchor>6f262760429483b9b243f9a8aee8c07c</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseDown</name>
      <anchor>9e50737b2ff301d6985807dbd4675fe1</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseMove</name>
      <anchor>b106eeca880516563d1bb33bd1fab41f</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnMouseUp</name>
      <anchor>d7fe366dc96f0c056174ad5abbd7fad5</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>OnUnhandledEvent</name>
      <anchor>2fe433dd4f2325a2093d3fe5113197c3</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>PostProcessFrame</name>
      <anchor>e70a9362355b9aa55166527ea6ba65dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PreProcessFrame</name>
      <anchor>dd05761b09dfac756201d9e635543ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ProcessFrame</name>
      <anchor>81821fca4abdd6121b13f747362f9c9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RegisterQueue</name>
      <anchor>225d6d8b828f9f4c0c066b6ef9dc2b10</anchor>
      <arglist>(iEventQueue *queue, csEventID names[])</arglist>
    </member>
    <member kind="function">
      <name>RegisterQueue</name>
      <anchor>a5d2473df73ad1eeca92582a9b5f04bc</anchor>
      <arglist>(iEventQueue *queue, csEventID name)</arglist>
    </member>
    <member kind="function">
      <name>RegisterQueue</name>
      <anchor>94f18ec9812392e585e0c3df92104f53</anchor>
      <arglist>(iObjectRegistry *registry, csEventID names[])</arglist>
    </member>
    <member kind="function">
      <name>RegisterQueue</name>
      <anchor>79e347a71cca2ef3bc6683bf25950809</anchor>
      <arglist>(iObjectRegistry *registry, csEventID name)</arglist>
    </member>
    <member kind="function">
      <name>UnregisterQueue</name>
      <anchor>8d2cb919e26088457304c2edcbd7a6c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBaseEventHandler::EventHandlerImpl</name>
    <base>scfImplementation1</base>
    <filename>classcsBaseEventHandler_1_1EventHandlerImpl.html</filename>
    <member kind="function">
      <name>EventHandlerImpl::GenericID</name>
      <anchor>0b69dc57e24f376909d7a9c5ee07f1eb</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;reg) const </arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::GenericName</name>
      <anchor>548a7253a37a043550179555ff25a515</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::GenericPrec</name>
      <anchor>5a2323763399255f017a6dcf383674c3</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;hreg, csRef&lt; iEventNameRegistry &gt; &amp;nreg, csEventID id) const </arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::GenericSucc</name>
      <anchor>de6a73bb3a3813d9ee2e3f13a66e351e</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;hreg, csRef&lt; iEventNameRegistry &gt; &amp;nreg, csEventID id) const </arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::HandleEvent</name>
      <anchor>58fd1c4713ea7a12d0d9fc63144d0340</anchor>
      <arglist>(iEvent &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::InstancePrec</name>
      <anchor>3908be5eb8cb8f90e32e4716ecbadea4</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;hreg, csRef&lt; iEventNameRegistry &gt; &amp;nreg, csEventID id) const </arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::InstanceSucc</name>
      <anchor>5e3d8c7f06c2461646bdf6b1532e9056</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;hreg, csRef&lt; iEventNameRegistry &gt; &amp;nreg, csEventID id) const </arglist>
    </member>
    <member kind="function">
      <name>EventHandlerImpl::csBaseEventHandler</name>
      <anchor>50f157d56a28d74ba47de7a6311eb0f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBaseRenderStepLoader</name>
    <base>scfImplementation2&lt; csBaseRenderStepLoader</base>
    <base> iLoaderPlugin</base>
    <base> iComponent &gt;</base>
    <filename>classcsBaseRenderStepLoader.html</filename>
    <member kind="function">
      <name>object_reg</name>
      <anchor>5f6152c3fc332dbc72ceebbf12f08696</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>synldr</name>
      <anchor>ef88f5ea9946096a775fe9bdaebaf644</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>db0825d1659e98f1a9bb1bd1be103cae</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>3f792dcfa7a900c628f52d2376b68d5c</anchor>
      <arglist>(iDocumentNode *node, iStreamSource *ssource, iLoaderContext *ldr_context, iBase *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBaseRenderStepType</name>
    <base>scfImplementation2&lt; csBaseRenderStepType</base>
    <base> iRenderStepType</base>
    <base> iComponent &gt;</base>
    <filename>classcsBaseRenderStepType.html</filename>
    <member kind="function">
      <name>object_reg</name>
      <anchor>d342c0afb76b83d6cb9791b71d4c324f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>8d6ca5d58f7feec3c2d554ec462d444a</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBaseTextureFactory</name>
    <base>scfImplementation1&lt; csBaseTextureFactory</base>
    <base> iTextureFactory &gt;</base>
    <filename>classcsBaseTextureFactory.html</filename>
    <member kind="function">
      <name>GetSize</name>
      <anchor>92e80f6d9645d65d645cf8e63c789b4f</anchor>
      <arglist>(int &amp;w, int &amp;h)</arglist>
    </member>
    <member kind="function">
      <name>GetTextureType</name>
      <anchor>f6585fcdbad9456f73df6b1ed20ff5fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>d0a895761ab32d812e38ff6823c5e395</anchor>
      <arglist>(int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>height</name>
      <anchor>1e248f4f9dd16c04188bf53ac1d647b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>f8b8e482aaea299f4cf6b8f1ddc5a5ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texture_type</name>
      <anchor>96eb30403c75a56b4084019d5d636f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>377a161752d0fed29e14e12deff9be84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBitArray</name>
    <base>csBitArrayTweakable</base>
    <filename>classcsBitArray.html</filename>
    <member kind="function">
      <name>csBitArray</name>
      <anchor>f7b87d7012a20cd280fbcd259aedad65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csBitArray</name>
      <anchor>4de089702f550532a653f322ed334953</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <name>csBitArray</name>
      <anchor>73757c72c5c29412a6dd3b27e5c6f560</anchor>
      <arglist>(const csBitArray &amp;that)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBitArrayTweakable</name>
    <filename>classcsBitArrayTweakable.html</filename>
    <member kind="function">
      <name>AllocatorType</name>
      <anchor>2bf3c44e1401d45596a0bd9d11228ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThisType</name>
      <anchor>2a9668683039bad69d89b38ad48af96a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BitProxy</name>
      <anchor>d6beb8432ed0c48a2bce4a01384ce5cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csComparatorBitArray</name>
      <anchor>2f7d62307e069e4d860f34fe79a1baee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csHashComputerBitArray</name>
      <anchor>8222785daa12622e6ecd7394bcab47e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csBitArrayTweakable</name>
      <anchor>f04b099991a8b5d71b76b4d6f3f8e341</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csBitArrayTweakable</name>
      <anchor>2d46e6972b9bec7492004c29987921f4</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <name>csBitArrayTweakable</name>
      <anchor>efd66d9d1d2efa83d7c03489882dc717</anchor>
      <arglist>(const csBitArrayTweakable &amp;that)</arglist>
    </member>
    <member kind="function">
      <name>~csBitArrayTweakable</name>
      <anchor>8d7ec76aa4f3c5746177e02f11dad4a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AllBitsFalse</name>
      <anchor>66987f3ce43af4de58852b6671654dbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>AreSomeBitsSet</name>
      <anchor>404f5ba789cecf357bc9003f796aa853</anchor>
      <arglist>(size_t pos, size_t count) const </arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>883d8d49f4eefe77928a6e2bc349890c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClearBit</name>
      <anchor>e4d3e322e75b3497ac23d418b54fb464</anchor>
      <arglist>(size_t pos)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>fd7ee919a37d5bac355d5034dbe52605</anchor>
      <arglist>(size_t pos, size_t count)</arglist>
    </member>
    <member kind="function">
      <name>FlipAllBits</name>
      <anchor>837beaac57a9180922ed6ff8c552264a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FlipBit</name>
      <anchor>4cf5c01d6809c98519a5150ad1a966e7</anchor>
      <arglist>(size_t pos)</arglist>
    </member>
    <member kind="function">
      <name>GetArrayBits</name>
      <anchor>4e89ab7e6e23497f446b796806557bc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>0ad8b92f5ea6b9fa13933d8493adbca7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsBitSet</name>
      <anchor>19e077803aeb46a70b7fe038b7d596c5</anchor>
      <arglist>(size_t pos) const </arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>128d57333239991578c7154bcab0d2a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator &amp;=</name>
      <anchor>cb0b96d63bdb01ffcf83f212d577201b</anchor>
      <arglist>(const csBitArrayTweakable &amp;that)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>00555f336ebf6dbf5a3d1fb759770ce1</anchor>
      <arglist>(const csBitArrayTweakable &amp;that) const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>41e662fcd4af86014d40b7e41f8dc3a3</anchor>
      <arglist>(const csBitArrayTweakable &amp;that)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>4881c018fc4d6414f3fc7020c1f20c03</anchor>
      <arglist>(const csBitArrayTweakable &amp;that) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>84374333155be95c346b78af1863873c</anchor>
      <arglist>(size_t pos) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>5594686969b53c07096be1518539063b</anchor>
      <arglist>(size_t pos)</arglist>
    </member>
    <member kind="function">
      <name>operator^=</name>
      <anchor>d6ec827e0e46b656d28a1b6c09a34d1a</anchor>
      <arglist>(const csBitArrayTweakable &amp;that)</arglist>
    </member>
    <member kind="function">
      <name>operator|=</name>
      <anchor>b071304df036ccdb7664371f9c4b3e17</anchor>
      <arglist>(const csBitArrayTweakable &amp;that)</arglist>
    </member>
    <member kind="function">
      <name>operator~</name>
      <anchor>475a4f3d836b8a99d547058444232ca4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>a50b928e221ee91e073ed651bf04e430</anchor>
      <arglist>(size_t pos, bool val=true)</arglist>
    </member>
    <member kind="function">
      <name>SetBit</name>
      <anchor>6aeffd755ca99af6daab5d0b0d564fdc</anchor>
      <arglist>(size_t pos)</arglist>
    </member>
    <member kind="function">
      <name>SetLength</name>
      <anchor>df7388eb0fefff7e097faa2ce3be68e8</anchor>
      <arglist>(size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>f28fa356cfb8e93cdba60ad5b67788bd</anchor>
      <arglist>(size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Slice</name>
      <anchor>8210ab6f828f2dd5bcd002c2ddeb8f86</anchor>
      <arglist>(size_t pos, size_t count) const </arglist>
    </member>
    <member kind="function">
      <name>operator &amp;</name>
      <anchor>071a12fedf7e3bf7520c1e12fe257b13</anchor>
      <arglist>(const csBitArrayTweakable &amp;a1, const csBitArrayTweakable &amp;a2)</arglist>
    </member>
    <member kind="function">
      <name>operator^</name>
      <anchor>f297d7d29f13de0ff15b6872b0fe1b77</anchor>
      <arglist>(const csBitArrayTweakable &amp;a1, const csBitArrayTweakable &amp;a2)</arglist>
    </member>
    <member kind="function">
      <name>operator|</name>
      <anchor>36595db59014ff0667390c17cff5c2d3</anchor>
      <arglist>(const csBitArrayTweakable &amp;a1, const csBitArrayTweakable &amp;a2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBitArrayTweakable::BitProxy</name>
    <filename>classcsBitArrayTweakable_1_1BitProxy.html</filename>
    <member kind="function">
      <name>BitProxy::BitProxy</name>
      <anchor>49090c062dfe4461be876c428eec1781</anchor>
      <arglist>(csBitArrayTweakable &amp;array, size_t pos)</arglist>
    </member>
    <member kind="function">
      <name>BitProxy::Flip</name>
      <anchor>da358f6558e3afd86eae9f67027f9f55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BitProxy::operator bool</name>
      <anchor>173cf5fdafc9cfa9bc8f2f09b9530d9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>BitProxy::operator=</name>
      <anchor>6ceb42c3524516f0f8801c62d2e56782</anchor>
      <arglist>(const BitProxy &amp;that)</arglist>
    </member>
    <member kind="function">
      <name>BitProxy::operator=</name>
      <anchor>79ead8f756255a7b88e93faf149ba435</anchor>
      <arglist>(bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBitmaskToString</name>
    <filename>classcsBitmaskToString.html</filename>
    <member kind="function">
      <name>GetStr</name>
      <anchor>92908c3153facc9e054be8b2c999b0cd</anchor>
      <arglist>(uint mask, const MaskNames *names)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBlockAllocator</name>
    <base>csFixedSizeAllocator&lt; sizeof(T)</base>
    <base> Allocator &gt;</base>
    <filename>classcsBlockAllocator.html</filename>
    <member kind="function">
      <name>AllocatorType</name>
      <anchor>1d9fba4c4fe8f5f6504c0953b879026d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThisType</name>
      <anchor>4710c6bd2ffbf296353a3fd9953cc221</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ValueType</name>
      <anchor>35eed981347bb115e554e8dc6142aa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>superclass</name>
      <anchor>5f246f5d86f2b83531ed5b7e09562618</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csBlockAllocator</name>
      <anchor>d8f422778b7c2fa33ee76c77f409b0c3</anchor>
      <arglist>(size_t nelem=32)</arglist>
    </member>
    <member kind="function">
      <name>~csBlockAllocator</name>
      <anchor>6d21fa52f4c7bb6c4ebf469b8882aee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>2fda57e30eb28fd3cec4ac33322e0daa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>799b3de443ebd5b4fc807c08dc64404d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>4d331c017f7173bc4f6922dd72eb1535</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <name>TryFree</name>
      <anchor>06bc80b173329739a612e43ef6257e53</anchor>
      <arglist>(T *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBlockAllocatorDisposeDelete</name>
    <filename>classcsBlockAllocatorDisposeDelete.html</filename>
    <member kind="function">
      <name>csBlockAllocatorDisposeDelete</name>
      <anchor>3562fdaea42dcc9c1b6c33d6fbcb72f4</anchor>
      <arglist>(const BA &amp;, bool legit)</arglist>
    </member>
    <member kind="function">
      <name>Dispose</name>
      <anchor>127823d07f561ccf368a3fa8fef1d71b</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBlockAllocatorDisposeLeaky</name>
    <filename>classcsBlockAllocatorDisposeLeaky.html</filename>
    <member kind="function">
      <name>csBlockAllocatorDisposeLeaky</name>
      <anchor>9540112306c41808ee22e727f904c8fb</anchor>
      <arglist>(const BA &amp;, bool legit)</arglist>
    </member>
    <member kind="function">
      <name>~csBlockAllocatorDisposeLeaky</name>
      <anchor>6e51f7be751ff889589d3bf70499351c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Dispose</name>
      <anchor>13b2420db4b18eb7676a56d09f9d1c8b</anchor>
      <arglist>(void *p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBox2</name>
    <filename>classcsBox2.html</filename>
    <member kind="function">
      <name>csBox2</name>
      <anchor>6bc73f0688cb0b7e7647a03b38a6c662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csBox2</name>
      <anchor>397f792dd79ddd0159d7e36db8687323</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csBox2</name>
      <anchor>d71952d735caaea4a32d1580a4483afd</anchor>
      <arglist>(float x1, float y1, float x2, float y2)</arglist>
    </member>
    <member kind="function">
      <name>csBox2</name>
      <anchor>9107334c90a7ade49c91144b228c6cdf</anchor>
      <arglist>(const csRect &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertex</name>
      <anchor>58bddfa115d8dd5e43f51aaa480bb55c</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertex</name>
      <anchor>90a589f9c1a205f3e63a9a3f676db3d8</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmart</name>
      <anchor>a90dc8464eead700cf9611f0db213382</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmart</name>
      <anchor>965a607e4f38c5bbb79996607e91d02d</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmartTest</name>
      <anchor>c4a3210cfff0ca4d819b86454c827181</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmartTest</name>
      <anchor>6f5707215ffea25ecaff44162a13353d</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexTest</name>
      <anchor>1f70312c977b0edc53feaa4254c0bd6a</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexTest</name>
      <anchor>839c478dde215e0f9127622365fc4f6f</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>Area</name>
      <anchor>122d53146b6b4e5c73d33710773787e2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>a146277921e3a8691fc8903293b0c69d</anchor>
      <arglist>(const csBox2 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <name>Description</name>
      <anchor>f3ebca7bf3120f5a867190bd1791e5e7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>cefe955042628a510ad3027615f0677d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>b289b67dbc6b710bdae79242b7290c97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCorner</name>
      <anchor>bab16fdf3533f20f0d8a210ae6195f0f</anchor>
      <arglist>(int corner) const </arglist>
    </member>
    <member kind="function">
      <name>GetEdge</name>
      <anchor>d2cf246368703114e9755870cbfc99f8</anchor>
      <arglist>(int edge, csSegment2 &amp;e) const </arglist>
    </member>
    <member kind="function">
      <name>GetEdge</name>
      <anchor>ec05e28ce46e689f29221bd154173e79</anchor>
      <arglist>(int edge) const </arglist>
    </member>
    <member kind="function">
      <name>GetEdgeInfo</name>
      <anchor>8c2869cb8bb4139ab185dc48e14994cc</anchor>
      <arglist>(int edge, int &amp;v1, int &amp;v2) const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>fd0262c20c072f3d4a26d7d4b5bb54c3</anchor>
      <arglist>(const csVector2 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>76da66a15f400e06a72fc2118e352cfc</anchor>
      <arglist>(float x, float y) const </arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>436ff414e5aea85fac6a8bc85709c057</anchor>
      <arglist>(csVector2 *poly, int num_poly) const </arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>87153809c7caffe73a5e990e271c1148</anchor>
      <arglist>(const csVector2 &amp;minbox, const csVector2 &amp;maxbox, csVector2 *poly, int num_poly)</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>eb8998585d6c0d77a5688e5965e7a208</anchor>
      <arglist>(float minx, float miny, float maxx, float maxy, csVector2 *poly, int num_poly)</arglist>
    </member>
    <member kind="function">
      <name>Max</name>
      <anchor>3ba36010b4f6e15338441b901d87cb76</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Max</name>
      <anchor>77f1d249a0497714dc72861f2b3efa83</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>MaxX</name>
      <anchor>585a8b74a51abfb5a3fe48770b7066c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MaxY</name>
      <anchor>3f3a575263c091c1133fe38c9e14a243</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Min</name>
      <anchor>f93fb22fcae0af80693753666ed422c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Min</name>
      <anchor>5542b7fe190a03f8a767129e860f3e9c</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>MinX</name>
      <anchor>58888738bc7cfc684a1b028885ee9604</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MinY</name>
      <anchor>3b5cf3877904eac184ebe0c125e46e8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>edbc5d24ca59f3798bc3268836fad73b</anchor>
      <arglist>(const csBox2 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>63978c2df40aa66a9a556476729bf07a</anchor>
      <arglist>(const csVector2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>e3aedb99b2ca692c47ee8fbd893be8f3</anchor>
      <arglist>(const csBox2 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>Overlap</name>
      <anchor>e2d522ca57877c46d0c5247683a42764</anchor>
      <arglist>(const csBox2 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>28658717968654d2bcff233ddce5b8f6</anchor>
      <arglist>(float x1, float y1, float x2, float y2)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>70fe6baa8ccbd1b4cf58f9069c5cdc46</anchor>
      <arglist>(const csVector2 &amp;bmin, const csVector2 &amp;bmax)</arglist>
    </member>
    <member kind="function">
      <name>SetCenter</name>
      <anchor>3053fbb9ae225f3f82361376765be5de</anchor>
      <arglist>(const csVector2 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>SetMax</name>
      <anchor>f8623398b562fc7090adc8a9d23a32f6</anchor>
      <arglist>(int idx, float val)</arglist>
    </member>
    <member kind="function">
      <name>SetMin</name>
      <anchor>b69c8a2da728fe6d8174c8279e849124</anchor>
      <arglist>(int idx, float val)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>2527d41d7466c9c56d0ec1d541f79b4a</anchor>
      <arglist>(const csVector2 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>SquaredOriginDist</name>
      <anchor>9f92eb9bc9aef7535547c703cd957fcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SquaredOriginMaxDist</name>
      <anchor>a84ba7539d7940a02d177ba67df96bd5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SquaredPosDist</name>
      <anchor>11638417e3033164b2d209f7b1b76a91</anchor>
      <arglist>(const csVector2 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <name>SquaredPosMaxDist</name>
      <anchor>1425f1d279e6a67fb0b814899ed3feb3</anchor>
      <arglist>(const csVector2 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <name>StartBoundingBox</name>
      <anchor>ab3971efb0a2c246be7d31e38b567c35</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>StartBoundingBox</name>
      <anchor>a3d1f68b38442ff98899897252f3ac89</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>StartBoundingBox</name>
      <anchor>65223106f5a2917780888909c5059577</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TestIntersect</name>
      <anchor>888b68fd89965ac071406964f28fb6d7</anchor>
      <arglist>(const csBox2 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>9ef0b8622986d1d9eae62dba3ddae6a0</anchor>
      <arglist>(const csBox2 &amp;box1, const csBox2 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>f7b7f6ecc5a371cc0b2abc51d422d926</anchor>
      <arglist>(const csBox2 &amp;box1, const csBox2 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>ce841ef009e707dcacabd88fa67e9a66</anchor>
      <arglist>(const csBox2 &amp;box, const csVector2 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>fc3d6e0ec9365a9874750dd9d55a2488</anchor>
      <arglist>(const csBox2 &amp;box1, const csBox2 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>f47c97f4dce0e6623df2d20b123e32da</anchor>
      <arglist>(const csVector2 &amp;point, const csBox2 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>72d1a956a49e2e4ce58f6e79d983c134</anchor>
      <arglist>(const csBox2 &amp;box1, const csBox2 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>9ec2a4f26b5e0f00f0e61d21e03ecdf5</anchor>
      <arglist>(const csBox2 &amp;box1, const csBox2 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>9412de11530ac6b13a62d10d1fe7a985</anchor>
      <arglist>(const csBox2 &amp;box1, const csBox2 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>maxbox</name>
      <anchor>482fc16bd7c5a45ebd30d11e874cd2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>minbox</name>
      <anchor>65894f8736795b462a4d3f7f3e1d28bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBox2Int</name>
    <filename>classcsBox2Int.html</filename>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a7ea1d912ac465cb6af4c1d2166c1232</anchor>
      <arglist>(const csBox2Int &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>maxx</name>
      <anchor>242f9eda2ec1cc1f7906ecbae279b6e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>maxy</name>
      <anchor>3b157027b06af550395c701df8104db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>minx</name>
      <anchor>e83bd9c2f7636e2fbf13c866eece5f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>miny</name>
      <anchor>05df13df184110a7c2ac8c82c506b502</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBox3</name>
    <filename>classcsBox3.html</filename>
    <member kind="function">
      <name>bFace</name>
      <anchor>fe14501543994e0e1c0b61e0d29213f8</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>csBox3</name>
      <anchor>470b19b9c15cb52381d58eeff54ed19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csBox3</name>
      <anchor>026a5a0f026acad91c35b33293d21ccf</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csBox3</name>
      <anchor>c707c7ef8d72029ae8995ed9bb1cd4b9</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>csBox3</name>
      <anchor>fdfeab82d5b2bd4730515ebd964f1280</anchor>
      <arglist>(float x1, float y1, float z1, float x2, float y2, float z2)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingBox</name>
      <anchor>3231e5652743893e9e5bb97c8f0ba2cb</anchor>
      <arglist>(const csBox3 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertex</name>
      <anchor>9afd44e57fa7ad90e6636029c570014d</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertex</name>
      <anchor>8b6848ac4bfe8795d6f412cea3700368</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmart</name>
      <anchor>fb321a08d1fa8449acb0205b9ca009e5</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmart</name>
      <anchor>9bb79f738a03a5b2713cbf4488048641</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmartTest</name>
      <anchor>296a1e2ab3e5009b6e38161c1d1d3e30</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexSmartTest</name>
      <anchor>ff72e127512dedf29b0ed6d1e21a4175</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexTest</name>
      <anchor>9f5eb4d09b0a7cc3092379318766bd9f</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertexTest</name>
      <anchor>5bdeae4b62a3ec7ace2cdd04afa5ba7a</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <name>Adjacent</name>
      <anchor>9735659c0bcda1248d9ef9bc4baed22e</anchor>
      <arglist>(const csBox3 &amp;other, float epsilon=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>AdjacentX</name>
      <anchor>fc0821770bb9c02f4b0976ffd1fc549c</anchor>
      <arglist>(const csBox3 &amp;other, float epsilon=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>AdjacentY</name>
      <anchor>7fa3f91647e924f470d5e1e1c308c3ad</anchor>
      <arglist>(const csBox3 &amp;other, float epsilon=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>AdjacentZ</name>
      <anchor>c6a8b840119f02e9394defc6c2594eee</anchor>
      <arglist>(const csBox3 &amp;other, float epsilon=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>Area</name>
      <anchor>3a1d3dbd4020f54f4c07b8063c48a3bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Between</name>
      <anchor>a5f168cfb01d4b76875c022529f23059</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2) const </arglist>
    </member>
    <member kind="function">
      <name>CalculatePointSegment</name>
      <anchor>3e396bac5eadafa871b93608aee8716d</anchor>
      <arglist>(const csVector3 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>07627740a824d7ab267b47d84cc941c3</anchor>
      <arglist>(const csBox3 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <name>Description</name>
      <anchor>831a8ace1bb7c8985a304697a1b55e5f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>5f5ea5715fcd1c3f6e872bd738003c46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetAxisPlane</name>
      <anchor>ff1d01ebc997266a668ee7cc4ee740ae</anchor>
      <arglist>(int side, int &amp;axis, float &amp;where) const </arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>3bb267ed23f663a3c24da8b74727ce8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetConvexOutline</name>
      <anchor>480419ab9fd05251a381323a664097ea</anchor>
      <arglist>(const csVector3 &amp;pos, csVector3 *array, int &amp;num_array, bool bVisible=false) const </arglist>
    </member>
    <member kind="function">
      <name>GetCorner</name>
      <anchor>414acf5fe1fee22d056e65fd0aa89fd8</anchor>
      <arglist>(int corner) const </arglist>
    </member>
    <member kind="function">
      <name>GetEdge</name>
      <anchor>3d070c73fa1552c5fd39988756bf9615</anchor>
      <arglist>(int edge, csSegment3 &amp;e) const </arglist>
    </member>
    <member kind="function">
      <name>GetEdge</name>
      <anchor>6d6060eeddd8cc41c50dbafcd27e87aa</anchor>
      <arglist>(int edge) const </arglist>
    </member>
    <member kind="function">
      <name>GetEdgeInfo</name>
      <anchor>7dd86bf643bb17b8059dd75b93a11f76</anchor>
      <arglist>(int edge, int &amp;v1, int &amp;v2, int &amp;fleft, int &amp;fright) const </arglist>
    </member>
    <member kind="function">
      <name>GetFaceEdges</name>
      <anchor>866c5f44a03ebc69478f05819647841f</anchor>
      <arglist>(int face) const </arglist>
    </member>
    <member kind="function">
      <name>GetMax</name>
      <anchor>76bf8a9c554cf277d949352426771117</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <name>GetMin</name>
      <anchor>14e7b7a8f332412a9405dd4eb59960d1</anchor>
      <arglist>(size_t idx)</arglist>
    </member>
    <member kind="function">
      <name>GetSide</name>
      <anchor>8c7d43af0ac4126c7ece33a794c8323f</anchor>
      <arglist>(int side) const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>302fc259562174887503f72a8e865d18</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVisibleSides</name>
      <anchor>8387b45783c4a8b3721016691d54947e</anchor>
      <arglist>(const csVector3 &amp;pos, int *visible_sides) const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>d8e8a62251204aae1b1898534e21a759</anchor>
      <arglist>(const csVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>fd1f8ba93d546d19e9c00edaa855943c</anchor>
      <arglist>(float x, float y, float z) const </arglist>
    </member>
    <member kind="function">
      <name>ManhattanDistance</name>
      <anchor>067ec5b8e9f6c16ba14ae2ab113972cd</anchor>
      <arglist>(const csBox3 &amp;other, csVector3 &amp;dist) const </arglist>
    </member>
    <member kind="function">
      <name>Max</name>
      <anchor>3086d59f7c2dd2d5ad71f5d0d911f001</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Max</name>
      <anchor>894314a4dd8b904ca7ecb6167c270b35</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="function">
      <name>MaxX</name>
      <anchor>c19067966974b9291d26295852e3add7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MaxY</name>
      <anchor>c0738f597a36b7c8c17701e6fe48d5a2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MaxZ</name>
      <anchor>c391f4928f19f28e077442fe90a02f56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Min</name>
      <anchor>57e7ebc42b8d8e0379dbde60a1443122</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Min</name>
      <anchor>f6512ff73af759ee61dddfbaff1d7979</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="function">
      <name>MinX</name>
      <anchor>1684d10b3de0888c02113376bcf491b4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MinY</name>
      <anchor>73cdfa54c11dca6eb943bda4a2b7e79c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MinZ</name>
      <anchor>0ad994d08b9aeb5be8adf9a2eaefb605</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>c07827a4c60a91de3f9b2424d7ecca0f</anchor>
      <arglist>(const csBox3 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>99d0177873da6b8c6eada02e479ec886</anchor>
      <arglist>(const csVector3 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>71339d82b1ba75b113199c4f7541726e</anchor>
      <arglist>(const csBox3 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>OtherSide</name>
      <anchor>d62b3cb9b9765edd9146eadc2f5ed2de</anchor>
      <arglist>(int side)</arglist>
    </member>
    <member kind="function">
      <name>Overlap</name>
      <anchor>cba21deeca4e73ac49e175ec9077bb9b</anchor>
      <arglist>(const csBox3 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectBox</name>
      <anchor>d219d4fc40c7716fc35b1e16e77d5fc6</anchor>
      <arglist>(const csTransform &amp;trans, float fov, float sx, float sy, csBox2 &amp;sbox, float &amp;min_z, float &amp;max_z) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectBoxAndOutline</name>
      <anchor>2c0dec575565da709a401ce2bae498b9</anchor>
      <arglist>(const csTransform &amp;trans, float fov, float sx, float sy, csBox2 &amp;sbox, csPoly2D &amp;poly, float &amp;min_z, float &amp;max_z) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectOutline</name>
      <anchor>caf48b519bbb8d746fe6997947c8881b</anchor>
      <arglist>(const csVector3 &amp;origin, int axis, float where, csPoly2D &amp;poly) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectOutline</name>
      <anchor>f56e1410aa0c0f416b0b222f3d9dd933</anchor>
      <arglist>(const csVector3 &amp;origin, int axis, float where, csArray&lt; csVector2 &gt; &amp;poly) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectOutline</name>
      <anchor>35c4c81d913de18ddbe19f4baaf016de</anchor>
      <arglist>(const csTransform &amp;trans, float fov, float sx, float sy, csPoly2D &amp;poly, float &amp;min_z, float &amp;max_z) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>dd1fd1473a613636e920f0659b2fd22b</anchor>
      <arglist>(float x1, float y1, float z1, float x2, float y2, float z2)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>5d2a0176797feec906f6d37849861f02</anchor>
      <arglist>(const csVector3 &amp;bmin, const csVector3 &amp;bmax)</arglist>
    </member>
    <member kind="function">
      <name>SetCenter</name>
      <anchor>81d9340a00e6c1c6a06e5aa7fc23434b</anchor>
      <arglist>(const csVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>SetMax</name>
      <anchor>ec1259ef528e1f661116ce3e11df3cdf</anchor>
      <arglist>(size_t idx, float val)</arglist>
    </member>
    <member kind="function">
      <name>SetMin</name>
      <anchor>f4b672a75fe954c94a95cb1818872208</anchor>
      <arglist>(size_t idx, float val)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>7045c1e7c84379c62797f52ee8b66109</anchor>
      <arglist>(const csVector3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>Split</name>
      <anchor>41166c6d88202d8f90d3b53472225a9e</anchor>
      <arglist>(int axis, float where, csBox3 &amp;bl, csBox3 &amp;br) const </arglist>
    </member>
    <member kind="function">
      <name>SquaredOriginDist</name>
      <anchor>c42856d771e6be888c110cc644cd9f15</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SquaredOriginMaxDist</name>
      <anchor>b797ab62f59fc71e913168dd29b36799</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SquaredPosDist</name>
      <anchor>0686bc2665ce3190d453b4e5a043c937</anchor>
      <arglist>(const csVector3 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <name>SquaredPosMaxDist</name>
      <anchor>702a41f9189f58f65417cf7fc9b693aa</anchor>
      <arglist>(const csVector3 &amp;pos) const </arglist>
    </member>
    <member kind="function">
      <name>StartBoundingBox</name>
      <anchor>d75ddae9c8600e2d34ac29cfaa37c1a0</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>StartBoundingBox</name>
      <anchor>80242120b00afc06f7279bef87f08845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TestIntersect</name>
      <anchor>39bdacf224add82c37748e380a558cd2</anchor>
      <arglist>(const csBox3 &amp;box) const </arglist>
    </member>
    <member kind="function">
      <name>TestSplit</name>
      <anchor>64c45728b4f1b626fb6bcb08c8b9350c</anchor>
      <arglist>(int axis, float where) const </arglist>
    </member>
    <member kind="function">
      <name>Volume</name>
      <anchor>11197e83f7b098d6871b97acb2da741b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>8850b2c8d94592376254e73f4a1f12b8</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>e4c5328bb5179aae216fd1af2816abdb</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>07e11249f0a94add75fc8bc865070ce9</anchor>
      <arglist>(const csBox3 &amp;box, const csVector3 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>d98ee83b7eb1d53cc48697562e274103</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>54f2ca4591081159072cb78b5e5c43c1</anchor>
      <arglist>(const csVector3 &amp;point, const csBox3 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>d4a3f86a7260aa0f58c63a8b362dfd1a</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>31e84ae705a79224f140d629f68a612b</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>800db4b5b562663918a8481d7b41be21</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>edges</name>
      <anchor>212b36732ec9788f638ce402f2a4e3f4</anchor>
      <arglist>[24]</arglist>
    </member>
    <member kind="function">
      <name>faces</name>
      <anchor>431991e8b9fbe36382b3eb8dc5255433</anchor>
      <arglist>[6]</arglist>
    </member>
    <member kind="function">
      <name>maxbox</name>
      <anchor>400fc087f1cf85700dec0f1d48e2842b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>minbox</name>
      <anchor>587f32cdcb29f9b068df8b6c873d4f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>outlines</name>
      <anchor>4cf2e00bfe2908e3706af4b122bdc2ee</anchor>
      <arglist>[27]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBoxClipper</name>
    <base>csClipper</base>
    <filename>classcsBoxClipper.html</filename>
    <member kind="function">
      <name>csBoxClipper</name>
      <anchor>72a74d9d24995199da33cadae780fc79</anchor>
      <arglist>(const csBox2 &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>csBoxClipper</name>
      <anchor>9570593534dd1a20fcbad29b02b0bf61</anchor>
      <arglist>(float x1, float y1, float x2, float y2)</arglist>
    </member>
    <member kind="function">
      <name>ClassifyBox</name>
      <anchor>e82274ff1ada152fee90c95f54a6c186</anchor>
      <arglist>(const csBox2 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>bf805b74f50108126961506e91954ba0</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount, csVertexStatus *OutStatus)</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>f8ee886f4239788ea434479f66ed661d</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount, csBox2 &amp;BoundingBox)</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>07ef433b9e974ef0cc17b54a158fe7bc</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount)</arglist>
    </member>
    <member kind="function">
      <name>GetClipperType</name>
      <anchor>f352d510f25cd20537cf3edeffd00d27</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetClipPoly</name>
      <anchor>7872039688f9938fbbccb5bfe64c6451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>139cf60f2685caac6a254e81dce75c27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsInside</name>
      <anchor>105c6e61ad5943647a4163c73b312123</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBSpline</name>
    <base>csSpline</base>
    <filename>classcsBSpline.html</filename>
    <member kind="function">
      <name>csBSpline</name>
      <anchor>1d90b32d1d57e583af7820cc2f06af91</anchor>
      <arglist>(int d, int p)</arglist>
    </member>
    <member kind="function">
      <name>~csBSpline</name>
      <anchor>f57c67e5d178020d563ada0795faba58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BaseFunction</name>
      <anchor>f96af08caf0e0844a01bfa1fb2f31a44</anchor>
      <arglist>(int i, float t) const </arglist>
    </member>
    <member kind="function">
      <name>Calculate</name>
      <anchor>81b6570f7122a0dfe2c3f7a2963cf3c8</anchor>
      <arglist>(float time)</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedDimension</name>
      <anchor>6eeeb4252fedb5a257ee12e997f0d13d</anchor>
      <arglist>(int dim) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBSPTree</name>
    <filename>classcsBSPTree.html</filename>
    <member kind="function">
      <name>csBSPTree</name>
      <anchor>b6ddd9d8922b393110ddd79929c54365</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csBSPTree</name>
      <anchor>3296ec9d9d59a031fc5c3911bdae5bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Back2Front</name>
      <anchor>1900357a43ea658a759d3d0523d7ab5d</anchor>
      <arglist>(const csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>Build</name>
      <anchor>0aa65e0aded3caef1627a568cae1a8e1</anchor>
      <arglist>(csTriangle *triangles, int num_triangles, csVector3 *vertices)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>147b54ff47911e1e95225ab96e552913</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCallStack</name>
    <filename>classcsCallStack.html</filename>
    <member kind="function">
      <name>~csCallStack</name>
      <anchor>93136f0c636ee343c27c7781309b095d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>dc3f1f1fa29a09274ad67157ad2d5088</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetEntryAll</name>
      <anchor>9e351a113f2f071fde7c7587b5508f77</anchor>
      <arglist>(size_t i, bool brief=false)</arglist>
    </member>
    <member kind="function">
      <name>GetEntryCount</name>
      <anchor>8f2b2844b5e13a79e7bb33d9cdb9e482</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFunctionName</name>
      <anchor>0586c3c01da3cbe4e8a008bb5174d36b</anchor>
      <arglist>(size_t num, csString &amp;str)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLineNumber</name>
      <anchor>f4fb998e0652788f8b7a4acdb6d260f3</anchor>
      <arglist>(size_t num, csString &amp;str)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParameters</name>
      <anchor>7ad1fb1e82d27cb9e7c7f2a2572a5251</anchor>
      <arglist>(size_t num, csString &amp;str)=0</arglist>
    </member>
    <member kind="function">
      <name>Print</name>
      <anchor>9a707b22e1505819b352252a59fcd0d5</anchor>
      <arglist>(FILE *f=stdout, bool brief=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCallStackHelper</name>
    <filename>classcsCallStackHelper.html</filename>
    <member kind="function">
      <name>CreateCallStack</name>
      <anchor>01040882602b05577812b443812d2da1</anchor>
      <arglist>(int skip=0, bool fast=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCatmullRomSpline</name>
    <base>csBSpline</base>
    <filename>classcsCatmullRomSpline.html</filename>
    <member kind="function">
      <name>csCatmullRomSpline</name>
      <anchor>057186ea1728cc483eca68c92abbdea9</anchor>
      <arglist>(int d, int p)</arglist>
    </member>
    <member kind="function">
      <name>~csCatmullRomSpline</name>
      <anchor>8c4ec50cc95d688174099ed1388cbb0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BaseFunction</name>
      <anchor>3e1d2248e294b93740d05e06e7b41678</anchor>
      <arglist>(int i, float t) const </arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>01f816ad78981522448ae0ad09f9f875</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csChainHull2D</name>
    <filename>classcsChainHull2D.html</filename>
    <member kind="function">
      <name>CalculatePresorted</name>
      <anchor>251664ca895909773a862bbe64b2a5ed</anchor>
      <arglist>(csVector2 *points, size_t n, csVector2 *hull)</arglist>
    </member>
    <member kind="function">
      <name>SortXY</name>
      <anchor>b079e6090d340f9e9cf4eb6fddacec9a</anchor>
      <arglist>(csVector2 *points, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csClipper</name>
    <base>scfImplementation1&lt; csClipper</base>
    <base> iClipper2D &gt;</base>
    <filename>classcsClipper.html</filename>
    <member kind="function">
      <name>csClipper</name>
      <anchor>36278c3e92e2ae4b1c185e2008b690b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csClipper</name>
      <anchor>fd7913dd38b53e56a49e06f5b8dcdf8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClipInPlace</name>
      <anchor>2c2b0a13abb18e70363e498323d39871</anchor>
      <arglist>(csVector2 *InPolygon, size_t &amp;InOutCount, csBox2 &amp;BoundingBox)</arglist>
    </member>
    <member kind="function">
      <name>LastClipResult</name>
      <anchor>9d201cbaff2ec136a2ebe5e8615da079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mrClipping</name>
      <anchor>6e30efeb63038e311c6d5f5ed1a1037b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>polypool</name>
      <anchor>6ab49b50f3a2451d8d2fb01c4e133260</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csColliderActor</name>
    <filename>classcsColliderActor.html</filename>
    <member kind="function">
      <name>csColliderActor</name>
      <anchor>26bdfd5dc9bbb10eced824893ef16d86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AdjustForCollisions</name>
      <anchor>4fddf9fc57a99b266da9f41332ee7e66</anchor>
      <arglist>(const csVector3 &amp;oldpos, csVector3 &amp;newpos, const csVector3 &amp;vel, float delta)</arglist>
    </member>
    <member kind="function">
      <name>CheckHitMeshes</name>
      <anchor>fe9e6444d676a48da69bab40db8bd764</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>CheckRevertMove</name>
      <anchor>e592ea8ebe979c4c70ccdc9dab35013d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>EnableHitMeshes</name>
      <anchor>cdca1999a827c7528157bd71967882c9</anchor>
      <arglist>(bool hm)</arglist>
    </member>
    <member kind="function">
      <name>GetGravity</name>
      <anchor>9583357057cd8abd43f9f8f4b1d32471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHitMeshes</name>
      <anchor>26361be9d07bce4ba44f768d7e1f4984</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRotation</name>
      <anchor>77c11cb9d7be5f66843ff2a386180993</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HasCD</name>
      <anchor>234e57c8f766187ea682ef460592e41b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>InitializeColliders</name>
      <anchor>cbf75d32f87155b928538b621958cfce</anchor>
      <arglist>(iCamera *camera, const csVector3 &amp;legs, const csVector3 &amp;body, const csVector3 &amp;shift)</arglist>
    </member>
    <member kind="function">
      <name>InitializeColliders</name>
      <anchor>3584b5c89982971b40c6295df880cb55</anchor>
      <arglist>(iMeshWrapper *mesh, const csVector3 &amp;legs, const csVector3 &amp;body, const csVector3 &amp;shift)</arglist>
    </member>
    <member kind="function">
      <name>IsOnGround</name>
      <anchor>134ff5231004996e7bb4144391937592</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Move</name>
      <anchor>7a3ab6293bdab2a0fb33928e0238d763</anchor>
      <arglist>(float delta, float speed, const csVector3 &amp;velBody, const csVector3 &amp;angularVelocity)</arglist>
    </member>
    <member kind="function">
      <name>SetCamera</name>
      <anchor>68b596150ae08abc70f8b232362f7af7</anchor>
      <arglist>(iCamera *camera, bool adjustRotation=true)</arglist>
    </member>
    <member kind="function">
      <name>SetCD</name>
      <anchor>e9356b7d49bb8c30178d06d390a24cee</anchor>
      <arglist>(bool c)</arglist>
    </member>
    <member kind="function">
      <name>SetCollideSystem</name>
      <anchor>7550ff53e6cc721df1076c4938ad0257</anchor>
      <arglist>(iCollideSystem *cdsys)</arglist>
    </member>
    <member kind="function">
      <name>SetEngine</name>
      <anchor>7d8f778de41aaf572eb53efce2c8c019</anchor>
      <arglist>(iEngine *engine)</arglist>
    </member>
    <member kind="function">
      <name>SetGravity</name>
      <anchor>b0e4be4a3d12a5d4260490d03345e346</anchor>
      <arglist>(float g)</arglist>
    </member>
    <member kind="function">
      <name>SetOnGround</name>
      <anchor>bb3923fe8709fdd02704e57a81b3d899</anchor>
      <arglist>(bool og)</arglist>
    </member>
    <member kind="function">
      <name>SetRotation</name>
      <anchor>d1cd1dc799c496d3f084310457a2f53f</anchor>
      <arglist>(const csVector3 &amp;rot)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csColliderHelper</name>
    <filename>classcsColliderHelper.html</filename>
    <member kind="function">
      <name>CollideArray</name>
      <anchor>4df95dc7011419ee5471989ff6929f7b</anchor>
      <arglist>(iCollideSystem *colsys, iCollider *collider, const csReversibleTransform *trans, int num_colliders, iCollider **colliders, csReversibleTransform **transforms)</arglist>
    </member>
    <member kind="function">
      <name>CollidePath</name>
      <anchor>baece7fd5ccd4032252a3a3b65b56b72</anchor>
      <arglist>(iCollideSystem *colsys, iCollider *collider, const csReversibleTransform *trans, float nbrsteps, csVector3 &amp;newpos, int num_colliders, iCollider **colliders, csReversibleTransform **transforms)</arglist>
    </member>
    <member kind="function">
      <name>InitializeCollisionWrapper</name>
      <anchor>d15382427670d9af91bc98c0b7b2e0e9</anchor>
      <arglist>(iCollideSystem *colsys, iMeshWrapper *mesh)</arglist>
    </member>
    <member kind="function">
      <name>InitializeCollisionWrappers</name>
      <anchor>c66b947c141581dd20e21b969fd599c9</anchor>
      <arglist>(iCollideSystem *colsys, iEngine *engine, iRegion *region=0)</arglist>
    </member>
    <member kind="function">
      <name>TraceBeam</name>
      <anchor>4e307aac0a3e23d60f6743718c17d2aa</anchor>
      <arglist>(iCollideSystem *cdsys, iSector *sector, const csVector3 &amp;start, const csVector3 &amp;end, bool traverse_portals)</arglist>
    </member>
    <member kind="function">
      <name>TraceBeam</name>
      <anchor>b7ae9ca6822a4666ae7663b70bd97a08</anchor>
      <arglist>(iCollideSystem *cdsys, iSector *sector, const csVector3 &amp;start, const csVector3 &amp;end, bool traverse_portals, csIntersectingTriangle &amp;closest_tri, csVector3 &amp;closest_isect, iMeshWrapper **closest_mesh=0, iSector **end_sector=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csColliderWrapper</name>
    <base>scfImplementationExt1&lt; csColliderWrapper</base>
    <base> csObject</base>
    <base> scfFakeInterface&lt; csColliderWrapper &gt; &gt;</base>
    <filename>classcsColliderWrapper.html</filename>
    <member kind="function">
      <name>csColliderWrapper</name>
      <anchor>9eef45d7c18a30a69f13a77a29d5ad79</anchor>
      <arglist>(csObject &amp;parent, iCollideSystem *collide_system, iPolygonMesh *mesh)</arglist>
    </member>
    <member kind="function">
      <name>csColliderWrapper</name>
      <anchor>302e70ad3c375137f4fce50e2b693552</anchor>
      <arglist>(iObject *parent, iCollideSystem *collide_system, iPolygonMesh *mesh)</arglist>
    </member>
    <member kind="function">
      <name>csColliderWrapper</name>
      <anchor>db843096155c167aa7081a843dcf1136</anchor>
      <arglist>(iObject *parent, iCollideSystem *collide_system, iTerraFormer *terrain)</arglist>
    </member>
    <member kind="function">
      <name>csColliderWrapper</name>
      <anchor>6920eecee2c785c0e1f5dd85c1519004</anchor>
      <arglist>(iObject *parent, iCollideSystem *collide_system, iCollider *collider)</arglist>
    </member>
    <member kind="function">
      <name>~csColliderWrapper</name>
      <anchor>cee2d86a108653f1c0a3faa52e57845c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Collide</name>
      <anchor>78b30d6f667705ff9c631147620101da</anchor>
      <arglist>(iObject *otherObject, csReversibleTransform *pThisTransform=0, csReversibleTransform *pOtherTransform=0)</arglist>
    </member>
    <member kind="function">
      <name>Collide</name>
      <anchor>ac50fdfe43380c379eab3704dcc62746</anchor>
      <arglist>(csObject &amp;otherObject, csReversibleTransform *pThisTransform=0, csReversibleTransform *pOtherTransform=0)</arglist>
    </member>
    <member kind="function">
      <name>Collide</name>
      <anchor>2cb7e6496479c97eb18cdf92f366ba50</anchor>
      <arglist>(csColliderWrapper &amp;pOtherCollider, csReversibleTransform *pThisTransform=0, csReversibleTransform *pOtherTransform=0)</arglist>
    </member>
    <member kind="function">
      <name>GetCollider</name>
      <anchor>3c5ab442e1de730d7a5b2d6e277182d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetColliderWrapper</name>
      <anchor>8c56eb1e6ef07ec799a223031f32fe54</anchor>
      <arglist>(iObject *object)</arglist>
    </member>
    <member kind="function">
      <name>GetColliderWrapper</name>
      <anchor>b0419fb1d92f8fb4e179a937afd1fffa</anchor>
      <arglist>(csObject &amp;object)</arglist>
    </member>
    <member kind="function">
      <name>GetCollideSystem</name>
      <anchor>216911e3e3cb1eb160cafb8837e785f5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csColor</name>
    <filename>classcsColor.html</filename>
    <member kind="function">
      <name>csColor</name>
      <anchor>9d6d44543c2e4022d581a56f06160c2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csColor</name>
      <anchor>29edef1cdd26b27f86ecbca86353294e</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <name>csColor</name>
      <anchor>d67b3208bf4bd5b24fe135830ba4d5d8</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>Add</name>
      <anchor>0084e967276ae226c03bcd9515a52591</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <name>Clamp</name>
      <anchor>f8492e4c98f57aad84af59a93ab8a337</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <name>ClampDown</name>
      <anchor>ab5ba9cd98c126418db219695fac9fed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>dfb9b8a3a13a132dcaa0d4e103d2946d</anchor>
      <arglist>(const float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>ad56e483f94ccdfd42094100a67c6342</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>2431697e3aa61ce56c4b42dc1aef5d33</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>594f40443b6a7c9790c42fd8eb9294e1</anchor>
      <arglist>(const csColor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>6f62d2e42c255b3b922534d94eb7da10</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>96a57c0a9dcb3abeff7717ddd9badab2</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>f0e2c176bdcf8423563e86bb534308b6</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>f4ced8ced1fddb9fd45841c232039564</anchor>
      <arglist>(const csColor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>c46ba351ead9db574cdadedd87b000b1</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>705bb8735d41b549cef0aaed2d4be64a</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <name>Subtract</name>
      <anchor>7a8ce895e2b9f6c4a85932512106bb77</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <name>blue</name>
      <anchor>7dff94c0463a3cfe0109e9fb9eac07bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>green</name>
      <anchor>bc1be0bd770b587f46dc8debb5e336ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>red</name>
      <anchor>96e49f0be7a6642163bf9b4c41be7d34</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csColor4</name>
    <base>csColor</base>
    <filename>classcsColor4.html</filename>
    <member kind="function">
      <name>csColor4</name>
      <anchor>3d31911c3729b0ae51baf99da11dfc56</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>1c754e30f9a6369b680bd2b8a61065ed</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>4a1170326278aa6b27228e0fff80c8d9</anchor>
      <arglist>(const csColor4 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>csColor4</name>
      <anchor>403998d828d340aa8299959858ef132c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csColor4</name>
      <anchor>9db7ba4650eb321a673f1d4b06fa771e</anchor>
      <arglist>(float r, float g, float b, float a=1.0f)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>1d0ffb22ce614a469b39c642ea4fe326</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>0805873ae5dcd39922b86f00453134c4</anchor>
      <arglist>(const csColor4 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>1874db76d4c9dd01c00d95449b3c908d</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>13ef3788c1a877e983787d22777984d0</anchor>
      <arglist>(const csColor4 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>8be0b53cca22db4d652fac6f98512b21</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>de126d8129442e53a897f7f7ca887666</anchor>
      <arglist>(const csColor4 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>062d8a2f296846cfc45bdf48ec0b4133</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>0974c16173adec9c681a5fea13bd9b6b</anchor>
      <arglist>(const csColor4 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>96f6cd2f37c1f3f314867e35907de4c0</anchor>
      <arglist>(const csColor4 &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>6e124197f983b933d45b61f969666711</anchor>
      <arglist>(float r, float g, float b)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>93df2f3d27cb4c29b59e4b34d4d603e0</anchor>
      <arglist>(const csColor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>alpha</name>
      <anchor>bdeac21fd389f0b5ec8d19cd4bb19c53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csColorQuantizer</name>
    <filename>classcsColorQuantizer.html</filename>
    <member kind="function">
      <name>csColorBox</name>
      <anchor>91ce807a34273beb4a3f93fae8416ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csColorQuantizer</name>
      <anchor>49d60c8a4d264fd6410499fab38618ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csColorQuantizer</name>
      <anchor>19e4ae4e4f8053ed6bf6fba1995b2d94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Begin</name>
      <anchor>a99aba3acc8f79e6c867d71d77778f39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Bias</name>
      <anchor>5b129e8522810832a77ae9c415ef76b9</anchor>
      <arglist>(csRGBpixel *colors, int count, int weight)</arglist>
    </member>
    <member kind="function">
      <name>Count</name>
      <anchor>cc124c95457499d948e427b174083323</anchor>
      <arglist>(csRGBpixel *image, int pixels, csRGBpixel *transp=0)</arglist>
    </member>
    <member kind="function">
      <name>DoRGB</name>
      <anchor>9749bf308670ef122aa1d9a4ee95c186</anchor>
      <arglist>(csRGBpixel *image, int pixels, int pixperline, uint8 *&amp;outimage, csRGBpixel *&amp;outpalette, int &amp;maxcolors, bool dither)</arglist>
    </member>
    <member kind="function">
      <name>End</name>
      <anchor>9174b689fa185583f1bbc4be4d0512f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Palette</name>
      <anchor>44e180da2038e1116c5022a59f5faed7</anchor>
      <arglist>(csRGBpixel *&amp;outpalette, int &amp;maxcolors, csRGBpixel *transp=0)</arglist>
    </member>
    <member kind="function">
      <name>Remap</name>
      <anchor>3a362b950a4f573a8db19a0419f73fd5</anchor>
      <arglist>(csRGBpixel *image, int pixels, uint8 *&amp;outimage, csRGBpixel *transp=0)</arglist>
    </member>
    <member kind="function">
      <name>RemapDither</name>
      <anchor>31300ceea4f021472f9209c4d75ea42b</anchor>
      <arglist>(csRGBpixel *image, int pixels, int pixperline, csRGBpixel *palette, int colors, uint8 *&amp;outimage, csRGBpixel *transp=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommandEventHelper</name>
    <filename>classcsCommandEventHelper.html</filename>
    <member kind="function">
      <name>GetCode</name>
      <anchor>1fdd742aff499a35dbdd8ffd80ba0e95</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetEventData</name>
      <anchor>64616fcf764ee750c43c5b2ea00f174a</anchor>
      <arglist>(const iEvent *event, csCommandEventData &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>GetInfo</name>
      <anchor>1c8bbab40eb52b3f86b4e1e9f7e22b76</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>NewEvent</name>
      <anchor>b97ec5c8d0074a6bb399f2243ab57a8f</anchor>
      <arglist>(csTicks, csEventID name, bool Broadcast, intptr_t info=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommandLineHelper</name>
    <filename>classcsCommandLineHelper.html</filename>
    <member kind="function">
      <name>CheckHelp</name>
      <anchor>782e62335aa5eebef6c6ce081701ea10</anchor>
      <arglist>(iObjectRegistry *object_reg, iCommandLineParser *cmdline=0)</arglist>
    </member>
    <member kind="function">
      <name>Help</name>
      <anchor>8082d602f14ea7f4376e7c811204f737</anchor>
      <arglist>(iObjectRegistry *object_reg, iCommandLineParser *cmdline=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommandLineParser</name>
    <base>scfImplementation1&lt; csCommandLineParser</base>
    <base> iCommandLineParser &gt;</base>
    <filename>classcsCommandLineParser.html</filename>
    <member kind="function">
      <name>csCommandLineParser</name>
      <anchor>287b095cb7957d0345a39927eb701bbb</anchor>
      <arglist>(iBase *Parent=0)</arglist>
    </member>
    <member kind="function">
      <name>csCommandLineParser</name>
      <anchor>b1ccc5b40041ee41488dce2cad39ce6c</anchor>
      <arglist>(int argc, const char *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>~csCommandLineParser</name>
      <anchor>de7012f1693b21d373fcf49b7db919bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddName</name>
      <anchor>e8e9ea41074109a664dec1ca7701ee5c</anchor>
      <arglist>(const char *iName)</arglist>
    </member>
    <member kind="function">
      <name>AddOption</name>
      <anchor>3c1fe1bd12cec5c73a34734627be785c</anchor>
      <arglist>(const char *iName, const char *iValue)</arglist>
    </member>
    <member kind="function">
      <name>GetAppDir</name>
      <anchor>20c3bd6f13d92711eccbbc43570a3db2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAppPath</name>
      <anchor>5ef064523111c32ed3d240d3f67ee833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetBoolOption</name>
      <anchor>6cdb8dd90d0c15d6e47114e260830279</anchor>
      <arglist>(const char *iName, bool defaultValue=false)</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>41150d7d43dd337e3d3f9ca4bbabcc12</anchor>
      <arglist>(size_t iIndex=0) const </arglist>
    </member>
    <member kind="function">
      <name>GetOption</name>
      <anchor>c123c8db90e23346552c47b2b6138135</anchor>
      <arglist>(const char *iName, size_t iIndex=0) const </arglist>
    </member>
    <member kind="function">
      <name>GetOptionName</name>
      <anchor>b65d818d702dab3ac75f0590b15209ac</anchor>
      <arglist>(size_t iIndex) const </arglist>
    </member>
    <member kind="function">
      <name>GetResourceDir</name>
      <anchor>00bb8be99d3ed54a89418040bd0073d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>fc052ed19fef7130d26e7212e84d01aa</anchor>
      <arglist>(int argc, const char *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>ReplaceName</name>
      <anchor>de2652e51a171cb23211f6b76b2e1e96</anchor>
      <arglist>(const char *iValue, size_t iIndex=0)</arglist>
    </member>
    <member kind="function">
      <name>ReplaceOption</name>
      <anchor>f26f2651cfb87de5956d2787949df884</anchor>
      <arglist>(const char *iName, const char *iValue, size_t iIndex=0)</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>04dd3a49d3e7ec2cfdf66dcf30bf8105</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommonImageFile</name>
    <base>scfImplementationExt0&lt; csCommonImageFile</base>
    <base> csImageMemory &gt;</base>
    <filename>classcsCommonImageFile.html</filename>
    <member kind="function">
      <name>object_reg</name>
      <anchor>7c0eb5be39a6335342b2947e7c83dba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csCommonImageFileLoader</name>
      <anchor>883c13ca991f2d494c55b86cfbb774af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DataTypeString</name>
      <anchor>01846a0717572b1edc81d72040ed2791</anchor>
      <arglist>(csLoaderDataType dataType)</arglist>
    </member>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>52eb4dcce4f38fded746cc8e6df78d33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>0fc5c8f36c1f8ad9626d339300a8ce11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>3d4f16347be90e13ce89d1d81f8247c7</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const </arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>930e39e085bc6a905036711f9047788e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>ec21772b6225bce4b19c4a5bfeaac688</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRawFormat</name>
      <anchor>df390477df78180ad356ddd90fe83383</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>421637e134710b348c21c683e4626381</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>InitLoader</name>
      <anchor>2a641aa577cf40ac3f6ac72c00b2543e</anchor>
      <arglist>(csRef&lt; iDataBuffer &gt; source)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>531bf5da882815e71edbe13db0807499</anchor>
      <arglist>(csRef&lt; iDataBuffer &gt; source)</arglist>
    </member>
    <member kind="function">
      <name>MakeImageData</name>
      <anchor>1ab263e83e83a507ca09fd477b4c85af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WaitForJob</name>
      <anchor>cdffd9cd912ca79070ebadf87c87b4d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>jobQueue</name>
      <anchor>7b235d2da32a91ede56ac12620a05e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>loadJob</name>
      <anchor>80a19c458ede45a9a6a7fc7a2fee8eac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommonImageFile::LoaderJob</name>
    <base>scfImplementation1</base>
    <filename>classcsCommonImageFile_1_1LoaderJob.html</filename>
    <member kind="function">
      <name>LoaderJob::LoaderJob</name>
      <anchor>1d1503e48f00c240be5a32a83ce11360</anchor>
      <arglist>(iImageFileLoader *loader)</arglist>
    </member>
    <member kind="function">
      <name>LoaderJob::currentLoader</name>
      <anchor>474ca04988447152c609d728b9d48220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LoaderJob::loadResult</name>
      <anchor>31a6af17ecb530eeae92b3e07373b8e5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommonImageFileLoader</name>
    <base>scfImplementation1&lt; csCommonImageFileLoader</base>
    <base> iImageFileLoader &gt;</base>
    <filename>classcsCommonImageFileLoader.html</filename>
    <member kind="function">
      <name>Height</name>
      <anchor>3cf96f16828659f4fc14110b5391289f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ApplyTo</name>
      <anchor>289f7a0009e82e4662ad15f3aa2fb9c7</anchor>
      <arglist>(csImageMemory *image)</arglist>
    </member>
    <member kind="function">
      <name>GetDataType</name>
      <anchor>8fea10ad1fe46eb22e87e02bf22cb3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>4821bd4279703bdc69f617e0ef58c9ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>a7d5a62b388f423c0d8847b46a65e9f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>403e9c442e761b2571648f1d08d06e4e</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const </arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>5f5f35baa9fb50918494768a53e08266</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>adca4ec1ddc31763ac789a1974fead37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>73e11ce96661d3352e9093d7f47f121e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>alpha</name>
      <anchor>daa97d4bed8aaf3211091d622e07f4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dataType</name>
      <anchor>22c5feffe1d7bfc303d75875b53d0808</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>c35cb819ccb29401ab3a9ebcfecc6603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hasKeycolor</name>
      <anchor>3208ae20145c1b54c7a63566af94984a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indexData</name>
      <anchor>15a83f2036f0e050d3f3970e201d6e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>keycolor</name>
      <anchor>5e830bc64b0b4e6b0992681f77bd35db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>palette</name>
      <anchor>ff01d235f3ab6a717d46548d0dfc429d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>paletteCount</name>
      <anchor>78f8a18460f55b16b20a3973435bca99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rawData</name>
      <anchor>c335212e32fe02c7533156244a8cdc2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rgbaData</name>
      <anchor>5318d5d6f9e55a9c19722ed97af6cd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>77258daffb668391981419eda3c585c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csComparator</name>
    <filename>classcsComparator.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>91f6c9cfaa52ebbc6245dc0ba5f944d7</anchor>
      <arglist>(T1 const &amp;r1, T2 const &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> const char *, const char * </name>
    <filename>classcsComparator_3_01const_01char_01_5_00_01const_01char_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> csBitArray, csBitArray </name>
    <filename>classcsComparator_3_01csBitArray_00_01csBitArray_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> csInputDefinition, csInputDefinition </name>
    <filename>classcsComparator_3_01csInputDefinition_00_01csInputDefinition_01_4.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>8a75b3a9379471ec64fba61120a4c6ff</anchor>
      <arglist>(csInputDefinition const &amp;r1, csInputDefinition const &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> csRGBcolor, csRGBcolor </name>
    <filename>classcsComparator_3_01csRGBcolor_00_01csRGBcolor_01_4.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>e08f9cc6c2f094326c0746cb3316cbce</anchor>
      <arglist>(csRGBcolor const &amp;r1, csRGBcolor const &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> csRGBcolor *, csRGBcolor * </name>
    <filename>classcsComparator_3_01csRGBcolor_01_5_00_01csRGBcolor_01_5_01_4.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>06819da68697cd9ce8ebd76ce1cdd091</anchor>
      <arglist>(csRGBcolor *const &amp;r1, csRGBcolor *const &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> csString, csString </name>
    <filename>classcsComparator_3_01csString_00_01csString_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> csStringBase, csStringBase </name>
    <filename>classcsComparator_3_01csStringBase_00_01csStringBase_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> csStrKey, csStrKey </name>
    <filename>classcsComparator_3_01csStrKey_00_01csStrKey_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>csComparatorBitArray</name>
    <filename>classcsComparatorBitArray.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>d1271ccc227682f51cf98bef2d6b20f9</anchor>
      <arglist>(BitArray const &amp;key1, BitArray const &amp;key2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csComparatorString</name>
    <filename>classcsComparatorString.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>a7940929440e8c1bec6bb92506a9f881</anchor>
      <arglist>(T const &amp;r1, T const &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csComparatorStruct</name>
    <filename>classcsComparatorStruct.html</filename>
    <member kind="function">
      <name>Compare</name>
      <anchor>5785730bb1fd8c408cfdfd656687f7c7</anchor>
      <arglist>(T const &amp;r1, T const &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCondition</name>
    <base>csRefCount</base>
    <filename>classcsCondition.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>79fdf1922e66028d28d75d532f61da16</anchor>
      <arglist>(uint32 conditionAttributes=0)</arglist>
    </member>
    <member kind="function">
      <name>GetLastError</name>
      <anchor>b82465b551ae7fac8c63474b3826f8bc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Signal</name>
      <anchor>36d2e191c6e5111d055c5d7bfa2285b1</anchor>
      <arglist>(bool WakeAll=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Wait</name>
      <anchor>2813394aecf8b91dbfa65499249fb88a</anchor>
      <arglist>(csMutex *mutex, csTicks timeout=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csConfigAccess</name>
    <filename>classcsConfigAccess.html</filename>
    <member kind="function">
      <name>csConfigAccess</name>
      <anchor>50ec22f7e34f2d1587e6e230d2c73574</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csConfigAccess</name>
      <anchor>0c452ed7c13eae98f0e1906e1d35c488</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>csConfigAccess</name>
      <anchor>c8b6ae94bf283251fe60719afe1fd337</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *Filename, bool vfs=true, int Priority=iConfigManager::ConfigPriorityPlugin)</arglist>
    </member>
    <member kind="function">
      <name>csConfigAccess</name>
      <anchor>6506a74b637bdbd2899592e2d7167a23</anchor>
      <arglist>(iObjectRegistry *object_reg, iConfigFile *file, int Priority=iConfigManager::ConfigPriorityPlugin)</arglist>
    </member>
    <member kind="function">
      <name>~csConfigAccess</name>
      <anchor>408bcb95b92e001e3d965e3cc86cbf2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddConfig</name>
      <anchor>6de3b63b4b2d394ddf15a31771ac14a5</anchor>
      <arglist>(iObjectRegistry *object_reg, iConfigFile *file, int Priority=iConfigManager::ConfigPriorityPlugin)</arglist>
    </member>
    <member kind="function">
      <name>AddConfig</name>
      <anchor>a1b90ee14b0e5ee357782de39d443712</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *Filename, bool vfs=true, int Priority=iConfigManager::ConfigPriorityPlugin)</arglist>
    </member>
    <member kind="function">
      <name>operator iConfigFile *</name>
      <anchor>0745e0f708e0a6b0d2a9884f7ab87399</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator-&gt;</name>
      <anchor>56fd9d61a0be5f5cfb87be6a9b7ffe7f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csConfigDocument</name>
    <base>scfImplementation1&lt; csConfigDocument</base>
    <base> iConfigFile &gt;</base>
    <filename>classcsConfigDocument.html</filename>
    <member kind="function">
      <name>csConfigDocumentIterator</name>
      <anchor>40b56b4fed8981bee67e66ee7d5c9110</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>b55461e66f03529809c3dded055ceb10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteKey</name>
      <anchor>8d9e991d7ad5573724a7b33bc57f5131</anchor>
      <arglist>(const char *Key)</arglist>
    </member>
    <member kind="function">
      <name>Enumerate</name>
      <anchor>7d5b7af4ccc465571c7d298406d6b38b</anchor>
      <arglist>(const char *Subsection=0)</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>3769ac0113adc9100192e35cf7253876</anchor>
      <arglist>(const char *Key, bool Def=false) const </arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>5cf83d6805cab6e510142bdaae54c2c2</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetEOFComment</name>
      <anchor>641b3678813f048b77c9f52dbf1cf351</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>ed78a9af7beb8ca100114ffd9eacab10</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>e41a8fb03a2f8835c808962765ca80eb</anchor>
      <arglist>(const char *Key, float Def=0.0) const </arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>2a78abfdecf67de8f38ddb6dd58e2363</anchor>
      <arglist>(const char *Key, int Def=0) const </arglist>
    </member>
    <member kind="function">
      <name>GetStr</name>
      <anchor>baadb6f7762e6e4d139f937888928e87</anchor>
      <arglist>(const char *Key, const char *Def=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>GetTuple</name>
      <anchor>d48577696d0919c0538e57921919c97a</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetVFS</name>
      <anchor>54c442a7b7e4515a1f04239be412749d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>KeyExists</name>
      <anchor>68ffd081f6a5c8b52b8392337f5ce181</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>69c9563509de9808a933f112d04688d8</anchor>
      <arglist>(const char *iFileName, iVFS *=0, bool Merge=false, bool NewWins=true)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>2b60fc041e5db05fedfa3280cf470e8b</anchor>
      <arglist>(const char *iFileName, iVFS *=0)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>c5a631484a168eda72e2c97c6b1205a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>25ba3d450ad400086d95c08484689031</anchor>
      <arglist>(const char *Key, bool Value)</arglist>
    </member>
    <member kind="function">
      <name>SetComment</name>
      <anchor>6b2957a2bba8322122c689aabc6b8ba5</anchor>
      <arglist>(const char *Key, const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetEOFComment</name>
      <anchor>258e6d4e309361fcc9f1d1ea9abbc830</anchor>
      <arglist>(const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetFileName</name>
      <anchor>ab298a9fef921cc09d792d895a41834b</anchor>
      <arglist>(const char *, iVFS *)</arglist>
    </member>
    <member kind="function">
      <name>SetFloat</name>
      <anchor>c3e47f1649084d08d261839e501afabc</anchor>
      <arglist>(const char *Key, float Value)</arglist>
    </member>
    <member kind="function">
      <name>SetInt</name>
      <anchor>c114a34be1fd6d6df8c574f75ed1ec3e</anchor>
      <arglist>(const char *Key, int Value)</arglist>
    </member>
    <member kind="function">
      <name>SetStr</name>
      <anchor>eda4ec9a09c275793814a5b624e66d3b</anchor>
      <arglist>(const char *Key, const char *Val)</arglist>
    </member>
    <member kind="function">
      <name>SetTuple</name>
      <anchor>b7e7f6422b3f59fa3c05228b3c9b41ff</anchor>
      <arglist>(const char *Key, iStringArray *Value)</arglist>
    </member>
    <member kind="function">
      <name>SubsectionExists</name>
      <anchor>f327ccb56ae680e16a4f63744ff9af50</anchor>
      <arglist>(const char *Subsection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csConfigFile</name>
    <base>scfImplementation1&lt; csConfigFile</base>
    <base> iConfigFile &gt;</base>
    <filename>classcsConfigFile.html</filename>
    <member kind="function">
      <name>csConfigIterator</name>
      <anchor>5bcc04b44ae878b5fa61f65570ab6cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csConfigFile</name>
      <anchor>084810d9d15d898b3a0fdd6ca6e5c1a2</anchor>
      <arglist>(const char *Filename=0, iVFS *=0)</arglist>
    </member>
    <member kind="function">
      <name>csConfigFile</name>
      <anchor>17c47f5a37c682ad270c3b0ffd894738</anchor>
      <arglist>(iBase *)</arglist>
    </member>
    <member kind="function">
      <name>~csConfigFile</name>
      <anchor>248b215094481770778c6c7cecc27b10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>0c17dffc5a290850e605f6c24eb4e1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteKey</name>
      <anchor>ad89d1e0583bc61a9b2a8d9e987ecf37</anchor>
      <arglist>(const char *Key)</arglist>
    </member>
    <member kind="function">
      <name>Enumerate</name>
      <anchor>d03e835c0ad486014244b28ef9dc3a77</anchor>
      <arglist>(const char *Subsection=0)</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>db489c7d516541332f8cad56d6b6fbd0</anchor>
      <arglist>(const char *Key, bool Def=false) const </arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>74f5c5931f35743c3ab9f016820d6efc</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetEOFComment</name>
      <anchor>9abfc5f93084cd8a295a70ce0d0e1495</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>4101123ad122c0958995cf0a6c0963bd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>3d425b2c587259ec960daa1a5cb0fbf0</anchor>
      <arglist>(const char *Key, float Def=0.0) const </arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>b7111d4be38ca65443a386020190d442</anchor>
      <arglist>(const char *Key, int Def) const </arglist>
    </member>
    <member kind="function">
      <name>GetStr</name>
      <anchor>08e73e94a469f64c197915b906a79318</anchor>
      <arglist>(const char *Key, const char *Def=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>GetTuple</name>
      <anchor>879579e47798ea6728160127eae1cf82</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetVFS</name>
      <anchor>1965acbf367c3ce904bf43bed5d70e26</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>9a5b6c802872b966f083dbd13aa08793</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>KeyExists</name>
      <anchor>eb2aac126f451ac4b074f6b3a9e60dc5</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>98868fb01b3dc51f1668e125a92a140c</anchor>
      <arglist>(const char *iFileName, iVFS *=0, bool Merge=false, bool NewWins=true)</arglist>
    </member>
    <member kind="function">
      <name>ParseCommandLine</name>
      <anchor>fc23031b6d5b3b654a3dbb0deda577a4</anchor>
      <arglist>(iCommandLineParser *cmdline, iVFS *vfs, bool Merge=false, bool NewWins=true)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>832a7b77d60cba6f13e3defd19a2b465</anchor>
      <arglist>(const char *iFileName, iVFS *=0)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>15df7a056885e4cb70d05ea4afd7459a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>61745c2af589a05c807081c910ed4c60</anchor>
      <arglist>(const char *Key, bool Value)</arglist>
    </member>
    <member kind="function">
      <name>SetComment</name>
      <anchor>418673f0e129adbf8aac04d329bc7195</anchor>
      <arglist>(const char *Key, const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetEOFComment</name>
      <anchor>d11d6b1d0a151820c6b630326ea4c8e1</anchor>
      <arglist>(const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetFileName</name>
      <anchor>994d1f4c8377bedcf372de756bd21082</anchor>
      <arglist>(const char *, iVFS *)</arglist>
    </member>
    <member kind="function">
      <name>SetFloat</name>
      <anchor>22482b46b404896b6a5474c3d40918c0</anchor>
      <arglist>(const char *Key, float Value)</arglist>
    </member>
    <member kind="function">
      <name>SetInt</name>
      <anchor>1106352c47327686227f3867449f9e12</anchor>
      <arglist>(const char *Key, int Value)</arglist>
    </member>
    <member kind="function">
      <name>SetStr</name>
      <anchor>23047473020880fd90a51f340535cc77</anchor>
      <arglist>(const char *Key, const char *Val)</arglist>
    </member>
    <member kind="function">
      <name>SetTuple</name>
      <anchor>9c201e3e666ebddb4c20ebda24f0e465</anchor>
      <arglist>(const char *Key, iStringArray *Value)</arglist>
    </member>
    <member kind="function">
      <name>SubsectionExists</name>
      <anchor>a1f89eaad15d5c40da6d16bf766776f6</anchor>
      <arglist>(const char *Subsection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csConfigManager</name>
    <base>scfImplementation2&lt; csConfigManager</base>
    <base> iConfigManager</base>
    <base> scfFakeInterface&lt; iConfigFile &gt; &gt;</base>
    <filename>classcsConfigManager.html</filename>
    <member kind="function">
      <name>csConfigManagerIterator</name>
      <anchor>d7255606f41886727310689b5f8de04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csConfigManager</name>
      <anchor>b9daaf0fac63c905cd42042b9b4c6fa4</anchor>
      <arglist>(iConfigFile *DynamicDomain=0, bool Optimize=false)</arglist>
    </member>
    <member kind="function">
      <name>~csConfigManager</name>
      <anchor>8aab810e2911a628b8770fe703e10f05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddDomain</name>
      <anchor>0fe8f7d62c68689709dae8e6059b7c42</anchor>
      <arglist>(char const *path, iVFS *, int priority)</arglist>
    </member>
    <member kind="function">
      <name>AddDomain</name>
      <anchor>47da80cc93d6e9b2b4adf03f3eee26a0</anchor>
      <arglist>(iConfigFile *, int priority)</arglist>
    </member>
    <member kind="function">
      <name>CleanUp</name>
      <anchor>75a85fccc7c8463eea3f77285ab7771c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>a51eeb8b4e982982415ac9eb22c08d76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteKey</name>
      <anchor>c8640d8d593c3ab536c719586f8230d7</anchor>
      <arglist>(const char *Key)</arglist>
    </member>
    <member kind="function">
      <name>Enumerate</name>
      <anchor>66bde9b69b3e3714da2117bf50c1a5ac</anchor>
      <arglist>(const char *Subsection=0)</arglist>
    </member>
    <member kind="function">
      <name>FlushRemoved</name>
      <anchor>b7127f51c0262fbf11af9585c3c06e0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>6003e122a296f33f6b4e3245dd8d6b33</anchor>
      <arglist>(const char *Key, bool Def=false) const </arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>2263fc09ea3d390f4f9e16d31eaf20c7</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetDomainPriority</name>
      <anchor>0f48f80ec9a6b32476e888338c44be27</anchor>
      <arglist>(iConfigFile *) const </arglist>
    </member>
    <member kind="function">
      <name>GetDomainPriority</name>
      <anchor>3ea05d2219de666e3e218cc3804bde0a</anchor>
      <arglist>(char const *path) const </arglist>
    </member>
    <member kind="function">
      <name>GetDynamicDomain</name>
      <anchor>4152c3c70fcb81392a5fc4ec370220b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDynamicDomainPriority</name>
      <anchor>232720ae96151589c00e863924fa64fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetEOFComment</name>
      <anchor>df43c1c4f98087fed67aee01502c7c8c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>31a46dac93e7f3a9190a6a0e0b424a30</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>69782c101de26a1fa598a5a5830b9fcf</anchor>
      <arglist>(const char *Key, float Def=0.0) const </arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>67470c925b07d4469680ffdad199455e</anchor>
      <arglist>(const char *Key, int Def=0) const </arglist>
    </member>
    <member kind="function">
      <name>GetStr</name>
      <anchor>4bfd6c4ca39f2ec5ce6a941fb1630ed0</anchor>
      <arglist>(const char *Key, const char *Def=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>GetTuple</name>
      <anchor>348dd014b63d070b4831fdc9c10752fb</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetVFS</name>
      <anchor>01533cbf344521a52416e9291078e899</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>KeyExists</name>
      <anchor>91352d7ea638f75d73a0ce0221b7e87d</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>5158ef512339b5e9575a1cb64d3c6c5f</anchor>
      <arglist>(const char *iFileName, iVFS *=0, bool Merge=false, bool NewWins=true)</arglist>
    </member>
    <member kind="function">
      <name>LookupDomain</name>
      <anchor>341037a76d70a36b11c9a0fde3d3ad1e</anchor>
      <arglist>(char const *path) const </arglist>
    </member>
    <member kind="function">
      <name>RemoveDomain</name>
      <anchor>3c344e214e7d165093e8e2c2efc88938</anchor>
      <arglist>(char const *path)</arglist>
    </member>
    <member kind="function">
      <name>RemoveDomain</name>
      <anchor>46a24760cdb222ae3ed516f50dba25c0</anchor>
      <arglist>(iConfigFile *)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>80188416d87ffbf8d9faa1b8fd6a45e2</anchor>
      <arglist>(const char *iFileName, iVFS *=0)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>b5620127a13b1c60a4603ba4f27ab3eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>10cbf77476a9c74ee5cef05c26b6032d</anchor>
      <arglist>(const char *Key, bool Value)</arglist>
    </member>
    <member kind="function">
      <name>SetComment</name>
      <anchor>50bf933b3e7aba73d0ac04342d7e6b4e</anchor>
      <arglist>(const char *Key, const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetDomainPriority</name>
      <anchor>94afd22aa29b0928545f9428ac47ae4d</anchor>
      <arglist>(iConfigFile *, int priority)</arglist>
    </member>
    <member kind="function">
      <name>SetDomainPriority</name>
      <anchor>50d788758f897fd0a71fc42fdf3f5bc7</anchor>
      <arglist>(char const *path, int priority)</arglist>
    </member>
    <member kind="function">
      <name>SetDynamicDomain</name>
      <anchor>fadc1e9ee19e0dcb7b4efef9e777cea3</anchor>
      <arglist>(iConfigFile *)</arglist>
    </member>
    <member kind="function">
      <name>SetDynamicDomainPriority</name>
      <anchor>6cd239c1438407c2b828373eac69800b</anchor>
      <arglist>(int priority)</arglist>
    </member>
    <member kind="function">
      <name>SetEOFComment</name>
      <anchor>8c4c0778e68ba0f70aeeb55989c5f0fa</anchor>
      <arglist>(const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetFileName</name>
      <anchor>a8700665dd09fdcb4a8edc2a4912824d</anchor>
      <arglist>(const char *, iVFS *)</arglist>
    </member>
    <member kind="function">
      <name>SetFloat</name>
      <anchor>da3678e8079e9a373e6de96811d612c2</anchor>
      <arglist>(const char *Key, float Value)</arglist>
    </member>
    <member kind="function">
      <name>SetInt</name>
      <anchor>b2d65559e0177a8c29127832b84d3cd9</anchor>
      <arglist>(const char *Key, int Value)</arglist>
    </member>
    <member kind="function">
      <name>SetStr</name>
      <anchor>2c0fb4d6d7a655fc0302e1dee7144382</anchor>
      <arglist>(const char *Key, const char *Val)</arglist>
    </member>
    <member kind="function">
      <name>SetTuple</name>
      <anchor>0de1198c43549d45dba285ece4205cda</anchor>
      <arglist>(const char *Key, iStringArray *Value)</arglist>
    </member>
    <member kind="function">
      <name>SubsectionExists</name>
      <anchor>d556dc1ee845539a41afd4e57751a49c</anchor>
      <arglist>(const char *Subsection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCoverageTile</name>
    <filename>classcsCoverageTile.html</filename>
    <member kind="function">
      <name>csCoverageTile</name>
      <anchor>30ce700265b71bda2506355fa0776da4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csCoverageTile</name>
      <anchor>adf40a2a53c39cc88bdcc647487b1bd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csTiledCoverageBuffer</name>
      <anchor>9776186fa257ccba40bd2083de2db1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClearOperations</name>
      <anchor>fda4ea5802b90df0a47883d9d6cd09a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Debug_Dump</name>
      <anchor>21b29db817a4a338f242bc2c16b28cd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Debug_Dump_Cache</name>
      <anchor>e0fa594ff381ec42a874a4c226420d30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>68ef51433ab6b4e26088585a9f926b17</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushForEmpty</name>
      <anchor>a6054a9197675c0fb9f3ee3d28cb3849</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushForEmptyConstFValue</name>
      <anchor>102a98167e982e35ca50252dc0011fd7</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushForEmptyNoDepth</name>
      <anchor>8ed2a954cd1518819bc9610df62dba7a</anchor>
      <arglist>(csTileCol &amp;fvalue)</arglist>
    </member>
    <member kind="function">
      <name>FlushForFull</name>
      <anchor>2cc3dc006c6631d92cfef99caad77c84</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushForFullConstFValue</name>
      <anchor>0e384b085b5db828b468a6bb25d95ffc</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushGeneral</name>
      <anchor>f4cb2c87b96b9cd76e177a09ace38f8f</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushGeneralConstFValue</name>
      <anchor>ba9bd05fa791a628e61572536086f2bb</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushIgnoreDepth</name>
      <anchor>a1e83f1520dc8a099b9e2fb8a79d70c8</anchor>
      <arglist>(csTileCol &amp;fvalue)</arglist>
    </member>
    <member kind="function">
      <name>FlushNoDepth</name>
      <anchor>3ea5211dd48cf3b4cbaca7e514e84028</anchor>
      <arglist>(csTileCol &amp;fvalue)</arglist>
    </member>
    <member kind="function">
      <name>FlushNoDepthConstFValue</name>
      <anchor>ac0be7b9138f633cb46944e3b7b27050</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>FlushOperations</name>
      <anchor>58c25447091a1ce86c53594a03ae157c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FlushOperationsOnlyFValue</name>
      <anchor>37f58cf7f4a065ae80d5d3f8154f0639</anchor>
      <arglist>(csTileCol &amp;fvalue)</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>0f37b2f70713c6ce379bb5281acb0ae5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsFull</name>
      <anchor>fe706b84d46a17dc439872c5b19fc471</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>aa1874e77ee4cceaa571189b6f844962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MakeEmptyQuick</name>
      <anchor>0788c954f666ff9e4cb97f865db0d684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MarkEmpty</name>
      <anchor>f8df75ef06a84326284ffbbbb3c5dc97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PerformOperations</name>
      <anchor>a8c95079a86130f227f682e47f8a4039</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PerformOperationsOnlyFValue</name>
      <anchor>81fe14133656a67df9aa57f1722b6ada</anchor>
      <arglist>(csTileCol &amp;fvalue)</arglist>
    </member>
    <member kind="function">
      <name>PushFullVLine</name>
      <anchor>36250e3f5bb9e1d03d37b4c77002f13e</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <name>PushLine</name>
      <anchor>d062de6280de99861eb0f76f59cf37e7</anchor>
      <arglist>(int x1, int y1, int x2, int y2, int dx)</arglist>
    </member>
    <member kind="function">
      <name>PushVLine</name>
      <anchor>c6d67e24be7f7579eea3bfc446da96ba</anchor>
      <arglist>(int x, int y1, int y2)</arglist>
    </member>
    <member kind="function">
      <name>TestCoverageFlush</name>
      <anchor>7d0e990c34266c5db8d6a49df5b4c8bb</anchor>
      <arglist>(csTileCol &amp;fvalue, float mindepth, bool &amp;do_depth_test)</arglist>
    </member>
    <member kind="function">
      <name>TestCoverageFlushForFull</name>
      <anchor>6c105abf02a3ef06387783dc68cc4cdd</anchor>
      <arglist>(csTileCol &amp;fvalue, float mindepth, bool &amp;do_depth_test)</arglist>
    </member>
    <member kind="function">
      <name>TestCoverageFlushGeneral</name>
      <anchor>708baf27b5b28195dad13e1be9834950</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth, bool &amp;do_depth_test)</arglist>
    </member>
    <member kind="function">
      <name>TestCoverageRect</name>
      <anchor>38d868c327e9e8e6a4e13ad74f44dc40</anchor>
      <arglist>(const csTileCol &amp;vermask, int start, int end, float testdepth, bool &amp;do_depth_test)</arglist>
    </member>
    <member kind="function">
      <name>TestCoverageRect</name>
      <anchor>2187dfa59f1d7364bb78e32f40c184d0</anchor>
      <arglist>(int start, int end, float testdepth, bool &amp;do_depth_test)</arglist>
    </member>
    <member kind="function">
      <name>TestDepthFlush</name>
      <anchor>105474ddc4df39031613cd91f6e7ed26</anchor>
      <arglist>(csTileCol &amp;fvalue, float mindepth)</arglist>
    </member>
    <member kind="function">
      <name>TestDepthFlushGeneral</name>
      <anchor>70417b12239a936c0981597fc32a0f7e</anchor>
      <arglist>(csTileCol &amp;fvalue, float maxdepth)</arglist>
    </member>
    <member kind="function">
      <name>TestDepthRect</name>
      <anchor>3842f9e293daa960c118e57cb8524887</anchor>
      <arglist>(const csTileCol &amp;vermask, int start, int end, float testdepth)</arglist>
    </member>
    <member kind="function">
      <name>TestDepthRect</name>
      <anchor>6cd4ea0c546c64e0298be09ac00e1482</anchor>
      <arglist>(int start, int end, float testdepth)</arglist>
    </member>
    <member kind="function">
      <name>TestFullRect</name>
      <anchor>ad297056cf79b2dd624b9c4994913eff</anchor>
      <arglist>(float testdepth)</arglist>
    </member>
    <member kind="function">
      <name>TestPoint</name>
      <anchor>ecc604e71ce8a8474dc1c99933e72565</anchor>
      <arglist>(int x, int y, float testdepth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCubicSpline</name>
    <base>csSpline</base>
    <filename>classcsCubicSpline.html</filename>
    <member kind="function">
      <name>csCubicSpline</name>
      <anchor>936ce2e777649c6d18572f53cce90701</anchor>
      <arglist>(int d, int p)</arglist>
    </member>
    <member kind="function">
      <name>~csCubicSpline</name>
      <anchor>02cd867edc6df7a896a547658757e864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Calculate</name>
      <anchor>a057bcf122cedd7a613c4a8aefa397b4</anchor>
      <arglist>(float time)</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedDimension</name>
      <anchor>e0605c81131bf113bc2505dc9c4e5bc8</anchor>
      <arglist>(int dim) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCursorConverter</name>
    <filename>classcsCursorConverter.html</filename>
    <member kind="function">
      <name>ConvertTo1bpp</name>
      <anchor>4f145f8880c9e72287285169ecac3dc8</anchor>
      <arglist>(iImage *image, uint8 *&amp;bitmap, uint8 *&amp;mask, const csRGBcolor forecolor, const csRGBcolor backcolor, const csRGBcolor *keycolor=0, bool XbitOrder=false)</arglist>
    </member>
    <member kind="function">
      <name>ConvertTo1bppAutoColor</name>
      <anchor>7e85747d6feb7bfe44debf16eb55ea12</anchor>
      <arglist>(iImage *image, uint8 *&amp;bitmap, uint8 *&amp;mask, csRGBcolor &amp;forecolor, csRGBcolor &amp;backcolor, const csRGBcolor *keycolor=0, bool XbitOrder=false)</arglist>
    </member>
    <member kind="function">
      <name>ConvertTo8bpp</name>
      <anchor>1985b303d85b9d6812fac3c16142d928</anchor>
      <arglist>(iImage *image, uint8 *&amp;pixels, csRGBpixel *&amp;palette, const csRGBcolor *keycolor=0)</arglist>
    </member>
    <member kind="function">
      <name>StripAlphaFromPal8</name>
      <anchor>eab3f13049f06ed0a432b70f1734b795</anchor>
      <arglist>(csImageMemory *image)</arglist>
    </member>
    <member kind="function">
      <name>StripAlphaFromRGBA</name>
      <anchor>f837de7bf65415e808e9d861b1e775d2</anchor>
      <arglist>(iImage *image, csRGBpixel replaceColor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDataBuffer</name>
    <base>scfImplementation1&lt; csDataBuffer</base>
    <base> iDataBuffer &gt;</base>
    <filename>classcsDataBuffer.html</filename>
    <member kind="function">
      <name>csDataBuffer</name>
      <anchor>b9d084a149902a9a06f552025e406a87</anchor>
      <arglist>(size_t iSize)</arglist>
    </member>
    <member kind="function">
      <name>csDataBuffer</name>
      <anchor>accd9e38fca31208b6c9d3189db56626</anchor>
      <arglist>(char *iData, size_t iSize, bool should_delete=true)</arglist>
    </member>
    <member kind="function">
      <name>csDataBuffer</name>
      <anchor>b66bb26a9ca939facc58ce123aecf23e</anchor>
      <arglist>(iDataBuffer *source)</arglist>
    </member>
    <member kind="function">
      <name>~csDataBuffer</name>
      <anchor>5eba09b69920e18fbb5bf0c810a57235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>8da6f9d43ac4669e4300c662313d047b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>7c47396f1efb69b629c1258308be6897</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDebuggingGraph</name>
    <filename>classcsDebuggingGraph.html</filename>
    <member kind="function">
      <name>AddChild</name>
      <anchor>b657ab77403a1711dea9dd8fb514bb8b</anchor>
      <arglist>(iObjectRegistry *object_reg, void *parent, void *child)</arglist>
    </member>
    <member kind="function">
      <name>AddObject</name>
      <anchor>dff33b1df8d0279d4ca4e965f9d70ece</anchor>
      <arglist>(iObjectRegistry *object_reg, void *object, bool scf, char *file, int linenr, char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>AddParent</name>
      <anchor>22c5a4e97014b98b5219452dde0500b4</anchor>
      <arglist>(iObjectRegistry *object_reg, void *child, void *parent)</arglist>
    </member>
    <member kind="function">
      <name>AttachDescription</name>
      <anchor>d53e0c82683afac66b79046e68b3844c</anchor>
      <arglist>(iObjectRegistry *object_reg, void *object, char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>AttachType</name>
      <anchor>bf7126f18043b68747b5f5462384197d</anchor>
      <arglist>(iObjectRegistry *object_reg, void *object, char *type)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>05fdebabe69ba4ecf35cfde8288d2599</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>036fb7b009e8cab7f5b86fd300924dbb</anchor>
      <arglist>(iObjectRegistry *object_reg, void *object, bool reset_mark=true)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>85ab7d0220b335de1af9461a872d91e2</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>RemoveChild</name>
      <anchor>60a74fa5a2d117a3b2217ff78f60a5d2</anchor>
      <arglist>(iObjectRegistry *object_reg, void *parent, void *child)</arglist>
    </member>
    <member kind="function">
      <name>RemoveObject</name>
      <anchor>2cdd6b0fe4e2bff0bfbdad2eeea7661a</anchor>
      <arglist>(iObjectRegistry *object_reg, void *object, char *file, int linenr)</arglist>
    </member>
    <member kind="function">
      <name>RemoveParent</name>
      <anchor>683a84d3f49ce4d1d6526d5f83c8d9c2</anchor>
      <arglist>(iObjectRegistry *object_reg, void *child, void *parent)</arglist>
    </member>
    <member kind="function">
      <name>SetupGraph</name>
      <anchor>f0e03b108a13c1b26dd8192f3167d5f4</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDebugImageWriter</name>
    <filename>classcsDebugImageWriter.html</filename>
    <member kind="function">
      <name>DebugImageWrite</name>
      <anchor>05071ce13fd5ca793999ae02a7f71892</anchor>
      <arglist>(iImage *image, const char *filename,...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDIntersect3</name>
    <filename>classcsDIntersect3.html</filename>
    <member kind="function">
      <name>Plane</name>
      <anchor>d2a9df5d1039e29f1b83c3743a4fdfbb</anchor>
      <arglist>(const csDVector3 &amp;u, const csDVector3 &amp;v, const csDPlane &amp;p, csDVector3 &amp;isect, double &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>Plane</name>
      <anchor>fdd04145593c11388cbbcc46f48d77c1</anchor>
      <arglist>(const csDVector3 &amp;u, const csDVector3 &amp;v, double A, double B, double C, double D, csDVector3 &amp;isect, double &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>Plane</name>
      <anchor>b72491fd0c9414104e0f4a68714449f6</anchor>
      <arglist>(const csDVector3 &amp;u, const csDVector3 &amp;v, const csDVector3 &amp;normal, const csDVector3 &amp;a, csDVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>Planes</name>
      <anchor>936caad70304674285929fcb6fd0de82</anchor>
      <arglist>(const csDPlane &amp;p1, const csDPlane &amp;p2, const csDPlane &amp;p3, csDVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>XFrustum</name>
      <anchor>0d6c4d29287a57ceb13b89d733d6f5fd</anchor>
      <arglist>(double A, const csDVector3 &amp;u, const csDVector3 &amp;v, csDVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>YFrustum</name>
      <anchor>bd55b67ef0955e2c936059f3c105c072</anchor>
      <arglist>(double B, const csDVector3 &amp;u, const csDVector3 &amp;v, csDVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>Z0Plane</name>
      <anchor>298fdb80a8b985dd0fd64a5e5c9f207f</anchor>
      <arglist>(const csDVector3 &amp;u, const csDVector3 &amp;v, csDVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>ZPlane</name>
      <anchor>ce4eee79acddb020de3f59d03f7e203a</anchor>
      <arglist>(double zval, const csDVector3 &amp;u, const csDVector3 &amp;v, csDVector3 &amp;isect)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDirectionalLightProc</name>
    <filename>classcsDirectionalLightProc.html</filename>
    <member kind="function">
      <name>csDirectionalLightProc</name>
      <anchor>2ed17375bbfde46f98e0c868bdf53e83</anchor>
      <arglist>(const csLightProperties &amp;light, float blackLimit=0.0001f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDirectionalLightProc::PerVertex</name>
    <filename>classcsDirectionalLightProc_1_1PerVertex.html</filename>
    <member kind="function">
      <name>PerVertex::Attenuation</name>
      <anchor>7458e1cd0a74b89b0721bb10b25e41cc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::DiffuseAttenuated</name>
      <anchor>7f5465085fe9eab1b1bc2945fe1a19d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::IsLit</name>
      <anchor>624135ba2c32728b750677eef6ce8c89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::LightDirection</name>
      <anchor>5ade8e3c9c7b75761cf3a4a93a335170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::LightInvDistance</name>
      <anchor>91d2c954e0412b3457382b9c5e4593ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::PerVertex</name>
      <anchor>50d43234e06e3584194a7c2025bc0f93</anchor>
      <arglist>(const csDirectionalLightProc &amp;parent, const csVector3 &amp;v, const csVector3 &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDirectXError</name>
    <filename>classcsDirectXError.html</filename>
    <member kind="function">
      <name>GetErrorDescription</name>
      <anchor>a73fc41118357dac4be4937bb526c524</anchor>
      <arglist>(HRESULT hr)</arglist>
    </member>
    <member kind="function">
      <name>GetErrorSymbol</name>
      <anchor>bb5804bebad43e1ce798973b6c78def3</anchor>
      <arglist>(HRESULT hr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDirtyAccessArray</name>
    <base>csArray</base>
    <filename>classcsDirtyAccessArray.html</filename>
    <member kind="function">
      <name>csDirtyAccessArray</name>
      <anchor>8f5ed6eef3704ebf57767627e3cb562d</anchor>
      <arglist>(int ilimit=0, int ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>GetArray</name>
      <anchor>342125da74e8b93a8e9ff8a38682f5aa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetArray</name>
      <anchor>33476cdd009b0d9cc5646743decf61c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetArrayCopy</name>
      <anchor>e38aa8a9d2e9cdbc0fa67b460b4c22c4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDirtyAccessArrayRefCounted</name>
    <base>csDirtyAccessArray</base>
    <filename>classcsDirtyAccessArrayRefCounted.html</filename>
    <member kind="function">
      <name>csDirtyAccessArrayRefCounted</name>
      <anchor>855d77c502b7729d5d9a668529c73bec</anchor>
      <arglist>(int ilimit=0, int ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>3992fe8b9ab316673ccbaf0e4bac43f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>a8ff973e5df2434de24415fddf173de4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDMath3</name>
    <filename>classcsDMath3.html</filename>
    <member kind="function">
      <name>Between</name>
      <anchor>7e9556159d8202d99d9d9055b7b9e818</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2, csDVector3 &amp;v, double pct, double wid)</arglist>
    </member>
    <member kind="function">
      <name>CalcNormal</name>
      <anchor>79fcafbd249db05a3c99e28f527ac787</anchor>
      <arglist>(csDVector3 &amp;norm, const csDVector3 &amp;v, const csDVector3 &amp;u)</arglist>
    </member>
    <member kind="function">
      <name>CalcNormal</name>
      <anchor>ca587c135c4534014b3544eb67370976</anchor>
      <arglist>(csDVector3 &amp;norm, const csDVector3 &amp;v1, const csDVector3 &amp;v2, const csDVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>CalcPlane</name>
      <anchor>fdf5bcdfaab065f376e872e8d5ac1c5f</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2, const csDVector3 &amp;v3, csDVector3 &amp;normal, double &amp;D)</arglist>
    </member>
    <member kind="function">
      <name>DoubleArea3</name>
      <anchor>2b5a9cca86f2742c78b4bffb078f7a65</anchor>
      <arglist>(const csDVector3 &amp;a, const csDVector3 &amp;b, const csDVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>PlanesClose</name>
      <anchor>1e3101ca30ba235f6e6ebe4785602b7a</anchor>
      <arglist>(const csDPlane &amp;p1, const csDPlane &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>PlanesEqual</name>
      <anchor>651dcf5133964175047989b2fbeb43cc</anchor>
      <arglist>(const csDPlane &amp;p1, const csDPlane &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>SetMinMax</name>
      <anchor>48a54d79b557e0e8094cf371d61076cd</anchor>
      <arglist>(const csDVector3 &amp;v, csDVector3 &amp;min, csDVector3 &amp;max)</arglist>
    </member>
    <member kind="function">
      <name>Visible</name>
      <anchor>40a3dc332936b63e7ee56b98c52e5def</anchor>
      <arglist>(const csDVector3 &amp;p, const csDPlane &amp;pl)</arglist>
    </member>
    <member kind="function">
      <name>Visible</name>
      <anchor>72ba2209398b3b2c680513b793df6bce</anchor>
      <arglist>(const csDVector3 &amp;p, const csDVector3 &amp;t1, const csDVector3 &amp;t2, const csDVector3 &amp;t3)</arglist>
    </member>
    <member kind="function">
      <name>WhichSide3D</name>
      <anchor>e152ed51b1678b74b871341ccc8dbd7a</anchor>
      <arglist>(const csDVector3 &amp;p, const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDMatrix3</name>
    <filename>classcsDMatrix3.html</filename>
    <member kind="function">
      <name>m11</name>
      <anchor>5dd0d9466444be9ea5b637eccb4739fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m12</name>
      <anchor>590350cd1853246bd8cead8897c0b2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m13</name>
      <anchor>bed9d2243529fa7505622380c86c210d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m21</name>
      <anchor>e6d17f91eb53fc5c1b16ae94bad7006d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m22</name>
      <anchor>e1074096c6713409a25de7f59a128764</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m23</name>
      <anchor>9d36b14617fba2cc61a816398f5048cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m31</name>
      <anchor>2b19fc2419c7c085138b9e5546e1322c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m32</name>
      <anchor>34565373b2da9a5192837a6eaab3df6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m33</name>
      <anchor>92a5531717fcb79a25275fb6df4b48ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csDMatrix3</name>
      <anchor>89c391b49b6cb9054c1a38eea792cac1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csDMatrix3</name>
      <anchor>ae1edba458d9e288081820781530cde1</anchor>
      <arglist>(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33)</arglist>
    </member>
    <member kind="function">
      <name>Col1</name>
      <anchor>212553ba29ce57b430e43c06f0368626</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Col2</name>
      <anchor>eb07a43e3c06424e1fc9dc7d9ae0ba0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Col3</name>
      <anchor>cbf6b6aa06521458c13e1b6feaa5817f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Determinant</name>
      <anchor>75d8e4258beba25d231b2cc1038b64b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInverse</name>
      <anchor>bde70053b7f520e85fbded4622f829d1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTranspose</name>
      <anchor>2f721eea4117b115b11a55cd577d0eac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Identity</name>
      <anchor>134a3e8378fa7d46b1f7d2e98edf5288</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Invert</name>
      <anchor>1105fdfea91408f72e6208e764c5b721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>d0e3b30d6ceae22b97e9c7a56cb4e7a7</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>f1ef32b6d4926be419122b811146928f</anchor>
      <arglist>(const csDMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>b90884243a096e35dd2fb5695fd281b6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>2005916cfe913d2e8acac4b7b1b3e53b</anchor>
      <arglist>(const csDMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>e492fa59cea2d922593585914e3d6afa</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>93424e391c018ee0540ecce2dca307ff</anchor>
      <arglist>(const csDMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>5e9bdd856b4974a2a9041dac7fc0f60d</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <name>Row1</name>
      <anchor>ba53b49c876ddfacb58d9984481f1850</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Row2</name>
      <anchor>be1f45d8b2efcb92f3da3058caa67087</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Row3</name>
      <anchor>2c4d0f0aec88a42e9cbce2e10ce5fab0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>9d2edb3224a82634d567aa9259face39</anchor>
      <arglist>(double m11, double m12, double m13, double m21, double m22, double m23, double m31, double m32, double m33)</arglist>
    </member>
    <member kind="function">
      <name>Transpose</name>
      <anchor>68b41fa66dbd833ece83d0d6bd53a002</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>f45c14588dbf9ed8a673a18ae84f12d5</anchor>
      <arglist>(double f, const csDMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>307771b6760824a14f97d302dde587ec</anchor>
      <arglist>(const csDMatrix3 &amp;m, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>93a0804f2f9908d01dcb9302174045f0</anchor>
      <arglist>(const csDMatrix3 &amp;m, const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>46631394f057909c4cda15b6c588036a</anchor>
      <arglist>(const csDMatrix3 &amp;m1, const csDMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>7a79e1db5283ae9d90eadc88ef359df9</anchor>
      <arglist>(const csDMatrix3 &amp;m1, const csDMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>282fc674a06ae1909ef2145de1065b84</anchor>
      <arglist>(const csDMatrix3 &amp;m1, const csDMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>2333c793f4f6a478a57832399820aa06</anchor>
      <arglist>(const csDMatrix3 &amp;m1, const csDMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>1dcc0de4b1753b897963afab2325819b</anchor>
      <arglist>(const csDMatrix3 &amp;m, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>29d49b7ee4bc56465d94f12e6a25e0ec</anchor>
      <arglist>(const csDMatrix3 &amp;m, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>4db5de33c1236035b736c874c2ae78f5</anchor>
      <arglist>(const csDMatrix3 &amp;m1, const csDMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>4e5b6c42f2256053dc674f07b4b97c38</anchor>
      <arglist>(double f, const csDMatrix3 &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDocumentAttributeCommon</name>
    <base>scfImplementation1&lt; csDocumentAttributeCommon</base>
    <base> iDocumentAttribute &gt;</base>
    <filename>classcsDocumentAttributeCommon.html</filename>
    <member kind="function">
      <name>csDocumentAttributeCommon</name>
      <anchor>9976795af0d5e5cb1479a830ccb03cbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValueAsBool</name>
      <anchor>34f4330990422d40bf9b502635ee7ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValueAsFloat</name>
      <anchor>c3b196ef5952eb163f1e02b5d2ff89bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValueAsInt</name>
      <anchor>b463567f991e36c610e53b23a306f36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsFloat</name>
      <anchor>1efe1ba88bbe7cab2a06119c4d4e645a</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsInt</name>
      <anchor>9f4ab7d86fad3fb6dbed2aa6110eb1c1</anchor>
      <arglist>(int v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDocumentNodeCommon</name>
    <base>scfImplementation1&lt; csDocumentNodeCommon</base>
    <base> iDocumentNode &gt;</base>
    <filename>classcsDocumentNodeCommon.html</filename>
    <member kind="function">
      <name>csDocumentNodeCommon</name>
      <anchor>701a18ccbb810caaa28733c471bbac97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAttribute</name>
      <anchor>a44a9548d4ce31d574e73697d701a6dc</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>GetAttributes</name>
      <anchor>981013a726644b543d76549271f7f6e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValue</name>
      <anchor>e40ab312fa6cafc72939f0f021bed5cb</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValueAsBool</name>
      <anchor>4983a241756a0ba6256d7f40b2f79d17</anchor>
      <arglist>(const char *name, bool defaultvalue=false)</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValueAsFloat</name>
      <anchor>40f1100c8d06a96160c02d496b7bf700</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValueAsInt</name>
      <anchor>8d5cae0d92878e97df8d937baa832da9</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetContentsValue</name>
      <anchor>a48ede1773e9d5fcc274bd3850e4eee3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetContentsValueAsFloat</name>
      <anchor>df1da6ef70c442020fda2270b39dc0d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetContentsValueAsInt</name>
      <anchor>5fca5e4f4adbc98de44c0a15be731fb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetNode</name>
      <anchor>ebf27711b5b74711370c7a2ad960c024</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>GetNodes</name>
      <anchor>3f0647e72ccb898f63303ba4d9cfdb9a</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <name>GetNodes</name>
      <anchor>702d178bee5637118ebdf9c0d3ba8ebe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetAttributeAsFloat</name>
      <anchor>524e1b597120a901996c3b3938c24703</anchor>
      <arglist>(const char *name, float value)</arglist>
    </member>
    <member kind="function">
      <name>SetAttributeAsInt</name>
      <anchor>675c70fcf9d29d95db1d7a17700f59dd</anchor>
      <arglist>(const char *name, int value)</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsFloat</name>
      <anchor>5fb9e5d4f63deab701cf886fb5a184d2</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsInt</name>
      <anchor>854ef443a6b341747e4370653ef05422</anchor>
      <arglist>(int value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDocumentNodeReadOnly</name>
    <base>scfImplementationExt0&lt; csDocumentNodeReadOnly</base>
    <base> csDocumentNodeCommon &gt;</base>
    <filename>classcsDocumentNodeReadOnly.html</filename>
    <member kind="function">
      <name>csDocumentNodeReadOnly</name>
      <anchor>7ad3539d92132d04a84dc2e623ae114c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CreateNodeBefore</name>
      <anchor>5c24346c0a66f1bd6564601209dc6a3e</anchor>
      <arglist>(csDocumentNodeType, iDocumentNode *)</arglist>
    </member>
    <member kind="function">
      <name>RemoveAttribute</name>
      <anchor>3a2b2ff902b19c8ac056286afd92b5ec</anchor>
      <arglist>(const csRef&lt; iDocumentAttribute &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <name>RemoveAttributes</name>
      <anchor>48a081aa55d978315ed8a2c96d81ff6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveNode</name>
      <anchor>210871659cee6be5ef160b71d0777d9a</anchor>
      <arglist>(const csRef&lt; iDocumentNode &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <name>RemoveNodes</name>
      <anchor>bd79b2fb3786ef9908b6fb1cc2650540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveNodes</name>
      <anchor>6367f9a869a4454dd43d7ad7f273feb6</anchor>
      <arglist>(csRef&lt; iDocumentNodeIterator &gt;)</arglist>
    </member>
    <member kind="function">
      <name>SetAttribute</name>
      <anchor>664c303e10e4486d50b1c6e87d14b602</anchor>
      <arglist>(const char *, const char *)</arglist>
    </member>
    <member kind="function">
      <name>SetAttributeAsFloat</name>
      <anchor>4f21233dc66fdfee82a23da1b062d102</anchor>
      <arglist>(const char *, float)</arglist>
    </member>
    <member kind="function">
      <name>SetAttributeAsInt</name>
      <anchor>0ad55d071d59511cb5e05a10588f60d8</anchor>
      <arglist>(const char *, int)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>ed6918c8a4aa4f6162071d897631e80e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsFloat</name>
      <anchor>140d135396c5306954dbb1176e87ac70</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsInt</name>
      <anchor>f4c9378cbe1eac665e4cd64828b7e70e</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDPlane</name>
    <filename>classcsDPlane.html</filename>
    <member kind="function">
      <name>csDPlane</name>
      <anchor>ee2f04636684cab564f72d7ef352d5d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csDPlane</name>
      <anchor>2c54b5db006d4efc5cd6067b0e06c6d9</anchor>
      <arglist>(const csDVector3 &amp;plane_norm, double d=0)</arglist>
    </member>
    <member kind="function">
      <name>csDPlane</name>
      <anchor>3e3d6eba667164ad5d657e3ab68ead84</anchor>
      <arglist>(double a, double b, double c, double d=0)</arglist>
    </member>
    <member kind="function">
      <name>A</name>
      <anchor>c6e74eaf59f97b22b3e010fbcc741790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>A</name>
      <anchor>56c47b381ea897747c18a348006e5aac</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>B</name>
      <anchor>61a1a917085b28f7a46cc88ec1d564e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>B</name>
      <anchor>6f936085c22c5db4aa91391eaa5b8e86</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>C</name>
      <anchor>72865b81227c02924da20ccacbf12ebd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>C</name>
      <anchor>b41d101fb375165493c389fd3fff3d4d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>3b62e53423033528c0353a6307559f57</anchor>
      <arglist>(double A, double B, double C, double D, const csDVector3 &amp;pt)</arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>1e50c64e1127e96ddbb1d45b918e3536</anchor>
      <arglist>(const csDVector3 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>D</name>
      <anchor>f0a0b0b648535bb5d84ce1beb6256362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>D</name>
      <anchor>62c79b75c40d4d8be2a7700396ff7785</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Distance</name>
      <anchor>802de9e64bcae4c17fd5bcae2cf25e3f</anchor>
      <arglist>(const csDVector3 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>Invert</name>
      <anchor>cb745d10bc77401bc4c60633bf90eb3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Normal</name>
      <anchor>639512a2fd91e2c9be12bdf79dca87f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Normal</name>
      <anchor>d1480e279930669348b0b0d28adf97a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>afe8980d1b85f727d7581af8f55f450b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>9acb8abba4f22bd58a00bddbc7bccacf</anchor>
      <arglist>(double a, double b, double c, double d)</arglist>
    </member>
    <member kind="function">
      <name>DD</name>
      <anchor>b28cc94b9b275b8b645fd1dd07629d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>norm</name>
      <anchor>8b2e170fe54d5cdfa648faf3a9c451db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDSquaredDist</name>
    <filename>classcsDSquaredDist.html</filename>
    <member kind="function">
      <name>PointLine</name>
      <anchor>5eeb2d83a4db087602ea64a832c7c97a</anchor>
      <arglist>(const csDVector3 &amp;p, const csDVector3 &amp;l1, const csDVector3 &amp;l2)</arglist>
    </member>
    <member kind="function">
      <name>PointPlane</name>
      <anchor>91c22dd69568bc3245d59d4da5f5fe30</anchor>
      <arglist>(const csDVector3 &amp;p, const csDPlane &amp;plane)</arglist>
    </member>
    <member kind="function">
      <name>PointPoint</name>
      <anchor>9fc7a8fc00057d57b74c08186c2e8eb3</anchor>
      <arglist>(const csDVector3 &amp;p1, const csDVector3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>PointPoly</name>
      <anchor>01246763b61d36d4aebfecaafc632983</anchor>
      <arglist>(const csDVector3 &amp;p, csDVector3 *V, int n, const csDPlane &amp;plane, double sqdist=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csDVector3</name>
    <filename>classcsDVector3.html</filename>
    <member kind="function">
      <name>csDVector3</name>
      <anchor>1302aeb15aaa50106ff8a455d97f8ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csDVector3</name>
      <anchor>a6e1965c9f4ad24c05ba915c24f6b91e</anchor>
      <arglist>(double m)</arglist>
    </member>
    <member kind="function">
      <name>csDVector3</name>
      <anchor>5dac7d70e328f691228b2504e829edb1</anchor>
      <arglist>(double ix, double iy, double iz=0)</arglist>
    </member>
    <member kind="function">
      <name>csDVector3</name>
      <anchor>73326720be9768005be6d84c8511c13a</anchor>
      <arglist>(const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csDVector3</name>
      <anchor>59298f60f4a46d1ee292ed92c65d3e91</anchor>
      <arglist>(const csVector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <name>Cross</name>
      <anchor>bb998ac7985a9474f6e3c0a11a1b80fd</anchor>
      <arglist>(const csDVector3 &amp;px, const csDVector3 &amp;py)</arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>5f4996898ef1dc6bfd233ab393bc2fd3</anchor>
      <arglist>(const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>a19961661f3d095fe2087f1a8a29a0d8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>9ee855b915a4b5ecd7dfa0d955c6cdab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>f46473c824bb8d42bfd952ee898e0de3</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>3fd20e72c8e528e04cd051bc2cb63d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>e8ae042b1d041fbc9b03185ede70c75f</anchor>
      <arglist>(const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>8ba3b091172528be027c5a6cdd6bb004</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>9c2b862231c5d909dce43991831ab1f0</anchor>
      <arglist>(const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>2a24b505f9ba71f04ad54da3ee5ab65b</anchor>
      <arglist>(double f)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>d1b2c48ebde4ddabf6c5131251a98470</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>bdce4c4819492a55f0acea0139d540a3</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>d126358526ec050cdebce0a476f78166</anchor>
      <arglist>(double sx, double sy, double sz)</arglist>
    </member>
    <member kind="function">
      <name>SquaredNorm</name>
      <anchor>6f99c53efc8bbbb433c1626974fe7bcd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>0855f53efb1a8a25896accac918f4d8c</anchor>
      <arglist>(const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>d1a0b277a32294fc40a1cda3c3ee2065</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>9baee0a6549e979d6796b543281d5638</anchor>
      <arglist>(double f, const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>a3fa8e70cc21b9c849aa34f304d9b64d</anchor>
      <arglist>(const csDVector3 &amp;v, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>2967487b3f25e22738d72b2780e51b5c</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>099a4b857b990aa8f64b842e1cbc36a0</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator%</name>
      <anchor>cf8ab592c56ac5ec14f5ff349f20efb6</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>a22738be1e53bfa3e1ad5569c350fc24</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>f5b6cb1a0e3cb8a14b094ef1480a7267</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>93e92cb2464ef56e8476fa03a48aa29f</anchor>
      <arglist>(const csDVector3 &amp;v, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>78174e2d19165657a671f57572699420</anchor>
      <arglist>(const csDVector3 &amp;v, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>afce5e207ba87df47c68f5d9053670e8</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>02c84ca72c8dfc6b8086db2941163c12</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>04e7d0f0d21ab6a92d1f3f0546eb61c3</anchor>
      <arglist>(double f, const csDVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>8ed9910a6dce2af78e569d57ed5d2d05</anchor>
      <arglist>(const csDVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>6f67e661779797eab4cf2e638b513c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>4aa6a7a4ee8ba5a031f8123585b269ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>878df30b2dab8c5de8f3f442b5d6890e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEllipsoid</name>
    <filename>classcsEllipsoid.html</filename>
    <member kind="function">
      <name>csEllipsoid</name>
      <anchor>4dc50e57352ab3df4d42edbeb760cc48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csEllipsoid</name>
      <anchor>f13d00b30b6e88298710181e65933ea9</anchor>
      <arglist>(const csVector3 &amp;center, const csVector3 &amp;radius)</arglist>
    </member>
    <member kind="function">
      <name>csEllipsoid</name>
      <anchor>c8a428cb49c2f1778432121fd425a05c</anchor>
      <arglist>(const csEllipsoid &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>68df785fd3faee025f4ad66d58dd3b51</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>7d9d254a5fbf1035098f0241dea9bb55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>09dc6515c3a7dd7e94d7e2c8677ec6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>6b7f31a3c87c9036ffda6ad8095d618f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetCenter</name>
      <anchor>d867bf17b5cb8312e0125e5484487d07</anchor>
      <arglist>(const csVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>SetRadius</name>
      <anchor>23fb3d2530244c205db309c1db5c55c3</anchor>
      <arglist>(const csVector3 &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEmptyDocumentAttributeIterator</name>
    <base>scfImplementation1&lt; csEmptyDocumentAttributeIterator</base>
    <base> iDocumentAttributeIterator &gt;</base>
    <filename>classcsEmptyDocumentAttributeIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>c88a6609d24a0e8c4d7cdf29cc2fde61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>e68cabd0081f9952b904fb246e1b4396</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEmptyDocumentNodeIterator</name>
    <base>scfImplementation1&lt; csEmptyDocumentNodeIterator</base>
    <base> iDocumentNodeIterator &gt;</base>
    <filename>classcsEmptyDocumentNodeIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>05d55d09f93057fa0b2518d49d99cd9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>d4261d397183de9dfaff76d997ae68b2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEngineTools</name>
    <filename>classcsEngineTools.html</filename>
    <member kind="function">
      <name>FindScreenTarget</name>
      <anchor>7024d7f1c7cec5e285c4d8989ea891ac</anchor>
      <arglist>(const csVector2 &amp;pos, float maxdist, iCamera *camera, iCollideSystem *cdsys=0)</arglist>
    </member>
    <member kind="function">
      <name>FindShortestDistance</name>
      <anchor>197cae78b3a7439cea68a2f4fe1300ff</anchor>
      <arglist>(const csVector3 &amp;source, iSector *sourceSector, const csVector3 &amp;dest, iSector *destSector, float maxradius, bool accurate=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEvent</name>
    <base>scfImplementation1&lt; csEvent</base>
    <base> iEvent &gt;</base>
    <filename>classcsEvent.html</filename>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>87d9fc40e174778ecc428bc153e1339b</anchor>
      <arglist>(const char *name, uint64 &amp;value) const </arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>e1675a238f9e349d6ad5a6018597f100</anchor>
      <arglist>(const char *name, int64 &amp;value) const </arglist>
    </member>
    <member kind="function">
      <name>csEventAttributeIterator</name>
      <anchor>ff9ae46b7659747360e242efc68a4542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEvent</name>
      <anchor>7201cd3fb4e4568c24e4beff5332c851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csEvent</name>
      <anchor>372f1ea1eae355af3a50e75d90c8b878</anchor>
      <arglist>(csEvent const &amp;)</arglist>
    </member>
    <member kind="function">
      <name>csEvent</name>
      <anchor>30ece784f46d42a4186750d18797ca9b</anchor>
      <arglist>(csTicks iTime, csEventID iName, bool iBroadcast)</arglist>
    </member>
    <member kind="function">
      <name>~csEvent</name>
      <anchor>8372b42364aae8b30a959feeb57deab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AttributeExists</name>
      <anchor>8511f51216b50c9a4adbe2b999607f3e</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeIterator</name>
      <anchor>5205f1316dcb14712547bd24c8e2bd2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeType</name>
      <anchor>b628cbc7e69c6bd183cc7cd0fbf60501</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>3ad72866942a33aae56fd023aef0bc47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>347e050262f2760d62c0571a44b82f2a</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>901711a2bc2d9dc13cc4f94c7aec7286</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventAttributeIterator</name>
    <base>scfImplementation1&lt; csEventAttributeIterator</base>
    <base> iEventAttributeIterator &gt;</base>
    <filename>classcsEventAttributeIterator.html</filename>
    <member kind="function">
      <name>csEventAttributeIterator</name>
      <anchor>f814df88babbb770173ba098779b0e0b</anchor>
      <arglist>(csHash&lt; csEvent::attribute *, csStringID &gt;::GlobalIterator &amp;iter)</arglist>
    </member>
    <member kind="function">
      <name>~csEventAttributeIterator</name>
      <anchor>52f31b4f9e8e7486d6f034d326e2d665</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>b2c6b2b3143e6e4d0512b36a499bc769</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>0fe7611875b25eb5d573638dfb6123cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>287884681f2706b1294093c07e76f11e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventCord</name>
    <base>scfImplementation1&lt; csEventCord</base>
    <base> iEventCord &gt;</base>
    <filename>classcsEventCord.html</filename>
    <member kind="function">
      <name>csEventCord</name>
      <anchor>55d570801f613d3382eba62b31656a2c</anchor>
      <arglist>(csEventID, bool=false)</arglist>
    </member>
    <member kind="function">
      <name>~csEventCord</name>
      <anchor>1ad2abcb5369709ed58e1510fce62540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>2758ff7252a1026ee4e5f71149b3b357</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPass</name>
      <anchor>f463343c4c1c448a478a78d346a4d299</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>dd13d785acfb5e949a93640b0bc3b802</anchor>
      <arglist>(iEventHandler *, int priority)</arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>d67209c7766361f44b4192a862e6eb97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>2f68822ca8bd4392a045fcbf388fd1f8</anchor>
      <arglist>(iEventHandler *)</arglist>
    </member>
    <member kind="function">
      <name>SetPass</name>
      <anchor>fda1234510fca4c05b997e30ad5caec2</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <name>Unlock</name>
      <anchor>2357d7434c0435fc222d5e80ac82995a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csEventOutlet</name>
      <anchor>045c4aa8c93411d96adb6374223fca27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>d56c1e777685849b7d7fd248b41861f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pass</name>
      <anchor>ec904cad6d38ee27b97bddcd5f00e1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>plugins</name>
      <anchor>0f02c59ad3bfe5e8ec726a6ad7a60103</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SpinLock</name>
      <anchor>25bf295a14f5006871c151d27b259557</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventFlattener</name>
    <filename>classcsEventFlattener.html</filename>
    <member kind="function">
      <name>Flatten</name>
      <anchor>3178d00f31fe2188b9bc6ee344924b63</anchor>
      <arglist>(iObjectRegistry *, iEvent *event, char *buffer)</arglist>
    </member>
    <member kind="function">
      <name>FlattenSize</name>
      <anchor>e4c2b946103c6dc552062f7bebc25069</anchor>
      <arglist>(iObjectRegistry *, iEvent *event, size_t &amp;size)</arglist>
    </member>
    <member kind="function">
      <name>Unflatten</name>
      <anchor>c2b96be431663a279ce63eeb41d190ae</anchor>
      <arglist>(iObjectRegistry *, iEvent *event, const char *buffer, size_t length)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventHandlerRegistry</name>
    <base>scfImplementation1&lt; csEventHandlerRegistry</base>
    <base> iEventHandlerRegistry &gt;</base>
    <filename>classcsEventHandlerRegistry.html</filename>
    <member kind="function">
      <name>GetGeneric</name>
      <anchor>f396640f3c3303313d9a7d8204bed34c</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetGenericID</name>
      <anchor>aa085ce0ef055eaf2bd7b5e035bc1884</anchor>
      <arglist>(iObjectRegistry *reg, const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetGenericPostBoundID</name>
      <anchor>09009b0bb896b3ec715d1b63523de41f</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetGenericPreBoundID</name>
      <anchor>25eef7161c634d0077dcea1a717aa108</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetHandler</name>
      <anchor>0f2bfa20b578168abd16be64d38dd3c4</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>794eaac60521ba0a9964893b9c89626b</anchor>
      <arglist>(iObjectRegistry *reg, const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>1fe2ebe24f0691e7c0b213e8caede8ac</anchor>
      <arglist>(iObjectRegistry *reg, iEventHandler *h)</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>96aef0cc38a8eb28f84bfe27a861a5a1</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>IsInstance</name>
      <anchor>06c77243a6825514e08b37bc15ff9405</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>IsInstanceOf</name>
      <anchor>17e5d9b9490c922244035e6e5fb36e61</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID instanceid, csHandlerID genericid)</arglist>
    </member>
    <member kind="function">
      <name>RegisterID</name>
      <anchor>f647c57b7ec8f8eaa566752f19ec48fc</anchor>
      <arglist>(iObjectRegistry *reg, iEventHandler *h)</arglist>
    </member>
    <member kind="function">
      <name>ReleaseID</name>
      <anchor>4d47d5b897f22db9a78b72754b1847f1</anchor>
      <arglist>(iObjectRegistry *reg, iEventHandler *h)</arglist>
    </member>
    <member kind="function">
      <name>ReleaseID</name>
      <anchor>d0d9e870c0125f3579fb011657093092</anchor>
      <arglist>(iObjectRegistry *reg, csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetGeneric</name>
      <anchor>e2f41ce295347a02c73dfb23cd632ac9</anchor>
      <arglist>(csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetGenericID</name>
      <anchor>13e54a3eed5c8579c38c0186ef3327c0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>GetHandler</name>
      <anchor>0236dc2ad7b9cb80c80006ab3b626ed9</anchor>
      <arglist>(csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>564f227fe5baabdb3687300cbc0d05a0</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>d3d7ce1a59e00e1c322e07eb61cb7bc4</anchor>
      <arglist>(iEventHandler *)</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>a8f4638595ce6b61d6f28f1532606465</anchor>
      <arglist>(csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>IsInstance</name>
      <anchor>989bbe3abaedec3af0563a262b66de38</anchor>
      <arglist>(csHandlerID id)</arglist>
    </member>
    <member kind="function">
      <name>IsInstanceOf</name>
      <anchor>b702c3d93cea03a437c8249e1b2eb891</anchor>
      <arglist>(csHandlerID instanceid, csHandlerID genericid)</arglist>
    </member>
    <member kind="function">
      <name>RegisterID</name>
      <anchor>b87efdee85136c0fc3342d18d3d0bfa1</anchor>
      <arglist>(iEventHandler *)</arglist>
    </member>
    <member kind="function">
      <name>ReleaseID</name>
      <anchor>898dce89e3daffa5fd438a84175de6d6</anchor>
      <arglist>(iEventHandler *)</arglist>
    </member>
    <member kind="function">
      <name>ReleaseID</name>
      <anchor>ccba3e42ee457f987169ddcb987259ec</anchor>
      <arglist>(csHandlerID id)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventNameRegistry</name>
    <base>scfImplementation1&lt; csEventNameRegistry</base>
    <base> iEventNameRegistry &gt;</base>
    <filename>classcsEventNameRegistry.html</filename>
    <member kind="function">
      <name>GetID</name>
      <anchor>3c34e6c6d9f713d2dff33e97cc3f1bf5</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>10bde97b8027839d81e8431f10b55360</anchor>
      <arglist>(iEventNameRegistry *name_reg, const char *name)</arglist>
    </member>
    <member kind="function">
      <name>IsKindOf</name>
      <anchor>d973d9716e35112ffc73f36410f97acb</anchor>
      <arglist>(iObjectRegistry *object_reg, csEventID name1, csEventID name2)</arglist>
    </member>
    <member kind="function">
      <name>IsKindOf</name>
      <anchor>747be21392e36d3843a81c314cde80aa</anchor>
      <arglist>(iEventNameRegistry *name_reg, csEventID name1, csEventID name2)</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>23a4e9c3063f8fc231bcdcb3b4afc2a4</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetParentID</name>
      <anchor>21a9c15c0b28c6c27b660d00a42e35ef</anchor>
      <arglist>(const csEventID id)</arglist>
    </member>
    <member kind="function">
      <name>GetRegistry</name>
      <anchor>0617080f5f4626f72ce93449e0d88dbd</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>998c19103f4eed292da56e59fec820b9</anchor>
      <arglist>(const csEventID id)</arglist>
    </member>
    <member kind="function">
      <name>IsImmediateChildOf</name>
      <anchor>e79bb359fc213d4caacfeeb3429e3bef</anchor>
      <arglist>(const csEventID child, const csEventID parent)</arglist>
    </member>
    <member kind="function">
      <name>IsKindOf</name>
      <anchor>d296e980626eec1238b1aaa7b6359a39</anchor>
      <arglist>(const csEventID child, const csEventID parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventOutlet</name>
    <base>scfImplementation1&lt; csEventOutlet</base>
    <base> iEventOutlet &gt;</base>
    <filename>classcsEventOutlet.html</filename>
    <member kind="function">
      <name>csEventOutlet</name>
      <anchor>6e80cd0d71bb7366620c033dd08b5d15</anchor>
      <arglist>(iEventPlug *, csEventQueue *, iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>~csEventOutlet</name>
      <anchor>601a1f1713bef643bd1031d886f0ba99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Broadcast</name>
      <anchor>655ced810b8b0575e56e588edc4c7d95</anchor>
      <arglist>(csEventID iName, intptr_t iInfo)</arglist>
    </member>
    <member kind="function">
      <name>CreateEvent</name>
      <anchor>74905ba88ca23165b3676a2e02031b6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ImmediateBroadcast</name>
      <anchor>212c14a097d034f4c5790c1c638c7f2e</anchor>
      <arglist>(csEventID iName, intptr_t iInfo)</arglist>
    </member>
    <member kind="function">
      <name>Joystick</name>
      <anchor>c2dfda3b1e4e44bcf2a024fa0c8ea791</anchor>
      <arglist>(uint iNumber, int iButton, bool iDown, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>Key</name>
      <anchor>4c6a0d18e41d4b473b382f331f3939f7</anchor>
      <arglist>(utf32_char codeRaw, utf32_char codeCooked, bool iDown, bool autorep=false)</arglist>
    </member>
    <member kind="function">
      <name>Mouse</name>
      <anchor>728e5b2616a6a126baab6beaeee1ad43</anchor>
      <arglist>(uint iNumber, int iButton, bool iDown, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>Mouse</name>
      <anchor>c82d080802520644043806b39e5558e7</anchor>
      <arglist>(int iButton, bool iDown, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>Post</name>
      <anchor>6ebe91fea284f9f69ad4cb76e9ba0ddb</anchor>
      <arglist>(iEvent *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventQueue</name>
    <base>scfImplementation1&lt; csEventQueue</base>
    <base> iEventQueue &gt;</base>
    <filename>classcsEventQueue.html</filename>
    <member kind="function">
      <name>FinalProcess</name>
      <anchor>6a714a4f3c3934053d713ed25cbe1b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Frame</name>
      <anchor>99cad3eb2e7d9483d2667f8ce5ddc464</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PostProcess</name>
      <anchor>a43d979338fb5e2d9352a11531023a79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PreProcess</name>
      <anchor>622267fe05a51cd2d15f47e4623e5d0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProcessEvent</name>
      <anchor>e86832c0c6efd23913ba13eba844851f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventOutlet</name>
      <anchor>045c4aa8c93411d96adb6374223fca27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventQueueTest</name>
      <anchor>f404f613d3150d4f80c6da84fa375a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventTree</name>
      <anchor>38be8f61f3116fd02fd4b301a7d7ce9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPoolEvent</name>
      <anchor>ec50ba80b5421ab09fcde6246b667423</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventQueue</name>
      <anchor>ffac0d4d4fb821a59d0feef4e0ac7a98</anchor>
      <arglist>(iObjectRegistry *, size_t iLength=DEF_EVENT_QUEUE_LENGTH)</arglist>
    </member>
    <member kind="function">
      <name>~csEventQueue</name>
      <anchor>79de1a4dd4c72de6b788f620a54b26c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>4fa9a3e51486de50707879d8a33d6d67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CountPool</name>
      <anchor>99229403fdbe7badb9446ae0301afa57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CreateBroadcastEvent</name>
      <anchor>6c9bc4dee2d776c2b9141dedfb6b176d</anchor>
      <arglist>(const csEventID &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>CreateEvent</name>
      <anchor>c2e7ffe12dbb5f60c2fdcd61c806eb28</anchor>
      <arglist>(const csEventID &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>CreateEvent</name>
      <anchor>02d5120a5efb43746a9087242c7b5bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CreateEventOutlet</name>
      <anchor>1ac5c57a6dded0331b1c4a1f3e1bec01</anchor>
      <arglist>(iEventPlug *)</arglist>
    </member>
    <member kind="function">
      <name>Dispatch</name>
      <anchor>3ff083b51a426f459d89880a69b16dca</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>0d7241d3903c2193bc702038d56a71a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetEventCord</name>
      <anchor>31799cc03f6df8b2672a52172534a52f</anchor>
      <arglist>(const csEventID &amp;)</arglist>
    </member>
    <member kind="function">
      <name>GetEventOutlet</name>
      <anchor>889af3f32d074ab09bc6a4a1262581b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>0639070198fefb1d84008279598e715a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Post</name>
      <anchor>a88c2e4eaebc42c8c28ea3305a33fb66</anchor>
      <arglist>(iEvent *)</arglist>
    </member>
    <member kind="function">
      <name>Process</name>
      <anchor>79bf31788492531ae382de8d89e8038e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RegisterListener</name>
      <anchor>ae4f8fb9207549d9f425d590afac44b5</anchor>
      <arglist>(iEventHandler *handler, const csEventID events[])</arglist>
    </member>
    <member kind="function">
      <name>RegisterListener</name>
      <anchor>9db4f87e4d83b200a9657cc1825cbf99</anchor>
      <arglist>(iEventHandler *handler, const csEventID &amp;event)</arglist>
    </member>
    <member kind="function">
      <name>RegisterListener</name>
      <anchor>3ad5bfe2314deff3ad8bf437427ab481</anchor>
      <arglist>(iEventHandler *)</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllListeners</name>
      <anchor>1db3cd62c3338c75d04d70ca4d0dfab9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>db64113ffdddc80e0a74be4ffe5b9e53</anchor>
      <arglist>(iEventHandler *)</arglist>
    </member>
    <member kind="function">
      <name>Subscribe</name>
      <anchor>586e9cfd6350842fa0352c627f4ef7ff</anchor>
      <arglist>(iEventHandler *, const csEventID[])</arglist>
    </member>
    <member kind="function">
      <name>Subscribe</name>
      <anchor>2b1512573c22156a964234968cebf2a1</anchor>
      <arglist>(iEventHandler *, const csEventID &amp;)</arglist>
    </member>
    <member kind="function">
      <name>Unsubscribe</name>
      <anchor>5f475b574aa0694c98b6914bf0032e18</anchor>
      <arglist>(iEventHandler *, const csEventID[])</arglist>
    </member>
    <member kind="function">
      <name>Unsubscribe</name>
      <anchor>788e25b7d5948b78fc6eb33054fa2ffa</anchor>
      <arglist>(iEventHandler *, const csEventID &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventQueue::FinalProcessFrameEventDispatcher</name>
    <base>scfImplementation2</base>
    <filename>classcsEventQueue_1_1FinalProcessFrameEventDispatcher.html</filename>
    <member kind="function">
      <name>FinalProcessFrameEventDispatcher::FinalProcessFrameEventDispatcher</name>
      <anchor>b6ca776efc069eda6c22a31c1a831f8a</anchor>
      <arglist>(csEventQueue *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventQueue::PostProcessFrameEventDispatcher</name>
    <base>scfImplementation2</base>
    <filename>classcsEventQueue_1_1PostProcessFrameEventDispatcher.html</filename>
    <member kind="function">
      <name>PostProcessFrameEventDispatcher::PostProcessFrameEventDispatcher</name>
      <anchor>a8dfae14b620063b00af9b72c931cd04</anchor>
      <arglist>(csEventQueue *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventQueue::PreProcessFrameEventDispatcher</name>
    <base>scfImplementation2</base>
    <filename>classcsEventQueue_1_1PreProcessFrameEventDispatcher.html</filename>
    <member kind="function">
      <name>PreProcessFrameEventDispatcher::PreProcessFrameEventDispatcher</name>
      <anchor>673028d253403690d9cbde87e111d9b3</anchor>
      <arglist>(csEventQueue *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventQueue::ProcessFrameEventDispatcher</name>
    <base>scfImplementation2</base>
    <filename>classcsEventQueue_1_1ProcessFrameEventDispatcher.html</filename>
    <member kind="function">
      <name>ProcessFrameEventDispatcher::ProcessFrameEventDispatcher</name>
      <anchor>7530fba0b1effb8f2fc82fc4a6470f8d</anchor>
      <arglist>(csEventQueue *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventTimer</name>
    <base>scfImplementation1&lt; csEventTimer</base>
    <base> iEventTimer &gt;</base>
    <filename>classcsEventTimer.html</filename>
    <member kind="function">
      <name>AddTimerEvent</name>
      <anchor>5ec1cfeb085f70a266ef0f20ae55ef92</anchor>
      <arglist>(iTimerEvent *ev, csTicks delay)</arglist>
    </member>
    <member kind="function">
      <name>GetEventCount</name>
      <anchor>dbe80cf32749062636d9816f4a596b20</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetStandardTimer</name>
      <anchor>f900650669f4bb977172e13530d67165</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>GetTimeLeft</name>
      <anchor>88daf685b1df8016b92749b7fdfc4004</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="function">
      <name>RemoveAllTimerEvents</name>
      <anchor>4c62c5d635f309d9fb15d0a9f19b35cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveTimerEvent</name>
      <anchor>3f8a23d8204ce11a3e89ac2ef4de1f33</anchor>
      <arglist>(iTimerEvent *ev)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventTree</name>
    <base>csTreeNode</base>
    <filename>classcsEventTree.html</filename>
    <member kind="function">
      <name>CreateRootNode</name>
      <anchor>4832611faa7aec972e57ebe36b483d8c</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;reg1, csRef&lt; iEventNameRegistry &gt; &amp;reg2, csEventQueue *q)</arglist>
    </member>
    <member kind="function">
      <name>DeleteRootNode</name>
      <anchor>b7b5a0f24320fce00d7893438eb0342e</anchor>
      <arglist>(csEventTree *node)</arglist>
    </member>
    <member kind="function">
      <name>csEventQueueTest</name>
      <anchor>f404f613d3150d4f80c6da84fa375a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubscriberIterator</name>
      <anchor>7800d352f191e799ea200a6f4006c30a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Dispatch</name>
      <anchor>934653e6616a0277dc72724f884bcbba</anchor>
      <arglist>(iEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>FindNode</name>
      <anchor>0ca5357e751f53f7e1c1a8f0244d7e59</anchor>
      <arglist>(csEventID name, csEventQueue *q)</arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>5c4f2048abf471ca761e3e2517792581</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Notify</name>
      <anchor>8a88fe2ec87f564c36addb46e9529ff3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Subscribe</name>
      <anchor>04ca4d1748524ab5411de2e882603dad</anchor>
      <arglist>(csHandlerID, csEventID, csEventQueue *q)</arglist>
    </member>
    <member kind="function">
      <name>Unsubscribe</name>
      <anchor>69588cc4abc05a5f8946951b1ff51f8d</anchor>
      <arglist>(csHandlerID, csEventID, csEventQueue *q)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventTree::SubscriberIterator</name>
    <filename>classcsEventTree_1_1SubscriberIterator.html</filename>
    <member kind="function">
      <name>SubscriberIterator::csEventQueueTest</name>
      <anchor>f404f613d3150d4f80c6da84fa375a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubscriberIterator::csEventTree</name>
      <anchor>38be8f61f3116fd02fd4b301a7d7ce9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubscriberIterator::SubscriberIterator</name>
      <anchor>67a979eb741e7db6ee1528e5b05d6bc8</anchor>
      <arglist>(iEventHandlerRegistry *r, csEventTree *t, csEventID bevent)</arglist>
    </member>
    <member kind="function">
      <name>SubscriberIterator::~SubscriberIterator</name>
      <anchor>db68e7387db5d2404a16a1a46b591fea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SubscriberIterator::HasNext</name>
      <anchor>933e8e3585e7fc7e58d9c99307a09d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SubscriberIterator::Next</name>
      <anchor>8b1cf47c6bc5ba7f071b527d79cd0c3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFIFO</name>
    <filename>classcsFIFO.html</filename>
    <member kind="function">
      <name>AllocatorType</name>
      <anchor>f2aa0407262b30fad7b9ec90bbf99aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ElementHandlerType</name>
      <anchor>e8fa6529d4919948e774dc77b21782c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThisType</name>
      <anchor>d7922894f47f011ae3d7f23bc9ac2a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ValueType</name>
      <anchor>f09c5022ebcd5072dca6e02bf8d123a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csFIFO</name>
      <anchor>3609d1fddb635c57e62f5b881e04046d</anchor>
      <arglist>(size_t icapacity=0, size_t ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>dc48c9e57d7a6e8b05bbda65eb0dbc27</anchor>
      <arglist>(T const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>96d7fa2a159d26b389c069a728039df5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>a50ee41231a09cca92dc209cbbf4347d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PopTop</name>
      <anchor>e615e57f0901346ae6968d1b7ee0305e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>46ae6f1d195bb152921b9160ce92bd50</anchor>
      <arglist>(T const &amp;what)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFileReadHelper</name>
    <filename>classcsFileReadHelper.html</filename>
    <member kind="function">
      <name>ReadInt16</name>
      <anchor>0e99ebafb823a15bb14b15ce484ebc34</anchor>
      <arglist>(int16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>ReadInt32</name>
      <anchor>ff67d85f7685876aca64ea8f1e84da06</anchor>
      <arglist>(int32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>ReadUInt16</name>
      <anchor>6b08e8563949adfe2bc4b790683bb27c</anchor>
      <arglist>(uint16 &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>ReadUInt32</name>
      <anchor>4d0032571f0c48393f3eb4a8decc5dfc</anchor>
      <arglist>(uint32 &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>ReadUInt8</name>
      <anchor>088ce66b77779f8c7246b3d363193c5f</anchor>
      <arglist>(uint8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>csFileReadHelper</name>
      <anchor>5dd868383fdbf02111fc1bec99208c1a</anchor>
      <arglist>(iFile *file)</arglist>
    </member>
    <member kind="function">
      <name>GetChar</name>
      <anchor>dbe50097ed2e0962ab673d7a7f5298a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFile</name>
      <anchor>e4cac3c87fca84500a2a2b7377255433</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>24a49c66e482d2a9b96f206693a6ef1f</anchor>
      <arglist>(char *buf, size_t len, bool OmitNewline=true)</arglist>
    </member>
    <member kind="function">
      <name>LookChar</name>
      <anchor>4d0b844b7e5e4225fa88d9aec91672ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ReadInt8</name>
      <anchor>96db067db90dd1e08df89fea3f9fc6a6</anchor>
      <arglist>(int8 &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>ReadTextFloat</name>
      <anchor>c93ae959f01bb87ddde8643786ee52f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ReadTextInt</name>
      <anchor>0dfe6447f00ffd5235b86a7a21811aae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Skip</name>
      <anchor>439cd7ce61130f69dcdd94cd98ee385e</anchor>
      <arglist>(size_t num)</arglist>
    </member>
    <member kind="function">
      <name>SkipWhitespace</name>
      <anchor>d6097f7e762dfef15121670775d48c60</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixed16</name>
    <filename>classcsFixed16.html</filename>
    <member kind="function">
      <name>csFixed16</name>
      <anchor>5045570f7b4b310ed4f95becd8e06357</anchor>
      <arglist>(const float f)</arglist>
    </member>
    <member kind="function">
      <name>csFixed16</name>
      <anchor>574b4f312d99eab343eacc1a7f88d4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFixed</name>
      <anchor>1f18484d1998b8507f2587344ff48668</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator int</name>
      <anchor>e182dbe2a84419cb1454ad633992a740</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>017bfc6ff89be3821896123654a4bc9a</anchor>
      <arglist>(const csFixed16 &amp;x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>43f7a89b0157d2da7d7279902684be81</anchor>
      <arglist>(const float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>41b007142e0c146b7139384e3080f064</anchor>
      <arglist>(const csFixed16 &amp;v1, int v2)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>c249482aa2c554e9ec24d1575832ebf8</anchor>
      <arglist>(const csFixed16 &amp;v1, float v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>c68c3924d228dbd9fdbf553d59321a64</anchor>
      <arglist>(const csFixed16 &amp;v1, float v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>0dd8ecc62a020ab7e1c066d7a302f77a</anchor>
      <arglist>(float v1, const csFixed16 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>caab67abae600f4be7756effdfce7df2</anchor>
      <arglist>(const csFixed16 &amp;v1, const csFixed16 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>e29e7ca3a9ef8ac1ef6cf6817d3d8057</anchor>
      <arglist>(const csFixed16 &amp;v1, int n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixed24</name>
    <filename>classcsFixed24.html</filename>
    <member kind="function">
      <name>GetFixed</name>
      <anchor>69b1ceec0c1b4f964c4f8f0146f2ea45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator int</name>
      <anchor>6f55d6f8cde5661b87734e4f01332c63</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>f0ccdfc083753b772ef405293c0ef5d0</anchor>
      <arglist>(const csFixed24 &amp;x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>3ba6c33357caea784c719a1788e4c205</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>78a78ef5442623e9ac42851c3500dd02</anchor>
      <arglist>(const csFixed24 &amp;v1, float v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>81329ac75a85bd43472019b9ed688ebc</anchor>
      <arglist>(const csFixed24 &amp;v1, float v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>2f0ae7420d9a85957fa1d695755ddfa9</anchor>
      <arglist>(float v1, const csFixed24 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>fd79c6b490596085b2cab66c35370087</anchor>
      <arglist>(const csFixed24 &amp;v1, const csFixed24 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixedSizeAllocator</name>
    <filename>classcsFixedSizeAllocator.html</filename>
    <member kind="function">
      <name>AllocatorType</name>
      <anchor>edea983e540a0c4c20770e401525962b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThisType</name>
      <anchor>9ff9dd8306e8da2b752f2c6df4352969</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>d2eb8689527b8fead5596208a308e010</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>fb05aa47c8f5183fc623b393c06342b1</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetMemTrackerInfo</name>
      <anchor>4a7a649b1a90c358c950e4261e2f3ab1</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>csFixedSizeAllocator</name>
      <anchor>f4534ee4e4e4b18b4b1fef3fd2ae8eda</anchor>
      <arglist>(size_t nelem=32)</arglist>
    </member>
    <member kind="function">
      <name>~csFixedSizeAllocator</name>
      <anchor>154d1536a1edd1837038488be2107e47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>a23579349fa21fff8f1fa6dc30f5f427</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AllocBlock</name>
      <anchor>6e7974ee7871949250822b3937554caa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AllocCommon</name>
      <anchor>cd9305bed36709e36b0d52222a4a11b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Compact</name>
      <anchor>3492691739cb105d7274da3a5b938980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DestroyObject</name>
      <anchor>57b6c1127a18ae1fa780c68af92a2916</anchor>
      <arglist>(Disposer &amp;disposer, void *p) const </arglist>
    </member>
    <member kind="function">
      <name>DisposeAll</name>
      <anchor>2d6916d415daaa8d83aeccbf922b010a</anchor>
      <arglist>(Disposer &amp;disposer)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>8684d2f1d4b9c68d779f8b213fc89a2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FindBlock</name>
      <anchor>e69493d266e0ed6a92fb954547b4e827</anchor>
      <arglist>(void const *m) const </arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>da2f85b56e7819fb9bd694603d85f95d</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>69cb1c8ff50f68d5779b180bd32de2c6</anchor>
      <arglist>(Disposer &amp;disposer, void *p)</arglist>
    </member>
    <member kind="function">
      <name>FreeBlock</name>
      <anchor>36126c87742e8fcbe2085dc404a5b166</anchor>
      <arglist>(uint8 *p)</arglist>
    </member>
    <member kind="function">
      <name>FuzzyCmp</name>
      <anchor>25b9f1503fccb1784317f69f9e232875</anchor>
      <arglist>(uint8 *const &amp;block, BlockKey const &amp;k)</arglist>
    </member>
    <member kind="function">
      <name>GetAllocationMap</name>
      <anchor>fc9173862050c0e56b035ad5e5a8bf4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetBlockElements</name>
      <anchor>fbc85b60aab6f5d8f33040cb10c2cb6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>TryFree</name>
      <anchor>8556322fce063d9f0204555fd866356b</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>TryFree</name>
      <anchor>eae28b243f7ec94c18f88cd028289b54</anchor>
      <arglist>(Disposer &amp;disposer, void *p)</arglist>
    </member>
    <member kind="function">
      <name>blocks</name>
      <anchor>424bd61f9cd708b78284ebd8dd485eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>blocksize</name>
      <anchor>d6bf973ab1bc9ba9289be6fdec8bdf30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>elcount</name>
      <anchor>f205cf3779350b696deacc138890f105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>elsize</name>
      <anchor>0d4e723ccc2429a5378254db493ab465</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>freenode</name>
      <anchor>5f88bf9a4e898072c43525f0580b30c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>insideDisposeAll</name>
      <anchor>59d708c29be72cbbd957aff63c3ba884</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixedSizeAllocator::DefaultDisposer</name>
    <filename>classcsFixedSizeAllocator_1_1DefaultDisposer.html</filename>
    <member kind="function">
      <name>DefaultDisposer::DefaultDisposer</name>
      <anchor>1992e5f5e81f3fb0a79e539227d3abfd</anchor>
      <arglist>(const BA &amp;, bool legit)</arglist>
    </member>
    <member kind="function">
      <name>DefaultDisposer::Dispose</name>
      <anchor>a2d7409a6fdba7b7fe443cff4076ba45</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>DefaultDisposer::~DefaultDisposer</name>
      <anchor>aa3a504da5960a4237de913a004a2f4a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFlags</name>
    <filename>classcsFlags.html</filename>
    <member kind="function">
      <name>csFlags</name>
      <anchor>138bed5abe734ee85b193a91c34ec38f</anchor>
      <arglist>(uint32 value=0)</arglist>
    </member>
    <member kind="function">
      <name>Check</name>
      <anchor>8ce50949391eb2a9825c32de553de4fa</anchor>
      <arglist>(uint32 mask) const </arglist>
    </member>
    <member kind="function">
      <name>CheckAll</name>
      <anchor>191da800d8ec2e932d40ac50154e3003</anchor>
      <arglist>(uint32 mask) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>7ccc61aa04d2040abe554fb6c3cac015</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>590b1405572b64f028c6aded45bd7523</anchor>
      <arglist>(uint32 mask)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>51df753f582d3e75ae276e1d2fd5396a</anchor>
      <arglist>(uint32 mask, uint32 value)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>2d4cf71234f2134858ab17cb3825fa3d</anchor>
      <arglist>(uint32 mask)</arglist>
    </member>
    <member kind="function">
      <name>SetAll</name>
      <anchor>e6631190a03eafaa2b9dbaf56f5d1577</anchor>
      <arglist>(uint32 value)</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>56a4e9255159d84e0704ffde33fe441e</anchor>
      <arglist>(uint32 mask, bool value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFmtDefaultReader</name>
    <filename>classcsFmtDefaultReader.html</filename>
    <member kind="function">
      <name>csFmtDefaultReader</name>
      <anchor>c98099f222a46b5c36e67668db02e497</anchor>
      <arglist>(const T *string, size_t length)</arglist>
    </member>
    <member kind="function">
      <name>GetNext</name>
      <anchor>1ecd0e98f3e002eeccea014ae60bdef7</anchor>
      <arglist>(utf32_char &amp;ch)</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>dcc493f01d548798fc319e7f51d59d99</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>739f3785aebfad81867b12d377b15d38</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFmtDefaultWriter</name>
    <filename>classcsFmtDefaultWriter.html</filename>
    <member kind="function">
      <name>csFmtDefaultWriter</name>
      <anchor>29100f43e685f873f5e76331b886a37c</anchor>
      <arglist>(T *dest, size_t size)</arglist>
    </member>
    <member kind="function">
      <name>GetTotal</name>
      <anchor>18c31a75ac7cb3f08a13a6830108b97d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>9c334b05453ac285fbb7c2dfbaab62f0</anchor>
      <arglist>(utf32_char ch)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFogInfo</name>
    <filename>classcsFogInfo.html</filename>
    <member kind="function">
      <name>fog</name>
      <anchor>fba741e1bf9d56088fb2ce2671202af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>has_incoming_plane</name>
      <anchor>3bfc1a5f787aa1fea2461c565c947269</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>has_outgoing_plane</name>
      <anchor>438741543284cbf224d0fa64d4b2bda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>incoming_plane</name>
      <anchor>02cf32f6417af544c156a93fde144173</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>f9f2fbf9f9580be8db83849a5bfe2a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>outgoing_plane</name>
      <anchor>a82b7169bcdd434c55016bf5a9dbf831</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFogMath</name>
    <filename>classcsFogMath.html</filename>
    <member kind="function">
      <name>DistanceForOpacity</name>
      <anchor>56d0f38dafbc32848a267c05417ae3a0</anchor>
      <arglist>(float density, float opacity)</arglist>
    </member>
    <member kind="function">
      <name>OpacityAtDistance</name>
      <anchor>e5aca5f0130f4180581ac18263dbcdf7</anchor>
      <arglist>(float density, float dist)</arglist>
    </member>
    <member kind="function">
      <name>Ramp</name>
      <anchor>74be5cd72713d13d9fb61bdaa9089e42</anchor>
      <arglist>(float depth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache</name>
    <filename>classcsFontCache.html</filename>
    <member kind="function">
      <name>SetClipRect</name>
      <anchor>8c7be0aed86d5ea4004b5c867a8be2e0</anchor>
      <arglist>(int x1, int y1, int x2, int y2)</arglist>
    </member>
    <member kind="function">
      <name>ClipX2</name>
      <anchor>f1af1f7bf2c53aaa3b7d48dad4e03d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClipY1</name>
      <anchor>a4ad143f29be9dd6ae051021511bf35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClipY2</name>
      <anchor>cfa9dd29fb4e01a6d3f420f9b4c9ee02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KnownFontArrayKeyFunctor</name>
      <anchor>376a79f801d4abf62bcec3244366ff8c</anchor>
      <arglist>(iFont *f)</arglist>
    </member>
    <member kind="function">
      <name>deleteCallback</name>
      <anchor>217f9252818ee5270a1853e5e77a5eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>purgeableFonts</name>
      <anchor>4b5bf16d7d4139c737b484e1c54af389</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PlaneGlyphsArray</name>
      <anchor>57ae3eb01a631d2e120b7245489ca0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddCacheData</name>
      <anchor>a1c1151b630e9c5967e70a1ede0841b1</anchor>
      <arglist>(KnownFont *font, utf32_char glyph, GlyphCacheData *cacheData)</arglist>
    </member>
    <member kind="function">
      <name>CacheFont</name>
      <anchor>c0a20b2fe3fc29d13c78a98b9a0220c5</anchor>
      <arglist>(iFont *font)</arglist>
    </member>
    <member kind="function">
      <name>CacheGlyph</name>
      <anchor>61305de121a1d7b55ba5371275095f8e</anchor>
      <arglist>(KnownFont *font, utf32_char glyph, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>CacheGlyphUnsafe</name>
      <anchor>3baad431f251376188592c6526e6d3db</anchor>
      <arglist>(KnownFont *font, utf32_char glyph, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>FindLRUEntry</name>
      <anchor>827faf097d8e7cdcbce3a7bd3b7f0b40</anchor>
      <arglist>(GlyphCacheData *cacheData)</arglist>
    </member>
    <member kind="function">
      <name>FindLRUEntry</name>
      <anchor>dd94cf23d6425d0c9b8701780ad8c32b</anchor>
      <arglist>(KnownFont *font, utf32_char glyph)</arglist>
    </member>
    <member kind="function">
      <name>GetCacheData</name>
      <anchor>19d4cb8decfd6d4c2c1d8eaf9cfb5841</anchor>
      <arglist>(KnownFont *font, utf32_char glyph, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>GetCachedFont</name>
      <anchor>b1e554e9aecffc78c9bdb61d5ebf3335</anchor>
      <arglist>(iFont *font)</arglist>
    </member>
    <member kind="function">
      <name>GetLeastUsed</name>
      <anchor>2a50e870d3ea45e2458b14957e5fa4a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InternalCacheGlyph</name>
      <anchor>a75e7bb25e36e13bdef089d397c54e02</anchor>
      <arglist>(KnownFont *font, utf32_char glyph, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>InternalGetCacheData</name>
      <anchor>e27fddd40d8bcbcf82958389c177db7b</anchor>
      <arglist>(KnownFont *font, utf32_char glyph)</arglist>
    </member>
    <member kind="function">
      <name>InternalUncacheGlyph</name>
      <anchor>cbe7b5c1ac104b682bad13734fbad1ab</anchor>
      <arglist>(GlyphCacheData *cacheData)</arglist>
    </member>
    <member kind="function">
      <name>PurgeEmptyPlanes</name>
      <anchor>cbf8f584e177e022eadea2553946dad5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveCacheData</name>
      <anchor>a63208f27bd65226f2123441e8662b1d</anchor>
      <arglist>(GlyphCacheData *cacheData)</arglist>
    </member>
    <member kind="function">
      <name>RemoveLRUEntry</name>
      <anchor>d9ad0fd0f09d940195682987c7bea8b0</anchor>
      <arglist>(LRUEntry *entry)</arglist>
    </member>
    <member kind="function">
      <name>SetupCacheData</name>
      <anchor>a973f88c3f889f1a4f0fa710cb2c215f</anchor>
      <arglist>(GlyphCacheData *cacheData, KnownFont *font, utf32_char glyph, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>UncacheFont</name>
      <anchor>213135f8310e546998dc5cffa348a09a</anchor>
      <arglist>(iFont *font)</arglist>
    </member>
    <member kind="function">
      <name>UncacheGlyph</name>
      <anchor>bda3fbf36bf473457d3ffc187e17b0fc</anchor>
      <arglist>(GlyphCacheData *cacheData)</arglist>
    </member>
    <member kind="function">
      <name>WriteString</name>
      <anchor>4f8e363dca268664dab4c7e9df4a851f</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const void *text, bool isWide, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>ClipX1</name>
      <anchor>90726d3aa3b492044e5c9412b4c23333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>head</name>
      <anchor>a811819f72578db0901953a2eb5e609e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>knownFonts</name>
      <anchor>a1667870c89a536f4dd61d9179540b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LRUAlloc</name>
      <anchor>fdbb66fc13b04b7eee1a2dba01d4acbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tail</name>
      <anchor>bc976adaee0274898070014152a97b9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache::PlaneGlyphElementHandler</name>
    <base>csArrayElementHandler</base>
    <filename>classcsFontCache_1_1PlaneGlyphElementHandler.html</filename>
    <member kind="function">
      <name>PlaneGlyphElementHandler::Construct</name>
      <anchor>dfe76bdac563f32365d6b88f3e3da769</anchor>
      <arglist>(PlaneGlyphs **address, PlaneGlyphs *const &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>PlaneGlyphElementHandler::Destroy</name>
      <anchor>2301e23ae3df0ca343e594f4069513c5</anchor>
      <arglist>(PlaneGlyphs **)</arglist>
    </member>
    <member kind="function">
      <name>PlaneGlyphElementHandler::InitRegion</name>
      <anchor>3ba50c9efbf9dfdbb4a1366344c09324</anchor>
      <arglist>(PlaneGlyphs **address, size_t count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFrameDataHolder</name>
    <filename>classcsFrameDataHolder.html</filename>
    <member kind="function">
      <name>csFrameDataHolder</name>
      <anchor>a8ebb2a597a704a121b8b25e01393990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csFrameDataHolder</name>
      <anchor>8428ad67f33a0efa18cc6ac80b489241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>52141cd05ceb5766c2921eb65097393c</anchor>
      <arglist>(bool instaClear=false)</arglist>
    </member>
    <member kind="function">
      <name>GetUnusedData</name>
      <anchor>7abe3b6e519c553caf54140ee3f39ce7</anchor>
      <arglist>(bool &amp;created, uint frameNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFrustum</name>
    <filename>classcsFrustum.html</filename>
    <member kind="function">
      <name>csFrustum</name>
      <anchor>32b1d501aa473abc9cc28fdaf5e0b5fb</anchor>
      <arglist>(const csVector3 &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>csFrustum</name>
      <anchor>483d7770965bfe6700e9284c30c34d28</anchor>
      <arglist>(const csVector3 &amp;o, csVector3 *verts, int num_verts, csPlane3 *backp=0)</arglist>
    </member>
    <member kind="function">
      <name>csFrustum</name>
      <anchor>4dc5c6d9dd8e086c5d3e51df702efda9</anchor>
      <arglist>(const csVector3 &amp;o, int num_verts, csPlane3 *backp=0)</arglist>
    </member>
    <member kind="function">
      <name>csFrustum</name>
      <anchor>7798f2ce32fcb63e7283ef3a50b4ed83</anchor>
      <arglist>(const csFrustum &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>dbdf4bde6639c4ec761eae042c0d08c3</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>BatchClassify</name>
      <anchor>2a22d7aa3cc7d02f293f5f0ac397dc4a</anchor>
      <arglist>(csVector3 *frustum, csVector3 *frustumNormals, int num_frust, csVector3 *poly, int num_poly)</arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>e1f67e4063f46e0861644a1498583607</anchor>
      <arglist>(csVector3 *frustum, int num_frust, csVector3 *poly, int num_poly)</arglist>
    </member>
    <member kind="function">
      <name>ClipPolyToPlane</name>
      <anchor>eb62e2571d380f5e384e420398f98836</anchor>
      <arglist>(csPlane3 *plane)</arglist>
    </member>
    <member kind="function">
      <name>ClipToPlane</name>
      <anchor>42b53ee72b5e0c1babc394c4fbcecbb2</anchor>
      <arglist>(csVector3 *vertices, int &amp;num_vertices, csClipInfo *clipinfo, const csPlane3 &amp;plane)</arglist>
    </member>
    <member kind="function">
      <name>ClipToPlane</name>
      <anchor>f36e42bb80a8279d0adc71ce6963b1e9</anchor>
      <arglist>(csVector3 *vertices, int &amp;num_vertices, csClipInfo *clipinfo, const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>ClipToPlane</name>
      <anchor>8e1c0713b7275a217ebde46801eedbed</anchor>
      <arglist>(csVector3 &amp;v1, csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>396bdacdb29ca8ff46d492e13e88f8a8</anchor>
      <arglist>(csVector3 *frustum, int num_frust, const csPlane3 &amp;plane, const csVector3 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>29b8c3632416cfc4af54557fa82f0ad7</anchor>
      <arglist>(csVector3 *frustum, int num_frust, const csVector3 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>07fac5a2270bb192cb0b19c6721d18ca</anchor>
      <arglist>(const csVector3 &amp;point)</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>d8e188ccb52d22338a657b057694f34e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetBackPlane</name>
      <anchor>5e3059951ccdba4739cd9c8a460beebd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetOrigin</name>
      <anchor>c1a88e883e3108957188b8aa6aef171a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetOrigin</name>
      <anchor>8a6827e3f078ed11241d5ec4db343f75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRefCount</name>
      <anchor>5c0bca8368f62fab22cde9a71bc8e2ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>7ede0a1ab5c554ffea3d8721d5db9e69</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>947047842e73c252b434d9874dcd98e8</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>3b9717b50bf73d9916e0d6e8e09ca520</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>4395e97acfada9d70605b6314f2d16f8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>bab78bc92099f2e8fa8d23672465a0d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>6b5bae86a606e98ec36f6f2a5fec93ac</anchor>
      <arglist>(const csVector3 &amp;frust_origin, csVector3 *frust, int num_frust, const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>7077753eb67f35bb055a5767369c7a87</anchor>
      <arglist>(const csVector3 &amp;frust_origin, csVector3 *frust, int num_frust, csVector3 *poly, int num)</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>30d2245632dcb52b96edeadcfcef82ca</anchor>
      <arglist>(csVector3 *poly, int num) const </arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>5abadb39e9cf881586adee3e910d8f69</anchor>
      <arglist>(const csFrustum &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>566183940052ead9fbf6c82b940f12cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsInfinite</name>
      <anchor>bc62abb4adbbd8f3fb751ed96355ae31</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsMirrored</name>
      <anchor>b2841c988ee2d28cbc120fee5c0271f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsWide</name>
      <anchor>41bdce5fd6e67bdf268cf7a16aa634cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>bdb1e514714e22241b3ea96fc66c80ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MakeInfinite</name>
      <anchor>5d9b19c766ce08bd3a24bc167c8755ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveBackPlane</name>
      <anchor>7991590fd5dd343a2807e7ca9236e375</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetBackPlane</name>
      <anchor>ada5f524726da2dd387bd0befa14d502</anchor>
      <arglist>(const csPlane3 &amp;plane)</arglist>
    </member>
    <member kind="function">
      <name>SetMirrored</name>
      <anchor>76c2863500da69567d928826fe94133e</anchor>
      <arglist>(bool m)</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>2d041b91b8afb3bc54a7481cd965943f</anchor>
      <arglist>(const csVector3 &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>Transform</name>
      <anchor>b0c3f22c474e75b8c43696cc385f7f23</anchor>
      <arglist>(csTransform *trans)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFrustumContext</name>
    <filename>classcsFrustumContext.html</filename>
    <member kind="function">
      <name>operator=</name>
      <anchor>b58e123182e2dc3d986450eed61ab86e</anchor>
      <arglist>(csFrustumContext const &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>csFrustumContext</name>
      <anchor>8d9529a7cdfeb808c820a076e721b0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetLightFrustum</name>
      <anchor>446fa5acfd77aec8d11b785a035a6172</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetShadows</name>
      <anchor>3687bd43d70a24429f54519b51758c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsMirrored</name>
      <anchor>11e711bfe5c5ad66dbd347882e29f708</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsShared</name>
      <anchor>334326b0a807d1ec04d5872ab01d6eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetLightFrustum</name>
      <anchor>430767d78adfed510892cc7cd648376b</anchor>
      <arglist>(csFrustum *lf)</arglist>
    </member>
    <member kind="function">
      <name>SetMirrored</name>
      <anchor>26896dde326a133382a80bf56e11627a</anchor>
      <arglist>(bool m)</arglist>
    </member>
    <member kind="function">
      <name>SetNewLightFrustum</name>
      <anchor>c5ad78936f83d4c4fa58f2da4eba85aa</anchor>
      <arglist>(csPtr&lt; csFrustum &gt; lf)</arglist>
    </member>
    <member kind="function">
      <name>SetNewShadows</name>
      <anchor>86ae993cd6787fa649a1db507939ad98</anchor>
      <arglist>(csPtr&lt; iShadowBlockList &gt; shad, bool sh=false)</arglist>
    </member>
    <member kind="function">
      <name>SetShadows</name>
      <anchor>84c9c8b78d5b6c195a4fef645fac3dc1</anchor>
      <arglist>(iShadowBlockList *shad, bool sh=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csG2DDrawBox</name>
    <filename>classcsG2DDrawBox.html</filename>
    <member kind="function">
      <name>DrawBox</name>
      <anchor>7be185358d117b91d71d467c8c29c67c</anchor>
      <arglist>(csGraphics2D *G2D, int x, int y, int w, int h, Tpixel color, uint8 alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csG2DDrawLine</name>
    <filename>classcsG2DDrawLine.html</filename>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>e818417fac0ae477cd5e5370baa262bd</anchor>
      <arglist>(csGraphics2D *G2D, float x1, float y1, float x2, float y2, Tpixel color, uint8 alpha)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csG2DDrawText</name>
    <filename>classcsG2DDrawText.html</filename>
    <member kind="function">
      <name>DrawText</name>
      <anchor>fee1943b1499efe3971fca379ee741da</anchor>
      <arglist>(csSoftFontCache *cache, iFont *font, int pen_x, int pen_y, Tpixel fg, uint8 alphaFG, Tpixel bg, uint8 alphaBG, const void *text, bool isWide, uint flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImage</name>
    <filename>classcsGenerateImage.html</filename>
    <member kind="function">
      <name>csGenerateImage</name>
      <anchor>511c8ebe6bc4832b7bb30e99c31ed361</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csGenerateImage</name>
      <anchor>8df7d1bb87ffd9db9a60279fe3df3bda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Generate</name>
      <anchor>dbb220135d29ec757adc149508957795</anchor>
      <arglist>(int totalw, int totalh, int startx, int starty, int partw, int parth)</arglist>
    </member>
    <member kind="function">
      <name>SetTexture</name>
      <anchor>936901df0a0b04f423d5fe7bbf48020b</anchor>
      <arglist>(csGenerateImageTexture *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageLayer</name>
    <filename>classcsGenerateImageLayer.html</filename>
    <member kind="function">
      <name>next</name>
      <anchor>1d846908ec6cf0c61e514a1a56853409</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tex</name>
      <anchor>9860402af33454ec2a7d37ff52b8ed3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>value</name>
      <anchor>92e9fe5452081424df09f16759562595</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageTexture</name>
    <filename>classcsGenerateImageTexture.html</filename>
    <member kind="function">
      <name>~csGenerateImageTexture</name>
      <anchor>f8bd4bec335dbe5f86226f83759794f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>f1f1b5a8e27e3c8cf44402260b41de63</anchor>
      <arglist>(csColor &amp;col, float x, float y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageTextureBlend</name>
    <base>csGenerateImageTexture</base>
    <filename>classcsGenerateImageTextureBlend.html</filename>
    <member kind="function">
      <name>~csGenerateImageTextureBlend</name>
      <anchor>31162c481b828e09481d767888ae4ab7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddLayer</name>
      <anchor>de4db3d397cc9d8026d881a9f78f98a7</anchor>
      <arglist>(float value, csGenerateImageTexture *tex)</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>e34f8efbfbd9ea903fee3b3a1f2da849</anchor>
      <arglist>(csColor &amp;col, float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>layers</name>
      <anchor>ef83b05466fb7b9cfbd73706a1f9b9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>valuefunc</name>
      <anchor>35d694df56b63baa93b8eee0cc7f16e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageTextureSingle</name>
    <base>csGenerateImageTexture</base>
    <filename>classcsGenerateImageTextureSingle.html</filename>
    <member kind="function">
      <name>~csGenerateImageTextureSingle</name>
      <anchor>048935be699e831192014daab298c272</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ComputeLayerColor</name>
      <anchor>0073c4416fe6d721cc33589dc0aba879</anchor>
      <arglist>(const csVector2 &amp;pos, csColor &amp;col)</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>bc305faffcfa1835979e10ece7b55282</anchor>
      <arglist>(csColor &amp;col, float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>GetImagePixel</name>
      <anchor>4a592f8172da874d133a73247fc90eb3</anchor>
      <arglist>(iImage *image, int x, int y, csRGBpixel &amp;res)</arglist>
    </member>
    <member kind="function">
      <name>SetImage</name>
      <anchor>95d49cc4ab4c35281fe7d585c241f9e2</anchor>
      <arglist>(iImage *im)</arglist>
    </member>
    <member kind="function">
      <name>image</name>
      <anchor>3bd1ec0c20aaf109077153d1c91878d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>offset</name>
      <anchor>e28391c6b077a2a20ce109eddf918007</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scale</name>
      <anchor>2c3619516fac06579ee7ffa3dcc07ff2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageTextureSolid</name>
    <base>csGenerateImageTexture</base>
    <filename>classcsGenerateImageTextureSolid.html</filename>
    <member kind="function">
      <name>~csGenerateImageTextureSolid</name>
      <anchor>0658961c41a282e3af8cbf1798eb5fa7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>3edbd94626a528c79abbacd553a5d507</anchor>
      <arglist>(csColor &amp;col, float, float)</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>23cdc87cb468ce8b1ad4a9ca9710e875</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageValue</name>
    <filename>classcsGenerateImageValue.html</filename>
    <member kind="function">
      <name>~csGenerateImageValue</name>
      <anchor>5bdd797765c068278e4fed71f4013c1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>549362695b331d26b4c71e0961b442f9</anchor>
      <arglist>(float x, float y)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageValueFunc</name>
    <base>csGenerateImageValue</base>
    <filename>classcsGenerateImageValueFunc.html</filename>
    <member kind="function">
      <name>csGenerateImageValueFunc</name>
      <anchor>4ed78561a554e677abdca67d9a5035ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csGenerateImageValueFunc</name>
      <anchor>8334e0602493e161489342364bf95fb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>cf86867e21af406bf696b10f2d640532</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>SetFunction</name>
      <anchor>2a24393cec0bc465c83c640180b8a2e8</anchor>
      <arglist>(iGenerateImageFunction *func)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageValueFuncConst</name>
    <base>csGenerateImageValue</base>
    <filename>classcsGenerateImageValueFuncConst.html</filename>
    <member kind="function">
      <name>GetValue</name>
      <anchor>fa8d64b186357eae3b91785685f58a9e</anchor>
      <arglist>(float, float)</arglist>
    </member>
    <member kind="function">
      <name>constant</name>
      <anchor>48666e12f9fd158ff9cc23be384de777</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGenerateImageValueFuncTex</name>
    <base>csGenerateImageValue</base>
    <filename>classcsGenerateImageValueFuncTex.html</filename>
    <member kind="function">
      <name>GetValue</name>
      <anchor>6b6a04206527f82a9a656437629e6fe5</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>tex</name>
      <anchor>5916e68c42cf6b6c0edc7a01390e3b25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGeomDebugHelper</name>
    <base>scfImplementation1&lt; csGeomDebugHelper</base>
    <base> iDebugHelper &gt;</base>
    <filename>classcsGeomDebugHelper.html</filename>
    <member kind="function">
      <name>Benchmark</name>
      <anchor>acad9aa80f37ae736179d8ed3497724b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>DebugCommand</name>
      <anchor>8f4e36efccc2a832e0d30f56b6adca7e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>4a2b0c27c0c3007e179a48995111a7be</anchor>
      <arglist>(iGraphics3D *)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>845d93026c9b21c326bdaa42553b76e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSupportedTests</name>
      <anchor>9dde7df87f36bc24aac6a182a93b166a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>StateTest</name>
      <anchor>b0185b1cf8381603272994299bafa714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnitTest</name>
      <anchor>1359b441a59d28c6b3eda7a1b268c1d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLDriverDatabase</name>
    <filename>classcsGLDriverDatabase.html</filename>
    <member kind="function">
      <name>addedConfigs</name>
      <anchor>a64a0e93c91629500e6d77fb61e78188</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ogl2d</name>
      <anchor>9c5b767e60cea4b27c48ba74dc06017d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rulePhase</name>
      <anchor>833fbe225d7e9faf1ac8cac446c69ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tokens</name>
      <anchor>38960a546612b40b3fff484476f24e09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLFontCache</name>
    <base>csFontCache</base>
    <filename>classcsGLFontCache.html</filename>
    <member kind="function">
      <name>DumpFontCache</name>
      <anchor>8de4859b69aa14ac6f4df31346ca952d</anchor>
      <arglist>(csRefArray&lt; iImage &gt; &amp;pages)</arglist>
    </member>
    <member kind="function">
      <name>FlushText</name>
      <anchor>d1bd55f0500e1b87040da459fb2d9183</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>48a899fcc6558989b2b0c7afed2915fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WriteString</name>
      <anchor>bfffe096ca17566c5d5db97e2ca9cf0b</anchor>
      <arglist>(iFont *font, int pen_x, int pen_y, int fg, int bg, const void *text, bool isWide, uint flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLScreenShot</name>
    <base>scfImplementationExt0&lt; csGLScreenShot</base>
    <base> csImageBase &gt;</base>
    <filename>classcsGLScreenShot.html</filename>
    <member kind="function">
      <name>poolNext</name>
      <anchor>475a8bd78a1266da0faedb4fdf5c98dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>2c5acf7325aaa74f89ef9cd3f9af22e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>76965a2695b8855283dec646377771da</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>524cbe56c8437ba44601faedf51881f9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>45e05911e47d2c1b6bb3f60aefb41ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>21c1660dc928935c88246f576ad73755</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>d56814b513b2217658ab8143c203c3c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLStateCache</name>
    <filename>classcsGLStateCache.html</filename>
    <member kind="function">
      <name>csGLStateCache</name>
      <anchor>3f21254368823ee903ae415270fbc669</anchor>
      <arglist>(csGLExtensionManager *extmgr)</arglist>
    </member>
    <member kind="function">
      <name>GetBufferARB</name>
      <anchor>098e6c55b8d462e6cbb4953410ab4c55</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>GetTexture</name>
      <anchor>a93232232573fa3ced3ec53cdb47a366</anchor>
      <arglist>(GLenum, int unit)</arglist>
    </member>
    <member kind="function">
      <name>GetTexture</name>
      <anchor>21d62313c21761edf040dee96e97c307</anchor>
      <arglist>(GLenum)</arglist>
    </member>
    <member kind="function">
      <name>SetBufferARB</name>
      <anchor>459418a3c05e3660853c9a2ce8c3d407</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>SetContext</name>
      <anchor>9f6c2505edb808a797e245b71e1e7521</anchor>
      <arglist>(csGLStateCacheContext *context)</arglist>
    </member>
    <member kind="function">
      <name>SetTexture</name>
      <anchor>1336feeb70f6126304db454c487a9ed6</anchor>
      <arglist>(GLenum target, GLuint texture)</arglist>
    </member>
    <member kind="function">
      <name>currentContext</name>
      <anchor>1dd64fd21328706a0761010d5cabfd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extmgr</name>
      <anchor>7b057e0b00701bdb22d86800ab4d7a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLenum</name>
      <anchor>5543b912a704924e5b9e202cc891f562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLint</name>
      <anchor>f0e3272a4b917ecf4eeb9ad0fcfcad48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLsizei</name>
      <anchor>56fb715c18c064f0c9d3f33df716d7f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VertexPointer</name>
      <anchor>e329ed6c3e0b6cfaffb27df730da4095</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vpointer</name>
      <anchor>396360cbf405cc3ccf74ed4ef99dc207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vsize</name>
      <anchor>8ec0ad7634d400a2a1ca4d822425d455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vstride</name>
      <anchor>d13fdb2d8c678044f1fd0d16122100c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vtype</name>
      <anchor>e64d4dfcfcc8936b806fdecf62fc7442</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ActivateTU</name>
      <anchor>ea121a997ee4f4f450a713e4c0f26162</anchor>
      <arglist>(uint usage)</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentTU</name>
      <anchor>b03809fc61e26bdf8ad0a1efb6e8322b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentTU</name>
      <anchor>8ae99715120c6ed94a3107c76c557d15</anchor>
      <arglist>(int unit)</arglist>
    </member>
    <member kind="function">
      <name>activateImage</name>
      <anchor>76f78d1a6f9bed3fb243b70b51953bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>activateMatrix</name>
      <anchor>9bb3ef16b440355ce55863e1be51f4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>activateTexCoord</name>
      <anchor>0bcf382d761d15c5cb8d25c25fb51100</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>activateTexEnable</name>
      <anchor>aaa6cd38ef69b7fdf5ba0bfcf7137976</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>activateTexEnv</name>
      <anchor>54dbe5104d3c2f71c1700d96090ca433</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>activateTexGen</name>
      <anchor>0b7dc932b65953e0b19552c73cb73004</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLStateCacheContext</name>
    <filename>classcsGLStateCacheContext.html</filename>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_4_LAYER</name>
      <anchor>7e7601b3130c3e3d6b649348211f8dd4</anchor>
      <arglist>(glTexCoordPointer, TexCoordPointer, GLint, tsize, GLenum, ttype, GLsizei, tstride, GLvoid *, tpointer) csGLStateCacheContext(csGLExtensionManager *extmgr)</arglist>
    </member>
    <member kind="function">
      <name>activeUnit</name>
      <anchor>c2ae7eee77d000fed26de0add81fd82d</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>boundtexture</name>
      <anchor>ff3a28aac3957a1e3e83259fa6549a5d</anchor>
      <arglist>[CS_GL_MAX_LAYER]</arglist>
    </member>
    <member kind="function">
      <name>ColorPointer</name>
      <anchor>81a979db9738be1efc065efe7863faeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csize</name>
      <anchor>aea605ca1aaf87ee9be25e7fd42389e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cstride</name>
      <anchor>26d0dc76767e5e036cf30f9a7680e221</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ctype</name>
      <anchor>2c06e0a5f9d856920c1703d333ec30b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>currentBufferID</name>
      <anchor>0942ea8d54cdc15d847bb347ff9ee8d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>currentIndexID</name>
      <anchor>a76ec926a7fc65dd4b31045be0de8518</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>currentUnit</name>
      <anchor>547040ed73b4129e9ae9252f109cfc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extmgr</name>
      <anchor>1d4add574d28c831e130b5cc70ef9959</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLenum</name>
      <anchor>45b254ddd35a0a706ed22c06642b4a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLenum</name>
      <anchor>820c5d711842bb527fa3f2aac1e96e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLint</name>
      <anchor>3bfc723dcfbeaf83593c8a8c6fe2ec38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLint</name>
      <anchor>851272e7ea1a2eb6db3af92872731a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLsizei</name>
      <anchor>aa32b057b8130571076c41e824212f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLsizei</name>
      <anchor>7eb5fc2bd2676b7479c38000ce470336</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VertexPointer</name>
      <anchor>5cf288feaff3d4b8b3e08082152b201e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vsize</name>
      <anchor>e9f5e0ff3dd4de73d5fabc916f8f5439</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vstride</name>
      <anchor>fcbb76eabf794d4c84f4f36ea220d2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vtype</name>
      <anchor>6b3e574ce0bde579af1bd9e1cb5f78bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InitCache</name>
      <anchor>18b5c595be37dc4a95ad123ecb000a83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGradient</name>
    <base>scfImplementation1&lt; csGradient</base>
    <base> iGradient &gt;</base>
    <filename>classcsGradient.html</filename>
    <member kind="function">
      <name>csGradient</name>
      <anchor>b317a3c05904c6dbedd83aeec55f4119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGradient</name>
      <anchor>bb935eb0f035c8a906385c7612d33045</anchor>
      <arglist>(csColor4 first, csColor4 last)</arglist>
    </member>
    <member kind="function">
      <name>AddShade</name>
      <anchor>5c509313a7c2efe2e3729e4d1bd144f5</anchor>
      <arglist>(const csGradientShade &amp;shade)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>7ccf78e9977a3460a2aba5f0f5631d3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetShades</name>
      <anchor>ed114a61ae277e86d93813e4698f22fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Render</name>
      <anchor>9dfda0a87635f1cb1fbab56ff3b34af0</anchor>
      <arglist>(csRGBpixel *pal, size_t count, float begin=0.0f, float end=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>Render</name>
      <anchor>cddbdec6030114e4e41919869ccd577f</anchor>
      <arglist>(csRGBcolor *pal, size_t count, float begin=0.0f, float end=1.0f) const </arglist>
    </member>
    <member kind="function">
      <name>shades</name>
      <anchor>ea586d1f88b32ca13c608a5ee85c712f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGraphics2D</name>
    <base>scfImplementation7&lt; csGraphics2D</base>
    <base> iGraphics2D</base>
    <base> iComponent</base>
    <base> iNativeWindow</base>
    <base> iNativeWindowManager</base>
    <base> iPluginConfig</base>
    <base> iDebugHelper</base>
    <base> iEventHandler &gt;</base>
    <filename>classcsGraphics2D.html</filename>
    <member kind="function">
      <name>ClipX2</name>
      <anchor>9af7a75cabce92e85f63382a7e0a9bc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClipY1</name>
      <anchor>9c6a63dd0529274f99577405d3d6b07b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClipY2</name>
      <anchor>c702b0713f6eca3aa0e842fe2ac76dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Depth</name>
      <anchor>168b58a674d5aa45e87a6f0d94fe48cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>9a74748b45303789f7ba4e86f0700123</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vpHeight</name>
      <anchor>6a7a5c7f7bdae23f0d39c9fae2a36f5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vpSet</name>
      <anchor>f875700e647efa07883effbffa3d361d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vpWidth</name>
      <anchor>2039b9995dade8ad57139bf27ee82a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>1803df471e4e3fa4b2f4df638e4042d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>weakEventHandler</name>
      <anchor>65c5384bb6ae05688f24e335e9390031</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGraphics2D</name>
      <anchor>3d9305c2317fe1c9b982eb879e402997</anchor>
      <arglist>(iBase *)</arglist>
    </member>
    <member kind="function">
      <name>~csGraphics2D</name>
      <anchor>faf7f4dd7e6c7a3084356d63efbb1e68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alert</name>
      <anchor>fc2495889f74bfb9ebafcce437cb4411</anchor>
      <arglist>(int type, const wchar_t *title, const wchar_t *okMsg, const wchar_t *msg,...)</arglist>
    </member>
    <member kind="function">
      <name>Alert</name>
      <anchor>db5d4448c88ca89e7e8cc1b5be06685f</anchor>
      <arglist>(int type, const char *title, const char *okMsg, const char *msg,...)</arglist>
    </member>
    <member kind="function">
      <name>AlertV</name>
      <anchor>0a9a4c807ad6ff22085ac0b1a993ea2f</anchor>
      <arglist>(int type, const wchar_t *title, const wchar_t *okMsg, const wchar_t *msg, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>AlertV</name>
      <anchor>23e9e9c51bcee0dbd6253e68405da350</anchor>
      <arglist>(int type, const char *title, const char *okMsg, const char *msg, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>AllowResize</name>
      <anchor>759ebbe1667a78c1fc28d5a3d9bd029d</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <name>BeginDraw</name>
      <anchor>0eb668e6b8498a6988e4d87dae67a887</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Benchmark</name>
      <anchor>2893114cbae18229b548bfd9f943ac39</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>Blit</name>
      <anchor>7ece8817dd9e44e4f1fbc93a350b51d0</anchor>
      <arglist>(int x, int y, int width, int height, unsigned char const *data)</arglist>
    </member>
    <member kind="function">
      <name>ChangeDepth</name>
      <anchor>ed9c6f12ac23ac95ab4fad9c853ab8c3</anchor>
      <arglist>(int d)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>c3249a8ad143158380c70ccf566b4c3b</anchor>
      <arglist>(int color)</arglist>
    </member>
    <member kind="function">
      <name>ClearAll</name>
      <anchor>ae286debb19aae4db139c6e8f51e61ac</anchor>
      <arglist>(int color)</arglist>
    </member>
    <member kind="function">
      <name>ClipLine</name>
      <anchor>e6cbd6899add5d613f02405573738e19</anchor>
      <arglist>(float &amp;x1, float &amp;y1, float &amp;x2, float &amp;y2, int xmin, int ymin, int xmax, int ymax)</arglist>
    </member>
    <member kind="function">
      <name>Close</name>
      <anchor>54a628892914d858bf62c29fe0b20393</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CreateOffscreenCanvas</name>
      <anchor>b02171a792f95bae108ad1b72b26f175</anchor>
      <arglist>(void *memory, int width, int height, int depth, iOffscreenCanvasCallback *ofscb)</arglist>
    </member>
    <member kind="function">
      <name>DebugCommand</name>
      <anchor>650d609cd42b6ffa4d0202f967afb5f9</anchor>
      <arglist>(const char *cmd)</arglist>
    </member>
    <member kind="function">
      <name>DoubleBuffer</name>
      <anchor>d8005cc576d9c3ec6c1ebda916951ed5</anchor>
      <arglist>(bool Enable)</arglist>
    </member>
    <member kind="function">
      <name>DrawBox</name>
      <anchor>965a46d57b6828bdefc77a585b8658c0</anchor>
      <arglist>(int x, int y, int w, int h, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>5e2aa80687926583f039aef90c779ef5</anchor>
      <arglist>(float x1, float y1, float x2, float y2, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixel</name>
      <anchor>362804c19c45315e8327da8ed52d42f4</anchor>
      <arglist>(int x, int y, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixel16</name>
      <anchor>ba1db9b9b1954848439cbd67bdd728e9</anchor>
      <arglist>(csGraphics2D *This, int x, int y, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixel32</name>
      <anchor>1fe665badf17611227f63eb815f1e085</anchor>
      <arglist>(csGraphics2D *This, int x, int y, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixel8</name>
      <anchor>82474be1111ecbcdc07cb5f52ccd4811</anchor>
      <arglist>(csGraphics2D *This, int x, int y, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixels</name>
      <anchor>db5261b714dd07e1664a849605e98811</anchor>
      <arglist>(csPixelCoord const *pixels, int num_pixels, int color)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>2585a44e51aa67229d913b07fd08680c</anchor>
      <arglist>(iGraphics3D *)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>d18cfdebff3b4f229a6e622d244bd8c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FindRGB</name>
      <anchor>8ec4bfdefe11b76c144bc5ddbe7601d8</anchor>
      <arglist>(int r, int g, int b, int a=255)</arglist>
    </member>
    <member kind="function">
      <name>FinishDraw</name>
      <anchor>e3b8015b220e90fa77acb1cc60a028a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FreeArea</name>
      <anchor>126b7e24b098a908b4a7d448c8be09ed</anchor>
      <arglist>(csImageArea *Area)</arglist>
    </member>
    <member kind="function">
      <name>GetClipRect</name>
      <anchor>311639eac3b096eed0e54758194069b3</anchor>
      <arglist>(int &amp;xmin, int &amp;ymin, int &amp;xmax, int &amp;ymax)</arglist>
    </member>
    <member kind="function">
      <name>GetDoubleBufferState</name>
      <anchor>02c5ff22358b90534656e84794114ca4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFontServer</name>
      <anchor>8a56ffc416252a5a7ec887e9615e1b0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFullScreen</name>
      <anchor>a4f549d06eec17c7c9c1a03f9e01694d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetGamma</name>
      <anchor>b371a0110449fa6fb6bba59f11dab181</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>96f58c12519379b06e75f38e958f8264</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>4de525dc09ee5962e5d81b70dd2c83b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetNativeWindow</name>
      <anchor>79a53b47a12044f8404384f8da038cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetOption</name>
      <anchor>8b3b1c9d101e3d8a8dc788e95c9597e2</anchor>
      <arglist>(int id, csVariant *value)</arglist>
    </member>
    <member kind="function">
      <name>GetOptionDescription</name>
      <anchor>f65097f9a0629fad249a835e3a4e5e02</anchor>
      <arglist>(int idx, csOptionDescription *)</arglist>
    </member>
    <member kind="function">
      <name>GetPage</name>
      <anchor>693f178ace4b26c8bdb05a528e36d0e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPalEntryCount</name>
      <anchor>a370c4f5fb8c1812cab9ebc6e98b0a47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>23df9b2d355b8ee5077d8a1a7e6c75fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPixel</name>
      <anchor>b754a58e7859b5c417808837ed36574e</anchor>
      <arglist>(int x, int y, uint8 &amp;oR, uint8 &amp;oG, uint8 &amp;oB, uint8 &amp;oA)</arglist>
    </member>
    <member kind="function">
      <name>GetPixel</name>
      <anchor>a4a5cfa0d33828728869165f2f05163e</anchor>
      <arglist>(int x, int y, uint8 &amp;oR, uint8 &amp;oG, uint8 &amp;oB)</arglist>
    </member>
    <member kind="function">
      <name>GetPixelAt</name>
      <anchor>68beac8a1ae92e157a916b9d55f9f8ea</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>GetPixelAt16</name>
      <anchor>68e902fb6571c11a3281d858ecc66097</anchor>
      <arglist>(csGraphics2D *This, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>GetPixelAt32</name>
      <anchor>8c25d17ad19ccfc9c1a647065468ffee</anchor>
      <arglist>(csGraphics2D *This, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>GetPixelAt8</name>
      <anchor>2a90d1fd3ad51ccd7cd3ce1f48ba6c0e</anchor>
      <arglist>(csGraphics2D *This, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>GetPixelBytes</name>
      <anchor>4ee5d7eed369c3347202b59afd4bb46b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPixelFormat</name>
      <anchor>8bed12796691e5a79ed9eae7698a151e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>834bef9425152a2e0938768670cee386</anchor>
      <arglist>(int color, int &amp;r, int &amp;g, int &amp;b, int &amp;a)</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>f8dee69eb3096a1f931e67ae951bfb8c</anchor>
      <arglist>(int color, int &amp;r, int &amp;g, int &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>GetSupportedTests</name>
      <anchor>33d4cb05db52df7f839314e0ba3eb34d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>3643ee0bced27258452706c31db6bafb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>f34849ba08f71796a72e77f36a6732b2</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>30c0c60b890b1fac84dbd167c115ba71</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>a116e2745469a6212cd2a27362bc7f30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PerformExtension</name>
      <anchor>b66282e5a63e5abc650496fd1dd0e4b6</anchor>
      <arglist>(char const *command,...)</arglist>
    </member>
    <member kind="function">
      <name>PerformExtensionV</name>
      <anchor>5bbd9bc43498ccc5566e7c4f3665112e</anchor>
      <arglist>(char const *command, va_list)</arglist>
    </member>
    <member kind="function">
      <name>Print</name>
      <anchor>8e1cdf268ca57db67ce4da7904a67ba2</anchor>
      <arglist>(csRect const *=0)</arglist>
    </member>
    <member kind="function">
      <name>Resize</name>
      <anchor>62b276a262a4d6a2bfe529a835897798</anchor>
      <arglist>(int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>RestoreArea</name>
      <anchor>a4d292632b05e16497e0a330573428fd</anchor>
      <arglist>(csImageArea *Area, bool Free=true)</arglist>
    </member>
    <member kind="function">
      <name>SaveArea</name>
      <anchor>9e503598301389ec9029591d1b8d8237</anchor>
      <arglist>(int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>ScreenShot</name>
      <anchor>1d021d2dc4e6a0359ef2d2076bf83c35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetClipRect</name>
      <anchor>7930aa2556d5d6f8abbef90587430f57</anchor>
      <arglist>(int xmin, int ymin, int xmax, int ymax)</arglist>
    </member>
    <member kind="function">
      <name>SetFullScreen</name>
      <anchor>1c1c50303a28902d42a62f018f85163a</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <name>SetGamma</name>
      <anchor>6746d39f949e7cbdf644ae7156ce942b</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <name>SetMouseCursor</name>
      <anchor>8c997d56caf7ade4ff472dc5312cfc7d</anchor>
      <arglist>(iImage *image, const csRGBcolor *keycolor=0, int hotspot_x=0, int hotspot_y=0, csRGBcolor fg=csRGBcolor(255, 255, 255), csRGBcolor bg=csRGBcolor(0, 0, 0))</arglist>
    </member>
    <member kind="function">
      <name>SetMouseCursor</name>
      <anchor>13d15d4f75905dadab035affe56fa892</anchor>
      <arglist>(csMouseCursorID iShape)</arglist>
    </member>
    <member kind="function">
      <name>SetMousePosition</name>
      <anchor>52df41f8798a298b94088009003ae2e3</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>SetOption</name>
      <anchor>68741c009ecdcd9b0dc209881ebfd9d3</anchor>
      <arglist>(int id, csVariant *value)</arglist>
    </member>
    <member kind="function">
      <name>SetRGB</name>
      <anchor>7d9b19438982575bab1bc89cf0e6478e</anchor>
      <arglist>(int i, int r, int g, int b)</arglist>
    </member>
    <member kind="function">
      <name>SetTitle</name>
      <anchor>9e983328cf70fe912f193d5606356a52</anchor>
      <arglist>(const wchar_t *title)</arglist>
    </member>
    <member kind="function">
      <name>SetTitle</name>
      <anchor>d7253c856a1d71f426d9417c84966593</anchor>
      <arglist>(const char *title)</arglist>
    </member>
    <member kind="function">
      <name>StateTest</name>
      <anchor>ac3ae113d7cd73d18dcfc5129c69e7c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnitTest</name>
      <anchor>208fd0a334afeead0b0d0eacc82cf3e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>4c6ddd693dfe94999ce39ac8ec4f3556</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const wchar_t *text, uint flags=0)</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>448ceebeaf886118f364e1f6150de7de</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const char *text, uint flags=0)</arglist>
    </member>
    <member kind="function">
      <name>WriteBaseline</name>
      <anchor>c48e4d6ca1a86b712a6ed3be7065cde3</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const char *text)</arglist>
    </member>
    <member kind="function">
      <name>_DrawPixel</name>
      <anchor>91a2f77ca34221ba96a02cfa14176596</anchor>
      <arglist>)(csGraphics2D *This, int x, int y, int color)</arglist>
    </member>
    <member kind="function">
      <name>_GetPixelAt</name>
      <anchor>7e1b4b3b4c5a1b86e070653fd926e9e3</anchor>
      <arglist>)(csGraphics2D *This, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>AllowResizing</name>
      <anchor>f5191f7fc3e7a5a122e45faacb674ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClipX1</name>
      <anchor>41e24cdd5c81af9429d80ee3faf4202c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>config</name>
      <anchor>faca9df02ced27bb827dcf74c5ea313c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DisplayNumber</name>
      <anchor>6b5ec9c6fa8e4ce6f9854ebd0074fd15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fontCache</name>
      <anchor>7d769ec8772766603e52f27e1bf85912</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FontServer</name>
      <anchor>a1f6a0bc8182cb03e3d07a1ab65514f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FrameBufferLocked</name>
      <anchor>dbbaecc2d7f5a768b0ee3653adb70901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FullScreen</name>
      <anchor>ca1aa44bfb960122123cbc6de9a16e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>is_open</name>
      <anchor>348793a4686b8dc06bc95a2ec2895350</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LineAddress</name>
      <anchor>41d3232fafa8efbd56996987c1e0ce49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Memory</name>
      <anchor>72b28efa5935d7b11ad2715e646d93cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>56bf86b9ef2776eaab05ccfaab4da55e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ofscb</name>
      <anchor>f9b4982829efab8626e850908b60f537</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Palette</name>
      <anchor>d0d0e90d9dc680fcccb5cc1dc38cd8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PaletteAlloc</name>
      <anchor>5e52762f38e5e0fd2a5e5cde5a8496f8</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>pfmt</name>
      <anchor>118dd580babe3a8416c1e7b89f6dfdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>plugin_mgr</name>
      <anchor>378c626c4b138f638fed4e20d192bd50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>refreshRate</name>
      <anchor>721f04ae382fa7955813bf7a4ab73de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vsync</name>
      <anchor>690bd6cf3a5e0a5b4e801a5f4095510f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>3c2135de59a14b5f01387356663ecfe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>win_title</name>
      <anchor>6dfd1706739e4de30fc6a2698514e907</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGraphics2DGLCommon</name>
    <base>scfImplementationExt2&lt; csGraphics2DGLCommon</base>
    <base> csGraphics2D</base>
    <base> iEventPlug</base>
    <base> iOpenGLDriverDatabase &gt;</base>
    <filename>classcsGraphics2DGLCommon.html</filename>
    <member kind="function">
      <name>GLPixelFormat</name>
      <anchor>c55824a8be91d960533086e6905a4452</anchor>
      <arglist>[glpfvValueCount]</arglist>
    </member>
    <member kind="function">
      <name>hasRenderTarget</name>
      <anchor>3c4fdeb648500a811ac42a89af7c6b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>screen_shot</name>
      <anchor>691a524ed0e4b2091e72f0d120683322</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ssPool</name>
      <anchor>b0e22a0046d91ab05b9a63c02edfaa0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>statecontext</name>
      <anchor>d93bce4f910e664d065573c8f0da3ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>useCombineTE</name>
      <anchor>9ed235dce9edd95f4cee6cf6e0375beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGLFontCache</name>
      <anchor>337353d2fa7ecf7e10f483e25e798f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGLPixelFormatPicker</name>
      <anchor>c6e854a5078b9b448f1f95935759a859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGLScreenShot</name>
      <anchor>9e90fd4d83226a01d57cb4da430866af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGraphics2DGLCommon</name>
      <anchor>55a34d23e24430b6a42c0530578695b8</anchor>
      <arglist>(iBase *iParent)</arglist>
    </member>
    <member kind="function">
      <name>~csGraphics2DGLCommon</name>
      <anchor>126feb49391c3069ccc6eebff1153bf6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>BeginDraw</name>
      <anchor>66ca8053f80309cf4c014014e6795d71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Blit</name>
      <anchor>b6efdeff246176d96c6b6e9de132762d</anchor>
      <arglist>(int x, int y, int w, int h, unsigned char const *data)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>1939957bae2ba62625234304cdce98c7</anchor>
      <arglist>(int color)</arglist>
    </member>
    <member kind="function">
      <name>Close</name>
      <anchor>c987ef155f3779924bab7650fa346af6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DebugCommand</name>
      <anchor>be56c01a973444f6933ea376c8a18b20</anchor>
      <arglist>(const char *cmd)</arglist>
    </member>
    <member kind="function">
      <name>DecomposeColor</name>
      <anchor>dacb41be6515285f796fbddb9782613b</anchor>
      <arglist>(int iColor, float &amp;oR, float &amp;oG, float &amp;oB, float &amp;oA)</arglist>
    </member>
    <member kind="function">
      <name>DecomposeColor</name>
      <anchor>360b9605454e309e4852d739ccb20e5e</anchor>
      <arglist>(int iColor, GLubyte &amp;oR, GLubyte &amp;oG, GLubyte &amp;oB, GLubyte &amp;oA)</arglist>
    </member>
    <member kind="function">
      <name>DoubleBuffer</name>
      <anchor>749bcdd7725bd840f8ca5c6e28e93233</anchor>
      <arglist>(bool Enable)</arglist>
    </member>
    <member kind="function">
      <name>DrawBox</name>
      <anchor>33e6830f68abd1b0071ff6382b6f1927</anchor>
      <arglist>(int x, int y, int w, int h, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>259bb764c5bc5888e08fd7d9a4bdd6d1</anchor>
      <arglist>(float x1, float y1, float x2, float y2, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixel</name>
      <anchor>1c7f3cefef89901c94676ac1e6641085</anchor>
      <arglist>(int x, int y, int color)</arglist>
    </member>
    <member kind="function">
      <name>DrawPixels</name>
      <anchor>16ad49031dc949f01ef8d5d270864be3</anchor>
      <arglist>(csPixelCoord const *pixels, int num_pixels, int color)</arglist>
    </member>
    <member kind="function">
      <name>FindRGB</name>
      <anchor>5f8badc53623e82da38e5bd370ffea0b</anchor>
      <arglist>(int r, int g, int b, int a=255)</arglist>
    </member>
    <member kind="function">
      <name>FinishDraw</name>
      <anchor>076164d2ed051850f3b525a8324832a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDoubleBufferState</name>
      <anchor>900c24d2fe30745a8b736750a2cd5add</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPixelAt</name>
      <anchor>08e554c721bdcb02f497ff040d3438e6</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>GetPotentiallyConflictingEvents</name>
      <anchor>4114fa4662f17e1d3e0dc62bc87e4bcc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>191ae6da40780f9112e81c4202d44559</anchor>
      <arglist>(int color, int &amp;r, int &amp;g, int &amp;b, int &amp;a)</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>22d0bff3860872bcd667c94a561fc27b</anchor>
      <arglist>(int color, int &amp;r, int &amp;g, int &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>cf5b237b4760507c1d997c0d66976768</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>7f77e08c11ca62cb3ebc71dfee52f247</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OpenDriverDB</name>
      <anchor>7c932044e348e4acb8179f13bd6cdd6a</anchor>
      <arglist>(const char *phase=0)</arglist>
    </member>
    <member kind="function">
      <name>PerformExtensionV</name>
      <anchor>b78a04da3258352e27cfa4f879daf3ca</anchor>
      <arglist>(char const *command, va_list)</arglist>
    </member>
    <member kind="function">
      <name>QueryEventPriority</name>
      <anchor>9f81fc2d3e9b0096468710a6fd42f04f</anchor>
      <arglist>(unsigned)</arglist>
    </member>
    <member kind="function">
      <name>ReadDatabase</name>
      <anchor>764c52e10de2cde9674b024a6d8755e6</anchor>
      <arglist>(iDocumentNode *dbRoot, int configPriority=iConfigManager::ConfigPriorityPlugin+20, const char *phase=0)</arglist>
    </member>
    <member kind="function">
      <name>Resize</name>
      <anchor>f9efec2e67e1423bfa3d693719ba4aa4</anchor>
      <arglist>(int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>RestoreArea</name>
      <anchor>43cc645bf1dc77e7f62e3885d8e011d8</anchor>
      <arglist>(csImageArea *Area, bool Free=true)</arglist>
    </member>
    <member kind="function">
      <name>SaveArea</name>
      <anchor>06b9b3b382d5fb0dcad4572483493854</anchor>
      <arglist>(int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>ScreenShot</name>
      <anchor>293fb50b2add94853c56bf540e045ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetClipRect</name>
      <anchor>271d5c0ec31dbf7bb1c415eecd98f2a4</anchor>
      <arglist>(int xmin, int ymin, int xmax, int ymax)</arglist>
    </member>
    <member kind="function">
      <name>setGLColorfromint</name>
      <anchor>c4c9fd0e37784928e15ad9c2606d0de3</anchor>
      <arglist>(int color)</arglist>
    </member>
    <member kind="function">
      <name>SetRGB</name>
      <anchor>a8ca4a258508bc41672cbf57ec3e4598</anchor>
      <arglist>(int i, int r, int g, int b)</arglist>
    </member>
    <member kind="function">
      <name>currentFormat</name>
      <anchor>f61ee817a168529e57e75bd428e075e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>driverdb</name>
      <anchor>53a7ef442de864f3b3e97d69d9511a5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EventOutlet</name>
      <anchor>1b63c4571259e42f253e7ed165a769a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ext</name>
      <anchor>a2fa871f576c2a0f85182bd881baf053</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>multiFavorQuality</name>
      <anchor>a6b8a809a19849a8a719c1cfdd754a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>statecache</name>
      <anchor>bf9bce86e265f5546306470661d35529</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGraphics2DGLCommon::csGLPixelFormatPicker</name>
    <filename>classcsGraphics2DGLCommon_1_1csGLPixelFormatPicker.html</filename>
  </compound>
  <compound kind="class">
    <name>csHash</name>
    <filename>classcsHash.html</filename>
    <member kind="function">
      <name>AllocatorType</name>
      <anchor>521e02c32f53de01f88546c384bcacca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KeyType</name>
      <anchor>c417f7958c3587067a3582fc7a12628c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThisType</name>
      <anchor>68fcc3be97e81a486a9477ffbab1bdb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ValueType</name>
      <anchor>e3754abcf3a8b46b780944dd91b74496</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ElementArray</name>
      <anchor>b64d29764ad9127aa67b159119442276</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Elements</name>
      <anchor>5d4ab61e8a7d28c82a71b0739cf5a273</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Modulo</name>
      <anchor>905c6b082d89cf34a3ecb050b0236cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator</name>
      <anchor>20c95ebfa904fc04881383afebb4635f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ConstIterator</name>
      <anchor>5485970bb9da6b5d782fa28638b5658f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator</name>
      <anchor>594373255032048e48ada9ba4e8b6e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>9830fc407400559db7e7783cc10a9394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csHash</name>
      <anchor>8b46b882e83b872a91afd9b5f0a525da</anchor>
      <arglist>(size_t size=23, size_t grow_rate=5, size_t max_size=20000)</arglist>
    </member>
    <member kind="function">
      <name>csHash</name>
      <anchor>3abf064780ab7b0b830d871561fc53d5</anchor>
      <arglist>(const csHash&lt; T &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>3d8d0fd5f7f89a201dd107f60fec56ed</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>0a7f8b2b8f46fcd915037d31b1e8fedb</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>8c60faf9a893528d3479d8ede5920134</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>13f7704179600401bcf337a9130c5480</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteElement</name>
      <anchor>2de35a34f8ad5666654c33047b2c60bc</anchor>
      <arglist>(ConstGlobalIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <name>DeleteElement</name>
      <anchor>bd90b6c8da7870ee7f5cd80299b92115</anchor>
      <arglist>(GlobalIterator &amp;iterator)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>f5fe9d4c1fa175c3d0fc718566e6c801</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>c48907570f77a75ab5c216cfec8a5938</anchor>
      <arglist>(const K &amp;key, T &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>2241e61d25ae5030e3e3174bfccc079f</anchor>
      <arglist>(const K &amp;key, const T &amp;fallback) const </arglist>
    </member>
    <member kind="function">
      <name>GetAll</name>
      <anchor>30b4703285b3ccd21420c2cb6f361229</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>GetAll</name>
      <anchor>7a852c5b0ab7a745795411974890baca</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>GetElementPointer</name>
      <anchor>486ae42af4fe30feabc7e365aaed99b3</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>GetElementPointer</name>
      <anchor>be068c7c222f4e78640e990a1810b6c5</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>63496fcf5fb4a0898fe2c4a7222ae364</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>4ad6807c13abf6668420e4587a2bb0a9</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>87ee4aae183859a13101daf80b4032de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>0a5d83ba5963da614ba6d19819d4eb07</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>c0e6f8aea25fa59de886e3d85bd4ea9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>6ecfc915e059391cc2558c592264b671</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>e67b2dfd18740126a3866d9d4fbb391c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>25d78ac60667a3f6950ef9212db6a12c</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>PutFirst</name>
      <anchor>8e5b1b75f0e2f2e806dd643c94e425df</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>PutUnique</name>
      <anchor>26669d4e89f8a5615cbb974442cf92ab</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHash::ConstGlobalIterator</name>
    <filename>classcsHash_1_1ConstGlobalIterator.html</filename>
    <member kind="function">
      <name>ConstGlobalIterator::ConstGlobalIterator</name>
      <anchor>7ab04eaa35b89b00279f51c11705ffcf</anchor>
      <arglist>(const csHash&lt; T, K &gt; *hash0)</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::csHash&lt; T, K &gt;</name>
      <anchor>bac4f17a9a41bec8a2ccd12f2e624f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::ConstGlobalIterator</name>
      <anchor>30d1acc653933f1f8304774d0f4ea545</anchor>
      <arglist>(const ConstGlobalIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::Advance</name>
      <anchor>3f2ecc2196fbff8a959461a8ce9edc67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::HasNext</name>
      <anchor>8fde9c33defeccec5a967951f3ba4e43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::Next</name>
      <anchor>ac1736e2487117b7a5e019a9c4eeb0c2</anchor>
      <arglist>(K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::Next</name>
      <anchor>9b0aa0b39c1903ead266d9d69c069f3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::NextNoAdvance</name>
      <anchor>28e291bfd8c6fd3629794a26703a7c64</anchor>
      <arglist>(K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::NextNoAdvance</name>
      <anchor>1f48c0e4bd0a9144946fe9bc9345351f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::operator=</name>
      <anchor>8712f94ade2834072035fdb413ad3a55</anchor>
      <arglist>(const ConstGlobalIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>ConstGlobalIterator::Reset</name>
      <anchor>06e532864f70fa0325633bcb036f3c84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHash::ConstIterator</name>
    <filename>classcsHash_1_1ConstIterator.html</filename>
    <member kind="function">
      <name>ConstIterator::ConstIterator</name>
      <anchor>efce995a2cb758f0f6c1afd873c14551</anchor>
      <arglist>(const csHash&lt; T, K &gt; *hash0, const K &amp;key0)</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::csHash&lt; T, K &gt;</name>
      <anchor>bac4f17a9a41bec8a2ccd12f2e624f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::ConstIterator</name>
      <anchor>859a534bcb0f3b6777d8a5edd596f393</anchor>
      <arglist>(const ConstIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::HasNext</name>
      <anchor>ace64b256ad94c42a3cddeede9ac4f7f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::Next</name>
      <anchor>655b9a235acdf433602c6a3c826aff5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::operator=</name>
      <anchor>0717e8eb5d95f8c8c8df739a20c2936b</anchor>
      <arglist>(const ConstIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>ConstIterator::Reset</name>
      <anchor>ddb83543e460d533db84b08d5b8ba007</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHash::GlobalIterator</name>
    <filename>classcsHash_1_1GlobalIterator.html</filename>
    <member kind="function">
      <name>GlobalIterator::GlobalIterator</name>
      <anchor>81cac1527d7a7920273e9c308175e1d7</anchor>
      <arglist>(csHash&lt; T, K &gt; *hash0)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::csHash&lt; T, K &gt;</name>
      <anchor>bac4f17a9a41bec8a2ccd12f2e624f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::GlobalIterator</name>
      <anchor>f93d99d3c16080f6d30bf484ba52cc70</anchor>
      <arglist>(const GlobalIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::Advance</name>
      <anchor>230496a7f6abfdfca1909c099d93c293</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::HasNext</name>
      <anchor>e45862acea507ff84122338174c49eec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::Next</name>
      <anchor>32144f2a0323ebed9a73f1da6171fd0f</anchor>
      <arglist>(K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::Next</name>
      <anchor>ef988640dcf3b817690d2dd38ea09af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::NextNoAdvance</name>
      <anchor>bba7250accf72378ca6fd895af7b2398</anchor>
      <arglist>(K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::NextNoAdvance</name>
      <anchor>bd47bc70a761f693ba261399d514e31c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::operator=</name>
      <anchor>89ae88d4276faa0e175f89bb43a61600</anchor>
      <arglist>(const GlobalIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::Reset</name>
      <anchor>7335bde361cdbbbd96e9404976f08d83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHash::Iterator</name>
    <filename>classcsHash_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>bec50fe1022ca70cf2c814329879fef1</anchor>
      <arglist>(csHash&lt; T, K &gt; *hash0, const K &amp;key0)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::csHash&lt; T, K &gt;</name>
      <anchor>bac4f17a9a41bec8a2ccd12f2e624f66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>c289e2cc07c8516e20ab94200310bd8b</anchor>
      <arglist>(const Iterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::HasNext</name>
      <anchor>47e0d5859bcad8b5e04f5e53ba8b5f45</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::Next</name>
      <anchor>e7f2fff8860fac5d7357ae7ac8c34cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator=</name>
      <anchor>b8bc59d0a94c01cbfa6d1e187374a829</anchor>
      <arglist>(const Iterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Reset</name>
      <anchor>0b0f206c8cc31837cf2fd3817fdbcd16</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHashComputer</name>
    <filename>classcsHashComputer.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>28098b758683db0027dd7fafb900096b</anchor>
      <arglist>(const T &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> const char * </name>
    <filename>classcsHashComputer_3_01const_01char_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> const csEventID </name>
    <filename>classcsHashComputer_3_01const_01csEventID_01_4.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>7feb92b4459e3017284b9ae16a8029cd</anchor>
      <arglist>(const csEventID eid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> const csHandlerID </name>
    <filename>classcsHashComputer_3_01const_01csHandlerID_01_4.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>904ad31fbe021b9eb7a3de39b1d49903</anchor>
      <arglist>(const csHandlerID &amp;mid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> csBitArray </name>
    <filename>classcsHashComputer_3_01csBitArray_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> csInputDefinition </name>
    <filename>classcsHashComputer_3_01csInputDefinition_01_4.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>2e54ebcf62b4190c95d756162b7a2d7c</anchor>
      <arglist>(csInputDefinition const &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> double </name>
    <filename>classcsHashComputer_3_01double_01_4.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>dfd748088ec0d2eeec39c0be00cb4e22</anchor>
      <arglist>(double key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> float </name>
    <filename>classcsHashComputer_3_01float_01_4.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>bc111aad97ee04714cf17776d9baa2bf</anchor>
      <arglist>(float key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> iEventHandler * </name>
    <filename>classcsHashComputer_3_01iEventHandler_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> int </name>
    <filename>classcsHashComputer_3_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> long </name>
    <filename>classcsHashComputer_3_01long_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> longlong </name>
    <filename>classcsHashComputer_3_01longlong_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> ulonglong </name>
    <filename>classcsHashComputer_3_01ulonglong_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> unsigned int </name>
    <filename>classcsHashComputer_3_01unsigned_01int_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> unsigned long </name>
    <filename>classcsHashComputer_3_01unsigned_01long_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name> void * </name>
    <filename>classcsHashComputer_3_01void_01_5_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>csHashComputerBitArray</name>
    <filename>classcsHashComputerBitArray.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>927e1d6605d91b7cf9a9e7ae2529cf03</anchor>
      <arglist>(BitArray const &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHashComputerIntegral</name>
    <filename>classcsHashComputerIntegral.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>35cb1f6cc37aea67763556e66549362a</anchor>
      <arglist>(const T &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHashComputerString</name>
    <filename>classcsHashComputerString.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>842a46ab901f6e6ecdfc849d7a1b51a7</anchor>
      <arglist>(const T &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHashComputerStruct</name>
    <filename>classcsHashComputerStruct.html</filename>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>8c433240991a9c1fe9290a16eac844b4</anchor>
      <arglist>(const T &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHashReversible</name>
    <base>csHash</base>
    <filename>classcsHashReversible.html</filename>
    <member kind="function">
      <name>csHashReversible</name>
      <anchor>515d7120e465c7cdb1514a7209453070</anchor>
      <arglist>(int size=23, int grow_rate=5, int max_size=20000)</arglist>
    </member>
    <member kind="function">
      <name>GetKey</name>
      <anchor>df9e60784822033fd979ea74be9edf7d</anchor>
      <arglist>(const T &amp;key, const K &amp;fallback) const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyPointer</name>
      <anchor>7af49a66a38bfa2ca2dccd64935df959</anchor>
      <arglist>(const T &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>9c25406a6642d4e8f2d8a7d4da52b089</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>PutUnique</name>
      <anchor>9942c91231ae37ef9bfe08966348e24e</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csIdentStrings</name>
    <filename>classcsIdentStrings.html</filename>
    <member kind="function">
      <name>csIdentStrings</name>
      <anchor>95d2ceb2b73ba89ec94c97373501885f</anchor>
      <arglist>(const csIdentString *str, csString *scratch, size_t cnt)</arglist>
    </member>
    <member kind="function">
      <name>scratch</name>
      <anchor>e62ce8ae6977979492d23a2bc4c57425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>stringCount</name>
      <anchor>4112f09c11e7c988af5fad7c3e19d823</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>strings</name>
      <anchor>6b118bd9c9969d1aaaaa772d61ba0bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StringForIdent</name>
      <anchor>55effe1351d2ba887b5dabcc6b92892b</anchor>
      <arglist>(int ident)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageBase</name>
    <base>scfImplementation1&lt; csImageBase</base>
    <base> iImage &gt;</base>
    <filename>classcsImageBase.html</filename>
    <member kind="function">
      <name>~csImageBase</name>
      <anchor>695988f549ed7e4cbe7ce8174821533c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csImageBase</name>
      <anchor>98ffb30a09b0dcd5df7fd2837b41c0df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>9088e2e94fb55125292f8bd2e6b71d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDepth</name>
      <anchor>05356f886e5dcb7866294515bf31ed38</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageType</name>
      <anchor>851e69042d59791db1276e4daa1280e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetKeycolor</name>
      <anchor>ce0eaaac57836a081a867221ae341068</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>3b394ea924569d578b6b8a7392159b56</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <name>GetMipmap</name>
      <anchor>65885bfc9872abbc3850437037ddadf7</anchor>
      <arglist>(uint num)</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>cffe6abf869943c09d67a06f62f706e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>b5259fde6544f4ebf4fd6200a75c5efa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>09cc932884c2812f381df27d2a4d29d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRawFormat</name>
      <anchor>bf6f47e3e0c7b6f19f08526abf082b0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSubImage</name>
      <anchor>1c9b0cac6e4263c30ea2ef9b2483ac39</anchor>
      <arglist>(uint num)</arglist>
    </member>
    <member kind="function">
      <name>HasKeycolor</name>
      <anchor>178fd37ef8ca2310130d8c9dd1bdcb3b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>0074d236d0bf6c41c5bd71cf471f6506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasMipmaps</name>
      <anchor>828abaf036fd86f5be6ababdda0933d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasSubImages</name>
      <anchor>cd8a764af200c94c351677087d66d28e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>0f830f7221167e2c6094ec8e06e07cab</anchor>
      <arglist>(const char *iName)</arglist>
    </member>
    <member kind="function">
      <name>fName</name>
      <anchor>1dfe33d17926883d9e20159e37fb22b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageCubeMapMaker</name>
    <base>scfImplementationExt0&lt; csImageCubeMapMaker</base>
    <base> csImageBase &gt;</base>
    <filename>classcsImageCubeMapMaker.html</filename>
    <member kind="function">
      <name>@29</name>
      <anchor>3acb9353eac4fab2640b22ac0556bc38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UM_FACES</name>
      <anchor>3acb9353eac4fab2640b22ac0556bc38a0f6e2130bea525edc7adac7c788e0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csImageCubeMapMaker</name>
      <anchor>b2bf2f56510476e98a5e7dbaa61b85df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csImageCubeMapMaker</name>
      <anchor>ab9722c223df953260a7d4657f93257d</anchor>
      <arglist>(iImage *source)</arglist>
    </member>
    <member kind="function">
      <name>csImageCubeMapMaker</name>
      <anchor>9bbe71322a6d7ee5839679258d1e2331</anchor>
      <arglist>(iImage *posX, iImage *negX, iImage *posY, iImage *negY, iImage *posZ, iImage *negZ)</arglist>
    </member>
    <member kind="function">
      <name>CheckImage</name>
      <anchor>20ba82a19e82ddec1f205ed1394297b4</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>daf90be8743b935bcebf931b878c51d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>42b0da787053aebbeab41ad8c78c722e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>08b1d618ff2b0cfd6e33efe95beab34e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>bd77827fc1966df6aec28d3f5b43b857</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetImageType</name>
      <anchor>57e23729d42b3137d94782b72b66d8e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>3e7e0179fea867f85671f8367a83e81b</anchor>
      <arglist>(int &amp;, int &amp;, int &amp;) const </arglist>
    </member>
    <member kind="function">
      <name>GetMipmap</name>
      <anchor>c5f134c33fe9fbfcf62a9585975b502e</anchor>
      <arglist>(uint num)</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>2b15a9f2e30f90fd82418b9eda0e0b75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>b8767b4bdbf8d9ef64ed3c5fc8668931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>14aaa8b027bc3d77db31bb5808046ce5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRawFormat</name>
      <anchor>6707c60c37d82db16217cf9ae1cb508a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSubImage</name>
      <anchor>d94bf407ace9f03464dcf19b6a06d3fb</anchor>
      <arglist>(uint num)</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>00c0fe27b82bbfc21a57cd83a77edf2e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>055960080dc6774a34861ee833705283</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasMipmaps</name>
      <anchor>0903f8d02180b8a1b358de9efe228fff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasSubImages</name>
      <anchor>52ecf095e206b8a5a9a976d3978fe5ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>3759dc12092b59f0889ffb3466d24fbb</anchor>
      <arglist>(const char *iName)</arglist>
    </member>
    <member kind="function">
      <name>SetSubImage</name>
      <anchor>b5d700b97bf778a3634bc5a01a7179f9</anchor>
      <arglist>(uint num, iImage *image)</arglist>
    </member>
    <member kind="function">
      <name>SubImageSet</name>
      <anchor>48bed2c5638f346ab8c0c9009e109d4e</anchor>
      <arglist>(uint num)</arglist>
    </member>
    <member kind="function">
      <name>UpdateName</name>
      <anchor>ff023fa7ed8b6970e2a866a3db2662a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cubeImages</name>
      <anchor>030f381cbb1af627a4b68fbb55f22eed</anchor>
      <arglist>[NUM_FACES]</arglist>
    </member>
    <member kind="function">
      <name>manualName</name>
      <anchor>0fadbb559afe1c7c18c1df26ebe2105a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageLoaderOptionsParser</name>
    <filename>classcsImageLoaderOptionsParser.html</filename>
    <member kind="function">
      <name>csImageLoaderOptionsParser</name>
      <anchor>667f09fcd017b6231c32a6c6f827ef28</anchor>
      <arglist>(const char *options)</arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>23f9c91d972b7daa6b2504fcd00cb7b0</anchor>
      <arglist>(const char *key, int &amp;v) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageManipulate</name>
    <filename>classcsImageManipulate.html</filename>
    <member kind="function">
      <name>Blur</name>
      <anchor>02e7623c838b1ebafea254dbea22ed68</anchor>
      <arglist>(iImage *source, csRGBpixel *transp=0)</arglist>
    </member>
    <member kind="function">
      <name>Crop</name>
      <anchor>dfd03020db304b7fd216e9fd1405a170</anchor>
      <arglist>(iImage *source, int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>Mipmap</name>
      <anchor>750f578caf2d0a5af63a5511788a2dd5</anchor>
      <arglist>(iImage *source, int step, csRGBpixel *transp=0)</arglist>
    </member>
    <member kind="function">
      <name>Rescale</name>
      <anchor>18a57e5cc25a0d732921b8a103251e64</anchor>
      <arglist>(iImage *source, int NewWidth, int NewHeight, int NewDepth=1)</arglist>
    </member>
    <member kind="function">
      <name>Sharpen</name>
      <anchor>71925b2b9e391e5632bc18ce89c50fa8</anchor>
      <arglist>(iImage *source, int strength, csRGBpixel *transp=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageMemory</name>
    <base>scfImplementationExt0&lt; csImageMemory</base>
    <base> csImageBase &gt;</base>
    <filename>classcsImageMemory.html</filename>
    <member kind="function">
      <name>ApplyKeycolor</name>
      <anchor>cf6e1d49a6f2ed6546fe3d5c51bb11d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClearKeycolor</name>
      <anchor>e6c2bf263283224faebc2f25ab4f5232</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetImageType</name>
      <anchor>fa755d9cadd06c12cb96acdbc38fdf3c</anchor>
      <arglist>(csImageType type)</arglist>
    </member>
    <member kind="function">
      <name>SetKeycolor</name>
      <anchor>5145c5529aae5cc80b6dbd377150082d</anchor>
      <arglist>(int r, int g, int b)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>c8f4e626efc70c742042ff13a8a348c9</anchor>
      <arglist>(int iFormat)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>37cc4d56a6658e1c53b00f80ef9ae355</anchor>
      <arglist>(int width, int height, int format=CS_IMGFMT_TRUECOLOR)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>81cecd2ad140d14abcd468b8623110d2</anchor>
      <arglist>(int width, int height, int depth, int format)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>bc0ec0141d209074783e13cfbc3d3fba</anchor>
      <arglist>(int width, int height, void *buffer, bool destroy, int format=CS_IMGFMT_TRUECOLOR, csRGBpixel *palette=0)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>34d4ed5bf5d44c3c86dd805630a49623</anchor>
      <arglist>(int width, int height, const void *buffer, int format=CS_IMGFMT_TRUECOLOR, const csRGBpixel *palette=0)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>c8d4ec9f822a6d0310f3de207bda9c74</anchor>
      <arglist>(iImage *source)</arglist>
    </member>
    <member kind="function">
      <name>csImageMemory</name>
      <anchor>a178d643df48667f30f266e57a278673</anchor>
      <arglist>(iImage *source, int newFormat)</arglist>
    </member>
    <member kind="function">
      <name>AllocImage</name>
      <anchor>6f47b25b0d1255973e73b3f9e98776eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ApplyKeyColor</name>
      <anchor>04dac16891c1aace0177b49da0831f61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CheckAlpha</name>
      <anchor>e2ea3219ce32aa79f12e4e5f9fdcd836</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>a6b4a6764b8e26f756a6215b7a119e6f</anchor>
      <arglist>(const csRGBpixel &amp;colour)</arglist>
    </member>
    <member kind="function">
      <name>ClearKeyColor</name>
      <anchor>7f275eba09445db90755268b26aaba36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ConvertFromPal8</name>
      <anchor>9c0af2658e099b8ee77e44c3e82957b7</anchor>
      <arglist>(uint8 *iImage, uint8 *alpha, const csRGBcolor *iPalette, int nPalColors=256)</arglist>
    </member>
    <member kind="function">
      <name>ConvertFromPal8</name>
      <anchor>0e9ddd476e7d0b11e6534e816a6471bb</anchor>
      <arglist>(uint8 *iImage, uint8 *alpha, csRGBpixel *iPalette, int nPalColors=256)</arglist>
    </member>
    <member kind="function">
      <name>ConvertFromRGBA</name>
      <anchor>b19aa3b8fab76128f61eed2facf386d6</anchor>
      <arglist>(csRGBpixel *iImage)</arglist>
    </member>
    <member kind="function">
      <name>Copy</name>
      <anchor>b10e64493f06406d0491eb36a7a7b400</anchor>
      <arglist>(iImage *srcImage, int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>CopyScale</name>
      <anchor>5ca4c758ad1a006618fc5771e8f858e9</anchor>
      <arglist>(iImage *srcImage, int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>CopyTile</name>
      <anchor>75da373784c2a91d73da0f8193c31bef</anchor>
      <arglist>(iImage *srcImage, int x, int y, int width, int height)</arglist>
    </member>
    <member kind="function">
      <name>EnsureImage</name>
      <anchor>81340987e6ae88ebcad2dd4ff69ee7c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FreeImage</name>
      <anchor>5401d557b31ab8efc36e431f80d857a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>792c385b2e95334f99e2bf0c4f9d73e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlphaPtr</name>
      <anchor>9646bf443e67279e6caf424ff6c97061</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDepth</name>
      <anchor>1d0a156069b7eaa44abecd5c96774ec8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>c028edc605d3badec020c952e8368dc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>d61754c0e0af35591d725e08a5e72b83</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>ad1819c50cc745d90b45e513a59bdb9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetImagePtr</name>
      <anchor>58aa18774e821efe4873462800c6d5cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetImageType</name>
      <anchor>aa59a1047cdd54de633a79accfca7bc5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>4599b6db9460da15d5f04be8a5fe9ee3</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const </arglist>
    </member>
    <member kind="function">
      <name>GetMipmap</name>
      <anchor>a1c6e2410cea2aa451d0f6e7dd0a02ba</anchor>
      <arglist>(uint num)</arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>678bb2fa71f077c58d30640890ad7b8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPalettePtr</name>
      <anchor>5f22433b9c886da004fb0f40db441a90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>f4f7ac725ac7de173b05ba9b64cf7be2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>3ac872e07d79054d064495b428669dcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasMipmaps</name>
      <anchor>556b083728f0a01ebded70e20c137e5b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SetDimensions</name>
      <anchor>f83a38e474bc96ff8c4c12c95eb7dcb2</anchor>
      <arglist>(int newWidth, int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>SetFormat</name>
      <anchor>92e0decf253e0f2a2461ebc461a0400d</anchor>
      <arglist>(int iFormat)</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>98dfb5ddc11fce88fe67fbacce67331c</anchor>
      <arglist>(int r, int g, int b)</arglist>
    </member>
    <member kind="function">
      <name>SetMipmap</name>
      <anchor>b43fe5b3a31798925bb9d7fd1eda9f1c</anchor>
      <arglist>(uint num, iImage *mip)</arglist>
    </member>
    <member kind="function">
      <name>Alpha</name>
      <anchor>9979218f2a691ff36cba4d97d62c036d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Depth</name>
      <anchor>c67fbce54b8e730054de6c8c10e237f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>destroy_image</name>
      <anchor>22e40494a158c8e86e58ff9c0de20499</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>26d6970ed3aead8041541b79dd4fceb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>has_keycolour</name>
      <anchor>b8f33633a3b616cafa2e4b3c3cc30ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>57e394f49c5ff61e51213ad237080076</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Image</name>
      <anchor>afac4106aa023e63517930a88884f0d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>imageType</name>
      <anchor>6d11c9f42b9d6e418fffa7ff4c4ea2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>keycolour</name>
      <anchor>b99f16a832ce81a6f6a9fa5910a1a832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mipmaps</name>
      <anchor>8980c55d0d30d32464e58ad670e6b9da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Palette</name>
      <anchor>ffa2f27da71b0b5cef79beca7cb2932f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>2c424ba4d7f434605e91a39baf20a4b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageTools</name>
    <filename>classcsImageTools.html</filename>
    <member kind="function">
      <name>ClosestPaletteIndex</name>
      <anchor>0cc65872b2e4d8951364a41185ce9c5d</anchor>
      <arglist>(const csRGBpixel *Palette, const csRGBpixel &amp;iColor, int palEntries=256)</arglist>
    </member>
    <member kind="function">
      <name>ComputeDataSize</name>
      <anchor>80dbdf96145b6159e3b1aebe70c6b724</anchor>
      <arglist>(iImage *img)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageVolumeMaker</name>
    <base>scfImplementationExt0&lt; csImageVolumeMaker</base>
    <base> csImageBase &gt;</base>
    <filename>classcsImageVolumeMaker.html</filename>
    <member kind="function">
      <name>csImageVolumeMaker</name>
      <anchor>0a642a07da789eed0ca2ea5608543404</anchor>
      <arglist>(int format=-1, int width=-1, int height=-1)</arglist>
    </member>
    <member kind="function">
      <name>csImageVolumeMaker</name>
      <anchor>072f08caac7add2b0a1bffd7789cb626</anchor>
      <arglist>(iImage *source)</arglist>
    </member>
    <member kind="function">
      <name>AppendPending</name>
      <anchor>013963f218a36f33fee355d1423c52c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>2f88437dcfb8c4a8a61221b102a640f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDepth</name>
      <anchor>c9864e6490c49cb9af3e4640fb7e54e6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>a42e5883f270705815666c3e444910de</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>c534fd025a3a75eb984952089dc5d3af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>e192e3a1098a32850de0c55f19deb7dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetImageType</name>
      <anchor>b8be733ec0bdaa934131e00c2afb46c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>86fc346978d9f30e4215572be8ba9ded</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>c100fc1164081bf1a6606cc6d0e48734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>b0c93563968e5e6994a25e8f3774e421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRawFormat</name>
      <anchor>ac94b127bbcae3ffa4b3f57c4fa1c22c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>0461e3b10f6f8ba1f1c4764ab8b9e494</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>016226a450fd922377beaadc22975fc0</anchor>
      <arglist>(const char *iName)</arglist>
    </member>
    <member kind="function">
      <name>alpha</name>
      <anchor>8cde2f473cf82c64262a7a23bddae455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>beb7366a3b8b416b5cf15b9dce43f1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Depth</name>
      <anchor>db0d7f9d04b25b0a957de0dc61b103c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>2782ba64808d656e68fca54dddd0f0b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>d302f2049847e7bea00574dcad91b5f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>manualName</name>
      <anchor>08aaed75878ad8407007915e54afd5b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>palette</name>
      <anchor>d789e2fe0a4e20001c975cca9ab7fd28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pendingImages</name>
      <anchor>6461292e62adfef4e969416c63b199db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>deb644840a5e36cc5ba12d35279dbe54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInitializer</name>
    <filename>classcsInitializer.html</filename>
    <member kind="function">
      <name>CloseApplication</name>
      <anchor>7a0a6109c1b81c62f6a8a5403b37eee6</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateCommandLineParser</name>
      <anchor>365fcdf91251bf194a79d0f7efd30476</anchor>
      <arglist>(iObjectRegistry *, int argc, char const *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>CreateConfigManager</name>
      <anchor>21395917eb5bddf75bc91d9c94b5b8c2</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateEnvironment</name>
      <anchor>61494a85e1807c790070d36f5a055f10</anchor>
      <arglist>(int argc, char const *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>CreateEventQueue</name>
      <anchor>27186a56f0c404dfd3885cb923ea8f83</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateInputDrivers</name>
      <anchor>3c3ab90760545b22e27b3d04d0c229dd</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateObjectRegistry</name>
      <anchor>92a16794e9daa943a075d8b583ea77a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CreatePluginManager</name>
      <anchor>abf9802ed5ffa9cc5901d1e931dd14d6</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateStringSet</name>
      <anchor>25466bd8c4b25ce886621caf97f1e49d</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateVerbosityManager</name>
      <anchor>3c69bf9937b54c628e006c63b058e10e</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>CreateVirtualClock</name>
      <anchor>f901f656488eb514e42b8d8e9d675a64</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>DestroyApplication</name>
      <anchor>20e8aa3c7ab8c1070dc77e8423927359</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultAppID</name>
      <anchor>80223ebc212454ae268702c2bf9ba740</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitializeSCF</name>
      <anchor>fb85ed03752868412b665b06a52d7a41</anchor>
      <arglist>(int argc, char const *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>OpenApplication</name>
      <anchor>62d7b06d7b0b8192496a8a743584c603</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>RequestPlugins</name>
      <anchor>ac312400175a74917984bc78038a234b</anchor>
      <arglist>(iObjectRegistry *, csArray&lt; csPluginRequest &gt; const &amp;)</arglist>
    </member>
    <member kind="function">
      <name>RequestPlugins</name>
      <anchor>c10c1d14d78a7bbbd4f6c12caa1d4320</anchor>
      <arglist>(iObjectRegistry *,...)</arglist>
    </member>
    <member kind="function">
      <name>RequestPluginsV</name>
      <anchor>e64ac4d29aaa8d244439161798ebfc25</anchor>
      <arglist>(iObjectRegistry *, va_list)</arglist>
    </member>
    <member kind="function">
      <name>SetupConfigManager</name>
      <anchor>da15289ee6d9e60d10291026ec73f84c</anchor>
      <arglist>(iObjectRegistry *, const char *configName, const char *ApplicationID=0)</arglist>
    </member>
    <member kind="function">
      <name>SetupEventHandler</name>
      <anchor>fb00dbc9af36eaeb5a536aca89679ad4</anchor>
      <arglist>(iObjectRegistry *, csEventHandlerFunc)</arglist>
    </member>
    <member kind="function">
      <name>SetupEventHandler</name>
      <anchor>4327f1348b68f6de226528de02b4ed5e</anchor>
      <arglist>(iObjectRegistry *, csEventHandlerFunc, const csEventID events[])</arglist>
    </member>
    <member kind="function">
      <name>SetupEventHandler</name>
      <anchor>f3e61907586204cc1c5d844ec3d0ea7a</anchor>
      <arglist>(iObjectRegistry *, iEventHandler *, const csEventID[])</arglist>
    </member>
    <member kind="function">
      <name>SetupVFS</name>
      <anchor>3d2354f35277cccf3da3714a291cd2f4</anchor>
      <arglist>(iObjectRegistry *objectReg, const char *pluginID=&quot;crystalspace.kernel.vfs&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInputBinder</name>
    <base>scfImplementation2&lt; csInputBinder</base>
    <base> iInputBinder</base>
    <base> iEventHandler &gt;</base>
    <filename>classcsInputBinder.html</filename>
    <member kind="function">
      <name>csInputBinder</name>
      <anchor>63fd0ade996f5d3917e87e33b3259322</anchor>
      <arglist>(iObjectRegistry *, iBase *parent=0, int btnSize=127, int axisSize=13)</arglist>
    </member>
    <member kind="function">
      <name>Axis</name>
      <anchor>7e96c7d5a76531b056026ef9624f6a47</anchor>
      <arglist>(unsigned cmd)</arglist>
    </member>
    <member kind="function">
      <name>BindAxis</name>
      <anchor>f8a79f3996e5c12ea14fdf88cd65dcc0</anchor>
      <arglist>(csInputDefinition const &amp;def, unsigned int cmd, int sensitivity=1)</arglist>
    </member>
    <member kind="function">
      <name>BindButton</name>
      <anchor>ed7dd149f5614e7cb6745cb857c14334</anchor>
      <arglist>(csInputDefinition const &amp;def, unsigned int cmd, bool toggle=false)</arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>51c93c254f5f5b3bc9006b52a8610d5d</anchor>
      <arglist>(unsigned cmd)</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>b92889788b062c6ea8f3f14d7aebe6f3</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>LoadConfig</name>
      <anchor>58910c350b567bd011a7e0cdc01a6ea0</anchor>
      <arglist>(iConfigFile *, const char *subsection)</arglist>
    </member>
    <member kind="function">
      <name>QueryHandler</name>
      <anchor>ea9c59b1df9fb94c1b52e98fedb96e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SaveConfig</name>
      <anchor>192b715a852fbb3e7d06948a6ce07e48</anchor>
      <arglist>(iConfigFile *, const char *subsection)</arglist>
    </member>
    <member kind="function">
      <name>UnbindAll</name>
      <anchor>2f0a8d8467c78d3c87663531beb064a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnbindAxis</name>
      <anchor>95923955df63e1141b51ad3fe3952b6c</anchor>
      <arglist>(unsigned cmd)</arglist>
    </member>
    <member kind="function">
      <name>UnbindButton</name>
      <anchor>b8476dfeef69506278d41aa1fab84686</anchor>
      <arglist>(unsigned cmd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInputDefinition</name>
    <filename>classcsInputDefinition.html</filename>
    <member kind="function">
      <name>name_reg</name>
      <anchor>92970f4aff0639b6c6aaa60b1ff94000</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>containedName</name>
      <anchor>4eec8d356d031ed2673b30f6a2e48221</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>deviceNumber</name>
      <anchor>dd58852c1db4a3dbc1a49515404f34e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>modifiers</name>
      <anchor>1ff3fdb7c99850a6184ba45a16715134</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>modifiersHonored</name>
      <anchor>aa59f6a56e177e3aff175490379d0570</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>code</name>
      <anchor>9db4b4c1dac1aeab49383a37777b46e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isCooked</name>
      <anchor>ba6e52d1efc4d6176a635c0d32109580</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>joystickAxis</name>
      <anchor>049b5183ef18cdfdd1c121d6f65cb4f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>joystickButton</name>
      <anchor>ed379594aed5122620591816f6ff4782</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mouseAxis</name>
      <anchor>057b3e1875a16c361b18530852cc1c6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mouseButton</name>
      <anchor>1c13e364f08301425f998496bb51378e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csInputBinder</name>
      <anchor>e8470ff8b7c40e0bef64bcc4291043dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csInputDefinition</name>
      <anchor>a5081a8058fd359896fc15a4a04e6733</anchor>
      <arglist>(iEventNameRegistry *name_reg, uint32 honorModifiers=0, bool useCookedCode=false)</arglist>
    </member>
    <member kind="function">
      <name>csInputDefinition</name>
      <anchor>89004f1538c614b35d4be1ac314038ee</anchor>
      <arglist>(const csInputDefinition &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csInputDefinition</name>
      <anchor>6ecb146aa68a2191891cd21a8ccf0ebc</anchor>
      <arglist>(iEventNameRegistry *name_reg, iEvent *event, uint32 honorModifiers=0, bool useCookedCode=false)</arglist>
    </member>
    <member kind="function">
      <name>csInputDefinition</name>
      <anchor>d2503133f960e1aa6be843f13f7d5cb7</anchor>
      <arglist>(iEventNameRegistry *name_reg, iEvent *event, uint8 axis)</arglist>
    </member>
    <member kind="function">
      <name>csInputDefinition</name>
      <anchor>e7d5a95d559ce0fcec62e7c47d38b955</anchor>
      <arglist>(iEventNameRegistry *name_reg, const char *string, uint32 honorModifiers=0, bool useCookedCode=false)</arglist>
    </member>
    <member kind="function">
      <name>Compare</name>
      <anchor>5edd91c2fdf91e3879c0e0b72067acff</anchor>
      <arglist>(csInputDefinition const &amp;) const </arglist>
    </member>
    <member kind="function">
      <name>ComputeHash</name>
      <anchor>4953f1f757a0dbc759e24d377a8dc5a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDeviceNumber</name>
      <anchor>590cb1a6209b79664176da8e9a6291b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyCode</name>
      <anchor>908d40dd2341064d33230ac3ceb61fbd</anchor>
      <arglist>(utf32_char &amp;code, bool &amp;isCooked) const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyString</name>
      <anchor>b7a1f3acb6a4c77173c1813eb0986386</anchor>
      <arglist>(iEventNameRegistry *reg, utf32_char code, const csKeyModifiers *mods, bool distinguishModifiers=true)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>dda703bd70b80b23151db79d1216f6a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>7dec1d9733513ecc084ab10a943a2f29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetNumber</name>
      <anchor>6627a258f1fd966254b9c36e965052b5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetOtherString</name>
      <anchor>9503849171a06b8aaecde2248856eca0</anchor>
      <arglist>(iEventNameRegistry *reg, csEventID type, uint device, int num, const csKeyModifiers *mods, bool distinguishModifiers=true)</arglist>
    </member>
    <member kind="function">
      <name>IsValid</name>
      <anchor>315a62348a4f0e93cbe5d11096babe96</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ParseKey</name>
      <anchor>a77a2a390dad32d004783c085b17c8b1</anchor>
      <arglist>(iEventNameRegistry *reg, const char *iStr, utf32_char *oKeyCode, utf32_char *oCookedCode, csKeyModifiers *oModifiers)</arglist>
    </member>
    <member kind="function">
      <name>ParseOther</name>
      <anchor>0bfcc01c3c324685d940ae873b2121fe</anchor>
      <arglist>(iEventNameRegistry *reg, const char *iStr, csEventID *oType, uint *oDevice, int *oNumeric, csKeyModifiers *oModifiers)</arglist>
    </member>
    <member kind="function">
      <name>SetKeyCode</name>
      <anchor>73b0b6e735842d0a252d165ddc2a927c</anchor>
      <arglist>(utf32_char code)</arglist>
    </member>
    <member kind="function">
      <name>SetModifiers</name>
      <anchor>a266244583a8c8208267fadfe82056a0</anchor>
      <arglist>(const csKeyModifiers &amp;mods)</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>90c4736317c202d1fae549f78c42972c</anchor>
      <arglist>(csEventID n)</arglist>
    </member>
    <member kind="function">
      <name>SetNumber</name>
      <anchor>51f1eee87159cb3738100c506c3950c0</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>ToString</name>
      <anchor>4cd4d4fd7bc968e50d1899b93d5f41d8</anchor>
      <arglist>(bool distinguishModifiers=true) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInputDriver</name>
    <filename>classcsInputDriver.html</filename>
    <member kind="function">
      <name>FocusChanged</name>
      <anchor>4f05f2425e0c3ae6cf7ed7b7afe052d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FocusGained</name>
      <anchor>8a9638f6156d279a2395f2a1c1895817</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FocusLost</name>
      <anchor>7d185e50605b19a93b4fc774ee47fb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Listener</name>
      <anchor>b4afcd223a08d94e77a6e3e4f4d83eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>NameRegistry</name>
      <anchor>bcad35f9bdc9c824755b1710c7646f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Registry</name>
      <anchor>bb7a6bffe319b65f64e7be50e53ac1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FocusListener</name>
      <anchor>f64ebb823590dd65ab6d57a7d7923b15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInputEventHelper</name>
    <filename>classcsInputEventHelper.html</filename>
    <member kind="function">
      <name>GetButton</name>
      <anchor>794dd676ba79db899fca7e91f0e452c7</anchor>
      <arglist>(iEventNameRegistry *, const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetButtonState</name>
      <anchor>c49c48792d109c07c25691c7c84f53d5</anchor>
      <arglist>(iEventNameRegistry *, const iEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInstallationPathsHelper</name>
    <filename>classcsInstallationPathsHelper.html</filename>
    <member kind="function">
      <name>FindSystemRoots</name>
      <anchor>8c0253deab2b0cbc5067cf01f632febb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAppDir</name>
      <anchor>41065f68bfc0799e4511194510609001</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>GetAppFilename</name>
      <anchor>097a0ef04fb4c4143542127d9951878a</anchor>
      <arglist>(const char *basename)</arglist>
    </member>
    <member kind="function">
      <name>GetAppPath</name>
      <anchor>f4822a50a2c13ebaa666923f5b4bb903</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>GetPlatformInstallationPaths</name>
      <anchor>401c6f50340948d17d5886c17eaffae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPluginPaths</name>
      <anchor>0ddc0f46489f8f49607d7bafdda8e6b4</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>GetResourceDir</name>
      <anchor>059d5c0c6d44e5915162f30e19cfdf40</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csIntersect2</name>
    <filename>classcsIntersect2.html</filename>
    <member kind="function">
      <name>LineLine</name>
      <anchor>ce13424633f87df996bc7d76c77cd850</anchor>
      <arglist>(const csSegment2 &amp;a, const csSegment2 &amp;b, csVector2 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>PlanePlane</name>
      <anchor>0fee70f518c0027ad44a12a44483e739</anchor>
      <arglist>(const csPlane2 &amp;p1, const csPlane2 &amp;p2, csVector2 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>PlanePolygon</name>
      <anchor>b2a0cdf977f7a5c6ebbcbb069b5a2a7e</anchor>
      <arglist>(const csPlane2 &amp;plane, csPoly2D *poly, csSegment2 &amp;segment)</arglist>
    </member>
    <member kind="function">
      <name>SegmentLine</name>
      <anchor>0968b3d1883f64b197156f6187d15078</anchor>
      <arglist>(const csSegment2 &amp;a, const csSegment2 &amp;b, csVector2 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlane</name>
      <anchor>8c907a73a81a26841f44506d25bc6286</anchor>
      <arglist>(const csSegment2 &amp;uv, const csPlane2 &amp;p, csVector2 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlane</name>
      <anchor>59a85913e47e613eb67b015d0212b76b</anchor>
      <arglist>(const csVector2 &amp;u, const csVector2 &amp;v, const csPlane2 &amp;p, csVector2 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlaneNoTest</name>
      <anchor>d5e18360d18f78f69e5a946004ff8d84</anchor>
      <arglist>(const csSegment2 &amp;uv, const csPlane2 &amp;p, csVector2 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlaneNoTest</name>
      <anchor>c00ec2f4d2bdba0deef4ce3e5dfc6b34</anchor>
      <arglist>(const csVector2 &amp;u, const csVector2 &amp;v, const csPlane2 &amp;p, csVector2 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentSegment</name>
      <anchor>96c1af2f96b5451f3d8a2637107ee3a3</anchor>
      <arglist>(const csSegment2 &amp;a, const csSegment2 &amp;b, csVector2 &amp;isect, float &amp;dist)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csIntersect3</name>
    <filename>classcsIntersect3.html</filename>
    <member kind="function">
      <name>BoxBox</name>
      <anchor>f10fb75c5164ef7175cae5328f93db25</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2)</arglist>
    </member>
    <member kind="function">
      <name>BoxFrustum</name>
      <anchor>f01d6264cdc76fcf1c12d75a80c20795</anchor>
      <arglist>(const csBox3 &amp;box, const csFrustum *frustum)</arglist>
    </member>
    <member kind="function">
      <name>BoxFrustum</name>
      <anchor>cc90335f3a99f7f1d1109d13a3187441</anchor>
      <arglist>(const csBox3 &amp;box, csPlane3 *frustum, uint32 inClipMask, uint32 &amp;outClipMask)</arglist>
    </member>
    <member kind="function">
      <name>BoxPlane</name>
      <anchor>194be1770296fc1caebffc2bcf15ba15</anchor>
      <arglist>(const csBox3 &amp;box, const csVector3 &amp;normal, const csVector3 &amp;vert)</arglist>
    </member>
    <member kind="function">
      <name>BoxPlane</name>
      <anchor>e5637b6dcb689b02db206d70ac4b3f33</anchor>
      <arglist>(const csBox3 &amp;box, const csPlane3 &amp;plane)</arglist>
    </member>
    <member kind="function">
      <name>BoxSegment</name>
      <anchor>920a307d3ac8bdf067038a51f0e8aa62</anchor>
      <arglist>(const csBox3 &amp;box, const csSegment3 &amp;segment, csVector3 &amp;isect, float *pr=0)</arglist>
    </member>
    <member kind="function">
      <name>BoxSphere</name>
      <anchor>e0c597848692eff150cb10d0a99ff100</anchor>
      <arglist>(const csBox3 &amp;box, const csVector3 &amp;center, float sqradius)</arglist>
    </member>
    <member kind="function">
      <name>BoxTriangle</name>
      <anchor>42580089f4dd36283491764378e4bdfb</anchor>
      <arglist>(const csBox3 &amp;box, const csVector3 &amp;tri0, const csVector3 &amp;tri1, const csVector3 &amp;tri2)</arglist>
    </member>
    <member kind="function">
      <name>FrustumFrustum</name>
      <anchor>16e0180d263c349705d0acd46ca7a9be</anchor>
      <arglist>(const csFrustum &amp;f1, csVector3 *poly, int num)</arglist>
    </member>
    <member kind="function">
      <name>FrustumFrustum</name>
      <anchor>6defc3e0c1bf9e72cfad5bbf7ff3d4d2</anchor>
      <arglist>(const csFrustum &amp;f1, const csFrustum &amp;f2)</arglist>
    </member>
    <member kind="function">
      <name>PlaneAxisPlane</name>
      <anchor>5e45702fc163866028087e8c0b9d5b4b</anchor>
      <arglist>(const csPlane3 &amp;p1, int nr, float pos, csPlane2 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>PlanePolygon</name>
      <anchor>4e25b86169c5d681cdb7d72687c6ca45</anchor>
      <arglist>(const csPlane3 &amp;plane, csPoly3D *poly, csSegment3 &amp;segment)</arglist>
    </member>
    <member kind="function">
      <name>PlaneXPlane</name>
      <anchor>d9d91c296374f879c7ff651eef0e216a</anchor>
      <arglist>(const csPlane3 &amp;p1, float x2, csPlane2 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>PlaneYPlane</name>
      <anchor>c026a3b9d4e28996be8239d0eaa1842c</anchor>
      <arglist>(const csPlane3 &amp;p1, float y2, csPlane2 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>PlaneZPlane</name>
      <anchor>680bc04fe747858afeda22e91148151d</anchor>
      <arglist>(const csPlane3 &amp;p1, float z2, csPlane2 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentAxisPlane</name>
      <anchor>7fa41e32e8c144012e3372aa356a0800</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, int nr, float pos, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentFrustum</name>
      <anchor>b7126bd77fc8677cd00919c5090d834f</anchor>
      <arglist>(csPlane3 *planes, int num_planes, csSegment3 &amp;seg)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlane</name>
      <anchor>aa4e9e87a3876dbe5aaa1fbb51d21f5b</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, const csPlane3 &amp;p, csVector3 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlane</name>
      <anchor>5493bea94d961ab66d46f457ea0cc0f9</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, const csVector3 &amp;normal, const csVector3 &amp;a, csVector3 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPlanes</name>
      <anchor>639413ff56d57ab2a50eec7794180246</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, const csPlane3 *planes, int length, csVector3 &amp;isect, float &amp;dist)</arglist>
    </member>
    <member kind="function">
      <name>SegmentPolygon</name>
      <anchor>d78cd200be6acea7de89f2c1cd13062c</anchor>
      <arglist>(const csSegment3 &amp;seg, const csPoly3D &amp;poly, const csPlane3 &amp;poly_plane, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentTriangle</name>
      <anchor>6f84c51c7dea91f6c76636c8513de621</anchor>
      <arglist>(const csSegment3 &amp;seg, const csVector3 &amp;tr1, const csVector3 &amp;tr2, const csVector3 &amp;tr3, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentXFrustum</name>
      <anchor>b7b70e43effc9647fef4446b8c983531</anchor>
      <arglist>(const csSegment3 &amp;uv, float A, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentXFrustum</name>
      <anchor>945732c717b904c9cdca086592681701</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, float A, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentXPlane</name>
      <anchor>68aefd80a7185b18965c75c4fa52fb01</anchor>
      <arglist>(const csSegment3 &amp;uv, float xval, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentXPlane</name>
      <anchor>77529bc66845219e96343b81258db88e</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, float xval, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentYFrustum</name>
      <anchor>7e7cd20eae21dc0a52c54e56be7c174e</anchor>
      <arglist>(const csSegment3 &amp;uv, float B, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentYFrustum</name>
      <anchor>922d300e6be6e367dcd9129c4a3d9384</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, float B, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentYPlane</name>
      <anchor>e33c06af209a45995be8a47cf6afb77c</anchor>
      <arglist>(const csSegment3 &amp;uv, float yval, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentYPlane</name>
      <anchor>8936c904a78f6ac1799bae071335e357</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, float yval, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentZ0Plane</name>
      <anchor>1696d1fa6ba52133f3e603633aebb67f</anchor>
      <arglist>(const csSegment3 &amp;uv, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentZ0Plane</name>
      <anchor>b0ba0c02374dfa6ac0da06dd15707c8e</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentZPlane</name>
      <anchor>b93cdb51a4501bc0814e8def7252eb1c</anchor>
      <arglist>(const csSegment3 &amp;uv, float zval, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>SegmentZPlane</name>
      <anchor>557623434977b1efcd4f17170d677cc0</anchor>
      <arglist>(const csVector3 &amp;u, const csVector3 &amp;v, float zval, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>ThreePlanes</name>
      <anchor>5d8a0400729d5f824ae1b036ae495642</anchor>
      <arglist>(const csPlane3 &amp;p1, const csPlane3 &amp;p2, const csPlane3 &amp;p3, csVector3 &amp;isect)</arglist>
    </member>
    <member kind="function">
      <name>TriangleTriangle</name>
      <anchor>566b58256a1a6aeb9ff8fd4dd1d9c4fb</anchor>
      <arglist>(const csVector3 tri1[3], const csVector3 tri2[3], csSegment3 &amp;isectline, bool &amp;coplanar)</arglist>
    </member>
    <member kind="function">
      <name>TriangleTriangle</name>
      <anchor>9709673ed83dbba251daca933be68a57</anchor>
      <arglist>(const csVector3 tri1[3], const csVector3 tri2[3])</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csJoystickDriver</name>
    <base>csInputDriver</base>
    <base>scfImplementation2&lt; csJoystickDriver</base>
    <base> iJoystickDriver</base>
    <base> iEventHandler &gt;</base>
    <filename>classcsJoystickDriver.html</filename>
    <member kind="function">
      <name>GainFocus</name>
      <anchor>c35c3091e9f05d3ef421495dab00e53b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>87783151aa0993c04ac1a4ffbf108564</anchor>
      <arglist>(iEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>Axes</name>
      <anchor>389b660735c7b97bb7abb0892b40f736</anchor>
      <arglist>[CS_MAX_JOYSTICK_COUNT]</arglist>
    </member>
    <member kind="function">
      <name>csJoystickDriver</name>
      <anchor>b2bb21218f05a2a2931e53ebfb25c63c</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>~csJoystickDriver</name>
      <anchor>836756a5a8f716097c9b760f9836e4b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DoButton</name>
      <anchor>24a9a5192a095aac4d40c90cec9a84e5</anchor>
      <arglist>(uint number, int button, bool down, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>DoMotion</name>
      <anchor>4aa22e64513af06818bfe9a5cdea9815</anchor>
      <arglist>(uint number, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>GetKeyboardDriver</name>
      <anchor>99bf3257a893084854bd51f4d6dddefa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>58025d87ddfa39daece3b1bafcdcc9f5</anchor>
      <arglist>(uint number, uint axis) const </arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>ceeea898ab3a53d7c30a12b89b8923d3</anchor>
      <arglist>(uint number) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastButton</name>
      <anchor>ab83764f5d6c3f59f80beca5962a3af2</anchor>
      <arglist>(uint number, int button) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastX</name>
      <anchor>d0a2ebd13aa36d7220f779d8fc14db8c</anchor>
      <arglist>(uint number) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastY</name>
      <anchor>aece06256ecfcf3857d5f5eed7570052</anchor>
      <arglist>(uint number) const </arglist>
    </member>
    <member kind="function">
      <name>LostFocus</name>
      <anchor>fdc154ce84dbdbfb8b7d380d9186875c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>5fc1c8a324e0895e815c537c1e803bba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>76be5be131476b8b03b955fa37d5a017</anchor>
      <arglist>[CS_MAX_JOYSTICK_COUNT][CS_MAX_JOYSTICK_BUTTONS]</arglist>
    </member>
    <member kind="function">
      <name>Last</name>
      <anchor>4d925d7142157c8c095100c5bdfa8411</anchor>
      <arglist>[CS_MAX_JOYSTICK_COUNT][CS_MAX_JOYSTICK_AXES]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csJoystickEventHelper</name>
    <filename>classcsJoystickEventHelper.html</filename>
    <member kind="function">
      <name>GetAxis</name>
      <anchor>1f33ce7bb98478d0d68c1a818d768a40</anchor>
      <arglist>(const iEvent *event, uint)</arglist>
    </member>
    <member kind="function">
      <name>GetButton</name>
      <anchor>4f6ea09e8ae0ce385cfcb64a3bfa4494</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetButtonMask</name>
      <anchor>076109c6582331cb9a34aa9492ef503c</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetButtonState</name>
      <anchor>e12a7ffaa0d2b0dc6692aae781ed3e3d</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetEventData</name>
      <anchor>73d1a48cec674eeba81426eff8f5cc62</anchor>
      <arglist>(const iEvent *event, csJoystickEventData &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>f9f3bf47bef01aad8f7def8a3a106531</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>c06c2fe68519adf1a0c8bea5aac860c4</anchor>
      <arglist>(const iEvent *event, csKeyModifiers &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>GetNumAxes</name>
      <anchor>55d5e2c1f3f4fa5956f8cc19ce26c26c</anchor>
      <arglist>(const iEvent *)</arglist>
    </member>
    <member kind="function">
      <name>GetNumber</name>
      <anchor>056b9b1b34c12d8149b1c0274b1dedbd</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetX</name>
      <anchor>33a6b92fa8215c1385b1bf70703dd1dc</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetY</name>
      <anchor>db69628369d8dca7127153834211488e</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>NewEvent</name>
      <anchor>35e601bd26f7cb99bf3abb0f8a78c694</anchor>
      <arglist>(csRef&lt; iEventNameRegistry &gt; &amp;reg, csTicks, csEventID name, int n, int x, int y, uint32 axesChanged, uint button, bool buttonState, uint32 buttonMask, uint32 modifiers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKDTree</name>
    <base>scfImplementation1&lt; csKDTree</base>
    <base> iDebugHelper &gt;</base>
    <filename>classcsKDTree.html</filename>
    <member kind="function">
      <name>descriptor</name>
      <anchor>07db363957b8de353a0579bc9586191f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKDTree</name>
      <anchor>80c7edecba2ebf6acff61a35448855ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csKDTree</name>
      <anchor>b00177d627556c2f74198181f2785c4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddObject</name>
      <anchor>3be15758430b4d89834dff8a0abb23a1</anchor>
      <arglist>(const csBox3 &amp;bbox, void *object)</arglist>
    </member>
    <member kind="function">
      <name>Benchmark</name>
      <anchor>3e9b0ec3f292e61ad2eeb25a7d5c6054</anchor>
      <arglist>(int num_iterations)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>9ea3338e7af0c395a39f0397c6a188e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DebugCommand</name>
      <anchor>aebffde40199efca8acd9d785e75cd0f</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>Distribute</name>
      <anchor>9a63c52048b778cdcc32bfa6dae8a312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>713cb0e510c875003221d3a780f4c237</anchor>
      <arglist>(iGraphics3D *)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>2891fcb30d19fd8cf56c4707b5569677</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Flatten</name>
      <anchor>5e1a7902a5f4f8eb1f1cf3f7e5d61ed8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Front2Back</name>
      <anchor>d134123d2de69a67fd1151e5114bc456</anchor>
      <arglist>(const csVector3 &amp;pos, csKDTreeVisitFunc *func, void *userdata, uint32 frustum_mask)</arglist>
    </member>
    <member kind="function">
      <name>FullDistribute</name>
      <anchor>2149b44be3c92151741641a695ed2ba8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetChild1</name>
      <anchor>835938f73dbe5613e108ab325b363083</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetChild2</name>
      <anchor>4e3630f290bfc3392f82f255111f9224</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetEstimatedObjectCount</name>
      <anchor>28d8d32022d45b45e45af4c6e3f3428e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetNodeBBox</name>
      <anchor>06d9333ee699cf00fb4cf8df6dbcd9d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObjectCount</name>
      <anchor>c79313b66fcac110d1d5d7241f1eebe0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObjects</name>
      <anchor>72dd0fce97684a66b62fc7308d060a34</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSupportedTests</name>
      <anchor>b2a1459a108d03e095ae26bf727c312a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetUserObject</name>
      <anchor>9d0dc7604e8f4e5030add12470cdf52d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MoveObject</name>
      <anchor>8228386cbe8671a8b1a87c560e4ad551</anchor>
      <arglist>(csKDTreeChild *object, const csBox3 &amp;new_bbox)</arglist>
    </member>
    <member kind="function">
      <name>NewTraversal</name>
      <anchor>5b0381d3836a5745216c17054357f3bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveObject</name>
      <anchor>8c52cdeb657cbe42a7352f298819a757</anchor>
      <arglist>(csKDTreeChild *object)</arglist>
    </member>
    <member kind="function">
      <name>SetObjectDescriptor</name>
      <anchor>8e208c2f5d1e42f46d6c32de1b7316c7</anchor>
      <arglist>(iKDTreeObjectDescriptor *descriptor)</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>f9410b6e8b838aa2811fbe99f82185ee</anchor>
      <arglist>(csKDTree *p)</arglist>
    </member>
    <member kind="function">
      <name>SetUserObject</name>
      <anchor>d6f0678cdf707347f4d1005c27f06e39</anchor>
      <arglist>(iKDTreeUserData *userobj)</arglist>
    </member>
    <member kind="function">
      <name>StateTest</name>
      <anchor>5e63f841e839490bc862980a3c8bc35c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TraverseRandom</name>
      <anchor>320e178bd111884d6b3bdd49013c3bb7</anchor>
      <arglist>(csKDTreeVisitFunc *func, void *userdata, uint32 frustum_mask)</arglist>
    </member>
    <member kind="function">
      <name>UnitTest</name>
      <anchor>230769cf2955c09a16f5c06a9551265a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnlinkObject</name>
      <anchor>0cba4f297830cfbdaafce2e48cbf0606</anchor>
      <arglist>(csKDTreeChild *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKDTreeChild</name>
    <filename>classcsKDTreeChild.html</filename>
    <member kind="function">
      <name>timestamp</name>
      <anchor>112a5c9a237455e2c56bb735a19eec06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKDTree</name>
      <anchor>0cc25cc70d4868629988a2ef1af4755d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddLeaf</name>
      <anchor>4c99f05ff9657bf063f9b408fe3996e6</anchor>
      <arglist>(csKDTree *leaf)</arglist>
    </member>
    <member kind="function">
      <name>FindLeaf</name>
      <anchor>ac6136baf22a79861aa4ed3e43d9ef69</anchor>
      <arglist>(csKDTree *leaf)</arglist>
    </member>
    <member kind="function">
      <name>GetBBox</name>
      <anchor>7114e623c78033c8510fb7b070a29ebe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObject</name>
      <anchor>10299bedeba8e0076675d6ae61fe7a5d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>RemoveLeaf</name>
      <anchor>24bdf7664112795c921050c3d423b2ac</anchor>
      <arglist>(csKDTree *leaf)</arglist>
    </member>
    <member kind="function">
      <name>RemoveLeaf</name>
      <anchor>dc7591feebbbe7808e04575ac3f3cd9a</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>ReplaceLeaf</name>
      <anchor>0eb530603a4eaca5b840e6ab4bc6c377</anchor>
      <arglist>(csKDTree *old_leaf, csKDTree *new_leaf)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKeyboardDriver</name>
    <base>csInputDriver</base>
    <base>scfImplementation2&lt; csKeyboardDriver</base>
    <base> iKeyboardDriver</base>
    <base> iEventHandler &gt;</base>
    <filename>classcsKeyboardDriver.html</filename>
    <member kind="function">
      <name>GainFocus</name>
      <anchor>5534f15670df4f42e5d2320d07a7f001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>ee331e78494c982e174fa8a4516e7426</anchor>
      <arglist>(iEvent &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>KeyboardDown</name>
      <anchor>56848b2df0cdc175fbb0b43154ddc8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KeyboardUp</name>
      <anchor>9ffeaf6c04b51232eedf34f521d0d5ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>keyDebug</name>
      <anchor>027128e11e5046e9f1184942931f38fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>keyDebugChecked</name>
      <anchor>0807c7a0cbeee1a315d1ff6e56a8d1e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>modifiersState</name>
      <anchor>f3d6759a22f6fa723effe39204d1aeed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyboardDriver</name>
      <anchor>f6c12e3e5f3045df3c4e7ed0a557c6f0</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>~csKeyboardDriver</name>
      <anchor>488addbcfdcf50d8af01942e82f3862f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CreateKeyComposer</name>
      <anchor>015a278792cd4497285b07092040dfd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DoKey</name>
      <anchor>27e68cb01657dd34d3a7e67f389c758d</anchor>
      <arglist>(utf32_char codeRaw, utf32_char codeCooked, bool iDown, bool autoRepeat=false, csKeyCharType charType=csKeyCharTypeNormal)</arglist>
    </member>
    <member kind="function">
      <name>GetKeyState</name>
      <anchor>caae2174c81e85bbf9583f2ce2b287e4</anchor>
      <arglist>(utf32_char codeRaw) const </arglist>
    </member>
    <member kind="function">
      <name>GetModifierState</name>
      <anchor>f16bcd780fcebecc6fda8ff2d8df5712</anchor>
      <arglist>(utf32_char codeRaw) const </arglist>
    </member>
    <member kind="function">
      <name>LostFocus</name>
      <anchor>235df4e5f03300be418e65ca5d054500</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>fe516427533b6355e2d4eb95df96dbf3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RestoreKeys</name>
      <anchor>17f6c8660fc5e25a39ce2be73ad6bb1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetKeyState</name>
      <anchor>aa3482b2aa19e170298e2b8125456288</anchor>
      <arglist>(utf32_char codeRaw, bool iDown, bool autoRepeat)</arglist>
    </member>
    <member kind="function">
      <name>SynthesizeCooked</name>
      <anchor>4c898923aaf445ab61082f45044c3055</anchor>
      <arglist>(iEvent *)</arglist>
    </member>
    <member kind="function">
      <name>SynthesizeCooked</name>
      <anchor>450c498d1b2e5d3f007bf673941e69a7</anchor>
      <arglist>(utf32_char codeRaw, const csKeyModifiers &amp;modifiers, utf32_char &amp;codeCooked)</arglist>
    </member>
    <member kind="function">
      <name>keyStates</name>
      <anchor>02a811fd246d7f502936d1585984c454</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKeyComposer</name>
    <base>scfImplementation1&lt; csKeyComposer</base>
    <base> iKeyComposer &gt;</base>
    <filename>classcsKeyComposer.html</filename>
    <member kind="function">
      <name>lastDead</name>
      <anchor>90a4b27441bd1a4b3099a6a75df5c2ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HandleKey</name>
      <anchor>a1d455fedce2948a7faea75942e1f46d</anchor>
      <arglist>(const csKeyEventData &amp;keyEventData, utf32_char *buf, size_t bufChars, int *resultChars=0)</arglist>
    </member>
    <member kind="function">
      <name>ResetState</name>
      <anchor>27925527fed791d8135ccfe9ae5dcf90</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKeyEventHelper</name>
    <filename>classcsKeyEventHelper.html</filename>
    <member kind="function">
      <name>GetAutoRepeat</name>
      <anchor>9562381ec7f0cf4599400fe736b26126</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetCharacterType</name>
      <anchor>ea1d752a1d46ace615297da40ddcb1f8</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetCookedCode</name>
      <anchor>46ab54b5a72a68712055f27f7daa60ec</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetEventData</name>
      <anchor>b29d0260db91de472dc35952ce3b98ab</anchor>
      <arglist>(const iEvent *event, csKeyEventData &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>GetEventType</name>
      <anchor>f0a4479e91ce84db173d00dc79c1c5ca</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>6a4b9e13c170271be5e2efbf07611104</anchor>
      <arglist>(uint32 mask, csKeyModifiers &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>34b0d20268575c6d02c4a09e3181e57f</anchor>
      <arglist>(const iEvent *event, csKeyModifiers &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiersBits</name>
      <anchor>62519cc33f86de65ef469987104d482f</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiersBits</name>
      <anchor>cbf0a3254b47e6c0fe1d02c9570535d7</anchor>
      <arglist>(const csKeyModifiers &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>GetRawCode</name>
      <anchor>ab0910eb825d27d749dd32049bfb9341</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKeyValuePair</name>
    <base>scfImplementationExt1&lt; csKeyValuePair</base>
    <base> csObject</base>
    <base> iKeyValuePair &gt;</base>
    <filename>classcsKeyValuePair.html</filename>
    <member kind="function">
      <name>csKeyValuePair</name>
      <anchor>000a714c29a19980f23092090ee6632c</anchor>
      <arglist>(const char *Key, const char *Value)</arglist>
    </member>
    <member kind="function">
      <name>csKeyValuePair</name>
      <anchor>7145cfb4f6385a2ea0eca13a76dd7f9c</anchor>
      <arglist>(const char *Key)</arglist>
    </member>
    <member kind="function">
      <name>~csKeyValuePair</name>
      <anchor>90538c07d6ed5eb2be2f1bf7b0f4189d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetEditorOnly</name>
      <anchor>0f893731a8f259cf0c06140572cea217</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetKey</name>
      <anchor>5a1760a1270ab9e1ff707bb99992ff77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>68ac06903648da1ed00fa55c3f5015c0</anchor>
      <arglist>(const char *vname) const </arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>e0f1fa49c25ce848aa8555816fabdc8f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetValueNames</name>
      <anchor>f5e8a2525b975f2902b9b645f0c87c65</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>8e41bf67cba182fcf1137fcb6a4f7b3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetEditorOnly</name>
      <anchor>6c86c42d15a29c606c376cd8091b926d</anchor>
      <arglist>(bool flag)</arglist>
    </member>
    <member kind="function">
      <name>SetKey</name>
      <anchor>b3c00f5a5f3edb953570b6d98831a465</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>fd5ac1e989f58a25a63b55e55b1667eb</anchor>
      <arglist>(const char *vname, const char *value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>aafac3ed0e4155e4b59719fa44aa5fec</anchor>
      <arglist>(const char *value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csLibraryReference</name>
    <base>scfImplementationExt2&lt; csLibraryReference</base>
    <base> csObject</base>
    <base> iLibraryReference</base>
    <base> iSelfDestruct &gt;</base>
    <filename>classcsLibraryReference.html</filename>
    <member kind="function">
      <name>csLibraryReference</name>
      <anchor>b06db698ffd63526bdd6279b08d3fc82</anchor>
      <arglist>(const char *file, const char *path=0, bool checkDupes=false)</arglist>
    </member>
    <member kind="function">
      <name>~csLibraryReference</name>
      <anchor>10b96a77223148b5b97bc2f3361ca5cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCheckDupes</name>
      <anchor>86aaedf941f6dac1897029f045122de2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFile</name>
      <anchor>48f90a1e56932d5525ca4c6c597d5f07</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPath</name>
      <anchor>9171e7581f1ec64e6c2e154165cdf8f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>62f14e5580310f858f07c18d2bd3e9d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SelfDestruct</name>
      <anchor>00a09adf1fa67a799c69c61b0d2cad1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csLightShaderVarCache</name>
    <filename>classcsLightShaderVarCache.html</filename>
    <member kind="function">
      <name>DefaultSV</name>
      <anchor>6c446c27a6d6b288df720adbdaa29c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>arAmbient</name>
      <anchor>6c446c27a6d6b288df720adbdaa29c3a7c8c01fbba157bbba5bbb09df1708d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>arLightCount</name>
      <anchor>6c446c27a6d6b288df720adbdaa29c3a94dc301e6f53590b0e065b7844971f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>varCount</name>
      <anchor>6c446c27a6d6b288df720adbdaa29c3a1de7a5c60603ad44a0d7d81d8aef31ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LightProperty</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightDiffuse</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14709238ed1b49834b099ee8173a26b0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightSpecular</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f146c43c0821928d5cd00bfb5161fee700a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightPosition</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f143a732fb887c0a37a1b165f7b99a7d7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightPositionCamera</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14dc45c9751b9412706fdaa257b21a9339</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightPositionWorld</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14be11ddc15abe301240f388c28ee041da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightTransformCamera</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14a8dce1c283bb84cd77f69e046936a29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightTransformWorld</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f1415ec9df2a17d1481e905c84375c925c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightAttenuation</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14806a210cc5239118693476863ac87700</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightAttenuationTex</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f1400cacb4de9c4ffb7ecd95ee7c11e324a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightDirection</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f142bab269297a155024d619b18c0d90806</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightDirectionCamera</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14cd03482a1d84baf607ac8121b4445842</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightDirectionWorld</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f143b77b1334b01cc01317e3271be643259</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightInnerFalloff</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f1490816983c9a3069d039e61f80d6f6db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightOuterFalloff</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f1474203b72905f6d2c05e5983bfd78ddbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightType</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f14df9edeb325a83b31ec59aff840f57551</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ightAttenuationMode</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f145bff9a9618e8160e16d73f6f311fecb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lightCount</name>
      <anchor>1469cb5d4a87149a2ea0ba70de230f1431d7f0ce5378ebb6d86b8ad061a69c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csLightShaderVarCache</name>
      <anchor>51f013ee750ea3c19bf553f50555689a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultSVId</name>
      <anchor>5431cae71f94e09b7feb065858dc9cde</anchor>
      <arglist>(DefaultSV var)</arglist>
    </member>
    <member kind="function">
      <name>GetLightSVId</name>
      <anchor>e0f9be818f1e7d1a2f54f53f9f633f44</anchor>
      <arglist>(size_t num, LightProperty prop)</arglist>
    </member>
    <member kind="function">
      <name>SetStrings</name>
      <anchor>e5aef5235a27c8743c70618154c5573b</anchor>
      <arglist>(iStringSet *strings)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csList</name>
    <filename>classcsList.html</filename>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>7a7b6e76147c34c1f6b8e2b3cb33167e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>9830fc407400559db7e7783cc10a9394</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csList</name>
      <anchor>25d9fb6fda739858c66e81abdf68cd9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csList</name>
      <anchor>9f984613115c6690fe2f00c74c102587</anchor>
      <arglist>(const csList&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~csList</name>
      <anchor>434daeb8a87b2cbe0f1aa9ec2129c32b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>2bc2aab0d4361b0b8229d8063a2ead9f</anchor>
      <arglist>(Iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>f499b092f84e7bb2cca0c645f9d692aa</anchor>
      <arglist>(csListElement *el)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>492cbe560e1a91585f84d49d8d1ed563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Front</name>
      <anchor>2470e0f3c9b2e5c5810ab23c13a1af98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>InsertAfter</name>
      <anchor>59555bc917d77abec07289db8f603b7d</anchor>
      <arglist>(Iterator &amp;it, const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>InsertBefore</name>
      <anchor>a6d214dbdc462282c4329c28c0a9b85c</anchor>
      <arglist>(Iterator &amp;it, const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>Last</name>
      <anchor>1ab7f69adf3b67f84c0b628586632405</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>MoveAfter</name>
      <anchor>05fcfb027e72e08573fb02e3b712e6a5</anchor>
      <arglist>(const Iterator &amp;it, const Iterator &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>MoveBefore</name>
      <anchor>2f170c7324e08ab7991c9ebe52b4a1b1</anchor>
      <arglist>(const Iterator &amp;it, const Iterator &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>d7cb8d111c68780123fefb200a30ef07</anchor>
      <arglist>(const csList&lt; T &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>PopBack</name>
      <anchor>b30369adfd70e49bf3788e32d8cce825</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PopFront</name>
      <anchor>3ba57d74ccf1ee850b343f4dcc7bd383</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PushBack</name>
      <anchor>02303fc82d290f9bf65e7c3117fd5799</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>PushFront</name>
      <anchor>c22e673fec392316de4fc3504e82f7a3</anchor>
      <arglist>(const T &amp;item)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csList::Iterator</name>
    <filename>classcsList_1_1Iterator.html</filename>
    <member kind="function">
      <name>Iterator::FetchPrev</name>
      <anchor>27b73a9c2c29636a514735f5dd3b2a50</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::Prev</name>
      <anchor>a692dce69fc5f46827c78317a66b302d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>20bab9878f45cba62bc09504e67c4c7f</anchor>
      <arglist>(csListElement *element, bool visit=true, bool rev=false)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::csList&lt; T &gt;</name>
      <anchor>a42dc8e1fd88aae2e4410d8fb7157f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>e09258ade698ae2a6bdeb8378f0eace2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>65b10a161b0a3f0df3ce77e59711f301</anchor>
      <arglist>(const Iterator &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Iterator</name>
      <anchor>cf503a919a01a74823ba98a4b48aa476</anchor>
      <arglist>(const csList&lt; T &gt; &amp;list, bool reverse=false)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Clear</name>
      <anchor>d13a2e35b77552b122b3942b2a8f0795</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::FetchCurrent</name>
      <anchor>262b213cde3c61260361b26813d08204</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::FetchNext</name>
      <anchor>d76d979bddb408a658853c431f954aec</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::FetchPrevious</name>
      <anchor>7688a397a009ba8f37f19accc47d0f67</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::HasCurrent</name>
      <anchor>5d1301d35065281aecbdf8f9347c0ad8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::HasNext</name>
      <anchor>fd95d7d380d889fb2a66247e8b1b15c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::HasPrevious</name>
      <anchor>2ed3bdb58f713e8937d049562caddfb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::IsFirst</name>
      <anchor>35bc8483f634490e7358211598f339e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::IsLast</name>
      <anchor>a76e547d9f62c3842b433b93d983c0cb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::IsReverse</name>
      <anchor>5bb0d4f32711fc30b4946d3fab7d2fd3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::Next</name>
      <anchor>5071ae5c107bf8463fd754343990e050</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator *</name>
      <anchor>fb69008dee36b44ef2cfae40bef6618c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator T *</name>
      <anchor>88a8947f489cbbf3e2006a2126c36e88</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator++</name>
      <anchor>83f0ba5ac23144139e901d83ceb20cba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator--</name>
      <anchor>fc1611953c164eb7ce02c5b1ecdcc7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator-&gt;</name>
      <anchor>cc01f06ff37b948b974c4c99d065ca90</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Iterator::operator=</name>
      <anchor>8021cbb517d939ba6f839f97ea6ad9c8</anchor>
      <arglist>(const Iterator &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>Iterator::Previous</name>
      <anchor>e97b41628c5a338da21fbcb190d838fa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMapNode</name>
    <base>scfImplementationExt1&lt; csMapNode</base>
    <base> csObject</base>
    <base> iMapNode &gt;</base>
    <filename>classcsMapNode.html</filename>
    <member kind="function">
      <name>csMapNode</name>
      <anchor>9ac7d25753cec687fd292e71fcedb8ed</anchor>
      <arglist>(const char *Name)</arglist>
    </member>
    <member kind="function">
      <name>~csMapNode</name>
      <anchor>af7f155b406cd77e01ca51d6e5e818f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetNode</name>
      <anchor>79dde737c4fd6cdec67e3329d0bb9212</anchor>
      <arglist>(iSector *pSector, const char *name, const char *classname=0)</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>ca3af07877181de149972417dd939311</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>5618ff6289318b123816b7465412b334</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetXVector</name>
      <anchor>f761b5e784fbbae7d0c3a53334f427a9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetYVector</name>
      <anchor>51e5043ddd997a27d7975169a51443fc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetZVector</name>
      <anchor>8b1f4b5e5fa48c5424164de28e2c2c2c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>fad30d54e55b125a3787c1cc345ff688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>01eae0831dcdc66124c25018250fe61d</anchor>
      <arglist>(const csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>SetSector</name>
      <anchor>4dcc3d9005f231c3a51127c27871d3b1</anchor>
      <arglist>(iSector *sec)</arglist>
    </member>
    <member kind="function">
      <name>SetXVector</name>
      <anchor>417b7021e3e01d0d429801919512e085</anchor>
      <arglist>(const csVector3 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <name>SetYVector</name>
      <anchor>d7676197e97e6d9dcdc0baa362ff36a2</anchor>
      <arglist>(const csVector3 &amp;vec)</arglist>
    </member>
    <member kind="function">
      <name>SetZVector</name>
      <anchor>2f943921fcec228fa46b81f9427e4eda</anchor>
      <arglist>(const csVector3 &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMath2</name>
    <filename>classcsMath2.html</filename>
    <member kind="function">
      <name>Area2</name>
      <anchor>b17722b23834f6066c18e49496356bd1</anchor>
      <arglist>(const csVector2 &amp;a, const csVector2 &amp;b, const csVector2 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>InPoly2D</name>
      <anchor>e6c5a2ed582c67ddb95a71e069e442ab</anchor>
      <arglist>(const csVector2 &amp;v, csVector2 *P, int n, csBox2 *bounding_box)</arglist>
    </member>
    <member kind="function">
      <name>Left</name>
      <anchor>c49bb16aa194878371dfcf6db75af6ed</anchor>
      <arglist>(const csVector2 &amp;a, const csVector2 &amp;b, const csVector2 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>PlanesClose</name>
      <anchor>5d065e3215ccd7e94fa3a5d8f3b86748</anchor>
      <arglist>(const csPlane2 &amp;p1, const csPlane2 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>PlanesEqual</name>
      <anchor>58c3e6d161fac12f3269a7182e98c1e3</anchor>
      <arglist>(const csPlane2 &amp;p1, const csPlane2 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>Right</name>
      <anchor>91dd6b806c11853408a9e88847feb66e</anchor>
      <arglist>(const csVector2 &amp;a, const csVector2 &amp;b, const csVector2 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>Visible</name>
      <anchor>82dcbfb44a824cd8f979f92b2f129705</anchor>
      <arglist>(const csVector2 &amp;p, const csPlane2 &amp;pl)</arglist>
    </member>
    <member kind="function">
      <name>WhichSide2D</name>
      <anchor>18413e5bd1416df9c1499b05043c9199</anchor>
      <arglist>(const csVector2 &amp;v, const csSegment2 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>WhichSide2D</name>
      <anchor>827a71523cc957bc066adfeb2b7ee35f</anchor>
      <arglist>(const csVector2 &amp;v, const csVector2 &amp;s1, const csVector2 &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMath3</name>
    <filename>classcsMath3.html</filename>
    <member kind="function">
      <name>Between</name>
      <anchor>99b0b66ee4c95e14e8e187293ed36702</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, csVector3 &amp;v, float pct, float wid)</arglist>
    </member>
    <member kind="function">
      <name>CalcNormal</name>
      <anchor>41a229683728c5ddea0adb1c8215efce</anchor>
      <arglist>(csVector3 &amp;norm, const csVector3 &amp;v, const csVector3 &amp;u)</arglist>
    </member>
    <member kind="function">
      <name>CalcNormal</name>
      <anchor>f4821428b82a76796b83384bf3761235</anchor>
      <arglist>(csVector3 &amp;norm, const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>CalcPlane</name>
      <anchor>1a1b3e612e65cc3a3df8ba38f27282d2</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3, csVector3 &amp;normal, float &amp;D)</arglist>
    </member>
    <member kind="function">
      <name>Direction3</name>
      <anchor>2dbd709ddc25ba5ce02bc6e5a4ec2754</anchor>
      <arglist>(const csVector3 &amp;a, const csVector3 &amp;b, const csVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>DoubleArea3</name>
      <anchor>a9d1991cd5dedc1e916f9421a72f7fcc</anchor>
      <arglist>(const csVector3 &amp;a, const csVector3 &amp;b, const csVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>FindObserverSides</name>
      <anchor>912c335251dc7e8db0d87dca69f8b4d2</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2, int *sides)</arglist>
    </member>
    <member kind="function">
      <name>OuterPlanes</name>
      <anchor>7d2344d296bcc37b381f9803ac53949a</anchor>
      <arglist>(const csBox3 &amp;box1, const csBox3 &amp;box2, csPlane3 *planes)</arglist>
    </member>
    <member kind="function">
      <name>PlanesClose</name>
      <anchor>9f9ccbd5d406d921bc8d5c2213eebec3</anchor>
      <arglist>(const csPlane3 &amp;p1, const csPlane3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>PlanesEqual</name>
      <anchor>0904c942e64bbd57400807e285c48d8f</anchor>
      <arglist>(const csPlane3 &amp;p1, const csPlane3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>SetMinMax</name>
      <anchor>13a027c3c6b37b96dca288c481ecabda</anchor>
      <arglist>(const csVector3 &amp;v, csVector3 &amp;min, csVector3 &amp;max)</arglist>
    </member>
    <member kind="function">
      <name>SpherePosition</name>
      <anchor>3286224f79758a61df73cc55d369e8fa</anchor>
      <arglist>(float angle_xz, float angle_vert, csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>Visible</name>
      <anchor>36f2ab62398a34d2ae31f976a62160f6</anchor>
      <arglist>(const csVector3 &amp;p, const csPlane3 &amp;pl)</arglist>
    </member>
    <member kind="function">
      <name>Visible</name>
      <anchor>e76e610e1e24b3ec6338beea3e3555df</anchor>
      <arglist>(const csVector3 &amp;p, const csVector3 &amp;t1, const csVector3 &amp;t2, const csVector3 &amp;t3)</arglist>
    </member>
    <member kind="function">
      <name>WhichSide3D</name>
      <anchor>9e66e483d4d32f1d1d452b02952b51ef</anchor>
      <arglist>(const csVector3 &amp;p, const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMatrix2</name>
    <filename>classcsMatrix2.html</filename>
    <member kind="function">
      <name>m11</name>
      <anchor>919f87431a628919787780c5266c9c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m12</name>
      <anchor>04510180f5050b2ae7d5e4f5ba8cfcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m21</name>
      <anchor>3a67e49e38c9950a8a993b8ec2ff7af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m22</name>
      <anchor>5164d3382c143082bfb2bc8c22ec69ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMatrix2</name>
      <anchor>e0283d7331929a8d381c577666652ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csMatrix2</name>
      <anchor>ddf54e79f8c5dce564821bc9c4d089f3</anchor>
      <arglist>(float m11, float m12, float m21, float m22)</arglist>
    </member>
    <member kind="function">
      <name>Col1</name>
      <anchor>981025e528de1b4793e7147ddefa7a5a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Col2</name>
      <anchor>e5aa074ea9dc5c688774db8d5bcaab54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Determinant</name>
      <anchor>e72e07db9bc688ae5f2268dc8fb35924</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInverse</name>
      <anchor>de833b5d08b2a3673fbe0818d4685880</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTranspose</name>
      <anchor>8afc2bfd7c2459ac1a7423d84d69950a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Identity</name>
      <anchor>383152a3a409cc51a0c72a0c518bce56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Invert</name>
      <anchor>53beca9fc7f3a3e64a324103a1292acc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>d05de42e2721c2d7895ca6b5815272ea</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>6d7bb624c831dc257fe0b35053246c70</anchor>
      <arglist>(const csMatrix2 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>f6e5453f66f504c6a5d627acb5e4a5a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>b0607251d8d3f4092bef6c9ce6bf7dab</anchor>
      <arglist>(const csMatrix2 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>c395159a67b9e9f79d7cd36a2096e9f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>cd788b1f8f6cf0024a6fbaef96293687</anchor>
      <arglist>(const csMatrix2 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>304f1c12affc5db9f1de8bb26a393f8c</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <name>Row1</name>
      <anchor>a2283a512a137bc814b40447f9b0d464</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Row2</name>
      <anchor>8ffed2d9047b26f7119413484a33ecc7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>259af777b294c50d4f8a4a50a9e6bf28</anchor>
      <arglist>(float m11, float m12, float m21, float m22)</arglist>
    </member>
    <member kind="function">
      <name>Transpose</name>
      <anchor>295a1ab01510caa8171206ecc801f2e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>a437593720aae13b78fea7e23f167764</anchor>
      <arglist>(float f, const csMatrix2 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>5f3b405727778a6d4eabc89e23e6ba94</anchor>
      <arglist>(const csMatrix2 &amp;m, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>eff079a7bb536262ce00798bf6f4d336</anchor>
      <arglist>(const csMatrix2 &amp;m, const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>5068ee8c52336df3378ba9fd907f711b</anchor>
      <arglist>(const csMatrix2 &amp;m1, const csMatrix2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>307d0b0b99ce9588f9e68ba0649da908</anchor>
      <arglist>(const csMatrix2 &amp;m1, const csMatrix2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>4e6590e87d2434d3d553be5aa30d5a97</anchor>
      <arglist>(const csMatrix2 &amp;m1, const csMatrix2 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>70e6e6ce118ca0b80a3a44c1c41ec640</anchor>
      <arglist>(const csMatrix2 &amp;m, float f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMatrix3</name>
    <filename>classcsMatrix3.html</filename>
    <member kind="function">
      <name>Set</name>
      <anchor>091d7466110d46c28b05e3028e41d828</anchor>
      <arglist>(csMatrix3 const &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>m11</name>
      <anchor>7abb8769eb9f1110a860dd1cbe1ebc83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m12</name>
      <anchor>03f36748a74f2452374ee7aa33a047c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m13</name>
      <anchor>6cc4385d82d3f6c6161d7a33324d585a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m21</name>
      <anchor>5e4b3835d5a06ef37011d201f1b3580f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m22</name>
      <anchor>8263527f4f5327dd8b7c553852356c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m23</name>
      <anchor>67476f669601bac648b0b908f9998560</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m31</name>
      <anchor>6466a3ad591b333c46d3bd164c371167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m32</name>
      <anchor>1c9bd8515840fb4e61ae72ea7af5927c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>m33</name>
      <anchor>651ffebc45af74241ec8fe1294a4f6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMatrix3</name>
      <anchor>3ec397749c3898a54479d7779fcc3d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csMatrix3</name>
      <anchor>51401dc3d8a370c4c89c671cf4a696f2</anchor>
      <arglist>(float am11, float am12, float am13, float am21, float am22, float am23, float am31, float am32, float am33)</arglist>
    </member>
    <member kind="function">
      <name>csMatrix3</name>
      <anchor>31ff6d7d6c1b44e7683070c6268f8dac</anchor>
      <arglist>(csMatrix3 const &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>csMatrix3</name>
      <anchor>607a8d83f2f64ca1b3c1e3e9a83434b3</anchor>
      <arglist>(float x, float y, float z, float angle)</arglist>
    </member>
    <member kind="function">
      <name>csMatrix3</name>
      <anchor>548385cc8aaff7b5db19cea5bb395507</anchor>
      <arglist>(const csQuaternion &amp;quat)</arglist>
    </member>
    <member kind="function">
      <name>Col1</name>
      <anchor>42bbd5a0bb15545d1597a3e47ce9a382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Col2</name>
      <anchor>7929b4c55a4c45dec318ab44da480c6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Col3</name>
      <anchor>4b648cf40fa5c8d68bd1e748a7b2685a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Determinant</name>
      <anchor>6fff68877b42606c830e30b924c4d211</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInverse</name>
      <anchor>c030fcde1006e30203943b62279478c7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTranspose</name>
      <anchor>c7b62f445a1a6f388c16874d954d595f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Identity</name>
      <anchor>0acfb319aa4feb890e5f1ca1d078d93c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Invert</name>
      <anchor>55fde128b92e1655519ace4cde07648d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsIdentity</name>
      <anchor>82cdde0965f44eadfc8be4df7d8b5eee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>cace3bfbb424b426075850328b8ff61a</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>22738b3344858674833b1f5edefd079b</anchor>
      <arglist>(const csMatrix3 &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>9064c6c431d6d3b6f6097e35f45d957c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>7202afc8c3110a48a7567574d469091d</anchor>
      <arglist>(const csMatrix3 &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>3cd848598b321f7ba81dcc9556e38343</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>22d938fe4cab0669b2b8bf8ac6d00229</anchor>
      <arglist>(const csMatrix3 &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>4d4d527e6be208179ab25b898adaaf14</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>fa61705d17b5169d4456f94fdc0d8fd9</anchor>
      <arglist>(const csMatrix3 &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>Row1</name>
      <anchor>841bb7ccfb239c7766c4ce90075e5051</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Row2</name>
      <anchor>37412d02aab4bdca56afe69eab32c052</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Row3</name>
      <anchor>0b959a176543ec1f13d113f114257034</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>f8ed17b209fab29c2d968bd3d7b8a284</anchor>
      <arglist>(const csQuaternion &amp;)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>efa14975924008b8f1e0dff9618fafa4</anchor>
      <arglist>(float o11, float o12, float o13, float o21, float o22, float o23, float o31, float o32, float o33)</arglist>
    </member>
    <member kind="function">
      <name>Transpose</name>
      <anchor>8d621bdf1d5cdada7b50c24324ba5977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>8fe3a4ca0f806cc4c984cbe72f7ef4b2</anchor>
      <arglist>(float f, const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>512316b6645cfd822395f6cfe754f249</anchor>
      <arglist>(const csMatrix3 &amp;m, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>ac99b5f7a218b00112f8a0beac726ac6</anchor>
      <arglist>(const csMatrix3 &amp;m, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>ac3b6f5cfb9bcd31c3674557fc2ffc01</anchor>
      <arglist>(const csMatrix3 &amp;m1, const csMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>6ad89b5e6d2deb08585c51ee77c91665</anchor>
      <arglist>(const csMatrix3 &amp;m1, const csMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>1812f4c5f495c0f8693d4b8ddab90b8d</anchor>
      <arglist>(const csMatrix3 &amp;m1, const csMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>114173e10da80d8f3d27331e529a7d58</anchor>
      <arglist>(const csMatrix3 &amp;m1, const csMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>b79793d2fd598218302ce2f5d059dad5</anchor>
      <arglist>(const csMatrix3 &amp;m, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>8ae3db841c7ab66b35b7160152faaa8f</anchor>
      <arglist>(const csMatrix3 &amp;m, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>2569c6a8aa03572650ced4af397326fe</anchor>
      <arglist>(const csMatrix3 &amp;m1, const csMatrix3 &amp;m2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>72eb8fb14377b25cc558731610d32e1a</anchor>
      <arglist>(float f, const csMatrix3 &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMD5</name>
    <filename>classcsMD5.html</filename>
    <member kind="function">
      <name>md5_byte_t</name>
      <anchor>804f37972d0afc626be0e6a2f57df6bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>md5_word_t</name>
      <anchor>769ff8689e54f469b0ca3dd181eb79f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Encode</name>
      <anchor>fe9b89029dfc63c087e9fe956c4c2fe3</anchor>
      <arglist>(const void *, size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <name>Encode</name>
      <anchor>1746751f47fc8d44e21f6eb54174c4cf</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>Encode</name>
      <anchor>3be9f6bab0c16d0d5e4c06bacac4dae0</anchor>
      <arglist>(csString const &amp;)</arglist>
    </member>
    <member kind="function">
      <name>md5_append</name>
      <anchor>2a043156ebd8205d52e70b9d69af2a1c</anchor>
      <arglist>(md5_state_t *, const md5_byte_t *data, size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <name>md5_finish</name>
      <anchor>34708efa15a5a161d02fca63cf08f00c</anchor>
      <arglist>(md5_state_t *, md5_byte_t digest[16])</arglist>
    </member>
    <member kind="function">
      <name>md5_init</name>
      <anchor>04afb6fb334551ba7f1a1707a133d034</anchor>
      <arglist>(md5_state_t *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMemFile</name>
    <base>scfImplementation1&lt; csMemFile</base>
    <base> iFile &gt;</base>
    <filename>classcsMemFile.html</filename>
    <member kind="function">
      <name>buffer</name>
      <anchor>64e0a76f41f3b92c9b0f068b561f97ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>copyOnWrite</name>
      <anchor>521513b3db6cbfa910523d056cdbd932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cursor</name>
      <anchor>7b27083d2cca70d0311db7ed7acde6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>0c50f4e74ff716dce9131f0d3d09e3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Disposition</name>
      <anchor>ab9cfa5b94ecee97a760b0c17418ce50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ISPOSITION_DELETE</name>
      <anchor>ab9cfa5b94ecee97a760b0c17418ce507b2b64c5023195c3d4e92938a20a68ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ISPOSITION_PLATFORM_FREE</name>
      <anchor>ab9cfa5b94ecee97a760b0c17418ce50c7360bd23be48ec6f746c1b4971674f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ISPOSITION_IGNORE</name>
      <anchor>ab9cfa5b94ecee97a760b0c17418ce5081a32ce4afa53e52025da8f66f3d1dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ISPOSITION_CS_FREE</name>
      <anchor>ab9cfa5b94ecee97a760b0c17418ce504017a587daa25821475e97e019682961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ISPOSITION_FREE</name>
      <anchor>ab9cfa5b94ecee97a760b0c17418ce50d0be9f2517a6e4fae91477b16f1ce695</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMemFile</name>
      <anchor>73394973608b39f90415fbc4710b2782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csMemFile</name>
      <anchor>95e9a11142f9988d635ff4d722e98b52</anchor>
      <arglist>(const char *, size_t)</arglist>
    </member>
    <member kind="function">
      <name>csMemFile</name>
      <anchor>9f1f94c21f173b712c4984ce37922a48</anchor>
      <arglist>(char *, size_t, Disposition=DISPOSITION_DELETE)</arglist>
    </member>
    <member kind="function">
      <name>csMemFile</name>
      <anchor>5544172fee81c10baffe5172d0729d65</anchor>
      <arglist>(iDataBuffer *buf, bool readOnly)</arglist>
    </member>
    <member kind="function">
      <name>~csMemFile</name>
      <anchor>495aed8c686e5053ff82766c08aaa9d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AtEOF</name>
      <anchor>ad2813d90ec4b3c13a04649b2b5c37af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>b4851e941844524a07eafb8c0b93c779</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAllData</name>
      <anchor>ef66782be803c3534a755ccb7844f58e</anchor>
      <arglist>(bool nullterm=false)</arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>765e8a401aef1b56792389e6f0c336f5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>a4bf78fccb504a3c9d938b2950ee8d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPos</name>
      <anchor>abfa720728dfe01f03c0272a413873ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>67936bab115af26874b4579a5c3f53bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetStatus</name>
      <anchor>933a67a9a10e158a3a3a1201941e423c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Read</name>
      <anchor>20215cecbaaf5122253b77f20862f8ea</anchor>
      <arglist>(char *Data, size_t DataSize)</arglist>
    </member>
    <member kind="function">
      <name>SetPos</name>
      <anchor>9577865cdba807b26362a59a11baa7a4</anchor>
      <arglist>(size_t newpos)</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>ec57eadb7ecd407ededeca5bf1685ae4</anchor>
      <arglist>(const char *Data, size_t DataSize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMemoryMappedIO</name>
    <base>csRefCount</base>
    <filename>classcsMemoryMappedIO.html</filename>
    <member kind="function">
      <name>PlatformMapping</name>
      <anchor>baf82544318559994aa961fe4d20f46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMemoryMappedIO</name>
      <anchor>625803c263b1802bc005820f3eb8cb42</anchor>
      <arglist>(char const *filename, iVFS *vfs=0)</arglist>
    </member>
    <member kind="function">
      <name>~csMemoryMappedIO</name>
      <anchor>b51e8ef75550d4d2655e2bca15a8bfe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>7076b7fdc223cfd8c083a4baf8de6f39</anchor>
      <arglist>(size_t offset, size_t length)</arglist>
    </member>
    <member kind="function">
      <name>IsValid</name>
      <anchor>c35340d0e764bba11acff56b727966ea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMemoryMapping</name>
    <base>csRefCount</base>
    <filename>classcsMemoryMapping.html</filename>
    <member kind="function">
      <name>GetData</name>
      <anchor>204436c2ba52d826f14d3ff3b87b0dfd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLength</name>
      <anchor>f517ec59e98a8ba59d407649c2cb15df</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMemoryPen</name>
    <base>iPen</base>
    <filename>classcsMemoryPen.html</filename>
    <member kind="function">
      <name>csMemoryPen</name>
      <anchor>550c6bd7e4686843b48a3cc553d09a2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csMemoryPen</name>
      <anchor>7abb96087bfa326f7224dcb78ced8212</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>aef2061672a8c7e84e82f0a79bf5badf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClearFlag</name>
      <anchor>ff2d936450b24e6ed1af4714ae980da0</anchor>
      <arglist>(uint flag)</arglist>
    </member>
    <member kind="function">
      <name>ClearTransform</name>
      <anchor>d928a76b65dd92d0f013be52fd7f4df7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>95abfbda6488ed1416e5bfbb68a23069</anchor>
      <arglist>(iPen *_pen_)</arglist>
    </member>
    <member kind="function">
      <name>DrawArc</name>
      <anchor>bb9e51c8848d731889722fa0eb4aadce</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, float start_angle, float end_angle)</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>4fc2b8c9f0f07660833bc7a471ac4b4f</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawMiteredRect</name>
      <anchor>051622dbbb6f2fe2bbc8b316c88d48c2</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint miter)</arglist>
    </member>
    <member kind="function">
      <name>DrawPoint</name>
      <anchor>3efa95a5ce7b375899c37b9be59ca08d</anchor>
      <arglist>(uint x1, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawRect</name>
      <anchor>f352b1645215dce620b58ac575d440d2</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawRoundedRect</name>
      <anchor>bd4ccb1306a40f999b604799df563999</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint roundness)</arglist>
    </member>
    <member kind="function">
      <name>DrawTriangle</name>
      <anchor>220e5e5f911183152a36390c046df67a</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint x3, uint y3)</arglist>
    </member>
    <member kind="function">
      <name>PopTransform</name>
      <anchor>9a26ccdcede4d04d97fa8512f9d1f764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PushTransform</name>
      <anchor>1254ecea6829017a8eafbb377baac177</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>50970d24c889e0f39f32db9ae6fc359d</anchor>
      <arglist>(const float &amp;a)</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>c2fbc00e7c8efa3275fa75c92844837a</anchor>
      <arglist>(const csColor4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>01e66936960154ebcbe4ce0e92f65cbf</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <name>SetFlag</name>
      <anchor>7a5953eac550896c30c10dda961512b7</anchor>
      <arglist>(uint flag)</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>2928141207fd023a3347c3b5e7f9f697</anchor>
      <arglist>(uint mode)</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>7a517ff836ad3b6565cd77b049cd7261</anchor>
      <arglist>(const csVector3 &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>SetPenWidth</name>
      <anchor>ceaee65a518a62726634325376a549a1</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <name>SetTexture</name>
      <anchor>4924cf067e78731c5875174f9bcd948f</anchor>
      <arglist>(csRef&lt; iTextureHandle &gt; tex)</arglist>
    </member>
    <member kind="function">
      <name>SwapColors</name>
      <anchor>40cac381d00dd1d1dd9e166e2f2ba8c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Translate</name>
      <anchor>9fc46fb3c5b71a5e140eb7bca8ac9dff</anchor>
      <arglist>(const csVector3 &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>f920a524352d0ab03daa194eeadaff6d</anchor>
      <arglist>(iFont *font, uint x1, uint y1, char *text)</arglist>
    </member>
    <member kind="function">
      <name>WriteBoxed</name>
      <anchor>eb031f21c180eda90840ebcca454d52c</anchor>
      <arglist>(iFont *font, uint x1, uint y1, uint x2, uint y2, uint h_align, uint v_align, char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMemoryPool</name>
    <filename>classcsMemoryPool.html</filename>
    <member kind="function">
      <name>csMemoryPool</name>
      <anchor>bdad76accdf7685da0cd256fb09a6602</anchor>
      <arglist>(size_t gran=4096)</arglist>
    </member>
    <member kind="function">
      <name>~csMemoryPool</name>
      <anchor>a625283f1b77aa84e2f29163ad319d41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>d8fbdf893c4bff02c794d21948061911</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>b674efc970996319c6d458c1ae7809bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>5b104b2279a18549fbc1b2418c789db1</anchor>
      <arglist>(char const *)</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>ae3699aac4b4b20fcb17de24f859e3c9</anchor>
      <arglist>(void const *, size_t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMeshFactory</name>
    <base>scfImplementation1&lt; csMeshFactory</base>
    <base> iMeshObjectFactory &gt;</base>
    <filename>classcsMeshFactory.html</filename>
    <member kind="function">
      <name>csMeshFactory</name>
      <anchor>81e7a5faa63049b1db62566a3dadafbf</anchor>
      <arglist>(iEngine *engine, iObjectRegistry *object_reg, iMeshObjectType *parent)</arglist>
    </member>
    <member kind="function">
      <name>~csMeshFactory</name>
      <anchor>b001af25d8bc57ea573fb522026acec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>b74f4aeacbd4635dd29d26236edf126c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialWrapper</name>
      <anchor>3ced49b5b2088e210e4fbe3d4a1cd905</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMeshFactoryWrapper</name>
      <anchor>e386640773af3ccce066b78f7251c1d6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMeshObjectType</name>
      <anchor>51d3d3fed207c2268a246cb445dcdb94</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>67d94fdef09b6f2bf66a7f619fed06d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObjectModel</name>
      <anchor>cc04c972dde0de1f95d197dbfaa40011</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetObjectRegistry</name>
      <anchor>b12f17bbbcc87bbd41d3457ceeea88af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>65c764898bc353a906da2869ff039fc6</anchor>
      <arglist>(const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>NewInstance</name>
      <anchor>abe5ca2a84c08c6b54d35b18fff2eba0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialWrapper</name>
      <anchor>ccbc98dabf71f885ef317d4ca07a1ea1</anchor>
      <arglist>(iMaterialWrapper *)</arglist>
    </member>
    <member kind="function">
      <name>SetMeshFactoryWrapper</name>
      <anchor>7bbdb8c4d8a3a6ffb18e63820471b626</anchor>
      <arglist>(iMeshFactoryWrapper *logparent)</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>d5f86e907dfd2bf578d8c29503d3adad</anchor>
      <arglist>(uint)</arglist>
    </member>
    <member kind="function">
      <name>SupportsHardTransform</name>
      <anchor>984154f919e6bbd8605da5d6676084e1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Engine</name>
      <anchor>fd89f164abb74e2014061c761e8fad4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>c7c4355d1f265fef962447d839513271</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LogParent</name>
      <anchor>7dd5d4a918ef941346ad340ca2c8c21b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mesh_type</name>
      <anchor>4807d360dfbb7b46f8b7a2d3a835d474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>608063cce3af7269258667fa56ec8f86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMeshObject</name>
    <base>scfImplementationExt1&lt; csMeshObject</base>
    <base> csObjectModel</base>
    <base> iMeshObject &gt;</base>
    <filename>classcsMeshObject.html</filename>
    <member kind="function">
      <name>csMeshObject</name>
      <anchor>247b63c6ff4bb4c64d45186ad701a7df</anchor>
      <arglist>(iEngine *engine)</arglist>
    </member>
    <member kind="function">
      <name>~csMeshObject</name>
      <anchor>7e1b69dad76b4599f8d2139d72954dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>f9e658c5c46042d036fe2fbcf8bb71c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>850ba51b52fcf8f586e097f5fef3d20d</anchor>
      <arglist>(csColor &amp;color) const </arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>62171d50176bd3c6eca041121ebc8107</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>90bfc7a55d27707d7d6d2ff2a0e22783</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialWrapper</name>
      <anchor>b3dc7436b849f54a092e92475c95207a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMeshWrapper</name>
      <anchor>11e1a6fcf6f23c9da607cfcb4b9b31c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>f2daaae57d328595a9cbc58d9ad6ce82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObjectBoundingBox</name>
      <anchor>6b12a1613e96da40db30c4d4df243b1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetObjectBoundingBox</name>
      <anchor>b92ebdbe8387c1052ffc5022fd87a8f0</anchor>
      <arglist>(csBox3 &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <name>GetObjectModel</name>
      <anchor>7ba41244fa8a8707447472c040684a55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>a3da2433e42166e84c4038241ee70698</anchor>
      <arglist>(float &amp;radius, csVector3 &amp;center)</arglist>
    </member>
    <member kind="function">
      <name>GetRenderMeshes</name>
      <anchor>c3f9e1e93019e69fa375ab3b55c8e631</anchor>
      <arglist>(int &amp;num, iRenderView *, iMovable *, uint32)</arglist>
    </member>
    <member kind="function">
      <name>GetTerraFormerColldet</name>
      <anchor>27632054cc980e5c59eab9e92c9b2b32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleCallback</name>
      <anchor>40a02d7286d6ef1428a6e50fcb4499ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>8ad069f5d874c7f71bdff041ef199600</anchor>
      <arglist>(const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>HitBeamObject</name>
      <anchor>da02b9acb07f3a103ceae80ab28fcbd4</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr, int *polygon_idx=0, iMaterialWrapper **=0)</arglist>
    </member>
    <member kind="function">
      <name>HitBeamOutline</name>
      <anchor>cbb48b6900d940849ab4d9faa1c08eb3</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr)</arglist>
    </member>
    <member kind="function">
      <name>InvalidateMaterialHandles</name>
      <anchor>1ee99e73092eb2afbd1ce0681de75739</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NextFrame</name>
      <anchor>e1c70fb365fb22abdf6815a84094cff3</anchor>
      <arglist>(csTicks current_time, const csVector3 &amp;pos, uint currentFrame)</arglist>
    </member>
    <member kind="function">
      <name>PositionChild</name>
      <anchor>74acd09d8ffb5b1519cd5daef2ad0749</anchor>
      <arglist>(iMeshObject *, csTicks)</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>b2f028f361a4d50948780657f958e45d</anchor>
      <arglist>(const csColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialWrapper</name>
      <anchor>252f3c5d2054f096603b18cc051a0cd7</anchor>
      <arglist>(iMaterialWrapper *material)</arglist>
    </member>
    <member kind="function">
      <name>SetMeshWrapper</name>
      <anchor>643a4e35393a96d06e14accf046b7acf</anchor>
      <arglist>(iMeshWrapper *logparent)</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>9fa4d60637214ee639f9d10b23e4dcd7</anchor>
      <arglist>(uint)</arglist>
    </member>
    <member kind="function">
      <name>SetObjectBoundingBox</name>
      <anchor>89fa6d5e00ff5d19410b6d4041477c67</anchor>
      <arglist>(const csBox3 &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <name>SetVisibleCallback</name>
      <anchor>552d5f5ccc5208b31eabdec43598f48a</anchor>
      <arglist>(iMeshObjectDrawCallback *cb)</arglist>
    </member>
    <member kind="function">
      <name>SupportsHardTransform</name>
      <anchor>c8f9ce689f18ec8f50c6694d497b9168</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>WantToDie</name>
      <anchor>602e093d1f32d3717fa6e937987d30cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>boundingbox</name>
      <anchor>b98e814c72a4bf8c03f092b9b32194a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Engine</name>
      <anchor>b39ad5a444f9cb8f5a4670f140d462da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>5cdebe6065a7a10d7cf112e73f5f2715</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LogParent</name>
      <anchor>9bf695b8211f89bffbf6abbd218c8b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VisCallback</name>
      <anchor>cd09ea4e1c26f0d00ecb6bb2ba6580f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMeshOnTexture</name>
    <filename>classcsMeshOnTexture.html</filename>
    <member kind="function">
      <name>csMeshOnTexture</name>
      <anchor>e18974a8cdb2313ec9756f9e90a981ee</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>~csMeshOnTexture</name>
      <anchor>e76747f2b9151e1a0b858afabbd65bd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetView</name>
      <anchor>0d293e502f6d9cbf70183d233dc51633</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Render</name>
      <anchor>b753a4662d8a8e38cc355e6b73af77df</anchor>
      <arglist>(iMeshWrapper *mesh, iTextureHandle *handle, bool persistent=false)</arglist>
    </member>
    <member kind="function">
      <name>ScaleCamera</name>
      <anchor>77ace52bb7e728e642a382c742fb3822</anchor>
      <arglist>(iMeshWrapper *mesh, float distance)</arglist>
    </member>
    <member kind="function">
      <name>ScaleCamera</name>
      <anchor>7ea89239895a39cb30e15827ba688196</anchor>
      <arglist>(iMeshWrapper *mesh, int txtw, int txth)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMeshType</name>
    <base>scfImplementation2&lt; csMeshType</base>
    <base> iMeshObjectType</base>
    <base> iComponent &gt;</base>
    <filename>classcsMeshType.html</filename>
    <member kind="function">
      <name>csMeshType</name>
      <anchor>35d66b4833224fd3e4dcbf3bd8ccf805</anchor>
      <arglist>(iBase *p)</arglist>
    </member>
    <member kind="function">
      <name>~csMeshType</name>
      <anchor>b3eefef6192c61422a3ee4342ac199da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>dbce94b2e729db3321bc00d04d81b5fd</anchor>
      <arglist>(iObjectRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>NewFactory</name>
      <anchor>8c562c9e729d179f540c7dfc90ea810d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Engine</name>
      <anchor>e7f7ef5fd80766533f7dd90ee88b33aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>1344d04af49aceb79792f0869eccdf0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMouseDriver</name>
    <base>csInputDriver</base>
    <base>scfImplementation2&lt; csMouseDriver</base>
    <base> iMouseDriver</base>
    <base> iEventHandler &gt;</base>
    <filename>classcsMouseDriver.html</filename>
    <member kind="function">
      <name>DoButton</name>
      <anchor>66d792b2ee8d1f4b0fc4426fd4bbdf5d</anchor>
      <arglist>(int button, bool down, int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>DoButton</name>
      <anchor>91d3b5b3786e3a70781f1e8c94295edf</anchor>
      <arglist>(int button, bool down, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>DoMotion</name>
      <anchor>9bb52dd5073e5a764602e04d37a89094</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>DoMotion</name>
      <anchor>ff880868c7d50e0c7e6dd6a239b13b9d</anchor>
      <arglist>(const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>GainFocus</name>
      <anchor>8b0da2f1626b1e20169cc0b510ec9d2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Axes</name>
      <anchor>53cbd847ac0acbfb38f79f0b0e523c30</anchor>
      <arglist>[CS_MAX_MOUSE_COUNT]</arglist>
    </member>
    <member kind="function">
      <name>csMouseDriver</name>
      <anchor>f8df6c4a200f642a1397c0f5f68010a9</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>~csMouseDriver</name>
      <anchor>eb7b88850bf01d50e5809900abac7624</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DoButton</name>
      <anchor>66f5a281c11579f362d6d88a8101dc87</anchor>
      <arglist>(uint number, int button, bool down, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>DoMotion</name>
      <anchor>24682475cbefe8b9c0374362a6a4a52a</anchor>
      <arglist>(uint number, const int32 *axes, uint numAxes)</arglist>
    </member>
    <member kind="function">
      <name>GetKeyboardDriver</name>
      <anchor>9c14f6531778fd572d0b00cfeb6820be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>4b36ef2a6ec3b9de07c977cbf916aa0d</anchor>
      <arglist>(uint n) const </arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>b7a7990e0d0feb07c3d22b3b30162136</anchor>
      <arglist>(uint n, uint axis) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastButton</name>
      <anchor>da153062da1fba28b3c5851ec134d402</anchor>
      <arglist>(uint number, int button) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastButton</name>
      <anchor>e8d1c42aeffdb0cfb7807d1bfffbd0e8</anchor>
      <arglist>(int button) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastX</name>
      <anchor>cf5d06a12fdfe50d517098beefafbcbb</anchor>
      <arglist>(uint n) const </arglist>
    </member>
    <member kind="function">
      <name>GetLastY</name>
      <anchor>9c53aaaeadaa2de9b248e72c8d285ecf</anchor>
      <arglist>(uint n) const </arglist>
    </member>
    <member kind="function">
      <name>LostFocus</name>
      <anchor>f54d5411d3f6a61a6a2d2a9980589977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>78941293f6b97ed734aa46a356dc9e60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetDoubleClickTime</name>
      <anchor>2c86dcbe08fa9a842f2933ded857c6a4</anchor>
      <arglist>(int iTime, size_t iDist)</arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>2c3b5ae8da6d828a0b73546510f5fbcc</anchor>
      <arglist>[CS_MAX_MOUSE_COUNT][CS_MAX_MOUSE_BUTTONS]</arglist>
    </member>
    <member kind="function">
      <name>DoubleClickDist</name>
      <anchor>48488e2c4f7b3a65a81455d672bbb980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DoubleClickTime</name>
      <anchor>99af1f8a94f7ed60ba0da8ff1dd68e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Last</name>
      <anchor>2b5fde8c7193ec161c7c92c408b77dc4</anchor>
      <arglist>[CS_MAX_MOUSE_COUNT][CS_MAX_MOUSE_AXES]</arglist>
    </member>
    <member kind="function">
      <name>LastClick</name>
      <anchor>ee628697eaa2d94ef1b82e1c26fd6815</anchor>
      <arglist>[CS_MAX_MOUSE_COUNT][CS_MAX_MOUSE_AXES]</arglist>
    </member>
    <member kind="function">
      <name>LastClickButton</name>
      <anchor>bf60e4cab69d93c0327f7142539ff22e</anchor>
      <arglist>[CS_MAX_MOUSE_COUNT]</arglist>
    </member>
    <member kind="function">
      <name>LastClickTime</name>
      <anchor>621d4dd8a46869ae1f84f211035b771e</anchor>
      <arglist>[CS_MAX_MOUSE_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMouseEventHelper</name>
    <filename>classcsMouseEventHelper.html</filename>
    <member kind="function">
      <name>GetAxis</name>
      <anchor>0cd04669d983710afa0ccabcabccdb53</anchor>
      <arglist>(const iEvent *event, uint axis)</arglist>
    </member>
    <member kind="function">
      <name>GetButton</name>
      <anchor>578d71f9842ce79e5d6992ce27382f2b</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetButtonMask</name>
      <anchor>28de72f561d77e0a7d81400cbd6fdd5c</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetButtonState</name>
      <anchor>ab036a5691d731a4cb94c197dc8c7711</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetEventData</name>
      <anchor>8b6be1d0f567acf90147c40abb085fe6</anchor>
      <arglist>(const iEvent *event, csMouseEventData &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>GetEventType</name>
      <anchor>1af7b9df16c1721abd8cb209a71fc463</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>575aa1aa3133de9870ab91418ff2a739</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetModifiers</name>
      <anchor>00412554bb74e140f33e766c00dc8368</anchor>
      <arglist>(const iEvent *event, csKeyModifiers &amp;modifiers)</arglist>
    </member>
    <member kind="function">
      <name>GetNumAxes</name>
      <anchor>765e3c46108cff4c968e783fe4753c15</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetNumber</name>
      <anchor>f32f21e9a77524567fcf3f8916852c51</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetX</name>
      <anchor>4dfa65edf6150512c49eda567e4ea4bd</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>GetY</name>
      <anchor>c58d6ac198d2d8064394bbab9cd4e8e1</anchor>
      <arglist>(const iEvent *event)</arglist>
    </member>
    <member kind="function">
      <name>NewEvent</name>
      <anchor>5df8a6c54ea9f6821e4232385e8e6fcb</anchor>
      <arglist>(csRef&lt; iEventNameRegistry &gt; &amp;reg, csTicks, csEventID name, csMouseEventType etype, int x, int y, uint32 AxesChanged, uint button, bool buttonstate, uint32 buttonMask, uint32 modifiers)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMutex</name>
    <base>csRefCount</base>
    <filename>classcsMutex.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>04a7f6e1dcc9ba82ab51cf66eefc787b</anchor>
      <arglist>(bool recursive=false)</arglist>
    </member>
    <member kind="function">
      <name>GetLastError</name>
      <anchor>720d9d9ecb07f64aaf5e8168ddd11b42</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsRecursive</name>
      <anchor>02e3f6227490351ea8df0362bf4f24a9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>LockTry</name>
      <anchor>ca97fc194aff82b7fbab424a03f2711c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LockWait</name>
      <anchor>9e037cca32b323f1a590d53db570b134</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Release</name>
      <anchor>ad4921586c4d05e0f008251993a85d74</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNewtonianParticleSystem</name>
    <base>scfImplementationExt0&lt; csNewtonianParticleSystem</base>
    <base> csParticleSystem &gt;</base>
    <filename>classcsNewtonianParticleSystem.html</filename>
    <member kind="function">
      <name>csNewtonianParticleSystem</name>
      <anchor>22661e3a2e2e75534d8f5eb31c86d464</anchor>
      <arglist>(iObjectRegistry *object_reg, iMeshObjectFactory *factory)</arglist>
    </member>
    <member kind="function">
      <name>GetAccel</name>
      <anchor>48a91f43c15931f641b83f52135e6881</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetSpeed</name>
      <anchor>51766b35969a9d48589329ae14079426</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>SetAccel</name>
      <anchor>28dd962ac45663237985eec9ef60ccbd</anchor>
      <arglist>(int idx, const csVector3 &amp;acl)</arglist>
    </member>
    <member kind="function">
      <name>SetSpeed</name>
      <anchor>39839a17e51760fe0d7a98bb2a55190a</anchor>
      <arglist>(int idx, const csVector3 &amp;spd)</arglist>
    </member>
    <member kind="function">
      <name>Update</name>
      <anchor>c82bc79d6507d855d1a9628fb2dce59f</anchor>
      <arglist>(csTicks elapsed_time)</arglist>
    </member>
    <member kind="function">
      <name>part_accel</name>
      <anchor>cfa134f0336f037e125a20bc3edbcb76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>part_speed</name>
      <anchor>2e820855219c2606361a879288eb5387</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNodeIterator</name>
    <filename>classcsNodeIterator.html</filename>
    <member kind="function">
      <name>Classname</name>
      <anchor>58ee3885a802a583465d7a9b7d6a4845</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CurrentNode</name>
      <anchor>ffc0fa16362c194b21442c07f0867968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Iterator</name>
      <anchor>590780d545f9ebce6f28df72a6cf53d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csNodeIterator</name>
      <anchor>141ab668fc42bfe4e43ffab657bc63a0</anchor>
      <arglist>(iSector *pSector, const char *classname=0)</arglist>
    </member>
    <member kind="function">
      <name>~csNodeIterator</name>
      <anchor>a728c23033f3bdeb31675608210d6414</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>618948a232818e69bf99c05a2acdbd9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>b5c6c4dcac2e20466b072d1497381f83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NextNode</name>
      <anchor>735e391e0949f67b8fa54dfe902ab1fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>c74177e23dab4fe665138c1cd8274eeb</anchor>
      <arglist>(iSector *pSector, const char *classname=0)</arglist>
    </member>
    <member kind="function">
      <name>SkipWrongClassname</name>
      <anchor>1079d0c06965b7713860bf7c31adf796</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNormalCalculator</name>
    <filename>classcsNormalCalculator.html</filename>
    <member kind="function">
      <name>CalculateNormals</name>
      <anchor>9f323130f5ad21a9801b35e17edf0eb2</anchor>
      <arglist>(csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_vertices, csDirtyAccessArray&lt; csTriangle &gt; &amp;mesh_triangles, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_normals, bool do_compress)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNormalizationCubeAccessor</name>
    <base>scfImplementation1&lt; csNormalizationCubeAccessor</base>
    <base> iShaderVariableAccessor &gt;</base>
    <filename>classcsNormalizationCubeAccessor.html</filename>
    <member kind="function">
      <name>csNormalizationCubeAccessor</name>
      <anchor>d7a3151d0474268592dfd5d1f2f56f84</anchor>
      <arglist>(iTextureManager *txtmgr, int sideSize)</arglist>
    </member>
    <member kind="function">
      <name>PreGetValue</name>
      <anchor>04f4e2dcbad38bc52489d59ba3cfaec7</anchor>
      <arglist>(csShaderVariable *variable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNormalMappingTools</name>
    <filename>classcsNormalMappingTools.html</filename>
    <member kind="function">
      <name>CalculateTangents</name>
      <anchor>cafad3c807bc486bc680e69dc04bdb8d</anchor>
      <arglist>(size_t numTriangles, const csTriangle *triangles, size_t numVertices, const csVector3 *vertices, const csVector3 *normals, const csVector2 *texcoords, csVector3 *outTangents, csVector3 *outBitangents)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNullCacheManager</name>
    <base>scfImplementation1&lt; csNullCacheManager</base>
    <base> iCacheManager &gt;</base>
    <filename>classcsNullCacheManager.html</filename>
    <member kind="function">
      <name>csNullCacheManager</name>
      <anchor>3e669d57b98c9fcb18195e534d21a36c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CacheData</name>
      <anchor>4e7b26c857964d3c18b56dffa15e0da7</anchor>
      <arglist>(const void *data, size_t size, const char *type, const char *scope, uint32 id)</arglist>
    </member>
    <member kind="function">
      <name>ClearCache</name>
      <anchor>2d981f16c349b1f0b863cfa0e1eb7abe</anchor>
      <arglist>(const char *type=0, const char *scope=0, const uint32 *id=0)</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>94a67b5203c1d8284059fe9759743a98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentScope</name>
      <anchor>86ceba26b60ad8645dddb953c9cfc8db</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCurrentType</name>
      <anchor>8baeefa2a11dcb25b77ece65056e7bc0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsReadOnly</name>
      <anchor>69fbf038696378ec0a6001b9dea77947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ReadCache</name>
      <anchor>307bd208fe556f1e298af62fce7941de</anchor>
      <arglist>(const char *type, const char *scope, uint32 id)</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentScope</name>
      <anchor>e5f4b2d643f46d7bf58892e6b3a35135</anchor>
      <arglist>(const char *scope)</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentType</name>
      <anchor>94c2e512887ab82dc6c3bfad6e3c4ea4</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function">
      <name>SetReadOnly</name>
      <anchor>d66c76d2349f6261db3ba2a4c07752bb</anchor>
      <arglist>(bool)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csOBB</name>
    <base>csBox3</base>
    <filename>classcsOBB.html</filename>
    <member kind="function">
      <name>csOBB</name>
      <anchor>4b6a0f52c9f7d0b8f366e862da9f773d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csOBB</name>
      <anchor>96df61af6a6540213bac68eac3077eba</anchor>
      <arglist>(const csOBB &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>csOBB</name>
      <anchor>1964d5849157db6d28cc048891f98f90</anchor>
      <arglist>(const csBox3 &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>csOBB</name>
      <anchor>bca7a14ba48cae60491433a5a8bae432</anchor>
      <arglist>(const csVector3 &amp;dir1, const csVector3 &amp;dir2, const csVector3 &amp;dir3)</arglist>
    </member>
    <member kind="function">
      <name>AddBoundingVertex</name>
      <anchor>7616cc00a44f0d9020606c180e516c01</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Diameter</name>
      <anchor>5054143d5ce1861e97c01f9a5e31ba1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FindOBB</name>
      <anchor>d0056b18fff056be580377ad1a15dcfe</anchor>
      <arglist>(const csVector3 *vertex_table, int num, float eps=0.0)</arglist>
    </member>
    <member kind="function">
      <name>FindOBBAccurate</name>
      <anchor>98c7242e1d7979e09bd1d42f5de7cbfc</anchor>
      <arglist>(const csVector3 *vertex_table, int num)</arglist>
    </member>
    <member kind="function">
      <name>GetCorner</name>
      <anchor>cc55bb882adf052b7342128c130ccf2a</anchor>
      <arglist>(int corner) const </arglist>
    </member>
    <member kind="function">
      <name>GetMatrix</name>
      <anchor>f8e71b360336147491ba3f32a228c39a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetMatrix</name>
      <anchor>4389952666ccf70a802cae2a9ee0c14a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Volume</name>
      <anchor>c11cdd0bc793db3c2a4e70cc3a715a85</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csOBBFrozen</name>
    <filename>classcsOBBFrozen.html</filename>
    <member kind="function">
      <name>csOBBFrozen</name>
      <anchor>c9f7687915d88215e567de2aec977fd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csOBBFrozen</name>
      <anchor>0fb32200a431f765186fd8ffe7974654</anchor>
      <arglist>(const csOBB &amp;obb)</arglist>
    </member>
    <member kind="function">
      <name>csOBBFrozen</name>
      <anchor>9168c804f388ab994363a1da76968414</anchor>
      <arglist>(const csOBB &amp;obb, const csReversibleTransform &amp;trans)</arglist>
    </member>
    <member kind="function">
      <name>Copy</name>
      <anchor>e2a12214d87918fdcb3507a8d319cce2</anchor>
      <arglist>(const csOBB &amp;obb, const csReversibleTransform &amp;trans)</arglist>
    </member>
    <member kind="function">
      <name>Copy</name>
      <anchor>026eb209f2e67cefb7e91f150d3dee4d</anchor>
      <arglist>(const csOBB &amp;obb)</arglist>
    </member>
    <member kind="function">
      <name>GetCorner</name>
      <anchor>c39390dc6ce5996d99ef14c7adfcadc5</anchor>
      <arglist>(int corner) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectOBB</name>
      <anchor>4757e0809b051029b8f99fe391798be0</anchor>
      <arglist>(float fov, float sx, float sy, csBox2 &amp;sbox, float &amp;min_z, float &amp;max_z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csObject</name>
    <base>scfImplementation1&lt; csObject</base>
    <base> iObject &gt;</base>
    <filename>classcsObject.html</filename>
    <member kind="function">
      <name>csObjectIterator</name>
      <anchor>a808c1010616623075c42f0176a0c192</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csObject</name>
      <anchor>f5fcc1b440c38fec4f84e9d7449d658d</anchor>
      <arglist>(iBase *pParent=0)</arglist>
    </member>
    <member kind="function">
      <name>csObject</name>
      <anchor>8f0b6b0597254ec5c4b4f141f4590839</anchor>
      <arglist>(csObject &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>~csObject</name>
      <anchor>9fc24181832f98d3dbce3d77a1093e49</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddNameChangeListener</name>
      <anchor>8ff9a089c1e378a0b11d9bf4e77875c9</anchor>
      <arglist>(iObjectNameChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>FireNameChangeListeners</name>
      <anchor>43df582c3144c087c3bd42cb1be571bd</anchor>
      <arglist>(const char *oldname, const char *newname)</arglist>
    </member>
    <member kind="function">
      <name>GetChild</name>
      <anchor>af956d6e88eb0d007efaf3d356d64c65</anchor>
      <arglist>(const char *Name) const </arglist>
    </member>
    <member kind="function">
      <name>GetChild</name>
      <anchor>ad199df84277e2bc9c87e62f74449606</anchor>
      <arglist>(int iInterfaceID, int iVersion, const char *Name=0, bool FirstName=false) const </arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>c9034ea4500be5c22e62c38e5e6cf29d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>1e760285f7caa0decf7a753149388907</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>fc34569ff2bcd5c8731e09677623b21f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObjectParent</name>
      <anchor>6ed5068e2eed38b9aab72700512c5c2f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>InitializeObject</name>
      <anchor>06acba37ed1ff8e2258bc027900f601b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ObjAdd</name>
      <anchor>7d76d2f1e96622b5e1256fb21e9caade</anchor>
      <arglist>(iObject *obj)</arglist>
    </member>
    <member kind="function">
      <name>ObjAddChildren</name>
      <anchor>15dd5afe0ee839c0705d76c98699bbb5</anchor>
      <arglist>(iObject *Parent)</arglist>
    </member>
    <member kind="function">
      <name>ObjReleaseOld</name>
      <anchor>1d1e64734cc919fce1f59158d020b527</anchor>
      <arglist>(iObject *obj)</arglist>
    </member>
    <member kind="function">
      <name>ObjRemove</name>
      <anchor>695d621b2628a890e3089bc56368da18</anchor>
      <arglist>(iObject *obj)</arglist>
    </member>
    <member kind="function">
      <name>ObjRemoveAll</name>
      <anchor>4f27cbe3ad4814e8140b87ed2c3f85c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveNameChangeListener</name>
      <anchor>04e23cb4fbcc97a6c8e0c6b91ea56315</anchor>
      <arglist>(iObjectNameChangeListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>4fb515c2a5e4b91f0d5dd3d85e81943f</anchor>
      <arglist>(const char *iName)</arglist>
    </member>
    <member kind="function">
      <name>SetObjectParent</name>
      <anchor>0c443b8cf190a8966d0379a29050a7c3</anchor>
      <arglist>(iObject *)</arglist>
    </member>
    <member kind="function">
      <name>Children</name>
      <anchor>ca035275b1510a504974c133da617b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csid</name>
      <anchor>87f8cf898df971529f72c83759a3e5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>listeners</name>
      <anchor>30e0b2027ecd3939d189266deff237d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Name</name>
      <anchor>6878e2b755ad607e409c2ebd37ada8db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ParentObject</name>
      <anchor>e4b19f4d796c7671f16cbc0bd68c8b9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csObjectModel</name>
    <base>scfImplementation1&lt; csObjectModel</base>
    <base> iObjectModel &gt;</base>
    <filename>classcsObjectModel.html</filename>
    <member kind="function">
      <name>~csObjectModel</name>
      <anchor>6a8fbdccc579bb98bb645a35aeee453c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csObjectModel</name>
      <anchor>32f58fa7a7031a53effc20e3fb5c0d66</anchor>
      <arglist>(iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>AddListener</name>
      <anchor>bef7c5bcb13ca768d5fe1a4990ae8e1a</anchor>
      <arglist>(iObjectModelListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>CreateLowerDetailPolygonMesh</name>
      <anchor>1d0a475b79e1557ca0e5bf42b8d1efa7</anchor>
      <arglist>(float)</arglist>
    </member>
    <member kind="function">
      <name>FireListeners</name>
      <anchor>4a6fc5000d6e2c16ec6011a299c4f832</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshBase</name>
      <anchor>3e7d9f3e30351576fd2efa2f5e159374</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshColldet</name>
      <anchor>7c2f79db00917dd10135440b8439c99f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshShadows</name>
      <anchor>8fed3c44ae3261fa450a8c09c2cde20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshViscull</name>
      <anchor>42fc04cf312b1405fc0f9064e9d0dd7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetShapeNumber</name>
      <anchor>ac1075c91da02e10642b326c5f6af701</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTerraFormerColldet</name>
      <anchor>4cffdad0c34be68df1fce291195c3d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>088c1c38c9ae9c7d1493ed6c45521690</anchor>
      <arglist>(iObjectModelListener *listener)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshBase</name>
      <anchor>bec7d869efd786848e5b42c8e3f1dddb</anchor>
      <arglist>(iPolygonMesh *base)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshColldet</name>
      <anchor>c09f022e071f526cbcb7c5ed1d15ab87</anchor>
      <arglist>(iPolygonMesh *polymesh)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshShadows</name>
      <anchor>ec3504936a543de2fea9a131568ba8f8</anchor>
      <arglist>(iPolygonMesh *polymesh)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshViscull</name>
      <anchor>6d415ef8523621d82bd3b540994a1df1</anchor>
      <arglist>(iPolygonMesh *polymesh)</arglist>
    </member>
    <member kind="function">
      <name>SetShapeNumber</name>
      <anchor>9053f5697cfb2e735ce87362cad51f9e</anchor>
      <arglist>(long n)</arglist>
    </member>
    <member kind="function">
      <name>ShapeChanged</name>
      <anchor>c83cff44920cf2d84c04df3826231f2d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csObjectRegistry</name>
    <base>scfImplementation1&lt; csObjectRegistry</base>
    <base> iObjectRegistry &gt;</base>
    <filename>classcsObjectRegistry.html</filename>
    <member kind="function">
      <name>~csObjectRegistry</name>
      <anchor>e3efde23d5b2207b63c2cb02e3cc8635</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>340ad091f9ee9b02cf14bd373adc7674</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>08289f25fd1e6441d77f52ecab98b745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>863d02c63ea22ee9b73f13abd386d792</anchor>
      <arglist>(scfInterfaceID id, int version)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>b0a04cc77fc3a5c6d818de94eb14d023</anchor>
      <arglist>(char const *tag, scfInterfaceID id, int version)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>0ea45236f3a515ae06dbac2d288565db</anchor>
      <arglist>(char const *tag)</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>1acb7703a41a4e7eb438a0c2de54c2ae</anchor>
      <arglist>(iBase *obj, char const *tag=0)</arglist>
    </member>
    <member kind="function">
      <name>Unregister</name>
      <anchor>fa0d7d0cd0cbfe68b1919dedf31e572d</anchor>
      <arglist>(iBase *obj, char const *tag=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csOrthoTransform</name>
    <base>csReversibleTransform</base>
    <filename>classcsOrthoTransform.html</filename>
    <member kind="function">
      <name>csOrthoTransform</name>
      <anchor>21956bd7babb5be7864b4b0c8da3c3bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csOrthoTransform</name>
      <anchor>dd19421188e21e7e33303d70a5658edb</anchor>
      <arglist>(const csMatrix3 &amp;o2t, const csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>csOrthoTransform</name>
      <anchor>6c4d9be981e5487d02baa4015fd2d748</anchor>
      <arglist>(const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>SetO2T</name>
      <anchor>2c075ede84fdeddac05480eb5a39b85d</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>SetT2O</name>
      <anchor>851a3ee657be77e99ba8b926f837eeed</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParasiticDataBuffer</name>
    <base>scfImplementationExt0&lt; csParasiticDataBuffer</base>
    <base> csParasiticDataBufferBase &gt;</base>
    <filename>classcsParasiticDataBuffer.html</filename>
    <member kind="function">
      <name>~csParasiticDataBuffer</name>
      <anchor>9035bb8d51fb938cf174b9c7ba441838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csParasiticDataBuffer</name>
      <anchor>7ae2e6c45be45cf79d0ab64100e248b0</anchor>
      <arglist>(iDataBuffer *parent, size_t offs, size_t size=(size_t)~0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParasiticDataBufferBase</name>
    <base>scfImplementation1&lt; csParasiticDataBufferBase</base>
    <base> iDataBuffer &gt;</base>
    <filename>classcsParasiticDataBufferBase.html</filename>
    <member kind="function">
      <name>~csParasiticDataBufferBase</name>
      <anchor>1ed9f963a509603f9b63543ba82a67c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csParasiticDataBufferBase</name>
      <anchor>58d49fa2340bd6695baf60261903d058</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csParasiticDataBufferBase</name>
      <anchor>5092bc0c8793aa8782863cef9ff8e1a2</anchor>
      <arglist>(iDataBuffer *parent, size_t offs, size_t size=(size_t)~0)</arglist>
    </member>
    <member kind="function">
      <name>SetContents</name>
      <anchor>e848878871cad422cb78ca1d65e9a593</anchor>
      <arglist>(iDataBuffer *parent, size_t offs, size_t size)</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>2c98bd38e90c54fe57611b1ca617163d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>parentBuffer</name>
      <anchor>b14a0049bdcb4ed1ff88f55c44f7f212</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>size</name>
      <anchor>fa541c28f62eaab7fec49b887091aa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>45fb374e0fd1661f3784a55d8f152b89</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInt8</name>
      <anchor>e8daf38dc467368ee68fb61762f17ca7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>90f505cef368118c4ca0349f6df0b0a6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetUint8</name>
      <anchor>8d7db71ef6d7637c7acccbaa58afb2d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>668bd1dbf5cb2521bd1bb71db6428ead</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParasiticDataBufferPooled</name>
    <base>scfImplementationPooled&lt; scfImplementationExt0&lt; csParasiticDataBufferPooled</base>
    <base> csParasiticDataBufferBase &gt; &gt;</base>
    <filename>classcsParasiticDataBufferPooled.html</filename>
    <member kind="function">
      <name>csParasiticDataBufferPooled</name>
      <anchor>d122742a1074f7cbd6292c3e6a10a0d4</anchor>
      <arglist>(iDataBuffer *parent, size_t offs, size_t size=(size_t)~0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPartialOrder</name>
    <filename>classcsPartialOrder.html</filename>
    <member kind="function">
      <name>CycleTest</name>
      <anchor>23c4136f9aee34312a493702aacbb2cf</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>InternalCycleTest</name>
      <anchor>8c82fc79f67f35f6ee0669ef7cd3bc07</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>InternalCycleTest</name>
      <anchor>9246f05824e723c48c4bc82bd83abf21</anchor>
      <arglist>(size_t n1, size_t n2)</arglist>
    </member>
    <member kind="function">
      <name>InternalIsEnabled</name>
      <anchor>3bcaa06c84c029e6bbff6ce51cb5adc2</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <name>SanityCheck</name>
      <anchor>9a2af761ae85027f8ef28fe70818ae12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NodeMap</name>
      <anchor>40387ebdcee22aa03f91b9e48253025a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Nodes</name>
      <anchor>8adaefa03d5ee93ca042496c5477c976</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPartialOrder</name>
      <anchor>74776d0e1abc139c8d1d37fa32562e9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csPartialOrder</name>
      <anchor>c049ed09a49c6bc15c02fed6c964541f</anchor>
      <arglist>(const csPartialOrder &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csPartialOrder</name>
      <anchor>498c0364f7640329afb86ab2c7476e7e</anchor>
      <arglist>(const csPartialOrder *other)</arglist>
    </member>
    <member kind="function">
      <name>Add</name>
      <anchor>65d4a11892772a892de83773fef1b399</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>AddOrder</name>
      <anchor>59f8261061cd5bcd4a4b1db83c11406c</anchor>
      <arglist>(const T &amp;node1, const T &amp;node2)</arglist>
    </member>
    <member kind="function">
      <name>ClearMark</name>
      <anchor>a5a51a4c110addc4e962ee32e541009e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClearMark</name>
      <anchor>53b49d62606991fd51c58703c917fed5</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>a2d8b4105fbbad447276689fe057a775</anchor>
      <arglist>(const T &amp;pre, const T &amp;post)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>7f0eb5707007485b7f04460d2de00cff</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>e8942b40daf0f0e751493e41616b3f87</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>DeleteOrder</name>
      <anchor>6b7a8dfe6fa9e3a909c1a2a275abf58a</anchor>
      <arglist>(const T &amp;node1, const T &amp;node2)</arglist>
    </member>
    <member kind="function">
      <name>GetByIndex</name>
      <anchor>b690c9faa3674e0e5a42d8858a282db5</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <name>GetEnabled</name>
      <anchor>3948a1cf8b69d0de21d8f3f586c5a74b</anchor>
      <arglist>(T fail)</arglist>
    </member>
    <member kind="function">
      <name>HasEnabled</name>
      <anchor>975de72526be86e223f1cc651815f602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsEnabled</name>
      <anchor>3182ef0737a36dae86152ce3fc05f0c7</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>IsMarked</name>
      <anchor>c721d05bef4034c47ab13e61b5cc71b5</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>Mark</name>
      <anchor>343c1d3e9ab33e351b3079566d732453</anchor>
      <arglist>(const T &amp;node)</arglist>
    </member>
    <member kind="function">
      <name>Size</name>
      <anchor>f0fe0b0bcd5835fa7cfee9def815f2ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Solve</name>
      <anchor>d91a8f82306af55c5cf5e29134b500e3</anchor>
      <arglist>(csList&lt; const T &gt; &amp;result)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPartialOrder::Node</name>
    <filename>classcsPartialOrder_1_1Node.html</filename>
    <member kind="function">
      <name>Node::Node</name>
      <anchor>3dd05334d426ba512f0c75327d39add7</anchor>
      <arglist>(const T &amp;id)</arglist>
    </member>
    <member kind="function">
      <name>Node::Node</name>
      <anchor>ddda51e2a8dfdefd5bc502827713f0e1</anchor>
      <arglist>(const Node &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Node::marked</name>
      <anchor>4d35cbb7ed18f5e0f936b081db735b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::output</name>
      <anchor>a4028b196ed3996807371d91b68272b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::post</name>
      <anchor>481004251b133289d292e7e86d3b5ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::pre</name>
      <anchor>26f57a7dcc7de54ab1825d1ea7af5e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::self</name>
      <anchor>00c2c7d8c56be36e08ece05ab213933c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParticleSystem</name>
    <base>scfImplementationExt2&lt; csParticleSystem</base>
    <base> csObjectModel</base>
    <base> iMeshObject</base>
    <base> iParticleState &gt;</base>
    <filename>classcsParticleSystem.html</filename>
    <member kind="function">
      <name>HitBeamBBox</name>
      <anchor>82bd30a581f7f4efece6aa2071e28df6</anchor>
      <arglist>(const csVector3 &amp;, const csVector3 &amp;, csVector3 &amp;, float *)</arglist>
    </member>
    <member kind="function">
      <name>ChangeObject</name>
      <anchor>347ca4946c96b85fedbba968139b0c9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alpha_now</name>
      <anchor>05828e89213a9118a649b50a6d2cf991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>alphapersecond</name>
      <anchor>19940901e610518c6bf9c4c5137a2c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>anglepersecond</name>
      <anchor>28c998588eba2f64eeae3cd450a6c21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>colorpersecond</name>
      <anchor>888cc5da2ba576cba226134ae6cd1b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>current_features</name>
      <anchor>ac54b96ac9c478c99db888113bff1b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>current_lod</name>
      <anchor>eb577506f932714a6085599a4d8c340a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>engine</name>
      <anchor>c652fcb7363221ed63e6ff7130440b7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>factory</name>
      <anchor>7f9c3a76227c84c1a8af27b69a1a79f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>23d5c69efae91a19ff8a05be9fdc5662</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>g3d</name>
      <anchor>572c9af1e855ce14fdd13b4c1b053291</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>index_buffer</name>
      <anchor>d3c082e81590eb359dc8dc13b6e4a2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>initialized</name>
      <anchor>b6ca273fe72a45272e7c5c11fde2b84b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>light_mgr</name>
      <anchor>f46486ca7e356728b228154c51c1bb35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>logparent</name>
      <anchor>f50f31a3bbab691dd5210dfbd0622c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>15ca24de4c8a7b3a7719da5b0899c228</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>d0eaf4027452133719edd24637d0304f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>part_sides</name>
      <anchor>953c7a4bf8a910688a0004109c2e9757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>particles</name>
      <anchor>45c3a9e39dd1d8e65ee2b378a2b526e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>perFrameHolder</name>
      <anchor>e041690a94c9221c85fbd93af78da1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rmHolder</name>
      <anchor>d175f24ab436e4d77d2aa3172f0888fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scalepersecond</name>
      <anchor>884cc654143f0574f816044f25dba561</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sprite2ds</name>
      <anchor>f9ba931fefc7070c7d98129c1893c329</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>time_to_live</name>
      <anchor>9b116de332ff172aecc54db61304b43a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TriangleCount</name>
      <anchor>c4127b5a283838613d42b31a3eaca024</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VertexCount</name>
      <anchor>acd28c15386b14acc411b8a531497e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vis_cb</name>
      <anchor>517bdc32182334637eaf99e76dd48462</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleSystem</name>
      <anchor>dd16ef4f5826db483de06feeee44477d</anchor>
      <arglist>(iObjectRegistry *object_reg, iMeshObjectFactory *factory)</arglist>
    </member>
    <member kind="function">
      <name>~csParticleSystem</name>
      <anchor>debe13f985d54028f61e8ac339712701</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddColor</name>
      <anchor>01f10b72e64fd9c6a9842705ec05f13a</anchor>
      <arglist>(const csColor &amp;col)</arglist>
    </member>
    <member kind="function">
      <name>AppendParticle</name>
      <anchor>f967443bec81784f9c5b869f9e3e1558</anchor>
      <arglist>(iMeshObject *mesh, iParticle *part, iSprite2DState *spr2d)</arglist>
    </member>
    <member kind="function">
      <name>AppendRectSprite</name>
      <anchor>ee8755fb76b5373659d06d797eb406fc</anchor>
      <arglist>(float width, float height, iMaterialWrapper *mat, bool lighted)</arglist>
    </member>
    <member kind="function">
      <name>AppendRegularSprite</name>
      <anchor>d2d8f50d12f461d1e3d17c57951eff6d</anchor>
      <arglist>(int n, float radius, iMaterialWrapper *mat, bool lighted)</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>2411cec8a23d2d65dfd477d8fed276c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>37ceb857858e4318a703f3681b6da5b9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetBoundingBox</name>
      <anchor>0dbea829ddfcdfc0e64f588d4c74c8d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetChangeAlpha</name>
      <anchor>45ca251718ff355905c93b329a57d403</anchor>
      <arglist>(float &amp;factor) const </arglist>
    </member>
    <member kind="function">
      <name>GetChangeColor</name>
      <anchor>977ea928fb0b39e8676e57c157126e29</anchor>
      <arglist>(csColor &amp;col) const </arglist>
    </member>
    <member kind="function">
      <name>GetChangeRotation</name>
      <anchor>173c3de06b03791662c9d86bc5dcdc4f</anchor>
      <arglist>(float &amp;angle) const </arglist>
    </member>
    <member kind="function">
      <name>GetChangeSize</name>
      <anchor>89b632a275ebfe9b02971deb0fb05fdf</anchor>
      <arglist>(float &amp;factor) const </arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>8dcd7e94418cd0cfb95e0c724858119c</anchor>
      <arglist>(csColor &amp;col) const </arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>b26354018a3050976262c3b0720b255f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>ac810ef4d77a176d43ff2617c0da8261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialWrapper</name>
      <anchor>2b338104d8a482aaa34f4077f81f6460</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMeshWrapper</name>
      <anchor>684ddd7edfbba6e18b4a2901666ead80</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>f258236fe17d9af5e14a2b9d848bdbb4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetNumParticles</name>
      <anchor>45f03430516d9eb1adcf100109a154e9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetObjectBoundingBox</name>
      <anchor>bb6824591c88d75a462680c30ac0065b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetObjectBoundingBox</name>
      <anchor>517abb6bbfa95b9d083ce6a87d376534</anchor>
      <arglist>(csBox3 &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <name>GetObjectModel</name>
      <anchor>9665cdd29f34a23d4d468ac3edf07991</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetParticle</name>
      <anchor>0ef603bfaea2472496ac8e39f1407895</anchor>
      <arglist>(size_t idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetParticleCount</name>
      <anchor>020cfe90155f6387399131953f6bc971</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>0427cf5bd18d9044f82140678b23349e</anchor>
      <arglist>(float &amp;rad, csVector3 &amp;cent)</arglist>
    </member>
    <member kind="function">
      <name>GetRandomDirection</name>
      <anchor>e97201db0ee15f5b3f47cb894d62608e</anchor>
      <arglist>(csVector3 const &amp;magnitude, csVector3 const &amp;offset)</arglist>
    </member>
    <member kind="function">
      <name>GetRandomDirection</name>
      <anchor>03d497ee37e00ee49ad8163b3c223253</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRandomPosition</name>
      <anchor>d8dd7d160c762ab28f01d3fcedb092c9</anchor>
      <arglist>(csBox3 const &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>GetRenderMeshes</name>
      <anchor>2218c7a198dcc063d1426ba4a649c410</anchor>
      <arglist>(int &amp;n, iRenderView *rview, iMovable *movable, uint32 frustum_mask)</arglist>
    </member>
    <member kind="function">
      <name>GetSelfDestruct</name>
      <anchor>d566654bd5dbe65f2c2bae9269331e0d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTerraFormerColldet</name>
      <anchor>68d77c097d1ec09be6de89d9a7073c17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTimeToLive</name>
      <anchor>ad9c972681cbc6933711c2c2f5c2b350</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVisibleCallback</name>
      <anchor>4bb742b3d55571973a10e5f563d88b62</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HitBeamObject</name>
      <anchor>5cb2d56ee22014cdd3f69dbf43528a4d</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr, int *polygon_idx=0, iMaterialWrapper **material=0)</arglist>
    </member>
    <member kind="function">
      <name>HitBeamOutline</name>
      <anchor>82cff32f37801a01a92c1dbaa2d0b583</anchor>
      <arglist>(const csVector3 &amp;, const csVector3 &amp;, csVector3 &amp;, float *)</arglist>
    </member>
    <member kind="function">
      <name>InvalidateMaterialHandles</name>
      <anchor>144928e3054bc79d68a7926322a700e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>NextFrame</name>
      <anchor>eea04e78918de081feee87b4be9dc4e4</anchor>
      <arglist>(csTicks current_time, const csVector3 &amp;, uint)</arglist>
    </member>
    <member kind="function">
      <name>PositionChild</name>
      <anchor>35dd8229a1af65102243722d4d48de8d</anchor>
      <arglist>(iMeshObject *, csTicks)</arglist>
    </member>
    <member kind="function">
      <name>RemoveParticles</name>
      <anchor>bbed5b639f1ebd79c195641eed52356f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>365c842a7f52aa2b5c6c2bf500794f35</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <name>ScaleBy</name>
      <anchor>78548263445633a40b43ac48949a87ac</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <name>SetAlpha</name>
      <anchor>996ad95cb456144030ea892a3f02c7f5</anchor>
      <arglist>(float alpha)</arglist>
    </member>
    <member kind="function">
      <name>SetChangeAlpha</name>
      <anchor>fc3a3d06795a854bf288b00c29c34578</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <name>SetChangeColor</name>
      <anchor>1696bc013eb8bd5a128808373a29d99a</anchor>
      <arglist>(const csColor &amp;col)</arglist>
    </member>
    <member kind="function">
      <name>SetChangeRotation</name>
      <anchor>74fd57218168ee688315ec401ee821e0</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <name>SetChangeSize</name>
      <anchor>d7ab2dcc71f396c500f9a49da3b24a2a</anchor>
      <arglist>(float factor)</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>84c7bbbec4256044e4d51085eaf1ec06</anchor>
      <arglist>(const csColor &amp;col)</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialWrapper</name>
      <anchor>da0fffc08fa20be0ada73d32b3a41bf6</anchor>
      <arglist>(iMaterialWrapper *mat)</arglist>
    </member>
    <member kind="function">
      <name>SetMeshWrapper</name>
      <anchor>d21a79d74f7ce257289f7ad8bb501250</anchor>
      <arglist>(iMeshWrapper *lp)</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>ca1e9b3e7c4eb998ce9bb7ec1cadc14e</anchor>
      <arglist>(uint mode)</arglist>
    </member>
    <member kind="function">
      <name>SetObjectBoundingBox</name>
      <anchor>d9cb30fd5ebce817edfba40ec9709c77</anchor>
      <arglist>(const csBox3 &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <name>SetParticleCount</name>
      <anchor>6f6d2c48afbfc66a54efc1c1cedcaac6</anchor>
      <arglist>(size_t num)</arglist>
    </member>
    <member kind="function">
      <name>SetSelfDestruct</name>
      <anchor>ddec76581621fb3b386e78fea4804100</anchor>
      <arglist>(csTicks t)</arglist>
    </member>
    <member kind="function">
      <name>SetupBuffers</name>
      <anchor>547ee5f0b6323637c999fcb4aa914360</anchor>
      <arglist>(size_t part_sides)</arglist>
    </member>
    <member kind="function">
      <name>SetupColor</name>
      <anchor>97e4196850df7db6f62870812811e902</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetupMixMode</name>
      <anchor>706d3b106e55c7c4b80ba8613e26bc62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetupObject</name>
      <anchor>b5bc6a3e1746526ea816be2b03a646d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetVisibleCallback</name>
      <anchor>dc73b77b32991864dc11725e96f1c60b</anchor>
      <arglist>(iMeshObjectDrawCallback *cb)</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeAlpha</name>
      <anchor>da5ac425237099fca62ff79dbb985310</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeColor</name>
      <anchor>13600d9c75a157dd13a8f7b5c96ade71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeRotation</name>
      <anchor>dbccc8d08cd64c38457256a169030297</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeSize</name>
      <anchor>30018c9ab3ebdb0faf499a040e941998</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UnSetSelfDestruct</name>
      <anchor>8e95746fd0997234c98d63dd9f79468f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Update</name>
      <anchor>65efacb0fdb7dc112820e2afafb7cb1b</anchor>
      <arglist>(csTicks elapsed_time)</arglist>
    </member>
    <member kind="function">
      <name>bbox</name>
      <anchor>688d562115daf658d2ba538838aa57ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>change_alpha</name>
      <anchor>e49ff9a4a781c06ff621816b2be5628e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>change_color</name>
      <anchor>1024c8931d49c7ed970469ae21bf1d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>change_rotation</name>
      <anchor>6dd8d6408d31f18186448cd6d95b1f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>change_size</name>
      <anchor>95a8f1c4c09e116e7789b65cf3ec99e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>a590fa605369d3a972a9f029b07536f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat</name>
      <anchor>1aba4e26ebd91ead86795b0ee0f4c38c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MixMode</name>
      <anchor>c37a6067c75ff5cbe350250a1d0ed786</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>part_pos</name>
      <anchor>a52568155ad252a4bde6048aa855c8c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>partmeshes</name>
      <anchor>67ae8717e75f19f71d9cdfa65b9746d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>prev_time</name>
      <anchor>739dea54902e352b76928bac50b52d2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>radius</name>
      <anchor>bbd8ae8c344db6b368e6853ed956e571</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>self_destruct</name>
      <anchor>126c4410a5631e11011eb96fcc37224b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>spr_factory</name>
      <anchor>f5480be59af9028375491bd1965a4a8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPath</name>
    <base>scfImplementation1&lt; csPath</base>
    <base> iPath &gt;</base>
    <filename>classcsPath.html</filename>
    <member kind="function">
      <name>spline</name>
      <anchor>4ae74a9c7bfaba1d95c390ea8d142631</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPath</name>
      <anchor>b1e775cfc8e243c53044959314e5158f</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <name>~csPath</name>
      <anchor>3e5011dafbee8ee65c8f826cd5091964</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Calculate</name>
      <anchor>5380f7b78ee74988b28521ce7adf07fb</anchor>
      <arglist>(float time)</arglist>
    </member>
    <member kind="function">
      <name>CalculateAtTime</name>
      <anchor>f647db6e88420b3b6ddfae29cf44fee1</anchor>
      <arglist>(float time)</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentIndex</name>
      <anchor>40adfbb9404fd2f1cf0146c46723e8cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDimensionValue</name>
      <anchor>616194b67d44b47461af6e1f13a5cb9f</anchor>
      <arglist>(int dim, int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetDimensionValues</name>
      <anchor>8bc98d6e146a3585fee56ee0f18cdd0e</anchor>
      <arglist>(int dim) const </arglist>
    </member>
    <member kind="function">
      <name>GetForwardVector</name>
      <anchor>1c71be4f74697c9443143d141ed102c9</anchor>
      <arglist>(int idx, csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedForward</name>
      <anchor>efcb6a00a18ad479b743aa3cd36bb0e1</anchor>
      <arglist>(csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedPosition</name>
      <anchor>00765fc3774592c16e94d43764d85e8a</anchor>
      <arglist>(csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedUp</name>
      <anchor>df23670f8bb465da336b15bba3d44f02</anchor>
      <arglist>(csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>GetPointCount</name>
      <anchor>a2069ff57d633eafb4cdb07fd54dc6aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPositionVector</name>
      <anchor>e3e516426fea85e59a8c267196fcaa89</anchor>
      <arglist>(int idx, csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>GetTime</name>
      <anchor>88361d34013f698906dc5dd3bc421a75</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>GetTimes</name>
      <anchor>a79dea73d57cf0e79a88c5102266cdf8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTimeValue</name>
      <anchor>ea9ee1b0cf660579b572d5c27466c3c1</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetTimeValues</name>
      <anchor>f3812d41c2c863a8fb94c1d8ba2324bc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetUpVector</name>
      <anchor>7d31e5cb8656faf7c16d926299756a68</anchor>
      <arglist>(int idx, csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>InsertPoint</name>
      <anchor>ec4be6eabfd41e02091ac394a319d646</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>29ff2c85c39e43484bf6eede70c9e713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemovePoint</name>
      <anchor>cbd00e6be47554f48f626ac1c57d552c</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>SetForwardVector</name>
      <anchor>c79b4f5043918b78f11b86c6545b8376</anchor>
      <arglist>(int idx, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>SetForwardVectors</name>
      <anchor>03dedfe361f1b09219aee5886a113bd3</anchor>
      <arglist>(csVector3 *v)</arglist>
    </member>
    <member kind="function">
      <name>SetPositionVector</name>
      <anchor>369a8cff153598f2e1087cadf65177ea</anchor>
      <arglist>(int idx, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>SetPositionVectors</name>
      <anchor>d1d4fa81bd09470c1567b4d10da7ab98</anchor>
      <arglist>(csVector3 *v)</arglist>
    </member>
    <member kind="function">
      <name>SetTime</name>
      <anchor>58b1a3f3dc015c86e106c41e56bcc3ad</anchor>
      <arglist>(int idx, float t)</arglist>
    </member>
    <member kind="function">
      <name>SetTimes</name>
      <anchor>5ca6b626b710410bfdbfd7e6bc22cc3b</anchor>
      <arglist>(float const *t)</arglist>
    </member>
    <member kind="function">
      <name>SetTimeValue</name>
      <anchor>37fcf1c0b9645556879383595c06ef35</anchor>
      <arglist>(int idx, float t)</arglist>
    </member>
    <member kind="function">
      <name>SetTimeValues</name>
      <anchor>aafd168ca7c1ae420e614973ae5537d5</anchor>
      <arglist>(float const *t)</arglist>
    </member>
    <member kind="function">
      <name>SetUpVector</name>
      <anchor>6e10ef5b599b230a9c4bc319cf9ed966</anchor>
      <arglist>(int idx, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>SetUpVectors</name>
      <anchor>21089eee0a832a7fa61af6cd5357c8de</anchor>
      <arglist>(csVector3 *v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPathsList</name>
    <filename>classcsPathsList.html</filename>
    <member kind="function">
      <name>operator *=</name>
      <anchor>d51ea642c2ed950eda64ca80a9e417ef</anchor>
      <arglist>(const char *right)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>4e39d18a127d04e8d20817a25a74908e</anchor>
      <arglist>(const Entry &amp;right)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>1525fd6d2a1976113172f8c751f30cfd</anchor>
      <arglist>(const csPathsList &amp;right)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>ad1d44c2ac86a5aa02ee40b592e1a88b</anchor>
      <arglist>(const csPathsList &amp;left, const char *right)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>5535edfa3e5f1d60a6d91fab8fd01145</anchor>
      <arglist>(const csPathsList &amp;left, const Entry &amp;right)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>73ab5c7d28c83540746a34b555647b2b</anchor>
      <arglist>(const char *left, const csPathsList &amp;right)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>dec7c464d560bb8e699cb842d6a2887e</anchor>
      <arglist>(const Entry &amp;left, const csPathsList &amp;right)</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>2f48a24e09267f9d3d993abbdd69046c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>6121b57ba0079da121a843414897a5e5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>d3e58ac0afff78f2bf751e8a86dc003f</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>csPathsList</name>
      <anchor>4e1679fbc2e657ba5888a85fe16387df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csPathsList</name>
      <anchor>6c912eb2e1dc853ce815681e390e7b6e</anchor>
      <arglist>(csPathsList const &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>csPathsList</name>
      <anchor>38aa6160395047706b2264aa8ef164e8</anchor>
      <arglist>(const char *pathList, bool expand=false)</arglist>
    </member>
    <member kind="function">
      <name>csPathsList</name>
      <anchor>df250f4baae9f324c093b8802cb24b12</anchor>
      <arglist>(const char *const pathList[], bool expand=false)</arglist>
    </member>
    <member kind="function">
      <name>~csPathsList</name>
      <anchor>8be7a8c64bd9292ae0d6c1e3e3ee3f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddUnique</name>
      <anchor>7d2ab5da883e1d5cab9bdc477443c00e</anchor>
      <arglist>(const csPathsList &amp;list, bool overrideRecursive=true)</arglist>
    </member>
    <member kind="function">
      <name>AddUnique</name>
      <anchor>e806a10bd77280d74388476ec26de7ed</anchor>
      <arglist>(const Entry &amp;path, bool overrideRecursive=true)</arglist>
    </member>
    <member kind="function">
      <name>AddUnique</name>
      <anchor>e84290ce6c08f29dc6e7393a5e9848d6</anchor>
      <arglist>(const char *path, bool scanRecursive=false, const char *type=0, bool overrideRecursive=true)</arglist>
    </member>
    <member kind="function">
      <name>AddUniqueExpanded</name>
      <anchor>e84d212bf6bd8451a5bd7c181b790214</anchor>
      <arglist>(const csPathsList &amp;list, bool overrideRecursive=true)</arglist>
    </member>
    <member kind="function">
      <name>AddUniqueExpanded</name>
      <anchor>c43cdbdf67974e5333f95e0967aae8c1</anchor>
      <arglist>(const Entry &amp;path, bool overrideRecursive=true)</arglist>
    </member>
    <member kind="function">
      <name>AddUniqueExpanded</name>
      <anchor>205a2c97026f74679d4ec1f013341f72</anchor>
      <arglist>(const char *path, bool scanRecursive=false, const char *type=0, bool overrideRecursive=true)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>f5224ee3a11b88e1356c5aca7f2902ee</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>08c505bcfab64a957b3f1eb6a96065c1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>290bddd9eaf69ba6aa6c4308ff713d09</anchor>
      <arglist>(csPathsList const &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>63c9e5ec92cbfc3568afe28fd473fd66</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>66b6206ea85c10cb89d3014f34a0451b</anchor>
      <arglist>(const csPathsList &amp;left, const csPathsList &amp;right)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPathsUtilities</name>
    <filename>classcsPathsUtilities.html</filename>
    <member kind="function">
      <name>ExpandAll</name>
      <anchor>880a69a61bf222ff6357bf7cc543bfd2</anchor>
      <arglist>(const csPathsList &amp;paths)</arglist>
    </member>
    <member kind="function">
      <name>ExpandPath</name>
      <anchor>8b0691377916e2a3948c523e47c0b1d7</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <name>FilterInvalid</name>
      <anchor>e1e21d183e514183b6a4e2789d743d59</anchor>
      <arglist>(csPathsList &amp;paths)</arglist>
    </member>
    <member kind="function">
      <name>LocateFile</name>
      <anchor>6474f3af744d3a2af15dccfeb32d4719</anchor>
      <arglist>(const csPathsList &amp;paths, const char *file, bool thorough=false)</arglist>
    </member>
    <member kind="function">
      <name>PathsIdentical</name>
      <anchor>c6f0cd646a3127e1802ebbbadc8752e3</anchor>
      <arglist>(const char *path1, const char *path2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPDelArray</name>
    <base>csArray&lt; T *</base>
    <base> csPDelArrayElementHandler&lt; T * &gt; &gt;</base>
    <filename>classcsPDelArray.html</filename>
    <member kind="function">
      <name>csPDelArray</name>
      <anchor>17ef6b9277dafde63485439e4110f7d6</anchor>
      <arglist>(int ilimit=0, int ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>Extract</name>
      <anchor>f749cc0e2d1e596ca03394f87a31efc3</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>GetAndClear</name>
      <anchor>dfa89576037482e615c1f00947c4012d</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>be6552fd9322dd472301e2f9f97e55d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetLength</name>
      <anchor>534d901538c27f273ae3a10ea01eb99c</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetLength</name>
      <anchor>ded81cfb7e7b01a770ab4e40d6afd547</anchor>
      <arglist>(size_t n, T *const &amp;w)</arglist>
    </member>
    <member kind="function">
      <name>SetLength</name>
      <anchor>ec97814e150ae7790acc8e0265e392d4</anchor>
      <arglist>(size_t n, T const &amp;what)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPDelArrayElementHandler</name>
    <base>csArrayElementHandler</base>
    <filename>classcsPDelArrayElementHandler.html</filename>
    <member kind="function">
      <name>Construct</name>
      <anchor>db6181563c9477e7c218e175f5c4a6a2</anchor>
      <arglist>(T *address, T const &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>Destroy</name>
      <anchor>cdbc63e1c68c2cead0bd525a4f275db6</anchor>
      <arglist>(T *address)</arglist>
    </member>
    <member kind="function">
      <name>InitRegion</name>
      <anchor>6bf824b1a73720194e93ccff753ffd63</anchor>
      <arglist>(T *address, size_t count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPen</name>
    <base>iPen</base>
    <filename>classcsPen.html</filename>
    <member kind="function">
      <name>AddTexCoord</name>
      <anchor>9b5b356eccfb50e2817f23163042e7b0</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>AddThickPoints</name>
      <anchor>b0f6544790fc593a55353f61d393d0ce</anchor>
      <arglist>(float x1, float y1, float x2, float y2)</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>e6b1d44990baabb023e07097e96279c5</anchor>
      <arglist>(float x, float y, bool force_add=false)</arglist>
    </member>
    <member kind="function">
      <name>ClearFlag</name>
      <anchor>fb048f3e04476fc9288e946f6bef4507</anchor>
      <arglist>(uint flag)</arglist>
    </member>
    <member kind="function">
      <name>ClearTransform</name>
      <anchor>67a508b4e2c20f4a3b91acef4201bc0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DrawArc</name>
      <anchor>68a9ba22a4df1a084d265bb357c781fe</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, float start_angle=0, float end_angle=6.2831853)</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>5c6c1a4d2efc245ee9bda743b9ce844e</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawMesh</name>
      <anchor>3fe32fac1e0ffc69004959b80b801fee</anchor>
      <arglist>(csRenderMeshType mesh_type)</arglist>
    </member>
    <member kind="function">
      <name>DrawMiteredRect</name>
      <anchor>e2d01e51bcc3dd1ba9a739d812715da9</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint miter)</arglist>
    </member>
    <member kind="function">
      <name>DrawPoint</name>
      <anchor>86e00fb2731022eb4c98ca448a646f2c</anchor>
      <arglist>(uint x1, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawRect</name>
      <anchor>535ee1b9bc8ca5eba8ae2a10f1a901bc</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawRoundedRect</name>
      <anchor>3ea4ed653ec9f85f7cc0230465323d81</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint roundness)</arglist>
    </member>
    <member kind="function">
      <name>DrawThickLine</name>
      <anchor>2dbd03b0d09077deb8a1997da31e73af</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)</arglist>
    </member>
    <member kind="function">
      <name>DrawTriangle</name>
      <anchor>da90b951b2f6a5a740c37ecb235566dc</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint x3, uint y3)</arglist>
    </member>
    <member kind="function">
      <name>PopTransform</name>
      <anchor>b909c3003b068aef62558c42021e437e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PushTransform</name>
      <anchor>4e92d48077ae54d3e8a694652b1d9026</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>03c25d06d4aae17cf9ca970068d6e3bd</anchor>
      <arglist>(const float &amp;a)</arglist>
    </member>
    <member kind="function">
      <name>SetAutoTexture</name>
      <anchor>54c8156c078cfe6a7ad9eb22bd3594cf</anchor>
      <arglist>(float w, float h)</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>848a217fab578ceb9bf26de8fae44a89</anchor>
      <arglist>(const csColor4 &amp;color)</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>ec3ec70cb4e1be4a38f78f138320a8bb</anchor>
      <arglist>(float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <name>SetFlag</name>
      <anchor>4d8befbbaefef36c84dbcd5ad2ee9e9c</anchor>
      <arglist>(uint flag)</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>f81a262836e560950bccf0e0f565c437</anchor>
      <arglist>(uint mode)</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>a65e30728dd4a8d7bda77fd4a2d7b6ef</anchor>
      <arglist>(const csVector3 &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>SetPenWidth</name>
      <anchor>b1a46490c4984bf2d0ccb6207d400daa</anchor>
      <arglist>(float width)</arglist>
    </member>
    <member kind="function">
      <name>SetTexture</name>
      <anchor>3edbc794107682d3241760d8f5a6598a</anchor>
      <arglist>(csRef&lt; iTextureHandle &gt; tex)</arglist>
    </member>
    <member kind="function">
      <name>SetupMesh</name>
      <anchor>ef471b2a056bcef9512daace7290f402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>33ba3592754cededac73f0c4590db2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SwapColors</name>
      <anchor>296b4e5b8c9f32cb716909648de96d8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Translate</name>
      <anchor>02352d26acf17a3edeb425a0a238c44d</anchor>
      <arglist>(const csVector3 &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>8caba09193b92ad4a60167da4c9156a8</anchor>
      <arglist>(iFont *font, uint x1, uint y1, char *text)</arglist>
    </member>
    <member kind="function">
      <name>WriteBoxed</name>
      <anchor>6670e02a59d3ffa99408f75040327924</anchor>
      <arglist>(iFont *font, uint x1, uint y1, uint x2, uint y2, uint h_align, uint v_align, char *text)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPhysicalFile</name>
    <base>scfImplementation1&lt; csPhysicalFile</base>
    <base> iFile &gt;</base>
    <filename>classcsPhysicalFile.html</filename>
    <member kind="function">
      <name>fp</name>
      <anchor>a2419a8cdb58a3ab9c8cac5a58b85184</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>last_error</name>
      <anchor>6602748842eab233c02d992023b679a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>owner</name>
      <anchor>efb654b559f5a2da2c3068b69286afe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>path</name>
      <anchor>ab5abd7e7c9c7432f46b7fc9ccc66367</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPhysicalFile</name>
      <anchor>8e079967ad15f542c9d0917a92d24ad3</anchor>
      <arglist>(char const *path, char const *mode)</arglist>
    </member>
    <member kind="function">
      <name>csPhysicalFile</name>
      <anchor>00faf6c6c02640400ce4fa4affd9c5dd</anchor>
      <arglist>(FILE *, bool take_ownership, char const *path=0)</arglist>
    </member>
    <member kind="function">
      <name>~csPhysicalFile</name>
      <anchor>a6de9831bd1b8c62d2f646b65a7057ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AtEOF</name>
      <anchor>3401ae3ad0abae373dacab4ba222b151</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>54db1b8e06d2052ef8ccd6e79f699ab4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAllData</name>
      <anchor>354114912f66ca387233678eed9230f3</anchor>
      <arglist>(bool nullterm=false)</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>47042151625f5adf1fb93fc5d6103d46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPos</name>
      <anchor>a14eb2c802069e4873282fe926927b3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>41b8f1cf3656e48169e9ce2e3258ad4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetStatus</name>
      <anchor>e72b1738a6790dc09b5a1a48d248e22e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Read</name>
      <anchor>3c42887b6321353c86c0f90171cfb0e2</anchor>
      <arglist>(char *buffer, size_t nbytes)</arglist>
    </member>
    <member kind="function">
      <name>SetPos</name>
      <anchor>a619cec9b6dfbaa32679ee398f610052</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>e94489794fea57bcc3051df2a1f93643</anchor>
      <arglist>(char const *data, size_t nbytes)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPixmap</name>
    <filename>classcsPixmap.html</filename>
    <member kind="function">
      <name>~csPixmap</name>
      <anchor>2f1ddb8edb618964eb76383dc9c6d44e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Advance</name>
      <anchor>4320d55b7a6541c2520a64511df3ce0e</anchor>
      <arglist>(csTicks ElapsedTime)=0</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>579791125905822ad70b5603c8602c55</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>DrawAlign</name>
      <anchor>f6336ebecbb49259d8f83116bb8d675d</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int alnx, int alny, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>DrawScaled</name>
      <anchor>c51483cf186f7cb94700edbbcb8c77fe</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, uint8 Alpha=0)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawScaledAlign</name>
      <anchor>310561d6f996aefa887293b81c4b7871</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, int alnx, int alny, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>DrawTiled</name>
      <anchor>7720201b8e5315939c2d83be6094ec1d</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int w, int h, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>DrawTiled</name>
      <anchor>18bafca32fff1ca7270db8da54d8dee0</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, int orgx, int orgy, uint8 Alpha=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureHandle</name>
      <anchor>fb18943f75e61dda86a73b0b5b52ebf9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>adf2b381eab0d686b80bf2576fd4d3fa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>eca74d9a08f365f7d0d91a7416413be6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPixMixerCopy</name>
    <filename>classcsPixMixerCopy.html</filename>
    <member kind="function">
      <name>csPixMixerCopy</name>
      <anchor>f3f92f5fa37bd4e8c4cc93d54d1fc158</anchor>
      <arglist>(csGraphics2D *, Tpixel color, uint8)</arglist>
    </member>
    <member kind="function">
      <name>Mix</name>
      <anchor>c21bdce6f55356aff2b5a0201e60481d</anchor>
      <arglist>(Tpixel &amp;dest)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPixMixerNoop</name>
    <filename>classcsPixMixerNoop.html</filename>
    <member kind="function">
      <name>csPixMixerNoop</name>
      <anchor>7318d7318418ce3204571d7debbf5ceb</anchor>
      <arglist>(csGraphics2D *, Tpixel, uint8)</arglist>
    </member>
    <member kind="function">
      <name>Mix</name>
      <anchor>91b848c447a155423c16e3d00ef39e0f</anchor>
      <arglist>(Tpixel &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPixMixerRGBA</name>
    <filename>classcsPixMixerRGBA.html</filename>
    <member kind="function">
      <name>csPixMixerRGBA</name>
      <anchor>8be8df1c2a19b7ccae58904301a2781f</anchor>
      <arglist>(csGraphics2D *G2D, Tpixel color, uint8 alpha)</arglist>
    </member>
    <member kind="function">
      <name>Mix</name>
      <anchor>eb2e69b4c72efb0f87624a42515f297c</anchor>
      <arglist>(Tpixel &amp;dest) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlane2</name>
    <filename>classcsPlane2.html</filename>
    <member kind="function">
      <name>csPlane2</name>
      <anchor>654b2688023ba968993c4c3e77cf3451</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csPlane2</name>
      <anchor>bb0d125943ad847d6ff565d39884b0ba</anchor>
      <arglist>(const csVector2 &amp;plane_norm, float c=0)</arglist>
    </member>
    <member kind="function">
      <name>csPlane2</name>
      <anchor>f75a260e2fbf07779368724ea6d91293</anchor>
      <arglist>(float a, float b, float c=0)</arglist>
    </member>
    <member kind="function">
      <name>csPlane2</name>
      <anchor>1e44c1215b01fb4317a497b517042c0c</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>csPlane2</name>
      <anchor>f798d8bb97167e8ee495e1326756ca91</anchor>
      <arglist>(const csSegment2 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>A</name>
      <anchor>e4cdaa0690600bef79a37340c2a09900</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>A</name>
      <anchor>3fb7dad98d4453e8b094abc13899b874</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>B</name>
      <anchor>80ae8a1676eb3af520b848807fb0f6f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>B</name>
      <anchor>4c833b9a366372e0babb4dd5848c492f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>C</name>
      <anchor>405dd8243192053f8292a9a5299ba6b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>C</name>
      <anchor>dd884e0845743c574bfcc5f4887aef4a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>816d8f4b4fb20d35a0d9c3850e8e9967</anchor>
      <arglist>(float A, float B, float C, const csVector2 &amp;pt)</arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>2c5c2f025ea5ee025346e454b7e8476d</anchor>
      <arglist>(const csVector2 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>Distance</name>
      <anchor>c4c6e9a1558c408c7205929d50aab6d6</anchor>
      <arglist>(const csVector2 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>GetNormal</name>
      <anchor>b9f995e5b9b9e5429ef29dc16a8f8fff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Invert</name>
      <anchor>c032481110e4ecf03b24b6dd5353c49b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Normal</name>
      <anchor>f757fe82384edc4756abc5ee2e5ad2b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>5c942978977e9852da5460c5b6b7c05f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>4775b232506aa179e542e7ba5e4f056b</anchor>
      <arglist>(float a, float b, float c)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>77a3a1e084aa3440162e8c297ec6fb7d</anchor>
      <arglist>(const csSegment2 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>5dc161e80fc0902ff3504a06b5545e02</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>SquaredDistance</name>
      <anchor>5ddaa9e973408c73789f58f921b0448c</anchor>
      <arglist>(const csVector2 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>CC</name>
      <anchor>ab7d543d13d9838854e5fb14d71176b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>norm</name>
      <anchor>d42196ae41ef4a76048f20bf752cfce7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlane3</name>
    <filename>classcsPlane3.html</filename>
    <member kind="function">
      <name>csPlane3</name>
      <anchor>17c5dccf5a9ca336e8f73585d09ce5be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csPlane3</name>
      <anchor>862e44343cc7d3a234c41253895d4a09</anchor>
      <arglist>(const csVector3 &amp;plane_norm, float d=0)</arglist>
    </member>
    <member kind="function">
      <name>csPlane3</name>
      <anchor>637829a15e07e02fcdeb0d1126067141</anchor>
      <arglist>(float a, float b, float c, float d=0)</arglist>
    </member>
    <member kind="function">
      <name>csPlane3</name>
      <anchor>b4e899f91774541041fe457593c8f7f9</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>csPlane3</name>
      <anchor>03687cdc4003b2ab584b1338716ce595</anchor>
      <arglist>(const csVector3 &amp;v2, const csVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>A</name>
      <anchor>322f1399c7dab771302884a812823e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>A</name>
      <anchor>00dce801f6eb76b494971df85cc985f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>B</name>
      <anchor>4e055f9dcd3aac04995094df9b18e5d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>B</name>
      <anchor>3e2d4078d72c4e1187e00c3487517dae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>C</name>
      <anchor>8357b3af89a63ceb24ea65e5f9108afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>C</name>
      <anchor>90b10f5b2d4e797229a2514a49240695</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>4f24bd29e237c556de38d60201bd306d</anchor>
      <arglist>(float A, float B, float C, float D, const csVector3 &amp;pt)</arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>4fc26da8112f45f27271c6faf244ab65</anchor>
      <arglist>(const csVector3 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>ClipPolygon</name>
      <anchor>35d00bcb895f9bc4922297509c69bb66</anchor>
      <arglist>(const csVector3 *InVerts, size_t InCount, csVector3 *OutPolygon, size_t &amp;OutCount, csVertexStatus *OutStatus, bool reversed=false) const </arglist>
    </member>
    <member kind="function">
      <name>ClipPolygon</name>
      <anchor>11c8da18d3b71a7a2ec23e8c0119b1bf</anchor>
      <arglist>(csVector3 *&amp;pverts, int &amp;num_verts, bool reversed=false)</arglist>
    </member>
    <member kind="function">
      <name>D</name>
      <anchor>bf89786dea3318b33e97d1ff9e5a1eac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>D</name>
      <anchor>fcd31cd64e035095884afd1f08dc9e78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Description</name>
      <anchor>7a73e6724a6682050c195d3a484eeacc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Distance</name>
      <anchor>e787fb54a67451b35d5c99d72c701231</anchor>
      <arglist>(const csVector3 &amp;pt) const </arglist>
    </member>
    <member kind="function">
      <name>FindPoint</name>
      <anchor>d37a02e27c8893e3dec9f1469ce53d1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetNormal</name>
      <anchor>2397ca07d62c70735afe4d04e5de2007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Invert</name>
      <anchor>159706aa44c4a25bb77a37346eb0d586</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Normal</name>
      <anchor>3226998cbe7051d458d8aad10cecf0d3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Normal</name>
      <anchor>a4f497ef2c2265ab1460bca8bff38cf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>6e1eb948d8f0b5fdf2b4fd51c58c3536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>ad9a320825b733696f5875cac0a28d4c</anchor>
      <arglist>(const csVector3 &amp;v2, const csVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>b213562ef8e16b563753f3f122b184c3</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>b3c713a71cbdd11d3a1e01657680e945</anchor>
      <arglist>(const csVector3 &amp;normal, float d)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>8b34f21844051a64a6726911679043d4</anchor>
      <arglist>(float a, float b, float c, float d)</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>da16f3255a6d8d1ce932263d669f2bcf</anchor>
      <arglist>(const csVector3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>DD</name>
      <anchor>a217e665f4f80f7fdb0d792e0d7b86d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>norm</name>
      <anchor>234f9daa8ee7fbb77ba431ac11e1d88c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlatformMemoryMappingDummy</name>
    <filename>classcsPlatformMemoryMappingDummy.html</filename>
    <member kind="function">
      <name>GetMaxSize</name>
      <anchor>f9b30a9403fbb14406760c1c5638bde5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MapWindow</name>
      <anchor>549442954cc2bf0d30d2d7b819308902</anchor>
      <arglist>(PlatformMemoryMapping &amp;mapping, size_t offset, size_t len)</arglist>
    </member>
    <member kind="function">
      <name>Ok</name>
      <anchor>369ebec3b9e335bd226ba36b2bf84bbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>OpenNative</name>
      <anchor>015850d94ec0394311cc21fad6d91c68</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <name>UnmapWindow</name>
      <anchor>73029dbb614cc9331cc9269efe62b172</anchor>
      <arglist>(PlatformMemoryMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <name>csPlatformMemoryMappingDummy</name>
      <anchor>1335fc39a3be37cd0083682a1008c7a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csPlatformMemoryMappingDummy</name>
      <anchor>0fd233c268a28a21bc47440593412497</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlatformMemoryMappingPosix</name>
    <filename>classcsPlatformMemoryMappingPosix.html</filename>
    <member kind="function">
      <name>Ok</name>
      <anchor>32b9903be2fe780ffb12602a5c78a6c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>granularity</name>
      <anchor>a19c150558d4df9f3cd7184fe1a1ddca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hMappedFile</name>
      <anchor>b3b6b80565a01147ee03129fb74562c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPlatformMemoryMappingPosix</name>
      <anchor>6a03e2612d2bde87184b6da5a70bbbe1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csPlatformMemoryMappingPosix</name>
      <anchor>55a670d4b41bfb7febc76fb8e32aba8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MapWindow</name>
      <anchor>55b9f4d8a45be455840fd865fdb9b3d2</anchor>
      <arglist>(PlatformMemoryMapping &amp;mapping, size_t offset, size_t len)</arglist>
    </member>
    <member kind="function">
      <name>UnmapWindow</name>
      <anchor>010ca89c87600a6a1664fe2e573c2dd4</anchor>
      <arglist>(PlatformMemoryMapping &amp;mapping)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlatformMemoryMappingWin32</name>
    <filename>classcsPlatformMemoryMappingWin32.html</filename>
    <member kind="function">
      <name>granularity</name>
      <anchor>d04da84d986ba643b3602a9a955f0053</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPlatformMemoryMappingWin32</name>
      <anchor>16426330b66817f87e8b2c7278664bde</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csPlatformMemoryMappingWin32</name>
      <anchor>973b4754d9db50cb167dff2b30d47bf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MapWindow</name>
      <anchor>e245404b01c99c8ef189d8583e088317</anchor>
      <arglist>(PlatformMemoryMapping &amp;mapping, size_t offset, size_t len)</arglist>
    </member>
    <member kind="function">
      <name>UnmapWindow</name>
      <anchor>483a0fbf4fcd2f8aef8f07a875ffd4ce</anchor>
      <arglist>(PlatformMemoryMapping &amp;mapping)</arglist>
    </member>
    <member kind="function">
      <name>hFileMapping</name>
      <anchor>9e860cc19229cf086e2b09429ad571dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hMappedFile</name>
      <anchor>6071a8a4d20fef00f3905c54b9d25393</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPluginList</name>
    <base>csPDelArray&lt; csPluginLoadRec &gt;</base>
    <filename>classcsPluginList.html</filename>
  </compound>
  <compound kind="class">
    <name>csPluginLoader</name>
    <filename>classcsPluginLoader.html</filename>
    <member kind="function">
      <name>csPluginList</name>
      <anchor>204a8c987a5fe5c7f3eb70bc28937419</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPluginLoader</name>
      <anchor>1069dd9796c2e8f656f9d01c4ee1b726</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>~csPluginLoader</name>
      <anchor>25342f4a3a0311cce31a062cdb32d7fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LoadPlugins</name>
      <anchor>c2fafefe0a2d174475c699588e675ffe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RequestPlugin</name>
      <anchor>0da92ea4dcd53e0689974befa61f128b</anchor>
      <arglist>(const char *pluginName, const char *tagName)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPluginManager</name>
    <base>scfImplementation1&lt; csPluginManager</base>
    <base> iPluginManager &gt;</base>
    <filename>classcsPluginManager.html</filename>
    <member kind="function">
      <name>csPluginManager</name>
      <anchor>9c13deeb1dc64769d57c66b1ff87299b</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>~csPluginManager</name>
      <anchor>8557fadbed1bc41952859dc884fe8f20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>868097d308ec8c36c3e859f9fa4355e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPlugins</name>
      <anchor>cf95613cde62356c9f24c3da4d3b1be6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>LoadPlugin</name>
      <anchor>1a20c6f612cd7ced6fcbd8d622b1a7dd</anchor>
      <arglist>(const char *iClassID, bool init=true)</arglist>
    </member>
    <member kind="function">
      <name>QueryOptions</name>
      <anchor>28bb2c3568de1f501c22aef662d21907</anchor>
      <arglist>(iComponent *iObject)</arglist>
    </member>
    <member kind="function">
      <name>QueryPlugin</name>
      <anchor>95d3d1065eeabeab3d87241cc73056a9</anchor>
      <arglist>(const char *iClassID, const char *iInterface, int iVersion)</arglist>
    </member>
    <member kind="function">
      <name>QueryPlugin</name>
      <anchor>d5f97947b8ca0e88c8dcfbc6a87c0e5a</anchor>
      <arglist>(const char *iInterface, int iVersion)</arglist>
    </member>
    <member kind="function">
      <name>RegisterPlugin</name>
      <anchor>07583b7fde9a535db91fd68bb5d14f28</anchor>
      <arglist>(const char *iClassID, iComponent *iObject)</arglist>
    </member>
    <member kind="function">
      <name>UnloadPlugin</name>
      <anchor>aef2166515f989c8c1383bf5c3463b46</anchor>
      <arglist>(iComponent *iObject)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPluginRequest</name>
    <filename>classcsPluginRequest.html</filename>
    <member kind="function">
      <name>csPluginRequest</name>
      <anchor>06a0c791100f2fac92b570bbfda1837b</anchor>
      <arglist>(csPluginRequest const &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>GetClassName</name>
      <anchor>8be55267107e1a1a31cc89edf056044c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInterfaceID</name>
      <anchor>93aa5390a533599a457dc27c373ba743</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInterfaceName</name>
      <anchor>2bc9cfee1afd37cca116af6150a141f4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetInterfaceVersion</name>
      <anchor>99788c268e468dfb968949b20ecedc82</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>0b86192a48603fe21b89d2874247787c</anchor>
      <arglist>(csPluginRequest const &amp;r) const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ac60d5033da9544971ce8a71b06ec88b</anchor>
      <arglist>(csPluginRequest const &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPointLightProc</name>
    <filename>classcsPointLightProc.html</filename>
    <member kind="function">
      <name>csPointLightProc</name>
      <anchor>83710bb5e91c8552a4a5d80c1aee9c77</anchor>
      <arglist>(const csLightProperties &amp;light, float blackLimit=0.0001f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPointLightProc::PerVertex</name>
    <filename>classcsPointLightProc_1_1PerVertex.html</filename>
    <member kind="function">
      <name>PerVertex::Attenuation</name>
      <anchor>9363cb1c5fed77fef7bcf6f1ce07020f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::DiffuseAttenuated</name>
      <anchor>61f57b9d694686f4e0aa49b04776b861</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::IsLit</name>
      <anchor>0f7dfbc70883f6d11cc5cc0aacc70372</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::LightDirection</name>
      <anchor>ae06c84811209ee2bccf1347ebe3c2f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::LightInvDistance</name>
      <anchor>81471b8b28c1334fbaa09032ccbd3216</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::PerVertex</name>
      <anchor>94e05c3a161746bd4efc65b619a91558</anchor>
      <arglist>(const csPointLightProc &amp;parent, const csVector3 &amp;v, const csVector3 &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPoly2D</name>
    <filename>classcsPoly2D.html</filename>
    <member kind="function">
      <name>max_vertices</name>
      <anchor>a05d23cec1236c42e43876e2532030f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>num_vertices</name>
      <anchor>7d72568063b523accb2732e30b27408c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPoly2D</name>
      <anchor>8239fd9e5a6b45040c0d075756e4b926</anchor>
      <arglist>(size_t start_size=10)</arglist>
    </member>
    <member kind="function">
      <name>csPoly2D</name>
      <anchor>8aad335253626c7ef72ea2ec4163f2d5</anchor>
      <arglist>(const csPoly2D &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>~csPoly2D</name>
      <anchor>dc0e2bb7d64fe447589b64975aa94d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>0c986480d0a696165d11654088389f94</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>48fc3a012a4273e512621b13b972662d</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>ClipAgainst</name>
      <anchor>14ab2cc17cc4c8c62c28e35a75d2b913</anchor>
      <arglist>(iClipper2D *view)</arglist>
    </member>
    <member kind="function">
      <name>ClipPlane</name>
      <anchor>2216c1610c9129851e67a134f44ab213</anchor>
      <arglist>(const csPlane2 &amp;plane, csPoly2D &amp;right) const </arglist>
    </member>
    <member kind="function">
      <name>ExtendConvex</name>
      <anchor>00f2e3f21b49ee9311b3e39976bc5d51</anchor>
      <arglist>(const csPoly2D &amp;other, size_t this_edge)</arglist>
    </member>
    <member kind="function">
      <name>GetFirst</name>
      <anchor>65d0b7a6d47fb3e1b2b4203424f9e40f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>fc1653a837adc98567e675ebff74c491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSignedArea</name>
      <anchor>914a0b8f6f6b065780bacf3389027503</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>3844412270470722fb1e4215cd245bec</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>f3d6ca0f05b72f629361b97d286fb656</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>27676cea69af1dcb97f9889284f2ecda</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>12979aa411170a6caecc1d552bca8ee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>7b0ab62e88ce255b1bf883f46eb3581c</anchor>
      <arglist>(csVector2 *poly, size_t num_poly, const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>e1d7b3eb730634d34f66a1820cec3b40</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>b5a800eeaead2f7348a3fcec47e40cf7</anchor>
      <arglist>(const csPlane2 &amp;plane, csPoly2D &amp;left, csPoly2D &amp;right) const </arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>0133949e29f5201ab79f41609b0997f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MakeRoom</name>
      <anchor>daab8c94299732d655da41f063daa96c</anchor>
      <arglist>(size_t new_max)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a03d9b7647a2614d4e0ff8978b5c2880</anchor>
      <arglist>(const csPoly2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>68ff77fd33fd243945faeba74a11aec4</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>44123805a6de0d28f0e4934d47d07bd0</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <name>Random</name>
      <anchor>56a2368369fb3639f8453531c390f5bd</anchor>
      <arglist>(size_t num, const csBox2 &amp;max_bbox)</arglist>
    </member>
    <member kind="function">
      <name>SetVertexCount</name>
      <anchor>02bde73de458cfa18118343da83bc6c3</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetVertices</name>
      <anchor>4b8e659bfd5690c6ee29b4d41fc51c45</anchor>
      <arglist>(csVector2 const *v, size_t num)</arglist>
    </member>
    <member kind="function">
      <name>vertices</name>
      <anchor>3833701bac9174d48c39ed8233680b97</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPoly2DFactory</name>
    <filename>classcsPoly2DFactory.html</filename>
    <member kind="function">
      <name>~csPoly2DFactory</name>
      <anchor>903949b189803ad19beca856a2efa873</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Create</name>
      <anchor>a8a9045d12c3a5e9ac0718d61313f3f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPoly2DPool</name>
    <filename>classcsPoly2DPool.html</filename>
    <member kind="function">
      <name>csPoly2DPool</name>
      <anchor>21675f701ad147888723f0d9b09aa89e</anchor>
      <arglist>(csPoly2DFactory *fact)</arglist>
    </member>
    <member kind="function">
      <name>~csPoly2DPool</name>
      <anchor>b736a029419c884cfedfbe9fb3869168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>8b298c7fb65fdd005ea8e74a17335ac4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>c63123f4f14171044d9e7d8cc058ff57</anchor>
      <arglist>(csPoly2D *pol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPoly3D</name>
    <filename>classcsPoly3D.html</filename>
    <member kind="function">
      <name>csPoly3D</name>
      <anchor>d9c75370aa5789237277dc968b40640e</anchor>
      <arglist>(size_t start_size=10)</arglist>
    </member>
    <member kind="function">
      <name>csPoly3D</name>
      <anchor>153b73060609c2c85b0b75f6666a93d2</anchor>
      <arglist>(const csPoly3D &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>~csPoly3D</name>
      <anchor>ddf14b7e340f1768a07e667df3386e41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>6b0764061b6c427985e2b1e0b31f9527</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>69f609b555c1be059b802fa6168c16a4</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>a62580d9c2e50e1614603395f82a06c9</anchor>
      <arglist>(const csPlane3 &amp;pl) const </arglist>
    </member>
    <member kind="function">
      <name>Classify</name>
      <anchor>c84e83bad7d8619b39ebd6c36f4e2fa8</anchor>
      <arglist>(const csPlane3 &amp;pl, const csVector3 *vertices, size_t num_vertices)</arglist>
    </member>
    <member kind="function">
      <name>ClassifyAxis</name>
      <anchor>2e0593a3f3d91f8975eeb5f2dd69628d</anchor>
      <arglist>(int axis, float where) const </arglist>
    </member>
    <member kind="function">
      <name>ClassifyX</name>
      <anchor>94a8ee86f723adc843060cc9ef7bfdee</anchor>
      <arglist>(float x) const </arglist>
    </member>
    <member kind="function">
      <name>ClassifyY</name>
      <anchor>f6877314ec614105d36857ecaf0dedc1</anchor>
      <arglist>(float y) const </arglist>
    </member>
    <member kind="function">
      <name>ClassifyZ</name>
      <anchor>6d005610e238e7a32b8bc5b53917fa14</anchor>
      <arglist>(float z) const </arglist>
    </member>
    <member kind="function">
      <name>ComputeMainNormalAxis</name>
      <anchor>7e268a3d939f58fa8c7a5c8180b777ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ComputeNormal</name>
      <anchor>ea8d51aa6679fb21a1c040adc7f0ce64</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ComputeNormal</name>
      <anchor>dc61ac73a377564bf20e23fa6b3996eb</anchor>
      <arglist>(int *poly, size_t num, csVector3 *vertices)</arglist>
    </member>
    <member kind="function">
      <name>ComputeNormal</name>
      <anchor>b4ea0d202f9037f0953ab617f3307d2a</anchor>
      <arglist>(const csArray&lt; csVector3 &gt; &amp;poly)</arglist>
    </member>
    <member kind="function">
      <name>ComputeNormal</name>
      <anchor>d078551036a0adfa9e65e54a11912053</anchor>
      <arglist>(const csVector3 *vertices, size_t num)</arglist>
    </member>
    <member kind="function">
      <name>ComputePlane</name>
      <anchor>06c9b47077a862288b74826ae97de5fe</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ComputePlane</name>
      <anchor>aef6f53c81c6e9966ce4b4be9be6ed47</anchor>
      <arglist>(int *poly, size_t num, csVector3 *vertices)</arglist>
    </member>
    <member kind="function">
      <name>ComputePlane</name>
      <anchor>eefd200546ffe39b47903dc15d52c706</anchor>
      <arglist>(const csArray&lt; csVector3 &gt; &amp;poly)</arglist>
    </member>
    <member kind="function">
      <name>ComputePlane</name>
      <anchor>7b83438c6de2ead14a69ac3769847f59</anchor>
      <arglist>(const csVector3 *vertices, size_t num)</arglist>
    </member>
    <member kind="function">
      <name>CutToPlane</name>
      <anchor>3272c248f6467b12369cdb45b7bc0e21</anchor>
      <arglist>(const csPlane3 &amp;split_plane)</arglist>
    </member>
    <member kind="function">
      <name>GetArea</name>
      <anchor>452c9767b4da712211ddf38f486f3df1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>6287c54b0f7b750c3e67a53e2a484927</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFirst</name>
      <anchor>9d98c2e3368d716d13620784faf8a8d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>08c19ee5d278f7f81b17b7a79600a7af</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>32c16a4cb49d35507ac50e4f5969496f</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>9691ea579ebd3be1375e2aa54508ea7a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>6beb80bb2cc395e0c15d43eca6e5054f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>35f6c75ed5c61e85a91c51f330bd43c4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>b7f00e87d3f8c52f57f20ae9e486cca5</anchor>
      <arglist>(csVector3 *poly, size_t num_poly, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>574c1e727a4cf99cc3a8560625f7fc91</anchor>
      <arglist>(const csVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>IsAxisAligned</name>
      <anchor>ca58cca07ed763f6c6e312377b1271a9</anchor>
      <arglist>(float &amp;where, float epsilon=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>8fce57222a49dee25f2fd8ad0df37ee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MakeRoom</name>
      <anchor>24fc0621a06dbd958851b747b27b1fc9</anchor>
      <arglist>(size_t new_max)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>aa01037355eb0f05c480c1fe815ed666</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>abf094660b7ed09f860ca6dc867f631e</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <name>ProjectAxisPlane</name>
      <anchor>4ce08b4d23911e7e40387e6b2a1dd2a1</anchor>
      <arglist>(const csVector3 &amp;point, int plane_nr, float plane_pos, csPoly2D *poly2d) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectXPlane</name>
      <anchor>e3477034c09538d146b44a61132a027d</anchor>
      <arglist>(const csVector3 &amp;point, float plane_x, csPoly2D *poly2d) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectYPlane</name>
      <anchor>7e2198b813fba64abb54ee5c77c59219</anchor>
      <arglist>(const csVector3 &amp;point, float plane_y, csPoly2D *poly2d) const </arglist>
    </member>
    <member kind="function">
      <name>ProjectZPlane</name>
      <anchor>6ad7feed798f1ba8cf27a0f536b5cd8a</anchor>
      <arglist>(const csVector3 &amp;point, float plane_z, csPoly2D *poly2d) const </arglist>
    </member>
    <member kind="function">
      <name>SetVertexCount</name>
      <anchor>363705c1227104d87de0723798799a6b</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetVertices</name>
      <anchor>7211a74df5b674ac8b39af3c11bc2aba</anchor>
      <arglist>(csVector3 const *v, size_t num)</arglist>
    </member>
    <member kind="function">
      <name>SplitWithPlane</name>
      <anchor>a369ae759b6d2d44dab52dcec86ba4dd</anchor>
      <arglist>(csPoly3D &amp;front, csPoly3D &amp;back, const csPlane3 &amp;split_plane) const </arglist>
    </member>
    <member kind="function">
      <name>SplitWithPlaneX</name>
      <anchor>b189f885c70cfe28d0ec45bd6f336374</anchor>
      <arglist>(csPoly3D &amp;front, csPoly3D &amp;back, float x) const </arglist>
    </member>
    <member kind="function">
      <name>SplitWithPlaneY</name>
      <anchor>5701d41853f4d077a5e86b158ed2d2d3</anchor>
      <arglist>(csPoly3D &amp;front, csPoly3D &amp;back, float y) const </arglist>
    </member>
    <member kind="function">
      <name>SplitWithPlaneZ</name>
      <anchor>b6feb5ac2c96f59258f06cf7bd8396ca</anchor>
      <arglist>(csPoly3D &amp;front, csPoly3D &amp;back, float z) const </arglist>
    </member>
    <member kind="function">
      <name>vertices</name>
      <anchor>d32a70d5d3e92f3cd67b5c63a6d317bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolygonClipper</name>
    <base>csClipper</base>
    <filename>classcsPolygonClipper.html</filename>
    <member kind="function">
      <name>csPolygonClipper</name>
      <anchor>18a8bbd353e049fafa7d10006c5faba6</anchor>
      <arglist>(csPoly2D *Clipper, bool mirror=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <name>csPolygonClipper</name>
      <anchor>0ceb62ef3f67eeb59f9bcd8c8cdc5eee</anchor>
      <arglist>(csVector2 *Clipper, size_t Count, bool mirror=false, bool copy=false)</arglist>
    </member>
    <member kind="function">
      <name>~csPolygonClipper</name>
      <anchor>300d232ca0e06816eb6bb9355a8c24dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClassifyBox</name>
      <anchor>164092c4a641fb265404144e0eca5581</anchor>
      <arglist>(const csBox2 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>71d7718035a5726b8953cd77039b8d5e</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount, csVertexStatus *OutStatus)</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>0e279c9b3565af1f753d1020c1dd00a8</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount, csBox2 &amp;BoundingBox)</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>348b1a64a65d8e9c45747ba58d2a699f</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount)</arglist>
    </member>
    <member kind="function">
      <name>GetClipperType</name>
      <anchor>243d6b080a6679ec445bd4342267edd0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetClipPoly</name>
      <anchor>a7a349bdcfcd1e804cba188dd93a331e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>26d0d6eca7d087e976d95b527ac72cff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsInside</name>
      <anchor>5915e077e6346b0c4b1611a3d66d3cf7</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolygonMesh</name>
    <base>scfImplementation1&lt; csPolygonMesh</base>
    <base> iPolygonMesh &gt;</base>
    <filename>classcsPolygonMesh.html</filename>
    <member kind="function">
      <name>~csPolygonMesh</name>
      <anchor>91a709566ca46c3f04ff68f7683808bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csPolygonMesh</name>
      <anchor>eff9e520fbfa674e900dcbec0c2ec2be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetChangeNumber</name>
      <anchor>da143e03b40eb0ee1d8485f1b1b56421</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>ee6c633b243c117b27981bb05426873a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonCount</name>
      <anchor>e3650525813e3ec5af133066b0208835</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonIndices</name>
      <anchor>7c5d22cb500d9ec2740a4299f434d1f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygons</name>
      <anchor>4a5295c0d0184088a987f4c8dcf06cc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>2aab442821fa410ad72a8ee5aebbab3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>892b5ca50be45f4615ff6d37afefc790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>0894b7678120a09f00f7099379d15b00</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>99b286223c069141bcc3848869302017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>362fba636662670eac393a9a0a14e1db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonCount</name>
      <anchor>38b033ce87624eb552d758f2732b550f</anchor>
      <arglist>(int po_count)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonIndexCount</name>
      <anchor>f987bb067bcee5967f1a35cc08637024</anchor>
      <arglist>(int po_index_count)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonIndices</name>
      <anchor>7dd77f46bd02c053d946acd26a3cbfed</anchor>
      <arglist>(int *po_indices, bool delete_po_indices)</arglist>
    </member>
    <member kind="function">
      <name>SetPolygons</name>
      <anchor>f1fb03ccc2f48f9fe46527fe9570538d</anchor>
      <arglist>(csMeshedPolygon *po, int po_count, bool delete_po)</arglist>
    </member>
    <member kind="function">
      <name>SetVertexCount</name>
      <anchor>43c29853eb6f39a1aeaf2643cad2c972</anchor>
      <arglist>(int vt_count)</arglist>
    </member>
    <member kind="function">
      <name>SetVertices</name>
      <anchor>7e0f298b9072c9817548c73fef14d449</anchor>
      <arglist>(csVector3 *vt, int vt_count, bool delete_vt)</arglist>
    </member>
    <member kind="function">
      <name>ShapeChanged</name>
      <anchor>6305e9e68a9e769207d1dfd0db1b97a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Unlock</name>
      <anchor>7f23e10a9b65f453b766fda9a2e9cffd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolygonMeshBox</name>
    <base>scfImplementation1&lt; csPolygonMeshBox</base>
    <base> iPolygonMesh &gt;</base>
    <filename>classcsPolygonMeshBox.html</filename>
    <member kind="function">
      <name>~csPolygonMeshBox</name>
      <anchor>3ffb38137de68674c457ca8c48cb8554</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csPolygonMeshBox</name>
      <anchor>5e239f42242704ad1c2939f3356d2dff</anchor>
      <arglist>(const csBox3 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>GetChangeNumber</name>
      <anchor>8beaf74ddb7c9858622eab82bb251bf3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>3f000dfbf6d03e7bd8a076e77d88c644</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonCount</name>
      <anchor>272b6076d93fbb08dc94197265394e65</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPolygons</name>
      <anchor>20a74c6a2533d0bad21679ef42a5bb6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>34c27ad4a0e3c4b7a2be914a0d00dc6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>2a5c64e6458f9cf9e7cb394e44041b9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>a0692b6d35eb91322dcfbcd326d3816c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>5f34a8140d05a9d586e1be29f19eb3d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>62f51c8a742f3b65c9316e55d0e73d61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetBox</name>
      <anchor>f4a1635d1bb3803700346a84c9444770</anchor>
      <arglist>(const csBox3 &amp;box)</arglist>
    </member>
    <member kind="function">
      <name>Unlock</name>
      <anchor>bde4f4372fe9c662a6f2b5f0628c2dfd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolygonMeshTools</name>
    <filename>classcsPolygonMeshTools.html</filename>
    <member kind="function">
      <name>BoxInClosedMesh</name>
      <anchor>01957720dd38607fdfb2b1acafbb5d28</anchor>
      <arglist>(const csBox3 &amp;box, csVector3 *vertices, csTriangleMinMax *tris, int tri_count, csPlane3 *planes)</arglist>
    </member>
    <member kind="function">
      <name>CalculateEdges</name>
      <anchor>7d747e46a8f5a407d2cd122154a39247</anchor>
      <arglist>(iPolygonMesh *, int &amp;num_edges)</arglist>
    </member>
    <member kind="function">
      <name>CalculateNormals</name>
      <anchor>e02ad2a3c7db11f5c0c5d4e70253fac4</anchor>
      <arglist>(iPolygonMesh *mesh, csVector3 *normals)</arglist>
    </member>
    <member kind="function">
      <name>CalculateOutline</name>
      <anchor>21529a137d25e6384e645a6a7817c64b</anchor>
      <arglist>(csPolygonMeshEdge *edges, int num_edges, csPlane3 *planes, int num_vertices, const csVector3 &amp;pos, int *outline_edges, int &amp;num_outline_edges, bool *outline_verts, float &amp;valid_radius)</arglist>
    </member>
    <member kind="function">
      <name>CalculatePlanes</name>
      <anchor>9c3c957c7b7cd2e71a5a30d73fa3c86a</anchor>
      <arglist>(iPolygonMesh *mesh, csPlane3 *planes)</arglist>
    </member>
    <member kind="function">
      <name>CheckActiveEdges</name>
      <anchor>c0f514a332152f9e985d3c3dde27305e</anchor>
      <arglist>(csPolygonMeshEdge *edges, int num_edges, csPlane3 *planes)</arglist>
    </member>
    <member kind="function">
      <name>CloseMesh</name>
      <anchor>6d47f70814d9be4ef8d708140cfd19fb</anchor>
      <arglist>(iPolygonMesh *polyMesh, csArray&lt; csMeshedPolygon &gt; &amp;newPolys, int *&amp;vertidx, int &amp;vertidx_len)</arglist>
    </member>
    <member kind="function">
      <name>IsMeshClosed</name>
      <anchor>de52f49eabcd6c3fc25051a456e72d8c</anchor>
      <arglist>(iPolygonMesh *polyMesh)</arglist>
    </member>
    <member kind="function">
      <name>IsMeshConvex</name>
      <anchor>a32345fbb6c9de57d6d51dd6faecc401</anchor>
      <arglist>(iPolygonMesh *polyMesh)</arglist>
    </member>
    <member kind="function">
      <name>LineInClosedMesh</name>
      <anchor>5a0a172969794aac9b92e9ab59820992</anchor>
      <arglist>(const csVector3 &amp;p1, const csVector3 &amp;p2, csVector3 *vertices, csTriangleMinMax *tris, int tri_count, csPlane3 *planes)</arglist>
    </member>
    <member kind="function">
      <name>PointInClosedMesh</name>
      <anchor>db3ecee799d6831cc5652f8ea0654d83</anchor>
      <arglist>(const csVector3 &amp;point, csVector3 *vertices, csTriangleMinMax *tris, int tri_count, csPlane3 *planes)</arglist>
    </member>
    <member kind="function">
      <name>Polygonize</name>
      <anchor>b12b7ffff2bd17325172e44a013932ee</anchor>
      <arglist>(iPolygonMesh *polymesh, csMeshedPolygon *&amp;polygons, int &amp;poly_count)</arglist>
    </member>
    <member kind="function">
      <name>SortTrianglesX</name>
      <anchor>3bcbca92a885f64ba1e52c697ff89f02</anchor>
      <arglist>(iPolygonMesh *polymesh, csTriangleMinMax *&amp;tris, int &amp;tri_count, csPlane3 *&amp;planes)</arglist>
    </member>
    <member kind="function">
      <name>Triangulate</name>
      <anchor>197b28fbdf39c3ed8b0cd0ddce0a336e</anchor>
      <arglist>(iPolygonMesh *polymesh, csTriangle *&amp;tris, int &amp;tri_count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolyIndexed</name>
    <filename>classcsPolyIndexed.html</filename>
    <member kind="function">
      <name>max_vertices</name>
      <anchor>a3d8602f7da0fcbc169492f0f786e9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>num_vertices</name>
      <anchor>3109d8c09ec248946097537008109c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPolyIndexed</name>
      <anchor>0a873457b99064fe57d1b9e663dd5d16</anchor>
      <arglist>(int start_size=10)</arglist>
    </member>
    <member kind="function">
      <name>csPolyIndexed</name>
      <anchor>7107457fa2c5578f3b749c3408a33517</anchor>
      <arglist>(csPolyIndexed &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>~csPolyIndexed</name>
      <anchor>b2515492e22316b79cef4ef72e5c9bbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>7afb06352faa65079d010b692e5dd5fd</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>3dd710a6144a76cc8237147d0c397e1d</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>bdb6f1bde18d9701f0f9858ad3184b78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertexIndices</name>
      <anchor>ae639f8bfebdf57d1e1e55e421136ddb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertexIndices</name>
      <anchor>30c52515a81a3203bbe8afa9305d2899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>aca7376d33d6734ceebc141e6c724de8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>MakeRoom</name>
      <anchor>4b643b28a57b5baab65226074a5d3a53</anchor>
      <arglist>(int new_max)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>39ba9e34dd0d52c5f3e31e8b234da248</anchor>
      <arglist>(const csPolyIndexed &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a450dc010582446b473b6baa68165c1e</anchor>
      <arglist>(int i) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>87a28b7b4b9799ceb510533ed35ad8b3</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <name>vertices_idx</name>
      <anchor>62afba2c73709d3d69a6822872b92182</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPoolEvent</name>
    <base>csEvent</base>
    <filename>classcsPoolEvent.html</filename>
    <member kind="function">
      <name>csEvent</name>
      <anchor>d60b5dcbafd43b1308b10c057dd4e357</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventQueue</name>
      <anchor>2b401383a14a671bdea4caa78bb86ff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csPoolEvent</name>
      <anchor>ff0fc2f5da2ba538fba4ae6f3b80ff8a</anchor>
      <arglist>(csEventQueue *q)</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>08d059fa872a9108f2abb81cb900aa20</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPrefixConfig</name>
    <base>csConfigFile</base>
    <filename>classcsPrefixConfig.html</filename>
    <member kind="function">
      <name>csPrefixConfig</name>
      <anchor>ba9fad5acac8772a1747d660eaf8a5a5</anchor>
      <arglist>(const char *fName, iVFS *vfs, const char *pref, const char *AliasName=0)</arglist>
    </member>
    <member kind="function">
      <name>~csPrefixConfig</name>
      <anchor>7b7f77c5d1f4f435cd155feb60faaa04</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPrimitives</name>
    <filename>classcsPrimitives.html</filename>
    <member kind="function">
      <name>GenerateBox</name>
      <anchor>8713a0a6a6f9b62f4b706b79d9317f23</anchor>
      <arglist>(const csBox3 &amp;box, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_vertices, csDirtyAccessArray&lt; csVector2 &gt; &amp;mesh_texels, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_normals, csDirtyAccessArray&lt; csTriangle &gt; &amp;mesh_triangles)</arglist>
    </member>
    <member kind="function">
      <name>GenerateQuad</name>
      <anchor>57712ad78030404cf0c6f6216aa5b95e</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3, const csVector3 &amp;v4, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_vertices, csDirtyAccessArray&lt; csVector2 &gt; &amp;mesh_texels, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_normals, csDirtyAccessArray&lt; csTriangle &gt; &amp;mesh_triangles)</arglist>
    </member>
    <member kind="function">
      <name>GenerateSphere</name>
      <anchor>fc566b55c3c8fc63512206f3c00ea11d</anchor>
      <arglist>(const csEllipsoid &amp;ellips, int num, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_vertices, csDirtyAccessArray&lt; csVector2 &gt; &amp;mesh_texels, csDirtyAccessArray&lt; csVector3 &gt; &amp;mesh_normals, csDirtyAccessArray&lt; csTriangle &gt; &amp;mesh_triangles, bool cyl_mapping=false, bool toponly=false, bool reversed=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPrintfFormatter</name>
    <filename>classcsPrintfFormatter.html</filename>
    <member kind="function">
      <name>csPrintfFormatter</name>
      <anchor>8666f3049d98e06eef8090bafe4adefd</anchor>
      <arglist>(Treader *reader, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>csPrintfFormatter</name>
      <anchor>72064beb72ecf156c760df9a6589b573</anchor>
      <arglist>(Treader *reader,...)</arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>d63f5d0d24aef4e2a846224212c13f80</anchor>
      <arglist>(Twriter &amp;writer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csProcAnimated</name>
    <base>csProcTexture</base>
    <filename>classcsProcAnimated.html</filename>
    <member kind="function">
      <name>Animate</name>
      <anchor>529674409f6341743f7a7df3e3c118a2</anchor>
      <arglist>(csTicks current_time)</arglist>
    </member>
    <member kind="function">
      <name>PrepareAnim</name>
      <anchor>86d9b769026702212b2d295d5cdc3dba</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csProcessorCapability</name>
    <filename>classcsProcessorCapability.html</filename>
    <member kind="function">
      <name>GetProcessorName</name>
      <anchor>c58bdf799578a592d26b6c88425ac890</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HasMMX</name>
      <anchor>0a722631150005ff85339357a6d4b4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HasSSE</name>
      <anchor>3f404f2c498de5360037df123e255349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csProcessorCapability</name>
      <anchor>783334c3e5549d5c331c241be931e913</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csProcessorCapability</name>
      <anchor>1b05569b32b7758fdcfae7e99243eb64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>da5193291439c746d4e9c122fbfc567f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csProcTexture</name>
    <base>scfImplementationExt2&lt; csProcTexture</base>
    <base> csObject</base>
    <base> iTextureWrapper</base>
    <base> iProcTexture &gt;</base>
    <filename>classcsProcTexture.html</filename>
    <member kind="function">
      <name>GetG2D</name>
      <anchor>8a058cc8a0516570dc506e7d8520fef4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetG3D</name>
      <anchor>c35535f1f6dbdfa0c8b04ebff6ec28c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRandom</name>
      <anchor>4b6bd4b5f4de1eab173e4d4b6ed257e3</anchor>
      <arglist>(int max)</arglist>
    </member>
    <member kind="function">
      <name>last_cur_time</name>
      <anchor>71929c49dadf91bbca3222317e3452a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>always_animate</name>
      <anchor>765c42b8c5bc46b4543cbbb188067816</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>anim_prepared</name>
      <anchor>f2d06b15a86e2a5dff923188ca674fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>g2d</name>
      <anchor>f6ddb7a3444e1277ab638700c3524f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>g3d</name>
      <anchor>34d415c0ae5b093095676a32f8037f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>key_blue</name>
      <anchor>c6a39f38da9679db9448914e28b8f50b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>key_color</name>
      <anchor>e79a8b01dc1d43ec7124be9ce4c1f86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>key_green</name>
      <anchor>56c42eb5d7abf8cd05df5017db8e165e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>key_red</name>
      <anchor>7056e8eb2fabefe0fe2071c804b3edd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat_h</name>
      <anchor>e8fbd65d23b63ae6ac8a3c0156f092a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mat_w</name>
      <anchor>e299c0a58650efa0e5af59bed6454ff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>776ff2703ead3f08a5bbe0fa565347f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>proc_image</name>
      <anchor>1bd6c4922dd8d4ba2cf6b7d8540c9e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ptReady</name>
      <anchor>ffc85505160215f04fa4749567d47966</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tex</name>
      <anchor>7e5a89ca3b1f8e4d35230e7609639d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texFlags</name>
      <anchor>30c8136d99baa03b55365894e06ae77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>use_cb</name>
      <anchor>16027e1806949fcb38df706796b17d0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>visible</name>
      <anchor>05fb2c1c662fcfceb675be4a0bbacdb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csProcTexCallback</name>
      <anchor>b3bb47fabcee34925bad8177a34c0c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csProcTexEventHandler</name>
      <anchor>def87d49369cc3edfbb7f62eb906a2bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Animate</name>
      <anchor>f0b67ac03572dc0310a375c6abc69c5b</anchor>
      <arglist>(csTicks current_time)=0</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>6093ffb9829bfad875a6750b24e84e46</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>DisableAutoUpdate</name>
      <anchor>861662bb35dac2b9df9a98e788e24ee7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlwaysAnimate</name>
      <anchor>a3aad1582d066edc5e34ba630ca375f3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDimension</name>
      <anchor>19b13e1e334ff1b95680e1159c6c455a</anchor>
      <arglist>(int &amp;w, int &amp;h) const </arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>d40508ae4a0c4121bd1840549d63c6ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>c59d257256e42f237e9d094dab7867f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageFile</name>
      <anchor>7870e79c94adb1a1ed7f9c361017a6b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>0d345c071b427b5c15ebdc78970de8bf</anchor>
      <arglist>(int &amp;red, int &amp;green, int &amp;blue) const </arglist>
    </member>
    <member kind="function">
      <name>GetTextureClass</name>
      <anchor>4f3c20226d39522c14f68721847c54d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTextureHandle</name>
      <anchor>e02dd2d1a52783c2e624aa3ea695d219</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTextureWrapper</name>
      <anchor>97614265b4dc72298c226d2e64911543</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetUseCallback</name>
      <anchor>5db888c8a6fa1ad51ae4a616f513d644</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>8584e37ecd9f5d717f3f1fe4568dcac8</anchor>
      <arglist>(iObjectRegistry *object_reg, iEngine *engine, iTextureManager *txtmgr, const char *name)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>d1ec15199c713c836b557b8c026fb9fb</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>IsVisitRequired</name>
      <anchor>72f46cd4ca5fa83f80b08d6819e13f2a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>KeepImage</name>
      <anchor>a9eed0c9687b5a12dc0533f1e7fd78df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PrepareAnim</name>
      <anchor>47ae8841f95f4732f1e646372c2dcdd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>e7fe95e577f408490f600c71b6c37051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>fe9f9fa66012dd39f021a8a3ba818b19</anchor>
      <arglist>(iTextureManager *txtmng)</arglist>
    </member>
    <member kind="function">
      <name>SetAlwaysAnimate</name>
      <anchor>5cbe863d8e3a21b20b54711cd5edab98</anchor>
      <arglist>(bool enable)</arglist>
    </member>
    <member kind="function">
      <name>SetFlags</name>
      <anchor>b49ef3b190533cf52e006a1842920ec2</anchor>
      <arglist>(int flags)</arglist>
    </member>
    <member kind="function">
      <name>SetImageFile</name>
      <anchor>c8eb135f128062f1db09e827dac1ed80</anchor>
      <arglist>(iImage *Image)</arglist>
    </member>
    <member kind="function">
      <name>SetKeepImage</name>
      <anchor>34ebe7ede550bf1f9dccea8e0ace0b8d</anchor>
      <arglist>(bool k)</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>4359f3fbbfc0536cf18c852f39ec40ed</anchor>
      <arglist>(int red, int green, int blue)</arglist>
    </member>
    <member kind="function">
      <name>SetTextureClass</name>
      <anchor>4c7203c6af49ba6b9f2ab8bb624b432e</anchor>
      <arglist>(const char *className)</arglist>
    </member>
    <member kind="function">
      <name>SetTextureHandle</name>
      <anchor>e65ea96e6ce05fe0eb092bf889c6bd9a</anchor>
      <arglist>(iTextureHandle *tex)</arglist>
    </member>
    <member kind="function">
      <name>SetUseCallback</name>
      <anchor>504a7e24aef7e5b4b9108478141c1803</anchor>
      <arglist>(iTextureCallback *callback)</arglist>
    </member>
    <member kind="function">
      <name>Visit</name>
      <anchor>2512090468fca9b7dca070037b421ef8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csProgressPulse</name>
    <filename>classcsProgressPulse.html</filename>
    <member kind="function">
      <name>csProgressPulse</name>
      <anchor>2e42fdffc417e2fff8c85074c1e9916e</anchor>
      <arglist>(iConsoleOutput *)</arglist>
    </member>
    <member kind="function">
      <name>~csProgressPulse</name>
      <anchor>4fbb3b18982d418dab5861892d1e6c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Erase</name>
      <anchor>de09a99438260aca2202f8e0e2b88d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>7e5dbc1729a0cfd918716230342a9d48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Step</name>
      <anchor>f711ccbd8ac610467e0fbc8ceb8cb6e4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPtr</name>
    <filename>classcsPtr.html</filename>
    <member kind="function">
      <name>csPtr</name>
      <anchor>93be016de24aca0063e7fdff6cedfa9f</anchor>
      <arglist>(const csPtr&lt; T &gt; &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>csPtr</name>
      <anchor>4894925b8bf148061a157170080f052a</anchor>
      <arglist>(csRef&lt; T2 &gt; const &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>csPtr</name>
      <anchor>5aa65124ba28b366b2f732184c87bca1</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <name>csRef&lt; T &gt;</name>
      <anchor>acd826ace742939d758328fa03de5d4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPtrKey</name>
    <filename>classcsPtrKey.html</filename>
    <member kind="function">
      <name>csPtrKey</name>
      <anchor>1b7afa39ef74f3e12e5d5ed3579da73d</anchor>
      <arglist>(csPtrKey const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csPtrKey</name>
      <anchor>3c8649bce031e48b041ac4c77f634eaa</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <name>csPtrKey</name>
      <anchor>eae11e6ae13001f4c60c1dbbf08c9c0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetHash</name>
      <anchor>0fb8bb56e6726dcce047032d14f84da4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator T *</name>
      <anchor>556bf63cb74ad42ba6d097d51493da35</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-&gt;</name>
      <anchor>caf3ede480d9099b9857f3ad2a107940</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>f53ac175e6242f0eba86689147a68dd2</anchor>
      <arglist>(csPtrKey const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>377c0848a42b5f546bbe107e0fb94308</anchor>
      <arglist>(const csPtrKey &amp;r1, const csPtrKey &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPtrWrap</name>
    <filename>classcsPtrWrap.html</filename>
    <member kind="function">
      <name>csPtrWrap</name>
      <anchor>e8181bb3864ec171c880cf22caf544ca</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
    <member kind="function">
      <name>csPtrWrap</name>
      <anchor>05049b75575d138a9f5df3fb4a74f7eb</anchor>
      <arglist>(const csPtrWrap &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>f09f8c92b41ebe6ed79679c1540bf998</anchor>
      <arglist>(const T *ptr)</arglist>
    </member>
    <member kind="function">
      <name>csPtrWrap</name>
      <anchor>4e4f5f714e259a59a081b0767f43696a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator const T *</name>
      <anchor>27f97a73c9664754e4166c2ab92cb6f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator T *&amp;</name>
      <anchor>40dd71da2d28b5b88b4c1f69c9276596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>0d06c0d6eb49e36a50bfeacd2ba07ee3</anchor>
      <arglist>(T *ptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csQuaternion</name>
    <filename>classcsQuaternion.html</filename>
    <member kind="function">
      <name>v</name>
      <anchor>a407d47bab7dfdf6948e599eccd79a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>w</name>
      <anchor>77388b014a6e241a550ce32c7aa381e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csQuaternion</name>
      <anchor>1eca5df58b648fd96474ce78ac8524df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csQuaternion</name>
      <anchor>1d983b790c9cd744dbb6e9f3efa80f1d</anchor>
      <arglist>(float x, float y, float z, float w)</arglist>
    </member>
    <member kind="function">
      <name>csQuaternion</name>
      <anchor>0b5583015315667c3637854d83052755</anchor>
      <arglist>(const csVector3 &amp;v, float w)</arglist>
    </member>
    <member kind="function">
      <name>csQuaternion</name>
      <anchor>a6fbdb5f42ddd888de2a130ddd91e603</anchor>
      <arglist>(const csQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <name>Conjugate</name>
      <anchor>707c2114ce2ed9a2ee24a302b03a7b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Dot</name>
      <anchor>6cd4be24181c41d53d03eacb06ad4b0a</anchor>
      <arglist>(const csQuaternion &amp;q) const </arglist>
    </member>
    <member kind="function">
      <name>Exp</name>
      <anchor>78e2af4fbd1309079a14b265be5513f1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetAxisAngle</name>
      <anchor>4f7c1c744b3656ee29f2e37c0e6813a7</anchor>
      <arglist>(csVector3 &amp;axis, float &amp;angle) const </arglist>
    </member>
    <member kind="function">
      <name>GetConjugate</name>
      <anchor>96832857d94613c81eb0b78f9e5d386a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetEulerAngles</name>
      <anchor>a5c58e9018de93952c4471008925ef97</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMatrix</name>
      <anchor>73d8c73183ab3236b066b2c37fad1a49</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Log</name>
      <anchor>de06314ef357c4917269c5982c514650</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>NLerp</name>
      <anchor>7ede2193d37ead8d3c8db6ce5c5245a0</anchor>
      <arglist>(const csQuaternion &amp;q2, float t) const </arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>7a0f8b754a58122690ea6fda3ec438d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>97ba272a640745ae4ade2e88e27a9634</anchor>
      <arglist>(const csQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>367664bc3992c5c7f04383d81d6e23ee</anchor>
      <arglist>(const csQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>5526ed345b80c03c72954265b4999b99</anchor>
      <arglist>(const csQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>5adf0beea2a6d69b870cf24c15890a0b</anchor>
      <arglist>(const csVector3 &amp;src) const </arglist>
    </member>
    <member kind="function">
      <name>SetAxisAngle</name>
      <anchor>0d16521fe5df37816e887c89442c8f8b</anchor>
      <arglist>(const csVector3 &amp;axis, float angle)</arglist>
    </member>
    <member kind="function">
      <name>SetEulerAngles</name>
      <anchor>75b50f33bc6debc73d4717861ae94b14</anchor>
      <arglist>(const csVector3 &amp;angles)</arglist>
    </member>
    <member kind="function">
      <name>SetIdentity</name>
      <anchor>76a59612cfb658bdf16da2de10e2f46b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetMatrix</name>
      <anchor>4cd8e1b75a723c93fd2fa004e62ee6db</anchor>
      <arglist>(const csMatrix3 &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <name>SLerp</name>
      <anchor>3e4c11d64abffea4e38cac49e78e71cb</anchor>
      <arglist>(const csQuaternion &amp;q2, float t) const </arglist>
    </member>
    <member kind="function">
      <name>Squad</name>
      <anchor>4249232bddc651c874cdf529ef153596</anchor>
      <arglist>(const csQuaternion &amp;t1, const csQuaternion &amp;t2, const csQuaternion &amp;q, float t) const </arglist>
    </member>
    <member kind="function">
      <name>SquaredNorm</name>
      <anchor>58488e01c582f7241c5984b69248d2ff</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>8040ba73d6654d9d8bd4778d04a06be5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>8acccd515625c96e8eea2a4fbe65ddf5</anchor>
      <arglist>(float f, const csQuaternion q)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>d70f6243668af90f9c8e1a2533ecf1ad</anchor>
      <arglist>(const csQuaternion q, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>8e56703b4177b0f63b9b1e998768a3ab</anchor>
      <arglist>(const csQuaternion &amp;q1, const csQuaternion &amp;q2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>7e560b152a5350de6cd3c47c9f95d2b9</anchor>
      <arglist>(const csQuaternion &amp;q1, const csQuaternion &amp;q2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>1c9cc07e1d426a8e0f1c272e0f1e686b</anchor>
      <arglist>(const csQuaternion &amp;q)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>02f37de21e474674b9523a82c78ab7b2</anchor>
      <arglist>(const csQuaternion &amp;q1, const csQuaternion &amp;q2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>f663d624797882564052c720d9c39c26</anchor>
      <arglist>(float f, const csQuaternion q)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>35653ac7a26504c80d0132a6a45d9e75</anchor>
      <arglist>(const csQuaternion q, float f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRadixSorter</name>
    <filename>classcsRadixSorter.html</filename>
    <member kind="function">
      <name>GetRanks</name>
      <anchor>0572d1f4de8c085d114eeabd228e86f6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Reorder</name>
      <anchor>7b19c79eae0e9e69a214ea262d8e9628</anchor>
      <arglist>(const T *source, T *dest, size_t size)</arglist>
    </member>
    <member kind="function">
      <name>ReorderInplace</name>
      <anchor>5e50b8e5270a603bc2820cc3bde0741c</anchor>
      <arglist>(T *source, size_t size)</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>1b0c1e8d81589ff244252735dec69a0f</anchor>
      <arglist>(float *array, size_t size)</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>7a0dff5abca7365b863aa327b9ddca5a</anchor>
      <arglist>(int32 *array, size_t size)</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>e32047abf53c9ab0c49037470e5680ce</anchor>
      <arglist>(uint32 *array, size_t size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRandomFloatGen</name>
    <filename>classcsRandomFloatGen.html</filename>
    <member kind="function">
      <name>csRandomFloatGen</name>
      <anchor>d03b2241b3697721c3d80db5aa2f96f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRandomFloatGen</name>
      <anchor>d4a0b2f17e81731a2b6196772ff46bd2</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>b50cc7c856fd72725f5239d879510717</anchor>
      <arglist>(float min, float max)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>7ee5ae56381fc06f2de7cfff3c67f8f7</anchor>
      <arglist>(float max)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>5d96d5b102fc5aa7a7c638db2de7ee4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAngle</name>
      <anchor>e31f74b92486b0944e9cb10757d68d2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>d42ee0960504889f0bf029169bfebf39</anchor>
      <arglist>(unsigned int new_seed)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>56c77e871add699e11ed5bbe660a618e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRandomGen</name>
    <filename>classcsRandomGen.html</filename>
    <member kind="function">
      <name>csRandomGen</name>
      <anchor>4c378aeb3a4e014eb089ab31381fd072</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRandomGen</name>
      <anchor>f0f1932d4e0e2ef98c5ce45d2531d3b9</anchor>
      <arglist>(uint32 iSeed)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>22483151a6b76503e30b597c8d88b5c3</anchor>
      <arglist>(uint32 iLimit)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>28a9e3845b8a7acaa455cfddc6bb360e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>016b4329e05a13622a2f1b11f9fdab27</anchor>
      <arglist>(uint32 iSeed)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>004327899aba9e745079553072c5e152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SelfTest</name>
      <anchor>ee78e9710e3b7241927dcfc4f6d7d25b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRandomVectorGen</name>
    <filename>classcsRandomVectorGen.html</filename>
    <member kind="function">
      <name>csRandomVectorGen</name>
      <anchor>081e32dcb1279fa8a29edebc71c8c2cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRandomVectorGen</name>
      <anchor>525e5da21cf145838e101aa388dd78ae</anchor>
      <arglist>(unsigned int seed)</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>d5218c843f0f3acb08648fcc667ba67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>758b682d9ca89964f03e7a2424b8f8b5</anchor>
      <arglist>(unsigned int new_seed)</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>9d297562847c0d684e2d3d5d3175b53e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRect</name>
    <filename>classcsRect.html</filename>
    <member kind="function">
      <name>xmax</name>
      <anchor>43ef15d71e44265993a01c1b518fb8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ymax</name>
      <anchor>29ebcabf97186ccf144ec2f068e726d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ymin</name>
      <anchor>8a89993941d84448b7d31a757fc90aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRect</name>
      <anchor>a376ff68a55bb5e5407bff2ca014db13</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRect</name>
      <anchor>9b75ab2c728d11d459afb6ffc2aac2c9</anchor>
      <arglist>(int ixmin, int iymin, int ixmax, int iymax)</arglist>
    </member>
    <member kind="function">
      <name>csRect</name>
      <anchor>59c8e8d941b8dbf9ea8f7519e3ec1811</anchor>
      <arglist>(const csRect &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>~csRect</name>
      <anchor>796b286aaa4076b36b0e330471eba429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddAdjacent</name>
      <anchor>7c8f25479b5b9cb6fbdde3c82465ee18</anchor>
      <arglist>(const csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>AddAdjanced</name>
      <anchor>cbe6596f5e47a0aa4230aa9c0282765c</anchor>
      <arglist>(const csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>Area</name>
      <anchor>60e4ae3c22be287cfb8cc4f4bbab509b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ClipLine</name>
      <anchor>e0f2e59c191cf09a263f66158f47fa55</anchor>
      <arglist>(int &amp;x1, int &amp;y1, int &amp;x2, int &amp;y2)</arglist>
    </member>
    <member kind="function">
      <name>ClipLineGeneral</name>
      <anchor>3cab06ef2d944365f12bc2efbbf84085</anchor>
      <arglist>(int &amp;x1, int &amp;y1, int &amp;x2, int &amp;y2)</arglist>
    </member>
    <member kind="function">
      <name>ClipLineSafe</name>
      <anchor>249b3486945502a178c4a273902597a2</anchor>
      <arglist>(int &amp;x1, int &amp;y1, int &amp;x2, int &amp;y2)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>70114df6efe235c08ab7d4028289605b</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>ContainsRel</name>
      <anchor>99a92c4b49d20a3a85ab37090b316fd0</anchor>
      <arglist>(int x, int y) const </arglist>
    </member>
    <member kind="function">
      <name>Equal</name>
      <anchor>28f042ff0b2e8266797d29fbfb416ee2</anchor>
      <arglist>(const csRect &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>Equal</name>
      <anchor>ee9cf05aab162768717c98f0c4a3c55a</anchor>
      <arglist>(int ixmin, int iymin, int ixmax, int iymax) const </arglist>
    </member>
    <member kind="function">
      <name>Exclude</name>
      <anchor>45b677df1a032060d9df6dcadd7f417e</anchor>
      <arglist>(const csRect &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Exclude</name>
      <anchor>4b73886bde6c41668f2637b932d22f13</anchor>
      <arglist>(int ixmin, int iymin, int ixmax, int iymax)</arglist>
    </member>
    <member kind="function">
      <name>Extend</name>
      <anchor>81452e0e7e3a6890afd67cff156f858b</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>c40654ef74b63a975c7e4bdc4ced14ee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Inset</name>
      <anchor>821a9a7dfca9372ebaf3a158583e206c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>b3bd31c18d8a6e659ad8c0d83d0b35f5</anchor>
      <arglist>(const csRect &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Intersect</name>
      <anchor>0e4a1a7dd653b669339bc99fba4eafa8</anchor>
      <arglist>(int ixmin, int iymin, int ixmax, int iymax)</arglist>
    </member>
    <member kind="function">
      <name>Intersects</name>
      <anchor>48e22b7c66b8db0aac2d9723900b0680</anchor>
      <arglist>(const csRect &amp;target) const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>12ae235caf1eb1b30ce80644665209ad</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Join</name>
      <anchor>d7ef8304136cc3d4b7a4fbe320900e7f</anchor>
      <arglist>(const csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>bdbba8bbcfee4fce0c1f82c0efebfff5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Move</name>
      <anchor>9924d0804ffbeada0a7f55a605f6b502</anchor>
      <arglist>(int dX, int dY)</arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>4ea6880818424780ccb4b14d6b87cde2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>2ec1ca26dc254478425bfcd2eed5971b</anchor>
      <arglist>(const csRect &amp;rect) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>5de958974a6a3cdc1fbdcaa97169861e</anchor>
      <arglist>(const csRect &amp;rect) const </arglist>
    </member>
    <member kind="function">
      <name>Outset</name>
      <anchor>274c1a3fd09d21c2f55ecd0d49793499</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>e342253839cf304143e1b95b468706bd</anchor>
      <arglist>(const csRect &amp;target)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>03b3854e1b5105ae89e31fad6e40342c</anchor>
      <arglist>(int ixmin, int iymin, int ixmax, int iymax)</arglist>
    </member>
    <member kind="function">
      <name>SetPos</name>
      <anchor>b1123b6e14df91ecd657f9cfca016ea5</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>2d69bcac7242166991602b51a27cf46b</anchor>
      <arglist>(int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>Subtract</name>
      <anchor>9970c68453be51aa4265f8e8d53541fb</anchor>
      <arglist>(const csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>Union</name>
      <anchor>0834916fa979a8322d6cba110c3978ae</anchor>
      <arglist>(const csRect &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Union</name>
      <anchor>1ea68396592ac2ed4a9e9be1611325a2</anchor>
      <arglist>(int ixmin, int iymin, int ixmax, int iymax)</arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>630af3d29f09ab394d89f3c4cf418232</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>xmin</name>
      <anchor>00ea0f16c06bb426e5fa93f513344ab2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRectRegion</name>
    <filename>classcsRectRegion.html</filename>
    <member kind="function">
      <name>FRAGMENT_BUFFER_SIZE</name>
      <anchor>221d1a945303f9f37a3fab982b7ceb7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRectRegion</name>
      <anchor>7d4b642982e0bb4384edf7893d6308db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csRectRegion</name>
      <anchor>ca150e546d590989afc2fd6ebd62ce0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClipTo</name>
      <anchor>67b6eecf39c39bf3813f03987d3b16b4</anchor>
      <arglist>(csRect &amp;clip)</arglist>
    </member>
    <member kind="function">
      <name>Count</name>
      <anchor>9ca364cece07fd3b809695234969b5d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Exclude</name>
      <anchor>484e83b71babd1136e6d4dbda483cc62</anchor>
      <arglist>(const csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>fragmentContainedRect</name>
      <anchor>bc598924c0307d2051b1f83aaab479c5</anchor>
      <arglist>(csRect &amp;r1, csRect &amp;r2)</arglist>
    </member>
    <member kind="function">
      <name>fragmentRect</name>
      <anchor>843836616b3c505a30496413c7e5894d</anchor>
      <arglist>(csRect &amp;, csRect &amp;, int mode)</arglist>
    </member>
    <member kind="function">
      <name>gatherFragments</name>
      <anchor>99ac7ac00f6778647f833eb6875fa10c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Include</name>
      <anchor>ed030c9849fa84c238d0c440d897296b</anchor>
      <arglist>(const csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>MakeEmpty</name>
      <anchor>a1c05b7c68abc68d0fbb0ddbd7f842f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>markForGather</name>
      <anchor>fffbf8f625a97150b2add16b0ae46e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RectAt</name>
      <anchor>5c4245798542ec76199f77d36cd0b213</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <name>fragment</name>
      <anchor>c7681fa9df1781f42590cbb6425173d2</anchor>
      <arglist>[FRAGMENT_BUFFER_SIZE]</arglist>
    </member>
    <member kind="function">
      <name>gather_mark</name>
      <anchor>d1a03fe59b2642e91826356f155a303a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>region</name>
      <anchor>c124ef08373f13d063e91515b1e14ff9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRedBlackTree</name>
    <filename>classcsRedBlackTree.html</filename>
    <member kind="function">
      <name>csRedBlackTree</name>
      <anchor>13164e69faa484c9324747f1aff57c5a</anchor>
      <arglist>(const csRedBlackTree &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>359da05e1c39a394fee542388707c9a3</anchor>
      <arglist>(const K2 &amp;other, const K &amp;fallback) const </arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>2b6b7e7f550305ebd1b5b123c30175ad</anchor>
      <arglist>(const K2 &amp;other, K &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <name>RecursiveFind</name>
      <anchor>e5f6c699c04c4ee6e4884ca3b4e2cb79</anchor>
      <arglist>(Node *node, const K2 &amp;other, K &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <name>RecursiveFind</name>
      <anchor>dbaca9b303dcce78b342ecb99c8f4146</anchor>
      <arglist>(Node *node, const K2 &amp;other, const K &amp;fallback) const </arglist>
    </member>
    <member kind="function">
      <name>RecursiveFind</name>
      <anchor>412771547330fef2500d672b0088b2d7</anchor>
      <arglist>(Node *node, const K2 &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>nodeAlloc</name>
      <anchor>ab641d26f1c241e1d1e57046778244eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>root</name>
      <anchor>7e659dd5f85a01611a663aa88f9107ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRedBlackTree</name>
      <anchor>ee599d5e05f65abe451412798340a917</anchor>
      <arglist>(size_t allocatorBlockSize=4096)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>bb7a5883317a190a4e38bb64bd8457c1</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>c7518fb2075dedc34a6f116fdeaa4ae1</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>c978b85e102be8e5457546d8bda452f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteFixup</name>
      <anchor>5e2e71720219d11c5070899a49edfd0a</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <name>DeleteNode</name>
      <anchor>9348a537f054590c8b33ba9801c29252</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>e2ef9e81ea1a67253709cf20330244cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>735f44e12c2527c7ef8cd7e3b9bed188</anchor>
      <arglist>(const K2 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>60f8bd27940aee03161e5ee8ad61381f</anchor>
      <arglist>(const K2 &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>fda841b60dc8cf996d7cf53b4da401a4</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>28c16110e5c19acce51e7d6fba87044d</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>InsertFixup</name>
      <anchor>d0c22bf6ee82dec27a25b3b111102db9</anchor>
      <arglist>(Node *node)</arglist>
    </member>
    <member kind="function">
      <name>IsBlack</name>
      <anchor>bb4bfa4479562905674a3796e3964994</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>d7d9c8b92b8b8d646aebe8933ab18eb5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsRed</name>
      <anchor>ccf46a723137943cc1531bca8783fdd1</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <name>LocateNode</name>
      <anchor>f77be1ed91062181779ac0ca07a1cb78</anchor>
      <arglist>(Node *node, const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>RecursiveCopy</name>
      <anchor>92a6a4c594ac8b7b888113a0424117fe</anchor>
      <arglist>(Node *&amp;to, Node *parent, const Node *from)</arglist>
    </member>
    <member kind="function">
      <name>RecursiveFind</name>
      <anchor>7a531ac03a134b880e0a2df2b3e3f974</anchor>
      <arglist>(Node *node, const K2 &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>RecursiveInsert</name>
      <anchor>03a25871df78216416fb1fb8f8ad6f03</anchor>
      <arglist>(Node *parent, Node *&amp;node, const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>RecursiveTraverseInOrder</name>
      <anchor>f973147533424b32acbf425f9bc91f0f</anchor>
      <arglist>(Node *node, CB &amp;callback) const </arglist>
    </member>
    <member kind="function">
      <name>RotateLeft</name>
      <anchor>5c85e583feacd98f9b25750941840075</anchor>
      <arglist>(Node *pivot)</arglist>
    </member>
    <member kind="function">
      <name>RotateRight</name>
      <anchor>d3eed6215e3c2d441199131f2ac7df3e</anchor>
      <arglist>(Node *pivot)</arglist>
    </member>
    <member kind="function">
      <name>Successor</name>
      <anchor>de3655e4ae89a39283f0d4a581f3ebac</anchor>
      <arglist>(Node *node) const </arglist>
    </member>
    <member kind="function">
      <name>TraverseInOrder</name>
      <anchor>5bafbe778a22b67aa100c9117e08225c</anchor>
      <arglist>(CB &amp;callback) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRedBlackTreeMap</name>
    <base>csRedBlackTree&lt; csRedBlackTreePayload&lt; K</base>
    <base> T &gt; &gt;</base>
    <filename>classcsRedBlackTreeMap.html</filename>
    <member kind="function">
      <name>Get</name>
      <anchor>4fd83d146f64f1fc6c05809d1b716238</anchor>
      <arglist>(const K &amp;key, T &amp;fallback)</arglist>
    </member>
    <member kind="function">
      <name>GetElementPointer</name>
      <anchor>31a964d3ac1f5e21cfbf4903803373c4</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>c2655a7434e4a42c512872711abbca49</anchor>
      <arglist>(const K &amp;key)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>ded0c9ec9ce6e82f440b6adec0171181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>2033603f8749d7126f0832976ea7b7aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>b41bdb26e6ad57ddfb6e5129c4b4cbf7</anchor>
      <arglist>(const K &amp;key, const T &amp;fallback) const </arglist>
    </member>
    <member kind="function">
      <name>GetElementPointer</name>
      <anchor>0187da1f0cde706cf2cac2b951c72fff</anchor>
      <arglist>(const K &amp;key) const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>5c30a0cb98550ffbc0820bf1e37ee300</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>78e91017fd54664fb1c798323be429cd</anchor>
      <arglist>(const K &amp;key, const T &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>TraverseInOrder</name>
      <anchor>5d77be825a7295d7afa92bea103ddbc9</anchor>
      <arglist>(CB &amp;callback) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRedBlackTreePayload</name>
    <filename>classcsRedBlackTreePayload.html</filename>
    <member kind="function">
      <name>csRedBlackTreePayload</name>
      <anchor>adeff05b24fbd909c874cb8327ab1422</anchor>
      <arglist>(const csRedBlackTreePayload &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csRedBlackTreePayload</name>
      <anchor>3267c5c72baa97f6c77afafdfe35d21a</anchor>
      <arglist>(const K &amp;k, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>GetKey</name>
      <anchor>a81c4dbb5ee82e8454ed0b959ae4fed0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>be914874ab5a1d1d17fa483e78fb1f28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>6ca67ab0aa0ae21d7e448d9ab5b41c13</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator const T &amp;</name>
      <anchor>78ec668c349eec72372ed6377ddbb716</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator T &amp;</name>
      <anchor>4d03673e62e53e4b0a3cfa95952a9823</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>65a9333276dd2babc888f97529455d01</anchor>
      <arglist>(const K &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>2199d6062af61f86327f5b7cfcc80152</anchor>
      <arglist>(const csRedBlackTreePayload &amp;other) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>4bc2e79330cd7b38687c4d96db6d63be</anchor>
      <arglist>(const K &amp;k1, const csRedBlackTreePayload &amp;k2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRef</name>
    <filename>classcsRef.html</filename>
    <member kind="function">
      <name>csRef</name>
      <anchor>27690290149b073a49ff073b5731820a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRef</name>
      <anchor>f2644ede8e1cd525215e1581248dbeed</anchor>
      <arglist>(const csPtr&lt; T &gt; &amp;newobj)</arglist>
    </member>
    <member kind="function">
      <name>csRef</name>
      <anchor>5e4615484affec6f6851156297e50a04</anchor>
      <arglist>(T *newobj)</arglist>
    </member>
    <member kind="function">
      <name>csRef</name>
      <anchor>3630d650f85228ea819f515d56c65d47</anchor>
      <arglist>(T2 *newobj)</arglist>
    </member>
    <member kind="function">
      <name>csRef</name>
      <anchor>fa4260c58edc68cb179707d598872e5f</anchor>
      <arglist>(csRef&lt; T2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csRef</name>
      <anchor>5b2b5624a615ef3057beb4246d56a4fe</anchor>
      <arglist>(csRef const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~csRef</name>
      <anchor>7ca758086a6a16d31219ef31c87a28a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AttachNew</name>
      <anchor>9e60343d6cf44b91d071a61cff000c79</anchor>
      <arglist>(csPtr&lt; T &gt; newObj)</arglist>
    </member>
    <member kind="function">
      <name>GetHash</name>
      <anchor>073a3611f0aa8078e80aea74128e5bc8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>d09064b1a57b00e467a9400f3968b0b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsValid</name>
      <anchor>620198af96e2f744bab6207d9c546ed8</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>3762b3a13eaed1a4451e3c077c2bf4df</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator T *</name>
      <anchor>4c295696fe44e4a8d3ebd4c496e53918</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-&gt;</name>
      <anchor>3c998d0bbee906f7a9c73bf64145f3c5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>4f7be769d0536f6cf0e2058cff6b60dd</anchor>
      <arglist>(csRef const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>92165a22a0e93aaf93a92a83698b96aa</anchor>
      <arglist>(csRef&lt; T2 &gt; const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>d815a0a58a68346ed410ee98c01acd62</anchor>
      <arglist>(T *newobj)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>c3904da8a2c8113cbd89f049c7052a06</anchor>
      <arglist>(const csPtr&lt; T &gt; &amp;newobj)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>d6e6480db3c13349078aa4fa9ff3b0ba</anchor>
      <arglist>(T *obj, const csRef &amp;r1)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>4a03d6661e4a719fc551fbd372d7d7ac</anchor>
      <arglist>(const csRef &amp;r1, T *obj)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>890a8b4f61f83243a20ac95a7386745f</anchor>
      <arglist>(const csRef &amp;r1, const csRef &amp;r2)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>53d2457de239a1a9b0b6761ff462087e</anchor>
      <arglist>(const csRef &amp;r1, const csRef &amp;r2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>6b81931630878c9b00f1c13067adeb4c</anchor>
      <arglist>(T *obj, const csRef &amp;r1)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>b6d5932063bae61e7293783c9ebd256f</anchor>
      <arglist>(const csRef &amp;r1, T *obj)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>051f0dced968aaf8d7af4c59d16b934f</anchor>
      <arglist>(const csRef &amp;r1, const csRef &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRefArray</name>
    <base>csArray&lt; T *</base>
    <base> csRefArrayElementHandler&lt; T * &gt;</base>
    <base> Allocator &gt;</base>
    <filename>classcsRefArray.html</filename>
    <member kind="function">
      <name>csRefArray</name>
      <anchor>aa2d8d414df976427e7cc1eb77e39731</anchor>
      <arglist>(int ilimit=0, int ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>a7505d6787a5fe3cf4fc01a358b626b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRefArrayElementHandler</name>
    <base>csArrayElementHandler</base>
    <filename>classcsRefArrayElementHandler.html</filename>
    <member kind="function">
      <name>Construct</name>
      <anchor>a54457ee9db9ab66a2533143cac9b5ef</anchor>
      <arglist>(T *address, T const &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>Destroy</name>
      <anchor>3c12fc20c90e47e1199e317fedd8d77f</anchor>
      <arglist>(T *address)</arglist>
    </member>
    <member kind="function">
      <name>InitRegion</name>
      <anchor>f82a782da2985f814c65864fa39a57fa</anchor>
      <arglist>(T *address, size_t count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRefArrayObject</name>
    <base>csRefArray&lt; T &gt;</base>
    <filename>classcsRefArrayObject.html</filename>
    <member kind="function">
      <name>csRefArrayObject</name>
      <anchor>046b040ca8e911c0eb703bd16e84d544</anchor>
      <arglist>(int ilimit=0, int ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>12dacf0e2c1579bd65b54a82431db875</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
    <member kind="function">
      <name>GetIndexByName</name>
      <anchor>a39bc6e3f71540f1f29727bc9c2e3c0b</anchor>
      <arglist>(const char *name) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRefCount</name>
    <filename>classcsRefCount.html</filename>
    <member kind="function">
      <name>Delete</name>
      <anchor>9d1d1fd5a215528f02130328a8a43cdb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csRefCount</name>
      <anchor>23533d9425defdaa0140c5e692dd44ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ref_count</name>
      <anchor>192cf91d3cfafcbeb2b97eeb136dc180</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRefCount</name>
      <anchor>3af47061de0fe29e50682463ac643155</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>0433b436ab8a82ea5dcf5926beb96fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRefCount</name>
      <anchor>667033c15e262996687ac17a07073b1b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>44da1c92e2fad79c8b4acea3cb1651d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRefTrackerAccess</name>
    <filename>classcsRefTrackerAccess.html</filename>
    <member kind="function">
      <name>AddAlias</name>
      <anchor>a8c0a506258420512d398cad33afd807</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
    <member kind="function">
      <name>MatchDecRef</name>
      <anchor>1fe27ac6a186a89778e949e4f157b671</anchor>
      <arglist>(void *, int, void *)</arglist>
    </member>
    <member kind="function">
      <name>MatchIncRef</name>
      <anchor>735fa9fd769d5ca0db7c80a14af45b56</anchor>
      <arglist>(void *, int, void *)</arglist>
    </member>
    <member kind="function">
      <name>RemoveAlias</name>
      <anchor>26ffde1b1f7e687f8618feddd43c6759</anchor>
      <arglist>(void *, void *)</arglist>
    </member>
    <member kind="function">
      <name>SetDescription</name>
      <anchor>5884fac0b7032555ba0b52250053ce29</anchor>
      <arglist>(void *, const char *)</arglist>
    </member>
    <member kind="function">
      <name>TrackConstruction</name>
      <anchor>ac03b9bbf01c4a33784e052c3d78d458</anchor>
      <arglist>(void *)</arglist>
    </member>
    <member kind="function">
      <name>TrackDecRef</name>
      <anchor>932e684254796d9af091a774d28d7ba2</anchor>
      <arglist>(void *, int)</arglist>
    </member>
    <member kind="function">
      <name>TrackDestruction</name>
      <anchor>bd48ede8419cbc9b3c685b6f0783128b</anchor>
      <arglist>(void *, int)</arglist>
    </member>
    <member kind="function">
      <name>TrackIncRef</name>
      <anchor>84e019c54997fdc84e441af1e68b209e</anchor>
      <arglist>(void *, int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRegExpMatcher</name>
    <filename>classcsRegExpMatcher.html</filename>
    <member kind="function">
      <name>csRegExpMatcher</name>
      <anchor>7a7c3d0c883a04c4e5b0f5b8f152866e</anchor>
      <arglist>(const char *pattern, bool extendedRE=false)</arglist>
    </member>
    <member kind="function">
      <name>csRegExpMatcher</name>
      <anchor>2fa6d91aa8415ba72a33db06b5e0d5e2</anchor>
      <arglist>(const csRegExpMatcher &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>~csRegExpMatcher</name>
      <anchor>75387c3168ec7c3712c735206af8d8fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Match</name>
      <anchor>d0f7df6dfcf0450bb57a722500eeb056</anchor>
      <arglist>(const char *string, csArray&lt; csRegExpMatch &gt; &amp;matches, int flags=0)</arglist>
    </member>
    <member kind="function">
      <name>Match</name>
      <anchor>f7c054aaf8210cf79b0052fbf5b1cb86</anchor>
      <arglist>(const char *string, int flags=0)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>7ccaafe1e9a4a64e2e10054ccd4ac262</anchor>
      <arglist>(const csRegExpMatcher &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderBuffer</name>
    <base>scfImplementation1&lt; csRenderBuffer</base>
    <base> iRenderBuffer &gt;</base>
    <filename>classcsRenderBuffer.html</filename>
    <member kind="function">
      <name>IsMasterBuffer</name>
      <anchor>928fc996846f6e75403efb4cb18d8bae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>masterBuffer</name>
      <anchor>4c32b9656f88f757781f35be62c753e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBuffer</name>
      <anchor>8a7995c74d1505b0e24495aab2db85e7</anchor>
      <arglist>(size_t size, csRenderBufferType type, csRenderBufferComponentType componentType, uint componentCount, size_t rangeStart, size_t rangeEnd, bool copy)</arglist>
    </member>
    <member kind="function">
      <name>~csRenderBuffer</name>
      <anchor>54f75b453de943e39c834d88a17321ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CopyInto</name>
      <anchor>436deb746bef8c3127aa978a4c719199</anchor>
      <arglist>(const void *data, size_t elementCount, size_t elemOffset=0)</arglist>
    </member>
    <member kind="function">
      <name>CreateIndexRenderBuffer</name>
      <anchor>2f0a65d1250be95a43bcb7bf67b88966</anchor>
      <arglist>(size_t elementCount, csRenderBufferType type, csRenderBufferComponentType componentType, size_t rangeStart, size_t rangeEnd, bool copy=true)</arglist>
    </member>
    <member kind="function">
      <name>CreateInterleavedRenderBuffers</name>
      <anchor>c9ad483adeaec3e274a289335da2ecdc</anchor>
      <arglist>(size_t elementCount, csRenderBufferType type, uint count, const csInterleavedSubBufferOptions *elements, csRef&lt; iRenderBuffer &gt; *buffers)</arglist>
    </member>
    <member kind="function">
      <name>CreateRenderBuffer</name>
      <anchor>063a3a19ffb77cd2341036b611422019</anchor>
      <arglist>(size_t elementCount, csRenderBufferType type, csRenderBufferComponentType componentType, uint componentCount, bool copy=true)</arglist>
    </member>
    <member kind="function">
      <name>GetBufferNameFromDescr</name>
      <anchor>6d4f400947544e5a3c426c9b9df41db3</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetBufferType</name>
      <anchor>678cf41b3b28afecadbbd9f069474569</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetComponentCount</name>
      <anchor>9ef0b716aafb2621d75db69e954a332e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetComponentType</name>
      <anchor>a7f47a648af24558d2bed04ff603cfae</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDescrFromBufferName</name>
      <anchor>fc13e106a705a8d7cdf6551f0ae44a84</anchor>
      <arglist>(csRenderBufferName bufferName)</arglist>
    </member>
    <member kind="function">
      <name>GetElementCount</name>
      <anchor>097fca3c99143d29bdd339663f9517ba</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetElementDistance</name>
      <anchor>5b102d909ea1a0daf28aa70918986a0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetMasterBuffer</name>
      <anchor>3e9297f60847d14356f4b99ed275e378</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetOffset</name>
      <anchor>6d20d5a23e566d7705f5fe2d2be3944c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRangeEnd</name>
      <anchor>d6ff45db45621deddbc0ac220e3ab1ea</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRangeStart</name>
      <anchor>c9c52a734a1b292edde25d428f6fea1f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>9ee78879570168bd102e7597f7d4ba36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetStride</name>
      <anchor>fdaef8516373a534381edf5ce99fe6a0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVersion</name>
      <anchor>9c8ef4b9a533d75e5d2cc081bf10b43b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsIndexBuffer</name>
      <anchor>6716d1a72bff4449bfd6bfb48f608e55</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>ac201ab5b72a26fa64fc500337ed5560</anchor>
      <arglist>(csRenderBufferLockType lockType)</arglist>
    </member>
    <member kind="function">
      <name>Release</name>
      <anchor>83d05cf4586dcffbc6cec05e632957ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetRenderBufferProperties</name>
      <anchor>2dfc98754a28e74edf8212a01deaa09f</anchor>
      <arglist>(size_t elementCount, csRenderBufferType type, csRenderBufferComponentType componentType, uint componentCount, bool copy=true)</arglist>
    </member>
    <member kind="function">
      <name>buffer</name>
      <anchor>3a41ab29ad15f8fe8f08c6c324593142</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bufferSize</name>
      <anchor>4b51a1bf2ae0eaf6b8390806c20c7902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>props</name>
      <anchor>b973519445586194649babd404e717d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rangeEnd</name>
      <anchor>ebc346f7390a41fb10254522cfe8a0d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>rangeStart</name>
      <anchor>24b1b8554c790ab3f7b1f84d2bd9ad2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>version</name>
      <anchor>22e23eaec85604736ed7f252617ac908</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderBufferHolder</name>
    <base>csRefCount</base>
    <filename>classcsRenderBufferHolder.html</filename>
    <member kind="function">
      <name>accessor</name>
      <anchor>409ff459a2c0bca3b1e082028f36d641</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>accessorMask</name>
      <anchor>6196098e88920cc6b5912d5a1ca86937</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>buffers</name>
      <anchor>7cc87654c677022782e2d34fb719f384</anchor>
      <arglist>[CS_BUFFER_COUNT]</arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferHolder</name>
      <anchor>dea040f4f9618b6c1a5bf0e80537f655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAccessor</name>
      <anchor>20d436cee24d37f1f2a67250b878a947</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetAccessorMask</name>
      <anchor>cd5b28a5b2863b2bd9848a6917432447</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetRenderBuffer</name>
      <anchor>2b48647eb884d40e34a7432e0c55c1c0</anchor>
      <arglist>(csRenderBufferName bufferName)</arglist>
    </member>
    <member kind="function">
      <name>GetRenderBufferNoAccessor</name>
      <anchor>eed76d0fd4629ca905e0a96d4f03c406</anchor>
      <arglist>(csRenderBufferName bufferName)</arglist>
    </member>
    <member kind="function">
      <name>SetAccessor</name>
      <anchor>bd0fddfd94336a2fcb3ea153b695d3d4</anchor>
      <arglist>(iRenderBufferAccessor *a, uint32 mask)</arglist>
    </member>
    <member kind="function">
      <name>SetRenderBuffer</name>
      <anchor>6e408bbd99b6d6d0bf133872d323752f</anchor>
      <arglist>(csRenderBufferName bufferName, iRenderBuffer *buffer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderBufferLock</name>
    <filename>classcsRenderBufferLock.html</filename>
    <member kind="function">
      <name>csRenderBufferLock</name>
      <anchor>6d6bf4106f65c0c51f108537dda1452f</anchor>
      <arglist>(iRenderBuffer *buf, csRenderBufferLockType lock=CS_BUF_LOCK_NORMAL)</arglist>
    </member>
    <member kind="function">
      <name>~csRenderBufferLock</name>
      <anchor>b76caf859563992d9a63f5dc4813a4c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>83ca5ea94e2a6210f51a24893d869383</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>7ce76286c55962281f10dae66d02e4d2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsValid</name>
      <anchor>5a0f0a34872f04ef744f2c0e8a058834</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>7bcd17c2436839c0cc9f66d8423d2c56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>ff0f4c842a448aba613f8b717b288fd9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator T *</name>
      <anchor>ffad85cb6b07b682bf9b93bfcf2880e4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>346b7a8afcb6666ed979bb3c303790c5</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>85303043ac965b13518375461fe8d48f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>cd5687044f6efac6d1ea74f9be8c14a1</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>7b7fab34359f2f1d7a59847415b89464</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderContext</name>
    <filename>classcsRenderContext.html</filename>
    <member kind="function">
      <name>frustum</name>
      <anchor>19d7837bd614d778a4150a9fefe028b7</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="function">
      <name>csRenderView</name>
      <anchor>6c71c6cf3849c8bf0f772f3c4fd6a2dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>added_fog_info</name>
      <anchor>42ccb2da75df9fa0bd7728e7433abb6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clip_plane</name>
      <anchor>5b778dcdd9319f3843fb18950a720a09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clip_planes</name>
      <anchor>c4a69722d547ba68968ef88ba574736a</anchor>
      <arglist>[7]</arglist>
    </member>
    <member kind="function">
      <name>clip_planes_mask</name>
      <anchor>834a81e2d8e7a1464119c9761cb61533</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>context_id</name>
      <anchor>c2e373a2cd5f351b6aee976afba77c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>do_clip_frustum</name>
      <anchor>acf6c947536bcd120977f09e8752475f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>do_clip_plane</name>
      <anchor>ddf1984f1df42eac1ad832ccc943d2d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>draw_rec_level</name>
      <anchor>1cd92922778b30ff20de6245789bc8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>fog_info</name>
      <anchor>d5f96d76f1849ecab40cace602234a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>icamera</name>
      <anchor>cc5aee7432f9006c810797a804e61447</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iview</name>
      <anchor>a8ace48e7c6328791d5a0ee10ecac53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>last_portal</name>
      <anchor>87bc44b77bd319d27334c3459ead2c62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>previous</name>
      <anchor>41278f9c6be634b9342ffda6055b4223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>previous_sector</name>
      <anchor>1418864cb432e02f9d52f3943918272e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>this_sector</name>
      <anchor>87d909ae622c5925a3be1e2f607ecfe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderMeshHolder</name>
    <filename>classcsRenderMeshHolder.html</filename>
    <member kind="function">
      <name>GetUnusedMesh</name>
      <anchor>f61c0e487910a7c10b4be6946c0483cc</anchor>
      <arglist>(bool &amp;created, uint frameNumber)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderMeshList</name>
    <filename>classcsRenderMeshList.html</filename>
    <member kind="function">
      <name>csRenderMeshList</name>
      <anchor>7dbbfc6206a59fa0863bdb5a9b170417</anchor>
      <arglist>(iEngine *engine)</arglist>
    </member>
    <member kind="function">
      <name>~csRenderMeshList</name>
      <anchor>cc0bde41f9a6bd793dbfcd17c27a5c9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddRenderMeshes</name>
      <anchor>f684ba743c3666621b55522a75521370</anchor>
      <arglist>(csRenderMesh **meshes, int num, long renderPriority, csZBufMode z_buf_mode, iMeshWrapper *mesh)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>860f60b10c470d229d393afb4087a226</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSortedMeshes</name>
      <anchor>f9d1a7525a5136388bbffcf97e723a42</anchor>
      <arglist>(csRenderMesh **meshes, iMeshWrapper **imeshes)</arglist>
    </member>
    <member kind="function">
      <name>SortMeshLists</name>
      <anchor>190e4483442bc5f85accaac8b1ef7efa</anchor>
      <arglist>(iRenderView *rview)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderStepParser</name>
    <filename>classcsRenderStepParser.html</filename>
  </compound>
  <compound kind="class">
    <name>csReporterHelper</name>
    <filename>classcsReporterHelper.html</filename>
  </compound>
  <compound kind="class">
    <name>csReversibleTransform</name>
    <base>csTransform</base>
    <filename>classcsReversibleTransform.html</filename>
    <member kind="function">
      <name>csReversibleTransform</name>
      <anchor>07618e95ad9ccd82c3c07e4f6e2914cd</anchor>
      <arglist>(const csMatrix3 &amp;o2t, const csMatrix3 &amp;t2o, const csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>csReversibleTransform</name>
      <anchor>141d3b365df0f36b1fb1b704d2e8dc91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csReversibleTransform</name>
      <anchor>f0d26f0b33e7692b5fc018b1e9a7f8c1</anchor>
      <arglist>(const csMatrix3 &amp;o2t, const csVector3 &amp;pos)</arglist>
    </member>
    <member kind="function">
      <name>csReversibleTransform</name>
      <anchor>2430185a991ce4493378b2e657828499</anchor>
      <arglist>(const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>csReversibleTransform</name>
      <anchor>262626bbd8bc304f09ab008e67ff7e54</anchor>
      <arglist>(const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>GetInverse</name>
      <anchor>4da7113ed78952f3c0fbec4534595492</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetT2O</name>
      <anchor>9b24e3ccd1874dd74ed48c8ef504db36</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetT2OTranslation</name>
      <anchor>7d76fc227ef7e67297899060f70c3273</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>LookAt</name>
      <anchor>10ce5361544cb5cb59f259f677879769</anchor>
      <arglist>(const csVector3 &amp;v, const csVector3 &amp;up)</arglist>
    </member>
    <member kind="function">
      <name>RotateOther</name>
      <anchor>cc4167fabbf3b9195f9f24d6312e4bf5</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>RotateOther</name>
      <anchor>36f17397f444e8a98b2b4d086c215df8</anchor>
      <arglist>(const csVector3 &amp;v, float angle)</arglist>
    </member>
    <member kind="function">
      <name>RotateThis</name>
      <anchor>b9dc14db5f80245d9ce2025df8e3c470</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>RotateThis</name>
      <anchor>d774bc775536dd10c2490752e1ebbef5</anchor>
      <arglist>(const csVector3 &amp;v, float angle)</arglist>
    </member>
    <member kind="function">
      <name>SetO2T</name>
      <anchor>7adc3d305ab65cd54d4360d5fcf8c0f1</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>SetT2O</name>
      <anchor>a0ae7c7834a8104fa463f9501734337c</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>This2Other</name>
      <anchor>75a59077b8836a91d9212de002c8fa5c</anchor>
      <arglist>(const csSphere &amp;s) const </arglist>
    </member>
    <member kind="function">
      <name>This2Other</name>
      <anchor>22ef53ece215cc70c6fa587544488a4b</anchor>
      <arglist>(const csPlane3 &amp;p, const csVector3 &amp;point, csPlane3 &amp;result) const </arglist>
    </member>
    <member kind="function">
      <name>This2Other</name>
      <anchor>1e70de98403cd70b2e6365a70a9ccee9</anchor>
      <arglist>(const csPlane3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>This2Other</name>
      <anchor>0583af0d751ee86b38a29ff5f260facd</anchor>
      <arglist>(const csVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>This2OtherRelative</name>
      <anchor>c4d02d3f3f8777687e8b5d8f3181a8be</anchor>
      <arglist>(const csPlane3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>This2OtherRelative</name>
      <anchor>812d772c7db08d2ac2c17ce9b3c9f048</anchor>
      <arglist>(const csVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>60e6ee8df1d444d14fc1f56f6e3fdbc7</anchor>
      <arglist>(const csTransform &amp;t1, const csReversibleTransform &amp;t2)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>328636bf6d926c21ae34e256c02ab759</anchor>
      <arglist>(const csReversibleTransform &amp;t1, const csReversibleTransform &amp;t2)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>30581bc00d5d9453319c51e68e05e5c5</anchor>
      <arglist>(csReversibleTransform &amp;t1, const csReversibleTransform &amp;t2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>e3764bd4248ab88bd11ffb18d8618af0</anchor>
      <arglist>(const csReversibleTransform &amp;t1, const csReversibleTransform &amp;t2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>a58d34ef5a1fe5e67d448efe76b76d84</anchor>
      <arglist>(const csSphere &amp;p, const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>d0dadc62fcff91455e4483d7de12871f</anchor>
      <arglist>(const csPlane3 &amp;p, const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>f7f65049e697c557c82c21ecd92097e2</anchor>
      <arglist>(const csVector3 &amp;v, const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>c67052dda388b6f7234a0f65aa2ecbe5</anchor>
      <arglist>(csReversibleTransform &amp;t1, const csReversibleTransform &amp;t2)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>5e7fdb59192f24be8c74a6da969b93d6</anchor>
      <arglist>(csPlane3 &amp;p, const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>6151843d11cd0c1cf381013acb7b990d</anchor>
      <arglist>(csVector3 &amp;v, const csReversibleTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>m_t2o</name>
      <anchor>f500740bc965322a64e7bc714ce7196d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRunnable</name>
    <filename>classcsRunnable.html</filename>
    <member kind="function">
      <name>~csRunnable</name>
      <anchor>7ce023ce123572b5faed3560c7ee1a3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>55efa1db1a7d178dcb4bb0da96bfd56a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRefCount</name>
      <anchor>dbc3e72f46424389e86447066dc51972</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>16254cb87076b1c92d4ab74e955f7f90</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Run</name>
      <anchor>92eef3efda1388219e00146629f3a597</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSafeCopyArray</name>
    <base>csArray&lt; T</base>
    <base> csArraySafeCopyElementHandler&lt; T &gt; &gt;</base>
    <filename>classcsSafeCopyArray.html</filename>
    <member kind="function">
      <name>csSafeCopyArray</name>
      <anchor>4d0342f7404e2985c4b0d114991e9ddb</anchor>
      <arglist>(size_t limit=0, size_t threshold=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSaverFile</name>
    <base>scfImplementationExt2&lt; csSaverFile</base>
    <base> csObject</base>
    <base> iSaverFile</base>
    <base> iSelfDestruct &gt;</base>
    <filename>classcsSaverFile.html</filename>
    <member kind="function">
      <name>csSaverFile</name>
      <anchor>6e7feeb8d37e29bab7dcc70e5b74ea7c</anchor>
      <arglist>(const char *file, int filetype)</arglist>
    </member>
    <member kind="function">
      <name>~csSaverFile</name>
      <anchor>a0db4204c80404b622dd2abe03871634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFile</name>
      <anchor>2c73171ffb2fcef77ae38904cde6e6f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFileType</name>
      <anchor>cea7faf8be3631f15b3aba3a89d74bb2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>b11a80099468f60219a408c367e3ee58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SelfDestruct</name>
      <anchor>0cfa864a91dd4671adc7818d65678e0a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csScfStringSet</name>
    <base>scfImplementation1&lt; csScfStringSet</base>
    <base> iStringSet &gt;</base>
    <filename>classcsScfStringSet.html</filename>
    <member kind="function">
      <name>csScfStringSet</name>
      <anchor>e2d6f8d5e9930fc4c77b5d666a280fbe</anchor>
      <arglist>(size_t size=23)</arglist>
    </member>
    <member kind="function">
      <name>~csScfStringSet</name>
      <anchor>f259518dd680e6521bec252265394bd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>e21e447dbeba3dbded1f73adc308ff35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>2cda663b7aaaafb6fa736b2410a79425</anchor>
      <arglist>(csStringID id) const </arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>126dd6fcb08228d8f67ce3e254cf268b</anchor>
      <arglist>(char const *s) const </arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>63c470f7134257e7be13a5f9a1d614d2</anchor>
      <arglist>(csStringID id)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>5b8703f701de41a0f61899309366e1cb</anchor>
      <arglist>(char const *s)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>de51ed50f2da5121e0ac93e1cce7ff59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>2a0666a1bc8b357642abf15d98f8948f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>56e0dded10bcd41268da539c2bf70170</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>4b575b1667cd1375f7e696613edc6011</anchor>
      <arglist>(csStringID id) const </arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>8bc6c282201aa1cfb9f542f961423f08</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSchedule</name>
    <filename>classcsSchedule.html</filename>
    <member kind="function">
      <name>csSchedule</name>
      <anchor>ac571e4d768d47fb29969a2652e0bf2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddCallback</name>
      <anchor>3fcf02237c2a3b135787876656c1a5f9</anchor>
      <arglist>(void(*func)(void *), void *arg, int delay)</arglist>
    </member>
    <member kind="function">
      <name>AddRepeatCallback</name>
      <anchor>1cff671b31220abc1e6b99cc36e5dac8</anchor>
      <arglist>(void(*func)(void *), void *arg, int period)</arglist>
    </member>
    <member kind="function">
      <name>RemoveCallback</name>
      <anchor>bb817db71f9af3e3afa7d2404df0c304</anchor>
      <arglist>(void *arg)</arglist>
    </member>
    <member kind="function">
      <name>RemoveCallback</name>
      <anchor>54f28e1f5deffb1eb994ff4d0923b44f</anchor>
      <arglist>(void(*func)(void *), void *arg)</arglist>
    </member>
    <member kind="function">
      <name>RemoveCallback</name>
      <anchor>1d2d154d88fb3fe67d1f02b3a74e9c8e</anchor>
      <arglist>(void(*func)(void *), void *arg, int period)</arglist>
    </member>
    <member kind="function">
      <name>TimePassed</name>
      <anchor>199869be48ccd5d6a3248dff7c2c90de</anchor>
      <arglist>(int elapsed_time)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csScopedLock</name>
    <filename>classcsScopedLock.html</filename>
    <member kind="function">
      <name>csScopedLock</name>
      <anchor>ab4bba5aa777db6612891a2cc7666251</anchor>
      <arglist>(T &amp;lock)</arglist>
    </member>
    <member kind="function">
      <name>~csScopedLock</name>
      <anchor>b6b5efbb3c1fc3e1acae91e3c17f3422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>lock</name>
      <anchor>c1e6bf572067eed85ad0f71dc2a279a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csScopedMutexLock</name>
    <filename>classcsScopedMutexLock.html</filename>
    <member kind="function">
      <name>csScopedMutexLock</name>
      <anchor>f27c7c4313d4fb14a906187fed4eae93</anchor>
      <arglist>(csMutex *newmutex)</arglist>
    </member>
    <member kind="function">
      <name>~csScopedMutexLock</name>
      <anchor>f3f8d24440daef71d3a9769b282d5161</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>mutex</name>
      <anchor>06ed0fd837c43217b9c1d4d008db672b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csScreenShot</name>
    <base>scfImplementationExt0&lt; csScreenShot</base>
    <base> csImageBase &gt;</base>
    <filename>classcsScreenShot.html</filename>
    <member kind="function">
      <name>csScreenShot</name>
      <anchor>ca5de54cd2dd6fc4e67c69ba36f7af35</anchor>
      <arglist>(iGraphics2D *G2D)</arglist>
    </member>
    <member kind="function">
      <name>~csScreenShot</name>
      <anchor>163d3019e2a9648ab2feb511f7e00464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>be90677cea0bd304532685904d0b92fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>0a2c8bac3fabb723c994324f77a4f29b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>959957f53466a69a1ffd4e11c5957948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>92cda2de8889a6f5a3b378e872474251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>68dd4d5cd5a7832689a9b99b79244753</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSegment2</name>
    <filename>classcsSegment2.html</filename>
    <member kind="function">
      <name>csSegment2</name>
      <anchor>483f7fdf58ec2287451eba2755073500</anchor>
      <arglist>(const csVector2 &amp;s, const csVector2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>csSegment2</name>
      <anchor>8c06946d32a44a93b65809d8d72afcbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csSegment2</name>
      <anchor>e0c6b169d55b3aa9a7382b1e3186cc83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>End</name>
      <anchor>f922dbb01980721bc94e11f30ed07522</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>End</name>
      <anchor>d2ec6a2367a75545af6d50913aca04b7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>4c7fac87d87a6a859e97e776a7954225</anchor>
      <arglist>(const csVector2 &amp;s, const csVector2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>SetEnd</name>
      <anchor>a71e23bd828229fb9e439b779e8a815f</anchor>
      <arglist>(const csVector2 &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>SetStart</name>
      <anchor>0e2b0d0fb67363f272a4100b1c9f7dea</anchor>
      <arglist>(const csVector2 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>1e8c2728674801630a94716014437d26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>48ebbdb8de300930e733c0ba241d14df</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSegment3</name>
    <filename>classcsSegment3.html</filename>
    <member kind="function">
      <name>csSegment3</name>
      <anchor>552a2298494e1e5dea9ee788922380f7</anchor>
      <arglist>(const csVector3 &amp;s, const csVector3 &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>csSegment3</name>
      <anchor>bf767988527a9c2c5ff7adf06e8f182c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>End</name>
      <anchor>1ac618fc28a7bc0aea50302d4aebeed0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>End</name>
      <anchor>86a7c7129da99c2c29cc83213cef732d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>f026621bea02b8e3ba4ec9c71b0c03cc</anchor>
      <arglist>(const csVector3 &amp;s, const csVector3 &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>SetEnd</name>
      <anchor>2ab9dca69f3ae9ebc6ab785cf5778372</anchor>
      <arglist>(const csVector3 &amp;e)</arglist>
    </member>
    <member kind="function">
      <name>SetStart</name>
      <anchor>714730c8fd12992dd5f129bd178f16d1</anchor>
      <arglist>(const csVector3 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>ae83e31f88da2071261024df2860c19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>e8e48008356e3415af9029e97b36b4fe</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSemaphore</name>
    <base>csRefCount</base>
    <filename>classcsSemaphore.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>214293fbb6eb5f85d03c38b0784af7f1</anchor>
      <arglist>(uint32 value=0)</arglist>
    </member>
    <member kind="function">
      <name>GetLastError</name>
      <anchor>e98d6584eec2efcb8c87a39bf6385d2a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>LockTry</name>
      <anchor>70310eb7aa191c1cad77e240a8a4e27d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LockWait</name>
      <anchor>49c647c7a11cdf827f255edbe7c430e5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Release</name>
      <anchor>eb7266570aa0e6ba4062121f978d6003</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>0ef24962ab0ac55861e9e24333fc05c5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSet</name>
    <filename>classcsSet.html</filename>
    <member kind="function">
      <name>HashType</name>
      <anchor>c13311a966ccf100a680c965323bfd16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator</name>
      <anchor>594373255032048e48ada9ba4e8b6e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSet</name>
      <anchor>2e6f6cbb1d5f6da27ebc8840e61802ed</anchor>
      <arglist>(int size=23, int grow_rate=5, int max_size=20000)</arglist>
    </member>
    <member kind="function">
      <name>Add</name>
      <anchor>fe4c3dcd135ff9ae5ca5c5b965434fb7</anchor>
      <arglist>(const T &amp;object)</arglist>
    </member>
    <member kind="function">
      <name>AddNoTest</name>
      <anchor>b1551cc10ebf97fd75517879218ad30c</anchor>
      <arglist>(const T &amp;object)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>c2d43d082a72a2b2aa26d15e112f6e68</anchor>
      <arglist>(const T &amp;object) const </arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>8f56f8ccb6ae68138ae23840126b490e</anchor>
      <arglist>(const T &amp;object)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>82c92adf572745bb7e0495c7512d462a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>cc0eb2404b92070ddbf9304e6301aa47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>600ed2758c5ed06c5fff0bd26eeec44a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>922fee4e4905f62562d97ad9e4f5a945</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>In</name>
      <anchor>90440c896b860bd6dacf7ed4c9f21386</anchor>
      <arglist>(const T &amp;object) const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>2eb53f1b6dfeb25eb847161457a17f6b</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSet::GlobalIterator</name>
    <filename>classcsSet_1_1GlobalIterator.html</filename>
    <member kind="function">
      <name>GlobalIterator::GlobalIterator</name>
      <anchor>5a206b52e2e0c2f0788c015c5571232c</anchor>
      <arglist>(const GlobalIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::operator=</name>
      <anchor>6fae988d6b374545f1d1112ef3159d67</anchor>
      <arglist>(const GlobalIterator &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::GlobalIterator</name>
      <anchor>a399cb3378dc9757e534da6f804bc530</anchor>
      <arglist>(const csSet&lt; T &gt; *s)</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::GlobalIterator</name>
      <anchor>e6deb782895cf3a95287f0463f52bcc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::iter</name>
      <anchor>61a9c97f6ca60f8a73a015d4a4a0ab70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::csSet&lt; T &gt;</name>
      <anchor>cc7ee34d8e5a22f95a61dff3b371d2f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::HasNext</name>
      <anchor>843b42dcba54e2f1bd749156b6e6e007</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GlobalIterator::Next</name>
      <anchor>1297d1c1c92ee8b8fea7233b808d47df</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderExpression</name>
    <filename>classcsShaderExpression.html</filename>
    <member kind="function">
      <name>arg_array</name>
      <anchor>dde20a85ceed2929abe169eac9a74e72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_array</name>
      <anchor>d5a5141f253e4964db6373376afe3a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Evaluate</name>
      <anchor>78967f3f0789c400c1d94469a534f13b</anchor>
      <arglist>(csShaderVariable *, csShaderVarStack &amp;stacks)</arglist>
    </member>
    <member kind="function">
      <name>GetError</name>
      <anchor>c2533fd3015ea69c8846df92e8aabbd2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>6215c0960099ed1be46dbf7843389644</anchor>
      <arglist>(iDocumentNode *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderExpressionAccessor</name>
    <base>scfImplementation1&lt; csShaderExpressionAccessor</base>
    <base> iShaderVariableAccessor &gt;</base>
    <filename>classcsShaderExpressionAccessor.html</filename>
    <member kind="function">
      <name>csShaderExpressionAccessor</name>
      <anchor>7bfe671af6c23d2854164f435ec5a45d</anchor>
      <arglist>(iObjectRegistry *object_reg, csShaderExpression *expression)</arglist>
    </member>
    <member kind="function">
      <name>PreGetValue</name>
      <anchor>64d05ae9bbf6ca3bd38efb4176766be7</anchor>
      <arglist>(csShaderVariable *variable)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderProgram</name>
    <base>scfImplementation2&lt; csShaderProgram</base>
    <base> iShaderProgram</base>
    <base> iShaderDestinationResolver &gt;</base>
    <filename>classcsShaderProgram.html</filename>
    <member kind="function">
      <name>ResolveBufferDestination</name>
      <anchor>a0e3c04be82746567051a94ec9db716e</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>GetParamFloatVal</name>
      <anchor>f5aaccad33a17dda9a4b7378847db5cf</anchor>
      <arglist>(const iShaderVarStack *stacks, const ProgramParam &amp;param, float defVal)</arglist>
    </member>
    <member kind="function">
      <name>GetParamTransformVal</name>
      <anchor>7a0ace8707bf7c30e5d0634b57865f8f</anchor>
      <arglist>(const iShaderVarStack *stacks, const ProgramParam &amp;param, const csReversibleTransform &amp;defVal)</arglist>
    </member>
    <member kind="function">
      <name>commonTokens</name>
      <anchor>e76686a7ae19eeea29ebf4ae6f8a2bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>objectReg</name>
      <anchor>5c9206ee8764979e091c297cd2f549c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>strings</name>
      <anchor>b4798a46a6f833ab6f2d7d9ea0319591</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>synsrv</name>
      <anchor>982a78952b2acd82c5508ca24d081585</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProgramParamType</name>
      <anchor>b05c11b742bbed5058d2d91fa80b9020</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DumpProgramInfo</name>
      <anchor>30325beea9a2b49943f29ac36765a6eb</anchor>
      <arglist>(csString &amp;output)</arglist>
    </member>
    <member kind="function">
      <name>DumpVariableMappings</name>
      <anchor>ae374fdc7221f2057ff7d21a7e3d2e5d</anchor>
      <arglist>(csString &amp;output)</arglist>
    </member>
    <member kind="function">
      <name>GetParamVectorVal</name>
      <anchor>279b51c4f53d9abe1126179e4e5f9b4a</anchor>
      <arglist>(const iShaderVarStack *stacks, const ProgramParam &amp;param, const csVector4 &amp;defVal)</arglist>
    </member>
    <member kind="function">
      <name>GetProgramData</name>
      <anchor>5b0bb25a03d4a0d73f95c20f64d69b99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetProgramNode</name>
      <anchor>ea3be52cdc4fae0d690b1051104f96c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ParseCommon</name>
      <anchor>571e33a0a06c9bd5d5c5d0148df70c21</anchor>
      <arglist>(iDocumentNode *child)</arglist>
    </member>
    <member kind="function">
      <name>ParseProgramParam</name>
      <anchor>aa021d0a1fe7f61c4613fe45b598e5df</anchor>
      <arglist>(iDocumentNode *node, ProgramParam &amp;param, uint types=~0)</arglist>
    </member>
    <member kind="function">
      <name>ResolveTU</name>
      <anchor>58c7a43856e39a04d5d2bb99ae1f6e91</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>2ff9212ce10752623b5ed1fac0a33d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>doVerbose</name>
      <anchor>707a647c53e116ee811dd97090ac90e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>programFile</name>
      <anchor>ce68f2732ffbfcc20d9700766ba703be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>programFileName</name>
      <anchor>27ccf20058acba0d79f29963bae7ec1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>programNode</name>
      <anchor>5c491699e31684a647fe00e05be55819</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>variablemap</name>
      <anchor>5f8cefcc5242dc1c7f67a22ae03aec72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderVarBlockAlloc</name>
    <filename>classcsShaderVarBlockAlloc.html</filename>
    <member kind="function">
      <name>BlockAllocatedSV</name>
      <anchor>7438b758b50f6e369cac218e4d953370</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csShaderVarBlockAlloc</name>
      <anchor>44595605e0609d143f2df18d43474c36</anchor>
      <arglist>(size_t nelem=32)</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>2d71edec2ba49e791b3177fb624420bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderVariable</name>
    <base>csRefCount</base>
    <filename>classcsShaderVariable.html</filename>
    <member kind="function">
      <name>AddVariableToArray</name>
      <anchor>1a6f7833d6cd824e8419fe4bd0be68e5</anchor>
      <arglist>(csShaderVariable *variable)</arglist>
    </member>
    <member kind="function">
      <name>csShaderVariable</name>
      <anchor>ad0df11ce389e8063f57a67cc2183eb7</anchor>
      <arglist>(const csShaderVariable &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>RemoveFromArray</name>
      <anchor>9b8a888ac9a4f027bc44c7587e30927d</anchor>
      <arglist>(size_t element)</arglist>
    </member>
    <member kind="function">
      <name>~csShaderVariable</name>
      <anchor>04cc004432036feb4db6fcd52eaad2c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>VariableType</name>
      <anchor>140cbe23ce4574813c82d126d0619971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>NKNOWN</name>
      <anchor>140cbe23ce4574813c82d126d061997133639d65e695432917fdbf3243fea98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>NT</name>
      <anchor>140cbe23ce4574813c82d126d061997146890929b366e55785961636ec7e2579</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LOAT</name>
      <anchor>140cbe23ce4574813c82d126d06199717f325fdecb64a3c94d8cdd495f8c9ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EXTURE</name>
      <anchor>140cbe23ce4574813c82d126d0619971580a78e516715f966e8bc1e35b8bb7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ENDERBUFFER</name>
      <anchor>140cbe23ce4574813c82d126d06199711cf0c0cd153dbd2dfd60be19f66d687e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ECTOR2</name>
      <anchor>140cbe23ce4574813c82d126d0619971ae510b34ce2431990c02f00982d318c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ECTOR3</name>
      <anchor>140cbe23ce4574813c82d126d0619971f7a6239950d0ba2310264dad1c6ab8fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ECTOR4</name>
      <anchor>140cbe23ce4574813c82d126d061997191e5c37f900d860b0b56879343e497b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ATRIX</name>
      <anchor>140cbe23ce4574813c82d126d0619971c99b995733ec542bc64263b015cb1291</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RANSFORM</name>
      <anchor>140cbe23ce4574813c82d126d06199713e13b9f8c1396937d10fff8f44ba84ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RRAY</name>
      <anchor>140cbe23ce4574813c82d126d06199718978755a98d91e8651c3d2f3ffebea9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>OLOR</name>
      <anchor>140cbe23ce4574813c82d126d0619971265a20f008ea0ab7cba7fd35e819d102</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csShaderVariable</name>
      <anchor>99b47809796af5e5db89c82f25bbb43d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csShaderVariable</name>
      <anchor>6e78884741396b70cc61c5dd3d652c93</anchor>
      <arglist>(csStringID name)</arglist>
    </member>
    <member kind="function">
      <name>GetArrayElement</name>
      <anchor>8d93b92db2255e3c0fe222c7d4f9936a</anchor>
      <arglist>(size_t element)</arglist>
    </member>
    <member kind="function">
      <name>GetArraySize</name>
      <anchor>b0e85fe7aa3692eb49184f2c2d522559</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>5ebf3add390a5b2e5ea6557d0a526f4b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>a923b50c900119bf4024f3242a5a652a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>1abe9ef25d1a661e7a7907ddc9dd5676</anchor>
      <arglist>(csReversibleTransform &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>19c367d05750317f8a6e702015346423</anchor>
      <arglist>(csMatrix3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>83f5fc1fc1eefdd38eb52765a2864064</anchor>
      <arglist>(csVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>e6b863c092e5b5e5f35d74bf75fc3d97</anchor>
      <arglist>(csColor &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>4002bec79812493ac39778ed7a44bb10</anchor>
      <arglist>(csVector3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>b601d6c141c9e8ffe2858da74494eac9</anchor>
      <arglist>(csVector2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>3ce81ceb2a8811e5ea40d0f6b8ae69fb</anchor>
      <arglist>(iRenderBuffer *&amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>7e572859cd8f6d19ac2196fa0797ec0a</anchor>
      <arglist>(iTextureWrapper *&amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>6820cffb48c2fd63635965b636c150fd</anchor>
      <arglist>(iTextureHandle *&amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>8e575647b97c2927cc8bc57745e9ddb0</anchor>
      <arglist>(csRGBpixel &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>d51ad56988b4aa2e7a4777dc2c3eafe0</anchor>
      <arglist>(float &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>aafa1bae521b26644794c9d65a84974a</anchor>
      <arglist>(int &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetAccessor</name>
      <anchor>a4945d216b26187c8b43d6cf66096bd3</anchor>
      <arglist>(iShaderVariableAccessor *a)</arglist>
    </member>
    <member kind="function">
      <name>SetArrayElement</name>
      <anchor>f4f9daf4446ac6f609b9c219e5070a46</anchor>
      <arglist>(size_t element, csShaderVariable *variable)</arglist>
    </member>
    <member kind="function">
      <name>SetArraySize</name>
      <anchor>507564f7ecbf73565a6869963d4fc7ea</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>e0fe9cbffeafb4353a6f85703a70822f</anchor>
      <arglist>(csStringID newName)</arglist>
    </member>
    <member kind="function">
      <name>SetType</name>
      <anchor>b653ea02cf248be3d9f61f41b0189ff7</anchor>
      <arglist>(VariableType t)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>fdf27d058f74e65e0d8b3e9ad8695bc5</anchor>
      <arglist>(const csReversibleTransform &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>2bfa7fdf11fbdcc0a803c3e7116f08f2</anchor>
      <arglist>(const csMatrix3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>79f337ac258afb85f650d1e05e692f52</anchor>
      <arglist>(const csVector4 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>a4b8d106be655bcfbbe319d02cb5be24</anchor>
      <arglist>(const csColor &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>0d120e0cebc9a47bd34734b6ac95d97b</anchor>
      <arglist>(const csVector3 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>963815986e2dffc7130a22ac9746cdae</anchor>
      <arglist>(const csVector2 &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>c09d98179aa56867c481b509cf926d0e</anchor>
      <arglist>(iRenderBuffer *value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>6ef249a574f7ede96738e38d22b89cf9</anchor>
      <arglist>(iTextureWrapper *value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>1b18096ee79310a63db9a89767197061</anchor>
      <arglist>(iTextureHandle *value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>525818c3d7d54adb8c622f3d5dd42506</anchor>
      <arglist>(const csRGBpixel &amp;value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>baa93cd3f72a72b5befce387b32b2c2f</anchor>
      <arglist>(float value)</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>6c5d519d44d885ebe74d4dd8f06c2a72</anchor>
      <arglist>(int value)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderVariableContext</name>
    <base>scfImplementation1&lt; csShaderVariableContext</base>
    <base> scfFakeInterface&lt; iShaderVariableContext &gt; &gt;</base>
    <base>CS::ShaderVariableContextImpl</base>
    <filename>classcsShaderVariableContext.html</filename>
  </compound>
  <compound kind="class">
    <name>csShaderVariableFrameHolder</name>
    <filename>classcsShaderVariableFrameHolder.html</filename>
    <member kind="function">
      <name>GetFrameUniqueSV</name>
      <anchor>dfa9b247e0ed6a55b1f43fc006a02e4d</anchor>
      <arglist>(uint framenr, csStringID name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSimplePixmap</name>
    <base>csPixmap</base>
    <filename>classcsSimplePixmap.html</filename>
    <member kind="function">
      <name>hTex</name>
      <anchor>4aaaabb841125a5517b42f18f5f27ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>th</name>
      <anchor>6245d3754555b800e5ef80be890f4857</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tw</name>
      <anchor>64913b8bbfae931e57e0b6c39550ddeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tx</name>
      <anchor>6cd3d3c952ed408c859e8cc7ecc1ca29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ty</name>
      <anchor>d655f3b3b6c928616afe8cb4d4492f75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSimplePixmap</name>
      <anchor>21c47d4f5c6be7cb574090277dd03fec</anchor>
      <arglist>(iTextureHandle *hTexture)</arglist>
    </member>
    <member kind="function">
      <name>csSimplePixmap</name>
      <anchor>46e187c986d9cc3feb66296bbc1d7964</anchor>
      <arglist>(iTextureHandle *hTexture, int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>~csSimplePixmap</name>
      <anchor>6555cfe902f9e033481c1639b6fd5690</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Advance</name>
      <anchor>6eca6af461604c09a441649ab7bb8a18</anchor>
      <arglist>(csTicks)</arglist>
    </member>
    <member kind="function">
      <name>DrawScaled</name>
      <anchor>3683a5f222d877ac3194088fad36d11d</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>DrawTiled</name>
      <anchor>5a9bc67122e2425c5c3ac0e7c4d8ad25</anchor>
      <arglist>(iGraphics3D *g3d, int sx, int sy, int sw, int sh, int orgx, int orgy, uint8 Alpha=0)</arglist>
    </member>
    <member kind="function">
      <name>GetTextureHandle</name>
      <anchor>d1b20207ac7a56631b7d21e10a93cfdc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Height</name>
      <anchor>a4bde154381287a1b9f3d7d93f68affe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetTextureHandle</name>
      <anchor>6130811387b782d0f04113aa2519c838</anchor>
      <arglist>(iTextureHandle *hTexture)</arglist>
    </member>
    <member kind="function">
      <name>SetTextureRectangle</name>
      <anchor>7cdeed3377b5a47c4203bcb120118611</anchor>
      <arglist>(int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>Width</name>
      <anchor>8ababd40e9fdf6cba7ecab8726f5842f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSoftFontCache</name>
    <base>csFontCache</base>
    <filename>classcsSoftFontCache.html</filename>
    <member kind="function">
      <name>cacheRemaining</name>
      <anchor>6d0343f655ac4786e1848d9d2642c686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>G2D</name>
      <anchor>6111a0ed75c70512827b2d88fdc92c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InternalCacheGlyph</name>
      <anchor>78ec9ce7494964a4bdfef9b30df480a3</anchor>
      <arglist>(KnownFont *font, utf32_char glyph, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>InternalUncacheGlyph</name>
      <anchor>796b2faa76b8f67241dece3ca0de8894</anchor>
      <arglist>(GlyphCacheData *cacheData)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSoftFontCacheImpl</name>
    <base>csSoftFontCache</base>
    <filename>classcsSoftFontCacheImpl.html</filename>
    <member kind="function">
      <name>csSoftFontCacheImpl</name>
      <anchor>34a545f8aef0515247f894275c7281d2</anchor>
      <arglist>(csGraphics2D *G2D)</arglist>
    </member>
    <member kind="function">
      <name>WriteString</name>
      <anchor>896a62a06381ebd92b27304dab69beab</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const wchar_t *text, uint flags)</arglist>
    </member>
    <member kind="function">
      <name>WriteString</name>
      <anchor>cc7ca9065a287c887de8ad63d3b58cda</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const utf8_char *text, uint flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSolidSpace</name>
    <filename>classcsSolidSpace.html</filename>
    <member kind="function">
      <name>csSolidSpace</name>
      <anchor>2471af03c31199d03ef236617b76be5d</anchor>
      <arglist>(const csBox3 &amp;bbox, const csVector3 &amp;minsize)</arglist>
    </member>
    <member kind="function">
      <name>AddClosedObject</name>
      <anchor>6076b35b7cd56638cc56f506c469fbe1</anchor>
      <arglist>(iPolygonMesh *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSparse3D</name>
    <filename>classcsSparse3D.html</filename>
    <member kind="function">
      <name>csSparse3D</name>
      <anchor>7f53c3029cd11f1fa208488536da8b14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csSparse3D</name>
      <anchor>022157a12063cbb80f215b02fcc0577b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSphere</name>
    <filename>classcsSphere.html</filename>
    <member kind="function">
      <name>csSphere</name>
      <anchor>10c03039a4b34a1114e9b8b14dc7917b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csSphere</name>
      <anchor>1811595a93da34a3f1148ac27d29e395</anchor>
      <arglist>(const csVector3 &amp;center, float radius)</arglist>
    </member>
    <member kind="function">
      <name>csSphere</name>
      <anchor>e26d4bdfb4a988e0c2d17f66c843daa2</anchor>
      <arglist>(const csSphere &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>7b346e5242dbdd445a728c0e44ea3011</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>1a4ea46a8ef97fabf22cb415b280ce27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>91a6e134fce3e1dbe2458f2ccd732f0f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>a4040ffe66d98e952e88d5012e0ef2e5</anchor>
      <arglist>(const csSphere &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>SetCenter</name>
      <anchor>44e6edc6b560250ee23e31e2100d51ef</anchor>
      <arglist>(const csVector3 &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>SetRadius</name>
      <anchor>7b9731465d0e7a4e5a99d353e2ea9cab</anchor>
      <arglist>(float r)</arglist>
    </member>
    <member kind="function">
      <name>Union</name>
      <anchor>2a7ec086dd686f08b83d6370c3d40c2e</anchor>
      <arglist>(const csVector3 &amp;ocenter, float oradius)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>4aff0fd05fd363b130dd36532c0b9e3d</anchor>
      <arglist>(const csSphere &amp;s1, const csSphere &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSpline</name>
    <filename>classcsSpline.html</filename>
    <member kind="function">
      <name>dimensions</name>
      <anchor>775d736667ddae9ca2abc153a2f95826</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>idx</name>
      <anchor>0c2392979f5a265e94cd4b84ea122a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>num_points</name>
      <anchor>573ef6eed257433b5a184396786bfcaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>points</name>
      <anchor>7ddb738f21a73e3ddc8c06c975c41c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>precalculation_valid</name>
      <anchor>c61b326da038f86594329459de7a040b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>time_points</name>
      <anchor>57305af2a2b000723407ffaf319295aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSpline</name>
      <anchor>78c7d24de6d7ed5ecd4ad144b9c145ab</anchor>
      <arglist>(int d, int p)</arglist>
    </member>
    <member kind="function">
      <name>~csSpline</name>
      <anchor>66b293f2b98838d3ee04233e6c067286</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Calculate</name>
      <anchor>94e783a955af2d3cd6847bbc6ace4799</anchor>
      <arglist>(float time)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentIndex</name>
      <anchor>efc81ce3d83f4f0a8b07d48794313cc3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDimensionCount</name>
      <anchor>45b7d6ec241747b518803e7b6bad4c6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDimensionValue</name>
      <anchor>cb73fa524b6544119c57f93c521ca36c</anchor>
      <arglist>(int dim, int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetDimensionValues</name>
      <anchor>3294b91acd576fbd4d547b3d20b35016</anchor>
      <arglist>(int dim) const </arglist>
    </member>
    <member kind="function">
      <name>GetIndexValues</name>
      <anchor>a24749b0855609442b0f5aa89183a6df</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedDimension</name>
      <anchor>b1b888d24b71e524524920102128012c</anchor>
      <arglist>(int dim) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPointCount</name>
      <anchor>6a642c306e80c4ec90913e496bf2eb0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTimeValue</name>
      <anchor>5e8a8ba6de39ed175f443dbfaa6216ba</anchor>
      <arglist>(int idx) const </arglist>
    </member>
    <member kind="function">
      <name>GetTimeValues</name>
      <anchor>4e9e2f40e6bff254fc28b3da3467b2d4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>InsertPoint</name>
      <anchor>6ebd365a6e6096c0dbbe9e03121af1e8</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>RemovePoint</name>
      <anchor>fabb92b3af66ec9f81dcc6c82ca718f1</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>SetDimensionValue</name>
      <anchor>0cde8372a71b5a160109af4edf3291f0</anchor>
      <arglist>(int dim, int idx, float d)</arglist>
    </member>
    <member kind="function">
      <name>SetDimensionValues</name>
      <anchor>02ca7a8a1e5bc70f09484786b0ad275c</anchor>
      <arglist>(int dim, float const *d)</arglist>
    </member>
    <member kind="function">
      <name>SetIndexValues</name>
      <anchor>b50990416baf2447fa19ef36916d2c1e</anchor>
      <arglist>(int idx, float const *d)</arglist>
    </member>
    <member kind="function">
      <name>SetTimeValue</name>
      <anchor>9c4c546f3a090985980f73e9017a1048</anchor>
      <arglist>(int idx, float t)</arglist>
    </member>
    <member kind="function">
      <name>SetTimeValues</name>
      <anchor>bb1edbf43a02d8c5bb0f22a1475066ef</anchor>
      <arglist>(float const *t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSpotLightProc</name>
    <filename>classcsSpotLightProc.html</filename>
    <member kind="function">
      <name>csSpotLightProc</name>
      <anchor>43c69aa82823c8f755daca245e5eb882</anchor>
      <arglist>(const csLightProperties &amp;light, float blackLimit=0.0001f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSpotLightProc::PerVertex</name>
    <filename>classcsSpotLightProc_1_1PerVertex.html</filename>
    <member kind="function">
      <name>PerVertex::Attenuation</name>
      <anchor>4aa7f2249f5a39e19a8167f242fecfb6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::DiffuseAttenuated</name>
      <anchor>f99c15c86a82ecf064e68aa96dc63249</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::IsLit</name>
      <anchor>0ed63e168469654c6228eaeb0fb00ccd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::LightDirection</name>
      <anchor>5a6517174c28f38d1ec30da63f22bea5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::LightInvDistance</name>
      <anchor>9c5e7885fc71a259822f5c523d39275b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PerVertex::PerVertex</name>
      <anchor>ca16db5516339cc2011d135768bfd8a1</anchor>
      <arglist>(const csSpotLightProc &amp;parent, const csVector3 &amp;v, const csVector3 &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSquaredDist</name>
    <filename>classcsSquaredDist.html</filename>
    <member kind="function">
      <name>PointLine</name>
      <anchor>38a89096502517d27647931c7090bc34</anchor>
      <arglist>(const csVector3 &amp;p, const csVector3 &amp;l1, const csVector3 &amp;l2)</arglist>
    </member>
    <member kind="function">
      <name>PointPlane</name>
      <anchor>56206c38cbb732f8789bd9540f83e5ae</anchor>
      <arglist>(const csVector3 &amp;p, const csPlane3 &amp;plane)</arglist>
    </member>
    <member kind="function">
      <name>PointPoint</name>
      <anchor>a2eaa8b79179bc43f05fd9398dd09bc3</anchor>
      <arglist>(const csVector3 &amp;p1, const csVector3 &amp;p2)</arglist>
    </member>
    <member kind="function">
      <name>PointPoly</name>
      <anchor>f1cee370bce099277f7382986e698c45</anchor>
      <arglist>(const csVector3 &amp;p, csVector3 *V, int n, const csPlane3 &amp;plane, float sqdist=-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csString</name>
    <base>csStringFast</base>
    <filename>classcsString.html</filename>
    <member kind="function">
      <name>csString</name>
      <anchor>989fbef0bd275b1c116ec252086518d5</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>7fd3632f90f30bbebf0d8f244cc869f1</anchor>
      <arglist>(ulonglong x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>78c05f2a2b99bf3e02907022ac60b93f</anchor>
      <arglist>(longlong x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ddbecc5306d9bd847c8efea85bc2d3ca</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>7f4b259ff070a565547d3cf65924f823</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>c45c40af3ab73f4ea624682458ebc4fe</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>1ab8e3eb61c7399f26c6cdb7049b154d</anchor>
      <arglist>(long x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>c27f2601c65c004c8e34f52a7daef8ff</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>21cff66e111956686427ccd4bb7dad24</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>77141878a1a421a53b15dd9b74bd9d87</anchor>
      <arglist>(unsigned short x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a6dbfff40cc5ec4ec2a9f29edc3cac3e</anchor>
      <arglist>(short x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>6917232dae4e2766d4f05dc07ec8ba73</anchor>
      <arglist>(bool x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>4542d561e92c4bc8665b2e6b8d2b5292</anchor>
      <arglist>(unsigned char x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>1bb401141f7d4911da777bf33730f7b9</anchor>
      <arglist>(char x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>9655afb5282bffa56b1e85b8daeff6f1</anchor>
      <arglist>(const char *copy)</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>edaf372782d9a8799e024f2ac4c2c564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>84579973ccfd0eb9cba69462f97e6b7e</anchor>
      <arglist>(size_t Length)</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>f7702500f67111de535b0d48f3e4ee4d</anchor>
      <arglist>(const csString &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>d330b9390dbe0fb64c433289c98f8746</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>302e652ded98052ce79cb74539a5815f</anchor>
      <arglist>(const char *src, size_t _length)</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>612a5248c5600ee111bba3e9c0f1d329</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>csString</name>
      <anchor>2063954e77d18fd0c2ca95d0fa87b6d1</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>a39053d32060564e963c094c9daa2f05</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>2a686d11fae9542186ebcc42129e8832</anchor>
      <arglist>(const csString &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringArray</name>
    <base>csArray&lt; const char *</base>
    <base> csStringArrayElementHandler &gt;</base>
    <filename>classcsStringArray.html</filename>
    <member kind="function">
      <name>ConsecutiveDelimiterMode</name>
      <anchor>03c4440bfd7875ad72f4847601f32980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>elimSplitEach</name>
      <anchor>03c4440bfd7875ad72f4847601f32980786461dd243363879124ffd104ad1ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>elimIgnore</name>
      <anchor>03c4440bfd7875ad72f4847601f329805e2047a3a9a9cb1cf2400203902122b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>elimIgnoreDifferent</name>
      <anchor>03c4440bfd7875ad72f4847601f32980c64fb0e0355315c6326398405adb77c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStringArray</name>
      <anchor>07a5351eb454d89bb8e831f2033fc6be</anchor>
      <arglist>(size_t limit=0, size_t threshold=0)</arglist>
    </member>
    <member kind="function">
      <name>CaseInsensitiveCompare</name>
      <anchor>cc046beba5cfc566ddd4f37a71a1841e</anchor>
      <arglist>(const char *const &amp;item1, const char *const &amp;item2)</arglist>
    </member>
    <member kind="function">
      <name>CaseSensitiveCompare</name>
      <anchor>b621dc2e012d651f3388c6cb381730b9</anchor>
      <arglist>(const char *const &amp;item1, const char *const &amp;item2)</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>84d083bce94aa101eef0d13d6e21a5d7</anchor>
      <arglist>(const char *str, bool case_sensitive=true) const </arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>516fdf7ec599e20902d34682a4df3beb</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="function">
      <name>FindCaseInsensitive</name>
      <anchor>e25a7fea82fb68943458c363398a682b</anchor>
      <arglist>(const char *str) const </arglist>
    </member>
    <member kind="function">
      <name>FindSortedKey</name>
      <anchor>2142192372460b184a9cba1ba44010f8</anchor>
      <arglist>(char const *key, bool case_sensitive=true, size_t *candidate=0) const </arglist>
    </member>
    <member kind="function">
      <name>FindSortedKey</name>
      <anchor>d9621a47fea0bb28dcc0372ed34bcf0c</anchor>
      <arglist>(csArrayCmp&lt; char const *, char const * &gt; comparekey, size_t *candidate=0) const </arglist>
    </member>
    <member kind="function">
      <name>InsertSorted</name>
      <anchor>cc580cff7406a9e87100b1037baf36c3</anchor>
      <arglist>(const char *item, bool case_sensitive=true, size_t *equal_index=0)</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>684775c584254b62620c486fbb6b36e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>73322fabc05c8d16822b70f27358caf7</anchor>
      <arglist>(bool case_sensitive=true)</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>668d83c5174cf71444631fa8888f9bea</anchor>
      <arglist>(int(*compare)(char const *const &amp;, char const *const &amp;))</arglist>
    </member>
    <member kind="function">
      <name>SplitString</name>
      <anchor>d44b6f76093351e27afe2c74aa6230f5</anchor>
      <arglist>(const char *str, const char *delimiters, ConsecutiveDelimiterMode delimMode=delimSplitEach)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringArrayElementHandler</name>
    <base>csArrayElementHandler&lt; const char * &gt;</base>
    <filename>classcsStringArrayElementHandler.html</filename>
    <member kind="function">
      <name>Construct</name>
      <anchor>14898173c97ed565dbf7425b00495cea</anchor>
      <arglist>(const char **address, const char *const &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>Destroy</name>
      <anchor>94cbae99b3465c8b9c0ace96add79182</anchor>
      <arglist>(const char **address)</arglist>
    </member>
    <member kind="function">
      <name>InitRegion</name>
      <anchor>8d898ebc4a2c833b612937c46a3e036d</anchor>
      <arglist>(const char **address, size_t count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringBase</name>
    <filename>classcsStringBase.html</filename>
    <member kind="function">
      <name>operator+=</name>
      <anchor>3cedf625e5b0064baa99eea7646ba51b</anchor>
      <arglist>(char const *s)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>9177006494d5272367f68676b225a063</anchor>
      <arglist>(char const *v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>17436b08222226ecbc9e479d97b0fb40</anchor>
      <arglist>(ulonglong v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>2f57629c89e190d13da6645055a69bcf</anchor>
      <arglist>(longlong v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>f77c70011c8b8b6f1d6f573df070201e</anchor>
      <arglist>(double v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>d2c71424870ef814d07870edc8bc880d</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>f4cc775b0ff8366a907784fafb1d6b2a</anchor>
      <arglist>(unsigned long v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>2f40b95bf69f49e50f6a6fdc12077495</anchor>
      <arglist>(long v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>b5b4b77a7d05dd20c25f0c4402064f0e</anchor>
      <arglist>(unsigned int v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>c06294fe442f1a8c087c09d73e6c589c</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>2af704fab945835a3b44a77480e868d6</anchor>
      <arglist>(unsigned short v)</arglist>
    </member>
    <member kind="function">
      <name>@48</name>
      <anchor>197887da502869e79d40ba64b406105a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>c750d62d710f7f035158c6254b23a20e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>94e88399ae6290115fa78db53de8a9fe</anchor>
      <arglist>(size_t Length)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>7c5e702bf792a66ade2dc85a27c87b9e</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>9abfa5ba1afb6ca2ee53cd3006dc0881</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>5d354088acbc968f2a403daebad509f4</anchor>
      <arglist>(const wchar_t *src)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>61153b510d2f3bda7641371acdf1d9c9</anchor>
      <arglist>(const char *src, size_t _length)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>159e58e24a63fb75677d17253d14cbcc</anchor>
      <arglist>(const wchar_t *src, size_t _length)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>278161951858567d4fdacd801ec8132f</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>csStringBase</name>
      <anchor>7f42f6c1649da51a8fc272d373b099ae</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <name>~csStringBase</name>
      <anchor>198d11598821fc0390d5f964e681a731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>e92bd1ec1a8b2c865bf0753021b34dba</anchor>
      <arglist>(short v)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>afa92e06a93be385463acc480a5c6267</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>7e9140b0fd67b4fb4ec6f6dcbc3838c0</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>c782dca41c867a594ba355ea71362112</anchor>
      <arglist>(const csStringBase &amp;Str, size_t Count=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>ad6b8490554bc6ac6e57674053ce2b43</anchor>
      <arglist>(const wchar_t *Str, size_t Count=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>9b78c60659ea1e5bea610d4d2eb29016</anchor>
      <arglist>(const char *Str, size_t Count=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>AppendFmt</name>
      <anchor>f6b05c0f5327d0ef2d7965da77a0857d</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <name>AppendFmtV</name>
      <anchor>8452a9adeb4cff30b1377022ce307dff</anchor>
      <arglist>(const char *format, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>80a83b6d25fcb0c0ff7e56272b2223ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>0101903b6442cd5b096b2066b414b506</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Collapse</name>
      <anchor>6981c1a8e7c3fd32f7c2b07500a8cfb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Compare</name>
      <anchor>a69d6ead2eaf3d8b16988c23120aefbc</anchor>
      <arglist>(const char *iStr) const </arglist>
    </member>
    <member kind="function">
      <name>Compare</name>
      <anchor>d844a70d5283ead4635aa9594351438a</anchor>
      <arglist>(const csStringBase &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <name>CompareNoCase</name>
      <anchor>74683d3e4de5470f22694f7d364dbc3a</anchor>
      <arglist>(const char *iStr) const </arglist>
    </member>
    <member kind="function">
      <name>CompareNoCase</name>
      <anchor>e473ca165cac58d946fd84096d4ca4bf</anchor>
      <arglist>(const csStringBase &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <name>ComputeNewSize</name>
      <anchor>5bda81678e09cfaf998f8f6881111758</anchor>
      <arglist>(size_t NewSize)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAt</name>
      <anchor>d114e2a6ec1c71b42ce96b098e89263a</anchor>
      <arglist>(size_t Pos, size_t Count=1)</arglist>
    </member>
    <member kind="function">
      <name>Detach</name>
      <anchor>3fb2adf9b28acc7d2a69956187147243</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Downcase</name>
      <anchor>b55834db2e90a3651d7a01f04bd41f80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>26de49c84eb5f97149ce3c9e207b66b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ExpandIfNeeded</name>
      <anchor>abe72c5a5d01846e3b9460782dcf3aa0</anchor>
      <arglist>(size_t NewSize)</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>1f34803960de1836d60727a6523fa0b8</anchor>
      <arglist>(const char *search, size_t pos=0) const </arglist>
    </member>
    <member kind="function">
      <name>FindFirst</name>
      <anchor>e9002d30682db9edb5fa07c652e508d5</anchor>
      <arglist>(const char *c, size_t pos=0) const </arglist>
    </member>
    <member kind="function">
      <name>FindFirst</name>
      <anchor>31c7ec5957203005995aec57d81c5974</anchor>
      <arglist>(char c, size_t pos=0) const </arglist>
    </member>
    <member kind="function">
      <name>FindLast</name>
      <anchor>b21b96d56a30dd34465559955c1159cf</anchor>
      <arglist>(const char *c, size_t pos=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>FindLast</name>
      <anchor>cf82c4069f169ea83d866c31ffcaae39</anchor>
      <arglist>(char c, size_t pos=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>FindReplace</name>
      <anchor>342ca694ec2ac5c5e63893f7c67c6ef9</anchor>
      <arglist>(const char *search, const char *replacement)</arglist>
    </member>
    <member kind="function">
      <name>FindStr</name>
      <anchor>de4e92b57555b0ad88da71e639a65868</anchor>
      <arglist>(const char *search, size_t pos=0) const </arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>e4c08771f0061dadb125fb6873da2aa4</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <name>FormatV</name>
      <anchor>3cf8dbc33b6acaa9b7feef830d72f6e5</anchor>
      <arglist>(const char *format, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>fa5e7cc27c97e4c970c19f1172117f6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAt</name>
      <anchor>4a6fd37c735ecd0664bd3dafcef6fa76</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetCapacity</name>
      <anchor>468fdc4e909ff172cd0f8fd5fb2c5cbc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>ef60d7152db4203e977d7a315e877183</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDataMutable</name>
      <anchor>e85c1436f9f3a1edab265cbe760a9602</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetDataSafe</name>
      <anchor>eb135ec8364e0f325d9b604d9e1076a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetGrowsBy</name>
      <anchor>42d6b4801863632c133e11055d142ae0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetGrowsExponentially</name>
      <anchor>7e762e4fd2bcaf7edfebb965c3435b87</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetHash</name>
      <anchor>c4906246461d51c58deea989d9844b54</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>41b4a63a4375d6b65a7437927812c13c</anchor>
      <arglist>(size_t Pos, char C)</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>0c7d707c72e7a88802f7b3d695c1fe42</anchor>
      <arglist>(size_t Pos, const char *Str)</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>f8f595753eba76e5de0ce3cd585eb023</anchor>
      <arglist>(size_t Pos, const csStringBase &amp;Str)</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>472c632aae458f90eb744cd50797c881</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>4d4820df67848ac1040af1896c2dd280</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>LTrim</name>
      <anchor>d0143b44cc09c864c1c887a9b64c6a6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator const char *</name>
      <anchor>c6c45d10062bb08b028d7dd6e1998989</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>562de37ae976199b6d7598f6d0ac8ac1</anchor>
      <arglist>(const char *Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>31839f8dfd4436add855c8bae4e77256</anchor>
      <arglist>(const csStringBase &amp;Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>235175b40d6dea6ed6d8b13e655ba8a0</anchor>
      <arglist>(const csStringBase &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>5922aa080bb46df04c9fc209b9be943d</anchor>
      <arglist>(T const &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>7d1c7d6e4ce243dc5503a7f1cd3e6504</anchor>
      <arglist>(const char *Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>8651a948b393e8ec3f5e7fd22e470f1f</anchor>
      <arglist>(const csStringBase &amp;Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>357eb045f9b5daf073eb4d58568f371b</anchor>
      <arglist>(T const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>bc902c60277c3939005049886f739478</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>58d4dacb4750781420975958f7148f69</anchor>
      <arglist>(T const &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>963ebe97762c4b5234acc294a9c4a00c</anchor>
      <arglist>(const char *Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>81cfd1bd211c0cabe2b63b89d0932120</anchor>
      <arglist>(const csStringBase &amp;Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>3072ec3ccc52295f077665c8d7731153</anchor>
      <arglist>(const char *Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>71ca68b148f24848fa09c44b21178ef6</anchor>
      <arglist>(const csStringBase &amp;Str) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>7ea88cc8f0004dfb8fc0e1bb3b411a2b</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>219826acca9eb4d22e993d0069a49ab0</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Overwrite</name>
      <anchor>dc5466ebd6492c20f5fb9a63c36e3677</anchor>
      <arglist>(size_t Pos, const csStringBase &amp;Str)</arglist>
    </member>
    <member kind="function">
      <name>PadCenter</name>
      <anchor>968e0f8e88d6ec95113c5443806d624d</anchor>
      <arglist>(size_t NewSize, char PadChar= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <name>PadLeft</name>
      <anchor>2c25981e3a31cdbe8c167f65a9045e5f</anchor>
      <arglist>(size_t NewSize, char PadChar= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <name>PadRight</name>
      <anchor>3ce51257b32481204fb5c0f9f5327285</anchor>
      <arglist>(size_t NewSize, char PadChar= &apos; &apos;)</arglist>
    </member>
    <member kind="function">
      <name>Reclaim</name>
      <anchor>0a946146644b53c4a2c74bf134211edb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>b958068f04f4b40493de423aac9e68d7</anchor>
      <arglist>(T const &amp;val)</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>581a6271fb97c03c1ff4492c75d09aa6</anchor>
      <arglist>(const char *Str, size_t Count=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>6bb4fbecd065935ea4c6e0d9420a4b3f</anchor>
      <arglist>(const csStringBase &amp;Str, size_t Count=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>ReplaceAll</name>
      <anchor>5fb9de53fd9334313112e57cc9158074</anchor>
      <arglist>(const char *search, const char *replacement)</arglist>
    </member>
    <member kind="function">
      <name>RTrim</name>
      <anchor>2a666b42b26271cf7c3f1835077f2702</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetAt</name>
      <anchor>692506eeaa23d3724b20e64cb7e3d33a</anchor>
      <arglist>(size_t n, const char c)</arglist>
    </member>
    <member kind="function">
      <name>SetCapacity</name>
      <anchor>c30b6e2a574b5b2ada978221fd61f619</anchor>
      <arglist>(size_t NewSize)</arglist>
    </member>
    <member kind="function">
      <name>SetCapacityInternal</name>
      <anchor>62840bf377294ec1d889857dadea6bf4</anchor>
      <arglist>(size_t NewSize, bool soft)</arglist>
    </member>
    <member kind="function">
      <name>SetGrowsBy</name>
      <anchor>5422a52dcbd57d1c065dbd2d5da822a0</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <name>SetGrowsExponentially</name>
      <anchor>b1f808eabfe4940f4ebcae698f251f75</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <name>ShrinkBestFit</name>
      <anchor>516a2096e7ebf2a5c4d9b8a35bda2527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Slice</name>
      <anchor>b676e04050d9cd65456042db4ab902f8</anchor>
      <arglist>(size_t start, size_t len=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>StartsWith</name>
      <anchor>5b84f79df29cd13aacd871db355e6e38</anchor>
      <arglist>(const char *iStr, bool ignore_case=false) const </arglist>
    </member>
    <member kind="function">
      <name>StartsWith</name>
      <anchor>3e181663db4925ce06a4cb3330896543</anchor>
      <arglist>(const csStringBase &amp;iStr, bool ignore_case=false) const </arglist>
    </member>
    <member kind="function">
      <name>SubString</name>
      <anchor>b57f2869959666fd08005e2b5f31512f</anchor>
      <arglist>(csStringBase &amp;sub, size_t start, size_t len=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>Trim</name>
      <anchor>0639cc5243627e537b9673b936a3cd34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>5d068615a96f7ddb6674d7ce3e9fb90c</anchor>
      <arglist>(size_t Len)</arglist>
    </member>
    <member kind="function">
      <name>Upcase</name>
      <anchor>153c61b44175209b3eb2ec5435878e10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Data</name>
      <anchor>398de8de57fe8e648bb7207d00c31de3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GrowBy</name>
      <anchor>f1d107f0797c57fc3e8f76bb7dce7696</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MaxSize</name>
      <anchor>eb2631c85b01181bf069998cc5d8e62e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Size</name>
      <anchor>56a011d57a287c82fc0e6dc0843ecc8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringFast</name>
    <base>csStringBase</base>
    <filename>classcsStringFast.html</filename>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>0efac2e772032371959b71919471b1bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>6660e56e4a281647cb879be10f78c6dc</anchor>
      <arglist>(size_t Length)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>5f8847107d95ed4f72848f04e47ea782</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>344681cb7223da83662a36bb086cf6ac</anchor>
      <arglist>(const csStringFast &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>d30c371c29cea0ed3ca11a9602e535b2</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>a803194cde2163767e1fc759e8b64e19</anchor>
      <arglist>(const char *src, size_t _length)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>45911ea190a2c9cd34c9f0805664c732</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>986a25783688b4f756ce3eb61bfd0eff</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <name>~csStringFast</name>
      <anchor>82bdd0d8ed724e628fef6d7c946d0beb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Detach</name>
      <anchor>1f79797cac8cafd7a82467708cdf320b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Free</name>
      <anchor>49a4f3f62534048aa947da39a8fee1d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCapacity</name>
      <anchor>9b5ce3297ba258454ad684e55e2dab85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>ae377ba228b98ff910c5508f320c0d75</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetDataMutable</name>
      <anchor>9f09165e1d98b11ea26b755cf5037a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>afa91b8e35516324c49ff2f748bd26ec</anchor>
      <arglist>(T const &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>7fd076b23661571a4fbccb29cb61dde3</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>SetCapacityInternal</name>
      <anchor>74c9c4fc52344b763af729fa9529d17e</anchor>
      <arglist>(size_t NewSize, bool soft)</arglist>
    </member>
    <member kind="function">
      <name>ShrinkBestFit</name>
      <anchor>ec6b8c96e0f739e6ce084669850ba71e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>minibuff</name>
      <anchor>d0b09dc3848920bee618d78956125072</anchor>
      <arglist>[LEN]</arglist>
    </member>
    <member kind="function">
      <name>miniused</name>
      <anchor>4e781ace33d0f30409fbc4daf8475a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> 0 </name>
    <filename>classcsStringFast_3_010_01_4.html</filename>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>0fb3636f6070d6f6bbcc8ca264ef2fe7</anchor>
      <arglist>(unsigned char c)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>e85afedc256118982cab7ea4e2f6ddaf</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>ad2fd7d8a806951a6cb5a9691e29b253</anchor>
      <arglist>(const char *src, size_t _length)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>f72679070980cd0cddea881e4f2648ba</anchor>
      <arglist>(const char *src)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>888949300fb47849b454cd035f88d5d6</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>cae494318af69bb4156ca5abe59b1fa4</anchor>
      <arglist>(size_t Length)</arglist>
    </member>
    <member kind="function">
      <name>csStringFast</name>
      <anchor>10e602e475c49856cb7ab2798ab7d9a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>341036188377b7e3cde0d35cf0ed4676</anchor>
      <arglist>(ulonglong x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>01e8561f7342733fcd6bfb431a425231</anchor>
      <arglist>(longlong x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ea0ecd25cffead055822904ee49abbc1</anchor>
      <arglist>(double x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>550481a74205b423057fb253b763a42b</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>3121503d2168e38ca8bf8142b9bc5d97</anchor>
      <arglist>(unsigned long x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>38eb5d32a71c0faea578c5043aaef916</anchor>
      <arglist>(long x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>67ce8310c6048e7a3028ac9756c91f64</anchor>
      <arglist>(unsigned int x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>976fe5acefe91eeacbe257a9c7c96f03</anchor>
      <arglist>(int x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>f6c1ca2d86c1db9c2a3f439968a9b1c7</anchor>
      <arglist>(unsigned short x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>2bdad66de7001e5ae97dbd86bd4e64fa</anchor>
      <arglist>(short x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>f128206b63e8aaf56366fc6c8ccabbe3</anchor>
      <arglist>(bool x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>eee7f704b940f95e6651fc196d4b90c1</anchor>
      <arglist>(unsigned char x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>3794644e352ff500734a3fc2726e5f44</anchor>
      <arglist>(char x)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>b7366a55fab355037662a130f51148c2</anchor>
      <arglist>(const char *copy)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>952c3bab703da5e44606a0af19e0f65a</anchor>
      <arglist>(const csStringBase &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringHash</name>
    <filename>classcsStringHash.html</filename>
    <member kind="function">
      <name>GlobalIterator</name>
      <anchor>bc9f04415cbe70e38503e9193bb627d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStringHash</name>
      <anchor>8639dab924aae1a9d07a0550f7c3d2a5</anchor>
      <arglist>(size_t size=23)</arglist>
    </member>
    <member kind="function">
      <name>csStringHash</name>
      <anchor>e0994fd1ead9695c06b82c694d7afef2</anchor>
      <arglist>(csStringHash const &amp;h)</arglist>
    </member>
    <member kind="function">
      <name>~csStringHash</name>
      <anchor>7c91b448da3049daa738c23f351d6f10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>8c69d63cd90d1642a21a49561ce80e06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>8f1dede993638e1905dbdbd0a5d4a3fb</anchor>
      <arglist>(csStringID id) const </arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>f664069dcfda1b5195b026be73687f0e</anchor>
      <arglist>(char const *s) const </arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>78c9ca7fe84ffc336e427064240f94a8</anchor>
      <arglist>(csStringID id)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>2a26f02cd674662b0d4cf8d59becebb8</anchor>
      <arglist>(char const *s)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>836209a4daa6d3806811143486a07c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>87c7e5528207b6ec6080ed847e27bf56</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>5919b02edb524864ce7137ea3185e6a7</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>64eddf4090ec31dadf6f9b15beb8729c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>3d27640fdff527b20c9485773b5ec29a</anchor>
      <arglist>(csStringHash const &amp;h)</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>63958c8367338dd79e0d490bc8b2ff5b</anchor>
      <arglist>(const char *s, csStringID id=0)</arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>9bed7b22f0c471e8d8318932faaac75d</anchor>
      <arglist>(csStringID id) const </arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>c1b7122f93d2c824f9e9c7b46cef75f6</anchor>
      <arglist>(const char *s) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringReader</name>
    <filename>classcsStringReader.html</filename>
    <member kind="function">
      <name>csStringReader</name>
      <anchor>8e2134ceb91db678231f7dc714263c5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csStringReader</name>
      <anchor>b2a1174b2dd27472086c606a6b070734</anchor>
      <arglist>(const char *input)</arglist>
    </member>
    <member kind="function">
      <name>GetLine</name>
      <anchor>7cc168425104bfac3eddd328feca5bf1</anchor>
      <arglist>(csString &amp;line)</arglist>
    </member>
    <member kind="function">
      <name>HasMoreLines</name>
      <anchor>27c7b32500ee55c4ed8f1cddd4f4ab9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>b40fc0ee3f6196b886d77671a70e0285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetInput</name>
      <anchor>c74850efea21dc4e7c32ecbb0417cbdc</anchor>
      <arglist>(const char *input)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStringSet</name>
    <filename>classcsStringSet.html</filename>
    <member kind="function">
      <name>GlobalIterator</name>
      <anchor>07f137c7070889ba82ff698883f2df76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStringSet</name>
      <anchor>b2d1a8fad9d5ddbc9acd12485f4cb68c</anchor>
      <arglist>(size_t size=23)</arglist>
    </member>
    <member kind="function">
      <name>csStringSet</name>
      <anchor>dfed8b2fa467f7def00811336c5bda23</anchor>
      <arglist>(csStringSet const &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>~csStringSet</name>
      <anchor>7adfce2b0a08b18fb79cd124045ae2b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>8a68f14022e2c5d13e1548ad6abe97be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>a5c82391cbcb0ccdac6e5bbc3ae31983</anchor>
      <arglist>(csStringID id) const </arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>2b8d7711f8b2adebbae60c345c6b9735</anchor>
      <arglist>(char const *) const </arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>4efe3a5286665a09f084b8cdf150dbbc</anchor>
      <arglist>(csStringID id)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>bae8552efad44d8901f0baa05bf26cdb</anchor>
      <arglist>(char const *s)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>fcf51ded19431a2eac3f26c86620edeb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>f0bebd16693772e34a42347c90aee981</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>e18003ab355aed0f203387ff5063ef85</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>0a38aee852dd95d2d85c19daea07ea6c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>0c7fa4323f9268866d8b740b9691273f</anchor>
      <arglist>(csStringSet const &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>b9455d0a2071a603bd355cc229efe198</anchor>
      <arglist>(csStringID) const </arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>40b0360a87ada048009a18a08391bf93</anchor>
      <arglist>(const char *)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csStrKey</name>
    <filename>classcsStrKey.html</filename>
    <member kind="function">
      <name>csStrKey</name>
      <anchor>878d000482eade1f6497435ba1ef4067</anchor>
      <arglist>(const csStrKey &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>csStrKey</name>
      <anchor>183e0185b85ef57bb4b242deb9e9c61d</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <name>csStrKey</name>
      <anchor>1df8e297e7ef722035369321c3db6ab6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetHash</name>
      <anchor>a6baca3f46c6d3e39bb69d00d2477f08</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator const char *</name>
      <anchor>bbc412863b8a1f8063fd6e9c23993905</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>fa7e7edd486d0cf2273a9378978a266d</anchor>
      <arglist>(const csStrKey &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>~csStrKey</name>
      <anchor>28c110b14e9bf957832abd63c994bffb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSubRectangles</name>
    <filename>classcsSubRectangles.html</filename>
    <member kind="function">
      <name>AddLeaf</name>
      <anchor>efc7ec4f1bf725e18167ed098785e859</anchor>
      <arglist>(SubRect *sr)</arglist>
    </member>
    <member kind="function">
      <name>AllocSubrect</name>
      <anchor>aa4bc80932c5cd05f55e8f6856de2197</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveLeaf</name>
      <anchor>54cd57709e26e4836ec75c7c0233da4a</anchor>
      <arglist>(SubRect *sr)</arglist>
    </member>
    <member kind="function">
      <name>alloc</name>
      <anchor>e569d056a852636149e66b4be591b185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect</name>
      <anchor>6cea3452ad7652661e084b42e1b98099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSubRectangles</name>
      <anchor>b8faefdc227afe37b1a6feb445e8bb65</anchor>
      <arglist>(const csRect &amp;region)</arglist>
    </member>
    <member kind="function">
      <name>~csSubRectangles</name>
      <anchor>acd22c11906c10b07ed011f159fd274d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Alloc</name>
      <anchor>ffb3fd59caf6be5a682bfbeed419b579</anchor>
      <arglist>(int w, int h, csRect &amp;rect)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>342d98a2b4d365fc16d4ddf95197e037</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>33471e6c56bde947c7daf23203fd387c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRectangle</name>
      <anchor>168fbd2ea91920f1e2dbeb688559ebc2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Grow</name>
      <anchor>3ecff6b304cd0c6871e944aa2d168252</anchor>
      <arglist>(int newWidth, int newHeight)</arglist>
    </member>
    <member kind="function">
      <name>Reclaim</name>
      <anchor>3ec48eca1351c2f4d39118988981c389</anchor>
      <arglist>(SubRect *subrect)</arglist>
    </member>
    <member kind="function">
      <name>leaves</name>
      <anchor>255bd5aa82c80150f94d17e3b9f243f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>region</name>
      <anchor>7cae59e075c3cac5e552c172c56ff94f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>root</name>
      <anchor>3254cc52f4210a18a8c518bf491b9f15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSubRectangles::SubRect</name>
    <filename>classcsSubRectangles_1_1SubRect.html</filename>
    <member kind="function">
      <name>SubRect::SubRectAlloc</name>
      <anchor>cec1b08f2e6fb6a5b7842f08c24ff9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::allocedRect</name>
      <anchor>5f7d7bb8ad7286ec966b498940b909b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::children</name>
      <anchor>c6a5198cc7210040acf19240d340746f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>SubRect::parent</name>
      <anchor>bff4f266f1069c4d33e9fa544ae089b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::rect</name>
      <anchor>adef49e758840debf726d6eb5c87afab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::splitPos</name>
      <anchor>204daec386bd55e77c78dbaaed1daead</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::splitType</name>
      <anchor>1b33950542a722a0138c3c5d5e0c563d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::superrect</name>
      <anchor>0cea7cc800202f28374dde467022b9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::AllocInfo</name>
      <anchor>c9968daa18f50edaffba29d10f3eee70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::csBlockAllocator&lt; SubRect &gt;</name>
      <anchor>1b54d9b106fee3eabc93ee4e60ea981f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::csSubRectangles</name>
      <anchor>1906ab47ad44be2136afa08e27ae23ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::Alloc</name>
      <anchor>c52e30d5f0f1494d60c029006a7f2fd8</anchor>
      <arglist>(int w, int h, const AllocInfo &amp;ai, csRect &amp;r)</arglist>
    </member>
    <member kind="function">
      <name>SubRect::DecideBestSplit</name>
      <anchor>3c6492af48247a6bca961d6c03c98d9e</anchor>
      <arglist>(const csRect &amp;rect, int splitX, int splitY, SubRect::SplitType &amp;splitType)</arglist>
    </member>
    <member kind="function">
      <name>SubRect::Reclaim</name>
      <anchor>9df3cf9b02f37c835a6fb33ee85e5adf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SubRect::TestAlloc</name>
      <anchor>dcea179dbf335e3ebc46aae4c98d7e26</anchor>
      <arglist>(int w, int h, AllocInfo &amp;ai)</arglist>
    </member>
    <member kind="function">
      <name>SubRect::TestCollapse</name>
      <anchor>35f83163ee094d3fc5eedc5985784124</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTextProgressMeter</name>
    <base>scfImplementation1&lt; csTextProgressMeter</base>
    <base> iProgressMeter &gt;</base>
    <filename>classcsTextProgressMeter.html</filename>
    <member kind="function">
      <name>csTextProgressMeter</name>
      <anchor>ca481cb2b1023f4f2cb299cf3ee4ac5c</anchor>
      <arglist>(iConsoleOutput *console, int total=100)</arglist>
    </member>
    <member kind="function">
      <name>~csTextProgressMeter</name>
      <anchor>8b29bd4d8c470b4421589bbdb34390f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Abort</name>
      <anchor>8ff224ce6dbc6d8eda0b9c70d74d6344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Finalize</name>
      <anchor>3021d7174a4a1ecabeb65240ad7f2e69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCurrent</name>
      <anchor>b12e87cdf06353d9345dfdd2e930ee1a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetGranularity</name>
      <anchor>f829ab989da14f941b3c2fb8be173961</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTickScale</name>
      <anchor>f3049520d8b39e8761f28e542366ea11</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTotal</name>
      <anchor>4d8c1c25ac3c0167d5df07125f029809</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>67247d0f38529e975342b8413a390128</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Restart</name>
      <anchor>0fc9fff3f43991b9b63787eeb62c026e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetGranularity</name>
      <anchor>bc504ddfd051fd03156062241172f747</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>SetProgressDescription</name>
      <anchor>e3f59ea198e81ebc2336da45a41380cf</anchor>
      <arglist>(const char *, const char *,...)</arglist>
    </member>
    <member kind="function">
      <name>SetProgressDescriptionV</name>
      <anchor>9b991bcf42de8168818e2fb59fe0da2a</anchor>
      <arglist>(const char *, const char *, va_list)</arglist>
    </member>
    <member kind="function">
      <name>SetTickScale</name>
      <anchor>1784dd6bff6e402028c2a0e031f9cb36</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>SetTotal</name>
      <anchor>beec6383a8cbcc88ea566ae2ea682041</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>Step</name>
      <anchor>e0032e0814b26ed9a22c228117b27003</anchor>
      <arglist>(unsigned int n=1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTextureHandle</name>
    <base>scfImplementation1&lt; csTextureHandle</base>
    <base> iTextureHandle &gt;</base>
    <filename>classcsTextureHandle.html</filename>
    <member kind="function">
      <name>alphaType</name>
      <anchor>56b170a547af2f855821f4998f15bafa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texClass</name>
      <anchor>ebd3c9febd43fe01c53f6e7bf6791b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AdjustSizePo2</name>
      <anchor>1f4a017ce139b59be6139f3be7b3f56f</anchor>
      <arglist>(int width, int height, int depth, int &amp;newwidth, int &amp;newheight, int &amp;newdepth)</arglist>
    </member>
    <member kind="function">
      <name>CalculateNextBestPo2Size</name>
      <anchor>fbe86bc48f42cb8b5e869e9423f005a5</anchor>
      <arglist>(int flags, const int orgDim, int &amp;newDim)</arglist>
    </member>
    <member kind="function">
      <name>GetAlphaMap</name>
      <anchor>7d434df1e7de95833ee882cf0b2e4d2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetAlphaType</name>
      <anchor>32efa8f48de50b5a3d48fd220f8579b1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>96bbaa6969af492f168fd8f1958097ca</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>33672baf483ac3c601398efd638eb8fe</anchor>
      <arglist>(uint8 &amp;r, uint8 &amp;g, uint8 &amp;b) const </arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>8895e710e4740d6ecd6b3ced18b741ce</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetPrivateObject</name>
      <anchor>e4727c06eba94fe0a6ddb6dd47d14fdd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTextureClass</name>
      <anchor>f504e91c2966b8f58f66d4712376b632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetAlphaType</name>
      <anchor>d13e920aec5a534f6d070e8101996ce3</anchor>
      <arglist>(csAlphaMode::AlphaType alphaType)</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>41e2f87931475675a41c630737c78f3a</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue)</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>d2ed06e898fe5e258d70c17eb53b2ffd</anchor>
      <arglist>(bool Enable)</arglist>
    </member>
    <member kind="function">
      <name>SetTextureClass</name>
      <anchor>9b7194b7c16ce5f286a79bc15e71b0ad</anchor>
      <arglist>(const char *className)</arglist>
    </member>
    <member kind="function">
      <name>flags</name>
      <anchor>411f5f7497abfe6b61dedc0fd92c1db4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texman</name>
      <anchor>2cb13f49bb4a6bb933d533a6e8f4742a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>transp</name>
      <anchor>b82575708a438a4b1d12dcd726c2abd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>transp_color</name>
      <anchor>62311ca2153c8b44c4c3ba6dde650b8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTextureManager</name>
    <base>scfImplementation1&lt; csTextureManager</base>
    <base> iTextureManager &gt;</base>
    <filename>classcsTextureManager.html</filename>
    <member kind="function">
      <name>nameDiffuseTexture</name>
      <anchor>013db65428f2d0f99a0559db6a08ab1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texClassIDs</name>
      <anchor>5931eeb40f1f55f532cbaf8003dbff6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTexVector</name>
      <anchor>6000d82cfd68db8238b616efa9a2f74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>605e252b720577172bab488d1c764405</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTextureManager</name>
      <anchor>b36567e0487be5bfc64684c1c800f40b</anchor>
      <arglist>(iObjectRegistry *object_reg, iGraphics2D *iG2D)</arglist>
    </member>
    <member kind="function">
      <name>~csTextureManager</name>
      <anchor>d21d6008d7d787c5c88bac1d635912d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>cf318e403a64c7caaf38d840ebd3e09e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>read_config</name>
      <anchor>3e2ffb7ca8300c623b21f43748b99a6d</anchor>
      <arglist>(iConfigFile *config)</arglist>
    </member>
    <member kind="function">
      <name>pfmt</name>
      <anchor>9ca10e6169aba44570658b2aa6a19bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>textures</name>
      <anchor>5efac0f36d4dce726d7a5f60da62aa02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTextureTrans</name>
    <filename>classcsTextureTrans.html</filename>
    <member kind="function">
      <name>compute_texture_space</name>
      <anchor>c5eee22c2453a964e01b524747852d48</anchor>
      <arglist>(csMatrix3 &amp;m, csVector3 &amp;v, float xo, float yo, float zo, float xu, float yu, float zu, float xv, float yv, float zv, float xw, float yw, float zw)</arglist>
    </member>
    <member kind="function">
      <name>compute_texture_space</name>
      <anchor>f2a3ccfbe8e234afe88660e4829f3a26</anchor>
      <arglist>(csMatrix3 &amp;m, csVector3 &amp;v, const csVector3 &amp;v_orig, const csVector3 &amp;v_u, const csVector3 &amp;v_v)</arglist>
    </member>
    <member kind="function">
      <name>compute_texture_space</name>
      <anchor>09f4329686dfc385118f1b2fb4bead1a</anchor>
      <arglist>(csMatrix3 &amp;m, csVector3 &amp;v, const csVector3 &amp;v_orig, const csVector3 &amp;v1, float len1, const csVector3 &amp;v2, float len2)</arglist>
    </member>
    <member kind="function">
      <name>compute_texture_space</name>
      <anchor>8b38e5081bebe86ba16536adbb051055</anchor>
      <arglist>(csMatrix3 &amp;m, csVector3 &amp;v, const csVector3 &amp;v_orig, const csVector3 &amp;v1, float len1, float A, float B, float C)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csThread</name>
    <base>csRefCount</base>
    <filename>classcsThread.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>42bc8c166026a1bf1d847e65e731d605</anchor>
      <arglist>(csRunnable *, uint32 options=0)</arglist>
    </member>
    <member kind="function">
      <name>GetLastError</name>
      <anchor>af89f594c671284f54fd2ae5cbf1bd57</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPriority</name>
      <anchor>ce8a2c1f9445641538c4f50ebc2c5944</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetPriority</name>
      <anchor>79338324aa559bd800818ee693c0e2e8</anchor>
      <arglist>(csThreadPriority Priority)=0</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>ebaf0314c2f2378445f20b8b6d379407</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Stop</name>
      <anchor>50d3548b31540db502d2e632299a7ffc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Wait</name>
      <anchor>ea36523b870be22c373d3a7567f8421b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Yield</name>
      <anchor>0e4848420b6d46dff72553d8de76ba24</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csThreadJobQueue</name>
    <base>scfImplementation1&lt; csThreadJobQueue</base>
    <base> iJobQueue &gt;</base>
    <filename>classcsThreadJobQueue.html</filename>
    <member kind="function">
      <name>Enqueue</name>
      <anchor>821a673056b339f4434d14c44a4d93a2</anchor>
      <arglist>(iJob *job)</arglist>
    </member>
    <member kind="function">
      <name>PullAndRun</name>
      <anchor>87fe30cdb588213447add0b5056b1daf</anchor>
      <arglist>(iJob *job)</arglist>
    </member>
    <member kind="function">
      <name>Unqueue</name>
      <anchor>7bba0099c4d577ff90ee086d27f15d15</anchor>
      <arglist>(iJob *job, bool waitIfCurrent=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTiledCoverageBuffer</name>
    <base>scfImplementation1&lt; csTiledCoverageBuffer</base>
    <base> iDebugHelper &gt;</base>
    <filename>classcsTiledCoverageBuffer.html</filename>
    <member kind="function">
      <name>bugplug</name>
      <anchor>1b4a9f608b691840ffa4e08e2739db5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTiledCoverageBuffer</name>
      <anchor>7e26d2365a59c188e649bfd94e598855</anchor>
      <arglist>(int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>~csTiledCoverageBuffer</name>
      <anchor>82493dbf71664f5564981d4ae1a4c62e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddWriteQueueTest</name>
      <anchor>5d2d878f7e66bb7de1326e2749df83f6</anchor>
      <arglist>(const csTestRectData &amp;maindata, const csTestRectData &amp;data, bool &amp;relevant)</arglist>
    </member>
    <member kind="function">
      <name>Benchmark</name>
      <anchor>1a0ba4431d06a2884bce3f868171701c</anchor>
      <arglist>(int num_iterations)</arglist>
    </member>
    <member kind="function">
      <name>CountNotCulledObjects</name>
      <anchor>259a22ff96b4be743903ee3a295ffa9c</anchor>
      <arglist>(const csBox2Int &amp;bbox)</arglist>
    </member>
    <member kind="function">
      <name>DebugCommand</name>
      <anchor>4db2a44db8f35e2c2dd0f5b540db0f2d</anchor>
      <arglist>(const char *)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>ff892b34c5fecd465866e5af5366e720</anchor>
      <arglist>(iGraphics3D *g3d)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>9e1346aba35ee17b3b5357ddfdf83f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSupportedTests</name>
      <anchor>a7d1f565e23e9816447ac9962fcb9139</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>f80fcb3877e74fb8f0fa9b3067b032e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InsertOutline</name>
      <anchor>03f3d215a25b708a81773874dbd605e0</anchor>
      <arglist>(const csReversibleTransform &amp;trans, float fov, float sx, float sy, csVector3 *verts, size_t num_verts, bool *used_verts, int *edges, size_t num_edges, bool splat_outline, csBox2Int &amp;modified_bbox)</arglist>
    </member>
    <member kind="function">
      <name>InsertPolygon</name>
      <anchor>6bd93756b098e9a3ab15345c0546f42a</anchor>
      <arglist>(csVector2 *verts, size_t num_verts, float max_depth, csBox2Int &amp;modified_bbox)</arglist>
    </member>
    <member kind="function">
      <name>InsertPolygonInverted</name>
      <anchor>9e77f81a629f22ab877ce74ac4c3c452</anchor>
      <arglist>(csVector2 *verts, size_t num_verts, float max_depth)</arglist>
    </member>
    <member kind="function">
      <name>InsertPolygonInvertedNoDepth</name>
      <anchor>2c977478e44cee6da03db42102737fca</anchor>
      <arglist>(csVector2 *verts, size_t num_verts)</arglist>
    </member>
    <member kind="function">
      <name>InsertPolygonNoDepth</name>
      <anchor>42403efe3481bcdd9b95d876417f8552</anchor>
      <arglist>(csVector2 *verts, size_t num_verts)</arglist>
    </member>
    <member kind="function">
      <name>MarkCulledObject</name>
      <anchor>baef4650fd0409454073bf6340014c0b</anchor>
      <arglist>(const csTestRectData &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>PrepareTestRectangle</name>
      <anchor>7105f2f1463887bfb59d0b6b2de9902a</anchor>
      <arglist>(const csBox2 &amp;rect, csTestRectData &amp;data)</arglist>
    </member>
    <member kind="function">
      <name>PrepareWriteQueueTest</name>
      <anchor>14e1c5ca81bea516a66eeeae7b99d346</anchor>
      <arglist>(const csTestRectData &amp;data, float min_depth)</arglist>
    </member>
    <member kind="function">
      <name>QuickTestRectangle</name>
      <anchor>267e1ace867e257610e5a6ba33a75e04</anchor>
      <arglist>(const csTestRectData &amp;data, float min_depth)</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>2b2e8028e90a5addf1930fca84ef5952</anchor>
      <arglist>(int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>StateTest</name>
      <anchor>af6cc73b5cb2f67340437c7e233f1738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>StatusNoDepth</name>
      <anchor>b80c0fa39c48ce65c542c4acbf967625</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TestPoint</name>
      <anchor>c5508823055df9a85990f8148cf5556c</anchor>
      <arglist>(const csVector2 &amp;point, float min_depth)</arglist>
    </member>
    <member kind="function">
      <name>TestPolygon</name>
      <anchor>96888c75fc4b416c3bf86726a8bdade4</anchor>
      <arglist>(csVector2 *verts, size_t num_verts, float min_depth)</arglist>
    </member>
    <member kind="function">
      <name>TestRectangle</name>
      <anchor>4315099c4b0d491276df079a277a4c5b</anchor>
      <arglist>(const csTestRectData &amp;data, float min_depth)</arglist>
    </member>
    <member kind="function">
      <name>UnitTest</name>
      <anchor>081562eaf6351770cc00779e6cf59ff1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTinyDocumentSystem</name>
    <base>scfImplementation1&lt; csTinyDocumentSystem</base>
    <base> iDocumentSystem &gt;</base>
    <filename>classcsTinyDocumentSystem.html</filename>
    <member kind="function">
      <name>CreateDocument</name>
      <anchor>6c492719e7a6cb7026c989357735bbe3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTransform</name>
    <filename>classcsTransform.html</filename>
    <member kind="function">
      <name>~csTransform</name>
      <anchor>dbc1a9a00f3be8ac0b8e753a12f3949f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csTransform</name>
      <anchor>1b862dc9f2a33edd0db4814b71c26860</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csTransform</name>
      <anchor>5e0ff99eda1b2e313b62cdfae53df4af</anchor>
      <arglist>(const csMatrix3 &amp;other2this, const csVector3 &amp;origin_pos)</arglist>
    </member>
    <member kind="function">
      <name>GetFront</name>
      <anchor>d3c66a270ea801b216ad4fd096607a78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetO2T</name>
      <anchor>6b9dc087bd425a9bc8fe1c35a127e7b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetO2TTranslation</name>
      <anchor>ddaca558caeb0026f10074a43192a6b3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetOrigin</name>
      <anchor>913ab986883038d0a450f07448d47c7d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetReflect</name>
      <anchor>4db0685dce38c26fd1d73899ad1c71ea</anchor>
      <arglist>(const csPlane3 &amp;pl)</arglist>
    </member>
    <member kind="function">
      <name>GetRight</name>
      <anchor>4d6a7a7feb09461be10b3f003eea9a6d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetUp</name>
      <anchor>c4538999b1a4c4f22a5b6e609bad6dbd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Identity</name>
      <anchor>5a15bd122c990b1c1883ffd7321de32a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsIdentity</name>
      <anchor>f126b287ca50a248475390d123872382</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Other2This</name>
      <anchor>3d4b13e4504f1a917ef4aabdacdc9916</anchor>
      <arglist>(const csSphere &amp;s) const </arglist>
    </member>
    <member kind="function">
      <name>Other2This</name>
      <anchor>073728682a239d575fced5eda66d3582</anchor>
      <arglist>(const csPlane3 &amp;p, const csVector3 &amp;point, csPlane3 &amp;result) const </arglist>
    </member>
    <member kind="function">
      <name>Other2This</name>
      <anchor>7e7e86a7be53eeb199b64535a9bf966d</anchor>
      <arglist>(const csPlane3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>Other2This</name>
      <anchor>463655d40948540a2a5b2a867d5ba03c</anchor>
      <arglist>(const csVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>Other2ThisRelative</name>
      <anchor>9f8c8186b0ae8be90a0d5833613e6034</anchor>
      <arglist>(const csPlane3 &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>Other2ThisRelative</name>
      <anchor>7a1a4a71f1a2406bca35ac678d53f92e</anchor>
      <arglist>(const csVector3 &amp;v) const </arglist>
    </member>
    <member kind="function">
      <name>SetO2T</name>
      <anchor>8982b8df6c6260a98fbf9ac18ec0a681</anchor>
      <arglist>(const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>SetO2TTranslation</name>
      <anchor>1630a99216c2b2a39116f4c42ffbf649</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>5a12e267771bda04fee9a37c7d13d016</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Translate</name>
      <anchor>23206c158aa7582116460d126a427df0</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>60e6ee8df1d444d14fc1f56f6e3fdbc7</anchor>
      <arglist>(const csTransform &amp;t1, const csReversibleTransform &amp;t2)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>ac27b926e132de1016e6c0fbf2751908</anchor>
      <arglist>(const csTransform &amp;t, const csMatrix3 &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>7c812230b45e50d0b8c0bdd7aaf30686</anchor>
      <arglist>(const csMatrix3 &amp;m, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>c492e12d914cb8d241d9826a1cd082e4</anchor>
      <arglist>(const csTransform &amp;t, const csSphere &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>5eef825b283e9638612bb880eb533081</anchor>
      <arglist>(const csSphere &amp;p, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>09cc12cc1117311062f19c57540f84f1</anchor>
      <arglist>(const csTransform &amp;t, const csPlane3 &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>4b49e8b85eb6e85d6440a36cdbc0db72</anchor>
      <arglist>(const csPlane3 &amp;p, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>03a996bce11473e0ff5454e4091be6e6</anchor>
      <arglist>(const csTransform &amp;t, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>fadac80549823159cf11614e6ab6f787</anchor>
      <arglist>(const csVector3 &amp;v, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>cce593c44987783f7fdbfbe77da7c76a</anchor>
      <arglist>(csMatrix3 &amp;m, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>4f17b110048cdf0f6209f315808fb909</anchor>
      <arglist>(csSphere &amp;p, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>13c128c30a8455bb524303a997d24364</anchor>
      <arglist>(csPlane3 &amp;p, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>b04a64e3f3584c1aefac242cb7ec2e2d</anchor>
      <arglist>(csVector3 &amp;v, const csTransform &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>m_o2t</name>
      <anchor>7f5f51248980a3ebf56744520e6a3825</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>v_o2t</name>
      <anchor>155b35f82b56b9b7bbc8a0b2921d3c17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTreeNode</name>
    <filename>classcsTreeNode.html</filename>
    <member kind="function">
      <name>~csTreeNode</name>
      <anchor>f3f5cf66c433f23d29067743d64391ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>children</name>
      <anchor>808d384f15332c896c54dca01434f71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>parent</name>
      <anchor>69ff22a180d65c9ff3b7473bb8b97357</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTreeNode</name>
      <anchor>c5523e316a20725eb2f444f42481fa36</anchor>
      <arglist>(csTreeNode *theParent=0)</arglist>
    </member>
    <member kind="function">
      <name>AddChild</name>
      <anchor>2f9082ceea829781495f78879294d0f9</anchor>
      <arglist>(csTreeNode *child)</arglist>
    </member>
    <member kind="function">
      <name>BSF</name>
      <anchor>9edde11103b0273d65bba26dc5bc2360</anchor>
      <arglist>(bool(*TreeFunc)(csTreeNode *node, void *param, bool stopOnSuccess), bool(*SelBranch)(csTreeNode *node), void *param, bool stopOnSuccess)</arglist>
    </member>
    <member kind="function">
      <name>DSF</name>
      <anchor>47135474f9caa279f78d36a85b9d0df8</anchor>
      <arglist>(bool(*TreeFunc)(csTreeNode *node, void *param, bool stopOnSuccess), bool(*SelBranch)(csTreeNode *node), void *param, bool stopOnSuccess)</arglist>
    </member>
    <member kind="function">
      <name>IsLeaf</name>
      <anchor>aef5fbde5a0b3c99768374510d28974a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RemoveChild</name>
      <anchor>3d567dfe02cde13750aa2625b8e8613a</anchor>
      <arglist>(csTreeNode *child)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleLODAlgo</name>
    <filename>classcsTriangleLODAlgo.html</filename>
    <member kind="function">
      <name>~csTriangleLODAlgo</name>
      <anchor>ec48ec4db7eecd028c688d0450778d25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CalculateCost</name>
      <anchor>d6a0f97c8544c975cefa8185b778b03e</anchor>
      <arglist>(csTriangleVerticesCost *vertices, csTriangleVertexCost *vertex)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleLODAlgoEdge</name>
    <base>csTriangleLODAlgo</base>
    <filename>classcsTriangleLODAlgoEdge.html</filename>
    <member kind="function">
      <name>~csTriangleLODAlgoEdge</name>
      <anchor>23aba3f30ebd1771f5d2eda96b12e84a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CalculateCost</name>
      <anchor>86c6096c62a24b5a792f0929a2c2fabd</anchor>
      <arglist>(csTriangleVerticesCost *vertices, csTriangleVertexCost *vertex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleMesh</name>
    <filename>classcsTriangleMesh.html</filename>
    <member kind="function">
      <name>csTriangleMesh</name>
      <anchor>4ffa34f2ecd69b61c244083d4e384168</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTriangle</name>
      <anchor>42ff184bb4f1fc31774263f94fc92711</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <name>AddTriangle</name>
      <anchor>70394d3854caa8cd3ad96c2d63159978</anchor>
      <arglist>(int a, int b, int c)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>1aeda316d758fa235243113dfc1db2b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>db18845f6a0055a60d1b479792a11387</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>c122ebe9c41fa3977cb5b8b30fa6e61c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>36af93a363119ba6ae6a38010d93f237</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>69438b5d9aaf8ea2d81ba8ce8ebc290a</anchor>
      <arglist>(int count)</arglist>
    </member>
    <member kind="function">
      <name>SetTriangles</name>
      <anchor>5d968323ae5354b58b0ab88d04a886e1</anchor>
      <arglist>(csTriangle const *trigs, int count)</arglist>
    </member>
    <member kind="function">
      <name>triangles</name>
      <anchor>20616ba898605904cf4f651b58c59d47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleMeshLOD</name>
    <filename>classcsTriangleMeshLOD.html</filename>
    <member kind="function">
      <name>CalculateLOD</name>
      <anchor>181759de48e08504a764cb49287b5a9e</anchor>
      <arglist>(csTriangleMesh *mesh, csTriangleVerticesCost *verts, float max_cost, int &amp;num_triangles, csTriangleLODAlgo *lodalgo)</arglist>
    </member>
    <member kind="function">
      <name>CalculateLOD</name>
      <anchor>df5813dac2ebb24ba4c40defc858900d</anchor>
      <arglist>(csTriangleMesh *mesh, csTriangleVerticesCost *verts, int *translate, int *emerge_from, csTriangleLODAlgo *lodalgo)</arglist>
    </member>
    <member kind="function">
      <name>CalculateLODFast</name>
      <anchor>171f583c48bfcb4a00d5fdf4722ed12d</anchor>
      <arglist>(csTriangleMesh *mesh, csTriangleVerticesCost *verts, float max_cost, int &amp;num_triangles, csTriangleLODAlgo *lodalgo)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleVertex</name>
    <filename>classcsTriangleVertex.html</filename>
    <member kind="function">
      <name>csTriangleVertex</name>
      <anchor>c799066635e9f29b11c7a2e4f3311a27</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csTriangleVertex</name>
      <anchor>2cf7554a5ea01fe8e2ebe52b5c1559b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>con_triangles</name>
      <anchor>c855063efbad14f9551dc8d681c9b7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>con_vertices</name>
      <anchor>3b1dd04a811ab8ee046973725593e9ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>idx</name>
      <anchor>018d7acdb3669f06d7754622ad81a64a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>d948769197780a8643172e9756838243</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleVertexCost</name>
    <base>csTriangleVertex</base>
    <filename>classcsTriangleVertexCost.html</filename>
    <member kind="function">
      <name>csTriangleVertexCost</name>
      <anchor>e73e8a7c0b85a925b48ec18ab7c2766b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csTriangleVertexCost</name>
      <anchor>9fa32db84bcae9630abc01a54f5fa455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>cost</name>
      <anchor>d3d808e340f4a8d97de41e20646d0625</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>deleted</name>
      <anchor>935f3057b4e43faf96ec78a65d52c067</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>to_vertex</name>
      <anchor>0b9ea968612e35eb27d338a1c10d318c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleVertices</name>
    <filename>classcsTriangleVertices.html</filename>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>02d18c85a35022e57f2d691f71e2d488</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>28a0491d19ea75c673de8e45dc8872fb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>num_vertices</name>
      <anchor>d38d75d4c190486f4e3385bae355110b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vertices</name>
      <anchor>7c8c28e6d36fcb5932bd88fce0c00438</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTriangleVertices</name>
      <anchor>4f707f250c0ad61a5b431fc621d02aa7</anchor>
      <arglist>(csTriangleMesh *mesh, csVector3 *verts, int num_verts)</arglist>
    </member>
    <member kind="function">
      <name>UpdateVertices</name>
      <anchor>f46269521a2fee1eb64ed6fd33d04476</anchor>
      <arglist>(csVector3 *verts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleVerticesCost</name>
    <filename>classcsTriangleVerticesCost.html</filename>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>babc45298b2ba69339d5efe66cc781a3</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>b5b017818f96336072e145125fa76949</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>7609ffd04d482ab2c040bbc2df5fb2be</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>csTriangleVerticesCost</name>
      <anchor>330ec2bf9cc9950d730119a7bd9693b3</anchor>
      <arglist>(csTriangleMesh *mesh, csVector3 *verts, int num_verts)</arglist>
    </member>
    <member kind="function">
      <name>CalculateCost</name>
      <anchor>4e6ca18483dc52fd53dbc0c81b1e90d9</anchor>
      <arglist>(csTriangleLODAlgo *lodalgo)</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>5c5fd02f66cd0205188202f6e45f6429</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetMinimalCostVertex</name>
      <anchor>b1277ddb69bbd6ca7d51a55cb828982c</anchor>
      <arglist>(float &amp;min_cost)</arglist>
    </member>
    <member kind="function">
      <name>SortVertices</name>
      <anchor>328effabc9a2449ed24e3eafe010397a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>UpdateVertices</name>
      <anchor>828ccb94dd859b5259595c12b9a03d30</anchor>
      <arglist>(csVector3 *verts)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleVerticesSorted</name>
    <filename>classcsTriangleVerticesSorted.html</filename>
    <member kind="function">
      <name>ChangeCostVertex</name>
      <anchor>6850c64b76323c572be0b49eaee1dc31</anchor>
      <arglist>(int vtidx)</arglist>
    </member>
    <member kind="function">
      <name>GetLowestCostVertex</name>
      <anchor>61fd54a135f0eaeeca4db57fe05a1ba4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangulate2</name>
    <filename>classcsTriangulate2.html</filename>
    <member kind="function">
      <name>csTriangulate2</name>
      <anchor>d84a052006a443acf8e2643d2d64fb22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csTriangulate2</name>
      <anchor>74dfaf96f0264041a9fbd9c20e13644b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Area</name>
      <anchor>da6e02e035814ca572988bf4bedf9950</anchor>
      <arglist>(const csContour2 &amp;contour)</arglist>
    </member>
    <member kind="function">
      <name>InsideTriangle</name>
      <anchor>6143218ba13e9ac45031c51ad62c0a22</anchor>
      <arglist>(float Ax, float Ay, float Bx, float By, float Cx, float Cy, float Px, float Py)</arglist>
    </member>
    <member kind="function">
      <name>Process</name>
      <anchor>c2b48efde4bb0f45d736351efc2975da</anchor>
      <arglist>(const csContour2 &amp;contour, csTriangleMesh &amp;result, csContour2 &amp;result_vertices)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTypedObjectIterator</name>
    <filename>classcsTypedObjectIterator.html</filename>
    <member kind="function">
      <name>FetchObject</name>
      <anchor>0790f8ed0a2a710fb65e0247747f3531</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CurrentTypedObject</name>
      <anchor>b98b33de835016edf7927803d1d19a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iter</name>
      <anchor>8ef9c564c5a0ddd3c289f30e2a371e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTypedObjectIterator</name>
      <anchor>4bc57cc87b4b3fe0359e2c7651910812</anchor>
      <arglist>(iObject *parent)</arglist>
    </member>
    <member kind="function">
      <name>~csTypedObjectIterator</name>
      <anchor>72db2031603e910f9ee941ab1e7e2cbb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>FindName</name>
      <anchor>2213e2a47c03265176f19d54aec38271</anchor>
      <arglist>(const char *name)</arglist>
    </member>
    <member kind="function">
      <name>GetParentObj</name>
      <anchor>fa019b4641854e344f589c38dbd367d9</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>247f0357eebf1d6010926803300db098</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>7bbc3b689bd061fa86b0e7af41fa2828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>24a14f3ae9eba349f173640ea0ae65f9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csUnicodeTransform</name>
    <filename>classcsUnicodeTransform.html</filename>
    <member kind="function">
      <name>Decode</name>
      <anchor>d069d0d41c21b04b2e62edb83c3cbac3</anchor>
      <arglist>(const utf32_char *str, size_t strlen, utf32_char &amp;ch, bool *isValid=0, bool returnNonChar=false)</arglist>
    </member>
    <member kind="function">
      <name>Decode</name>
      <anchor>4971c5f03f1f54f945e002458162bc2d</anchor>
      <arglist>(const utf16_char *str, size_t strlen, utf32_char &amp;ch, bool *isValid=0, bool returnNonChar=false)</arglist>
    </member>
    <member kind="function">
      <name>Decode</name>
      <anchor>24c171b2e92da381499801aba4422106</anchor>
      <arglist>(const utf8_char *str, size_t strlen, utf32_char &amp;ch, bool *isValid=0, bool returnNonChar=false)</arglist>
    </member>
    <member kind="function">
      <name>Encode</name>
      <anchor>0b5536e3d2a6d70d16e4d6c289011013</anchor>
      <arglist>(const utf32_char ch, utf32_char *buf, size_t bufsize, bool allowNonchars=false)</arglist>
    </member>
    <member kind="function">
      <name>Encode</name>
      <anchor>a61d511bc48e690af379cf27fe95836a</anchor>
      <arglist>(const utf32_char ch, utf16_char *buf, size_t bufsize, bool allowNonchars=false)</arglist>
    </member>
    <member kind="function">
      <name>Encode</name>
      <anchor>0af2e3329f354f8626f43c5dc56c2634</anchor>
      <arglist>(const utf32_char ch, utf8_char *buf, size_t bufsize, bool allowNonchars=false)</arglist>
    </member>
    <member kind="function">
      <name>EncodeUTF16</name>
      <anchor>3dbb184083e5ddf867cbb2ff787b08ac</anchor>
      <arglist>(const utf32_char ch, utf16_char *buf, size_t bufsize, bool allowNonchars=false)</arglist>
    </member>
    <member kind="function">
      <name>EncodeUTF32</name>
      <anchor>58c5c58bbf789057e6ea0b9bc86356a1</anchor>
      <arglist>(const utf32_char ch, utf32_char *buf, size_t bufsize, bool allowNonchars=false)</arglist>
    </member>
    <member kind="function">
      <name>EncodeUTF8</name>
      <anchor>ea53afe26677ed7575661735e3087075</anchor>
      <arglist>(const utf32_char ch, utf8_char *buf, size_t bufsize, bool allowNonchars=false)</arglist>
    </member>
    <member kind="function">
      <name>MapToFold</name>
      <anchor>264f20ba0c8a44833f0276d1d39ac068</anchor>
      <arglist>(const utf32_char ch, utf32_char *dest, size_t destSize, uint flags=0)</arglist>
    </member>
    <member kind="function">
      <name>MapToLower</name>
      <anchor>68b49c8dbeb3970733ba455f33e6e61c</anchor>
      <arglist>(const utf32_char ch, utf32_char *dest, size_t destSize, uint flags=0)</arglist>
    </member>
    <member kind="function">
      <name>MapToUpper</name>
      <anchor>807ddce5c1282d7fe147496848332117</anchor>
      <arglist>(const utf32_char ch, utf32_char *dest, size_t destSize, uint flags=0)</arglist>
    </member>
    <member kind="function">
      <name>UTF16Decode</name>
      <anchor>723ec7aa6c1ef41e28f56f26a2ead1c9</anchor>
      <arglist>(const utf16_char *str, size_t strlen, utf32_char &amp;ch, bool *isValid=0, bool returnNonChar=false)</arglist>
    </member>
    <member kind="function">
      <name>UTF16Rewind</name>
      <anchor>d90b496800a6591cf1c98b43184ebc51</anchor>
      <arglist>(const utf16_char *str, size_t maxRew)</arglist>
    </member>
    <member kind="function">
      <name>UTF16Skip</name>
      <anchor>d4c06533155e5a6825bda80f65bbac45</anchor>
      <arglist>(const utf16_char *str, size_t maxSkip)</arglist>
    </member>
    <member kind="function">
      <name>UTF16to32</name>
      <anchor>464855759c78622ee2e361b10f000b6b</anchor>
      <arglist>(utf32_char *dest, size_t destSize, const utf16_char *source, size_t srcSize=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>UTF16to8</name>
      <anchor>8ac51054b36028a0a20d031573cd1718</anchor>
      <arglist>(utf8_char *dest, size_t destSize, const utf16_char *source, size_t srcSize=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>UTF32Decode</name>
      <anchor>cac90f99a50393c4a81e5b9912ac6b74</anchor>
      <arglist>(const utf32_char *str, size_t strlen, utf32_char &amp;ch, bool *isValid=0, bool returnNonChar=false)</arglist>
    </member>
    <member kind="function">
      <name>UTF32Rewind</name>
      <anchor>310ed95864f7d579e378077f40ab4df3</anchor>
      <arglist>(const utf32_char *str, size_t maxRew)</arglist>
    </member>
    <member kind="function">
      <name>UTF32Skip</name>
      <anchor>637e29374e0a8419ced315e08af920b8</anchor>
      <arglist>(const utf32_char *str, size_t maxSkip)</arglist>
    </member>
    <member kind="function">
      <name>UTF32to16</name>
      <anchor>88fc5662ce654ab827edd968c119175d</anchor>
      <arglist>(utf16_char *dest, size_t destSize, const utf32_char *source, size_t srcSize=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>UTF32to8</name>
      <anchor>9b93436f29d42d97060a477898d280de</anchor>
      <arglist>(utf8_char *dest, size_t destSize, const utf32_char *source, size_t srcSize=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>UTF8Decode</name>
      <anchor>21e5a75955302bbc73751a4dc459af54</anchor>
      <arglist>(const utf8_char *str, size_t strlen, utf32_char &amp;ch, bool *isValid=0, bool returnNonChar=false)</arglist>
    </member>
    <member kind="function">
      <name>UTF8Rewind</name>
      <anchor>ddfc476b7f8edcb769e2d778610225e9</anchor>
      <arglist>(const utf8_char *str, size_t maxRew)</arglist>
    </member>
    <member kind="function">
      <name>UTF8Skip</name>
      <anchor>0d4b2524b9ec9c6f3fe3e61e6ab97e00</anchor>
      <arglist>(const utf8_char *str, size_t maxSkip)</arglist>
    </member>
    <member kind="function">
      <name>UTF8to16</name>
      <anchor>bdad710dfb609d2d5edf6752506b4d52</anchor>
      <arglist>(utf16_char *dest, size_t destSize, const utf8_char *source, size_t srcSize=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>UTF8to32</name>
      <anchor>aab15b28adce906d66120d65717c47b7</anchor>
      <arglist>(utf32_char *dest, size_t destSize, const utf8_char *source, size_t srcSize=(size_t)-1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csUserRenderBufferManager</name>
    <filename>classcsUserRenderBufferManager.html</filename>
    <member kind="function">
      <name>AddRenderBuffer</name>
      <anchor>338050c602cfcbad2322d86845322ac7</anchor>
      <arglist>(csStringID name, iRenderBuffer *buffer)</arglist>
    </member>
    <member kind="function">
      <name>GetRenderBuffer</name>
      <anchor>dd023b0c963df49e3cdcc31f87a9dfb3</anchor>
      <arglist>(csStringID name) const </arglist>
    </member>
    <member kind="function">
      <name>RemoveRenderBuffer</name>
      <anchor>c48e02f2b632fbe106cf5ee6210d623e</anchor>
      <arglist>(csStringID name)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVector2</name>
    <filename>classcsVector2.html</filename>
    <member kind="function">
      <name>csVector2</name>
      <anchor>e5f1d7cd6195cda07ee9ddecbd6f7409</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csVector2</name>
      <anchor>b21c7982dca9bc951dba4b243ace171f</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <name>csVector2</name>
      <anchor>e6a694e1ef368df9ae9e64536f9f2a32</anchor>
      <arglist>(float x, float y)</arglist>
    </member>
    <member kind="function">
      <name>csVector2</name>
      <anchor>55112000a51b8cc7b422adce88964e2f</anchor>
      <arglist>(const csVector2 &amp;o)</arglist>
    </member>
    <member kind="function">
      <name>Description</name>
      <anchor>408bd958f4171d00d43ac3f09062ba09</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>27559a7bee3f0fd1370811d4b1023827</anchor>
      <arglist>(float *v)</arglist>
    </member>
    <member kind="function">
      <name>IsLeft</name>
      <anchor>ccd1660dbfd74db06e899e7e319986ca</anchor>
      <arglist>(const csVector2 &amp;p0, const csVector2 &amp;p1)</arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>b1caf357679e56082126fd66bdf15ac4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>5fd419d758e521c6a94337b85a1ede70</anchor>
      <arglist>(csVector2 const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>6f7aac34ad42257e93a2cde5a0c14b01</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>3ac1433944fc1bbed78144f4fc5ca03e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>bd3838c66b6a4611d3e44b19e93a4716</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>4077df99dacddd153b90bdc4d6e7b2c3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>a828c447631e737db74799de8686f20a</anchor>
      <arglist>(const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>19b26840e3ae012fbb777438e9833e40</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>c5c18d5a94e08c55a3838997ae74f6cb</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>2c420c308142180d3ddda8d62ef170fd</anchor>
      <arglist>(int n) const </arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>f90252996a68bb0ceb877286c42ff0a6</anchor>
      <arglist>(float angle)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>faad055f8fec2478a83800ac73cd28f3</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>101db2f85f0c3400e90399ef45111603</anchor>
      <arglist>(float const *v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>adcdfae52235111cb24031206bd7fd6e</anchor>
      <arglist>(csVector2 const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>b7e0ea5b2b9b4b7e229990c383cf0b6f</anchor>
      <arglist>(float ix, float iy)</arglist>
    </member>
    <member kind="function">
      <name>SquaredNorm</name>
      <anchor>75d5837b69e0c167b22c3f9309ee5177</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>b5f5e828113890ff942c00f9b61c7a02</anchor>
      <arglist>(float f, const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>f32994c088b51f543ffb457045aae993</anchor>
      <arglist>(const csVector2 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>b43a3533197ca44617a854311d87ecbe</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>e3da902419514e97e3dc8dddb5688ca8</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>5261795da9e75e44fd75446c8e7bad2f</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>3056757a39207234f41bf0c550e99def</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>94748cc03a0b2ff5cc3c65a466962397</anchor>
      <arglist>(const csVector2 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>af6caaa84b6fe448c6d3b04825f48826</anchor>
      <arglist>(const csVector2 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>946b2cdf4f03f01a04a59efb13a8d63b</anchor>
      <arglist>(const csVector2 &amp;v1, const csVector2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>afb7e03f3b5661164327e97aa00ebf97</anchor>
      <arglist>(float f, const csVector2 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>cf4ee25489c98e6b7b7a460c4edd4ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>f736730a67b9ee807f1455da3d2be188</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVector3</name>
    <filename>classcsVector3.html</filename>
    <member kind="function">
      <name>csVector3</name>
      <anchor>27d80c7e6bcdaee093012aa843492ca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csVector3</name>
      <anchor>0267a154da795520aa74c4861ab36d77</anchor>
      <arglist>(float m)</arglist>
    </member>
    <member kind="function">
      <name>csVector3</name>
      <anchor>5c187c254a4d44d364670ff9e57b59a5</anchor>
      <arglist>(float ix, float iy, float iz=0)</arglist>
    </member>
    <member kind="function">
      <name>csVector3</name>
      <anchor>83e55d80b89992b33983461997aaf3f0</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csVector3</name>
      <anchor>ee23f0071419b3de933a0ba7b094c7cc</anchor>
      <arglist>(const csDVector3 &amp;)</arglist>
    </member>
    <member kind="function">
      <name>Cross</name>
      <anchor>6da3afcc16d51f5cbb122786530abfc8</anchor>
      <arglist>(const csVector3 &amp;px, const csVector3 &amp;py)</arglist>
    </member>
    <member kind="function">
      <name>Description</name>
      <anchor>596907400f24a41736d5b5f1ba0df73f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>DominantAxis</name>
      <anchor>1885c814e9bebfb95cdebe8a66f9f036</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>de7ba33200ebce17f6f3d9619ed06ec4</anchor>
      <arglist>(float *v)</arglist>
    </member>
    <member kind="function">
      <name>IsZero</name>
      <anchor>bd1301a92ffbf20d43f99b1ba1346f09</anchor>
      <arglist>(float precision=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>710f2bd2de6b6e842774632e1654050e</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>42b1546a61c4fd76ec17c50592fcad1e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>59c1a6333abbb77268b7e661b3be36b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>ef3a7f9526f65d2f7c219649f6809d59</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>9d7480756a79154054ecc07de0b5ec0a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>4af056573151e79dcad7b24d459de7eb</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>7eff302cef5eab01d17025acc9d94a9d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>0677b4ef702018e0186600a1027ef101</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>49f06c8a62f0f119e9d37aed324dc2b0</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>7ef21de39bdda7a263f3ad38a271b63f</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>1926da31cdca5c7a45821b40b2e1d39a</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>4c4efd085000b072a427e5d475c199d0</anchor>
      <arglist>(float v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>ae3487f21c9c18fa644625ff6f4dca8c</anchor>
      <arglist>(float const *v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>8683cb36d3b238f6b5354d22b474ac2f</anchor>
      <arglist>(csVector3 const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>2d705cdca75eafea8df1400583509e88</anchor>
      <arglist>(float sx, float sy, float sz)</arglist>
    </member>
    <member kind="function">
      <name>SquaredNorm</name>
      <anchor>4f8fb0ed2df4d38898bbcda746c47552</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>f438a4e42d69985e693dcbaf78cc9940</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>dfe6a123b665375450d78bf47eee2b77</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>UnitAxisClamped</name>
      <anchor>678aef7f60ea2869d4924edfbd39c545</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>5c1f360feb8a569b066d3c251ea53ffb</anchor>
      <arglist>(int f, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>7c43330932d0d179d72dd8cf5fdfde79</anchor>
      <arglist>(const csVector3 &amp;v, int f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>adddaaa4a319d692e1bbb52b159f7b83</anchor>
      <arglist>(double f, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>268b01115d9117ce0ae4b638f3145361</anchor>
      <arglist>(const csVector3 &amp;v, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>fdf18d676633debc32fa1aeb97097062</anchor>
      <arglist>(float f, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>1a8272b06eec8e8453ee1b080d34468e</anchor>
      <arglist>(const csVector3 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>7485c6fc880165de9edc87d8d4f8c6f7</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>14effb8e6e631957c158846343cc362e</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator%</name>
      <anchor>9cf0725e53867457381292b60987f4c0</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>d3d5d09f8b3aaa3cecd6dffa5fc57722</anchor>
      <arglist>(const csVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>bfcfd1f73524f02155dca14377deffc1</anchor>
      <arglist>(const csDVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>4bfd7dd1c1e68ab46a03552cd5fb872a</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>072ff90ee99b3048ab5020803a0d0ff7</anchor>
      <arglist>(const csDVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>707f5ce11cda15e4e0e22777f6f91031</anchor>
      <arglist>(const csVector3 &amp;v1, const csDVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>8044d79b2baa48f677d88d4aea15e475</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>7d8f52709a5520e2b9fa71ae9bdcc7fa</anchor>
      <arglist>(const csVector3 &amp;v, int f)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>4bd0d559e4e019ccead8a36e6f6b13b1</anchor>
      <arglist>(const csVector3 &amp;v, double f)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>052b2559d5d577132492d1213bac4ce0</anchor>
      <arglist>(const csVector3 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>6e1bbeabb9f0f71d3a0816111006c897</anchor>
      <arglist>(const csVector3 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>5a6e8a9dd6eb45cf808d1f11e85e8a05</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>66e0e8c5f4adc5dc97d9101ed7d087b8</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>b810d5c75c97a7119cc48f9efb4cfa19</anchor>
      <arglist>(float f, const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>457aa88a73812661db71dac5aa422799</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>m</name>
      <anchor>fc081d3bf73f1be6f7134c29f6f61c56</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>823fdba459ff91e8a5e6834ded7c815f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>e0a74264b61eb5d61da63b3c101af719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>3f761bd195c7ccec59ea863a87a1ad05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVector3Array</name>
    <base>csPoly3D</base>
    <filename>classcsVector3Array.html</filename>
    <member kind="function">
      <name>csVector3Array</name>
      <anchor>6620a9debf30dc21e1b6799981d94281</anchor>
      <arglist>(size_t start_size=10)</arglist>
    </member>
    <member kind="function">
      <name>AddVertexSmart</name>
      <anchor>5ab909b1e3e2a8d137d215138e9da4e4</anchor>
      <arglist>(float x, float y, float z)</arglist>
    </member>
    <member kind="function">
      <name>AddVertexSmart</name>
      <anchor>f99afaa87a3a56fb079dd18d156167bf</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>CompressVertices</name>
      <anchor>b852f84f399e943da4ce277dfc6e7333</anchor>
      <arglist>(csArray&lt; csVector3 &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <name>CompressVertices</name>
      <anchor>7d2bc04a153d216e452a5603434f0edb</anchor>
      <arglist>(csVector3 *vertices, size_t num_vertices, csVector3 *&amp;new_vertices, size_t &amp;new_count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVector4</name>
    <base>csVector4T&lt; float &gt;</base>
    <filename>classcsVector4.html</filename>
    <member kind="function">
      <name>csVector4</name>
      <anchor>d456574e0edb0e1eefa8faa54afdbbd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csVector4</name>
      <anchor>5f8a362428107401b67791b71e464d8a</anchor>
      <arglist>(const float &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>csVector4</name>
      <anchor>ec0325257c89e55d63b80a53e7c9e9ac</anchor>
      <arglist>(float ix, float iy, float iz=0, float iw=1)</arglist>
    </member>
    <member kind="function">
      <name>csVector4</name>
      <anchor>30dd137a9fb0e4817f649a9abf463c03</anchor>
      <arglist>(const csVector4 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csVector4</name>
      <anchor>1278d5242ad319f1fd818476b7d2e343</anchor>
      <arglist>(const csVector4T&lt; float &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csVector4</name>
      <anchor>918703524568f30a4f508c6b738f4a5c</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>d097a2ddb6e2af14bce6130a20cb2a2c</anchor>
      <arglist>(const csVector3 &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>861a4ffb7dcbd69a908d24cc2d6fa711</anchor>
      <arglist>(const csVector4T&lt; float &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVector4T</name>
    <filename>classcsVector4T.html</filename>
    <member kind="function">
      <name>csVector4T</name>
      <anchor>a0e0607fa98a65601e3f02fdc0cb7f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csVector4T</name>
      <anchor>94c2b58b5ca3bfa2efbe7c91b40c0104</anchor>
      <arglist>(const T &amp;m)</arglist>
    </member>
    <member kind="function">
      <name>csVector4T</name>
      <anchor>913a2a976d9bf7547576889f81ddeb72</anchor>
      <arglist>(const T &amp;ix, const T &amp;iy, const T &amp;iz=T(0), const T &amp;iw=T(1))</arglist>
    </member>
    <member kind="function">
      <name>csVector4T</name>
      <anchor>f1d446c37e2058dbb1ad23d5a88e3f08</anchor>
      <arglist>(const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>csVector4T</name>
      <anchor>0d18a9fad938fdc0897051b902634f6a</anchor>
      <arglist>(const csVector3 &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Cross</name>
      <anchor>cd0a31461660b38ad8acc264d8138701</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>Description</name>
      <anchor>672ffa5f9c4da6b48e803873666fa6d0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>90e16d37e3c9d87468ccc474bd250ecb</anchor>
      <arglist>(T *v)</arglist>
    </member>
    <member kind="function">
      <name>IsZero</name>
      <anchor>e0846e2cd9648f89142c2c4860592f80</anchor>
      <arglist>(T precision=SMALL_EPSILON) const </arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>3bd3b3fcb5952430ce50eaba6b6b6a5e</anchor>
      <arglist>(const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Norm</name>
      <anchor>a49d212f1f0031f55527f8edf2b823f2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Normalize</name>
      <anchor>e53da8f320f68f27090925eec714adce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *=</name>
      <anchor>d8fdd8d1a4285723722677cd40aa5326</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>b9cfb5b6e3b7afe75e67b9d668227b9c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>4a78b04e910129aa1ebbff9167020127</anchor>
      <arglist>(const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>c28c7b0b230a2544ffb15b2432e97795</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-=</name>
      <anchor>11c34397104aed750fdcf7e9125f32e4</anchor>
      <arglist>(const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator/=</name>
      <anchor>120595b59a389df6453a0cbd26d75f75</anchor>
      <arglist>(T f)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>4df477f1e650a98ca866e29efb1cc147</anchor>
      <arglist>(const csVector4T&lt; T2 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>5b3e2bcbd130cdb3f18efbe4391d8250</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>bbe782097f807029822153f394393773</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>a7e42d5d82912183e34bb5c1b8e563ca</anchor>
      <arglist>(T v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>e2fb28ec38119f57e968d8497117669d</anchor>
      <arglist>(T const *v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>494174dcc21b589cf869ebfe63d92c95</anchor>
      <arglist>(csVector4T const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>99a82ef60b11e8e95f642851a097d414</anchor>
      <arglist>(T sx, T sy, T sz, T sw)</arglist>
    </member>
    <member kind="function">
      <name>SquaredNorm</name>
      <anchor>85cc1ab68f21c1ee31e681cb129c8533</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>e111f7359e4050770fc83c418dd7c475</anchor>
      <arglist>(const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Unit</name>
      <anchor>e61b5ae7f6935a0ef614449d3d176505</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>a05ea5663ab003bdf0ba8fae6a71b8cd</anchor>
      <arglist>(int f, const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>c5f3ad8fefd56caedb0f83e0809939b8</anchor>
      <arglist>(const csVector4T &amp;v, int f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>34c75e2c8c0f0a8ed8b64fabb1b7142c</anchor>
      <arglist>(float f, const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>b40645cee5f89cdeffd36c6019c688bd</anchor>
      <arglist>(const csVector4T &amp;v, T f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>29425f68c0983120c21853dae3144992</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>f863d2cb1288f08476261778aa5f6522</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator%</name>
      <anchor>d23b4c8ebb1c0f505485961cacae73da</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>978dc93ce5b64ce2d19f45aff2f471a7</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>e6baca786d1b6d6a6c4509d3f9072063</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>4c42d576d88bad4bb529d5731efe2669</anchor>
      <arglist>(const csVector4T &amp;v, int f)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>e01017d17157828443819441c1e9617b</anchor>
      <arglist>(const csVector4T &amp;v, T f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;</name>
      <anchor>bda9f87e324c693d6ee2707a39512a08</anchor>
      <arglist>(const csVector4T &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator&lt;&lt;</name>
      <anchor>ba4f8ba13e94b34d75584713adacd7cd</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>b788cd74ef690138930b369baa853282</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;</name>
      <anchor>58a82c38fff37566c2bdee763a7a47cb</anchor>
      <arglist>(float f, const csVector4T &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>operator&gt;&gt;</name>
      <anchor>63f74ff252fa4b89e55d9bfc9509b39e</anchor>
      <arglist>(const csVector4T &amp;v1, const csVector4T &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>m</name>
      <anchor>24eec8bc27192ba645f549fd42f19a35</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>w</name>
      <anchor>c29bd016ab27d5052b7f56429b586f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>ad1a8ada36cb80143840af37a73b2407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>a41eca09f79d2ca88992c2f2afb57010</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>16541cfffe9b0916819c50255a03250d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVerbosityManager</name>
    <base>scfImplementation1&lt; csVerbosityManager</base>
    <base> iVerbosityManager &gt;</base>
    <filename>classcsVerbosityManager.html</filename>
    <member kind="function">
      <name>csVerbosityManager</name>
      <anchor>130ca9f2cf7160f8113662b8d9674993</anchor>
      <arglist>(char const *flags=0)</arglist>
    </member>
    <member kind="function">
      <name>~csVerbosityManager</name>
      <anchor>4627c7de202474208735dfc5f6f6dfd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CheckFlag</name>
      <anchor>b58a0c30da8a4536d546bcc67b3d3a38</anchor>
      <arglist>(char const *major, char const *minor) const </arglist>
    </member>
    <member kind="function">
      <name>Enabled</name>
      <anchor>28243a56f8804b52ad6b7966d0beaa4d</anchor>
      <arglist>(char const *flag=0, bool fuzzy=true) const </arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>7bb7a105550c12eca67af88be9d678fb</anchor>
      <arglist>(char const *flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVerbosityParser</name>
    <filename>classcsVerbosityParser.html</filename>
    <member kind="function">
      <name>csVerbosityParser</name>
      <anchor>fa5972601b7d76563ce8520cc2e7adcd</anchor>
      <arglist>(char const *flags=0)</arglist>
    </member>
    <member kind="function">
      <name>csVerbosityParser</name>
      <anchor>46cf280f2017c158d5a2f4477955576b</anchor>
      <arglist>(csVerbosityParser const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>~csVerbosityParser</name>
      <anchor>2b198b3178bdb3f2c1ff1e884618a5d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CheckFlag</name>
      <anchor>4978ccdce353b0c4b8366e97318bbe2e</anchor>
      <arglist>(char const *major, char const *minor) const </arglist>
    </member>
    <member kind="function">
      <name>Enabled</name>
      <anchor>e4fcdb111aeb9e7515db9afefb3fe965</anchor>
      <arglist>(char const *flag=0, bool fuzzy=true) const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ade2d26999e909262cd9fb41598b2f36</anchor>
      <arglist>(csVerbosityParser const &amp;v)</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>f607f1123335def5bcc30b85d1353d5a</anchor>
      <arglist>(char const *flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVertexCompressor</name>
    <filename>classcsVertexCompressor.html</filename>
    <member kind="function">
      <name>Compress</name>
      <anchor>10e1ad160c934ccb0b49d3a3171217ef</anchor>
      <arglist>(csArray&lt; csVector3 &gt; &amp;vertices, csArray&lt; csVector2 &gt; &amp;texels, csArray&lt; csVector3 &gt; &amp;normals, csArray&lt; csColor4 &gt; &amp;colors)</arglist>
    </member>
    <member kind="function">
      <name>Compress</name>
      <anchor>2f686eb0569af8ac805077395ac94463</anchor>
      <arglist>(csVector3 *vertices, csVector2 *texels, csVector3 *normals, csColor4 *colors, size_t num_vertices, csVector3 *&amp;new_vertices, csVector2 *&amp;new_texels, csVector3 *&amp;new_normals, csColor4 *&amp;new_colors, size_t &amp;new_count)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVertexLightCalculator</name>
    <base>iVertexLightCalculator</base>
    <filename>classcsVertexLightCalculator.html</filename>
    <member kind="function">
      <name>CalculateLighting</name>
      <anchor>aedab2fd86bf8b775fd6094a548dd0e2</anchor>
      <arglist>(const csLightProperties &amp;light, const csVector3 &amp;eyePos, float shininess, size_t numvert, iRenderBuffer *vb, iRenderBuffer *nb, iRenderBuffer *litColor, iRenderBuffer *specColor=0) const </arglist>
    </member>
    <member kind="function">
      <name>CalculateLightingAdd</name>
      <anchor>e65b7a5ea83645796d132d45165cc3fa</anchor>
      <arglist>(const csLightProperties &amp;light, const csVector3 &amp;eyePos, float shininess, size_t numvert, iRenderBuffer *vb, iRenderBuffer *nb, iRenderBuffer *litColor, iRenderBuffer *specColor=0) const </arglist>
    </member>
    <member kind="function">
      <name>CalculateLightingMul</name>
      <anchor>a640569c5ed0ba68853b32a95d7a3136</anchor>
      <arglist>(const csLightProperties &amp;light, const csVector3 &amp;eyePos, float shininess, size_t numvert, iRenderBuffer *vb, iRenderBuffer *nb, iRenderBuffer *litColor, iRenderBuffer *specColor=0) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVertexListWalker</name>
    <filename>classcsVertexListWalker.html</filename>
    <member kind="function">
      <name>operator *</name>
      <anchor>828af5a6ba8eb51b8f7a8a65584666fd</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>csVertexListWalker</name>
      <anchor>8bdddd21800fdeab268bce050656c267</anchor>
      <arglist>(iRenderBuffer *buffer, size_t desiredComponents=0, const Tbase *defaultComponents=0)</arglist>
    </member>
    <member kind="function">
      <name>operator Tbase const *</name>
      <anchor>01b038d7bdaa4f127a8e02cd0eae9ad6</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator++</name>
      <anchor>cf29ddde83a5e8fd0f8350c8963b958c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ResetState</name>
      <anchor>1d120e497d5937e5238ba8296e2cdbbb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVfsCacheManager</name>
    <base>scfImplementation1&lt; csVfsCacheManager</base>
    <base> iCacheManager &gt;</base>
    <filename>classcsVfsCacheManager.html</filename>
    <member kind="function">
      <name>csVfsCacheManager</name>
      <anchor>2f806f36a79e4da8dba69de7440174de</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *vfsdir)</arglist>
    </member>
    <member kind="function">
      <name>CacheData</name>
      <anchor>af49b7621a0622b7f90515ac5576e5c5</anchor>
      <arglist>(const void *data, size_t size, const char *type, const char *scope, uint32 id)</arglist>
    </member>
    <member kind="function">
      <name>ClearCache</name>
      <anchor>0597d546bad71dc58dfebad402079c0e</anchor>
      <arglist>(const char *type=0, const char *scope=0, const uint32 *id=0)</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>f71878aec7fe758379ad56998ff22c55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentScope</name>
      <anchor>d2aee76ef0d1e381fc473bf810991648</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCurrentType</name>
      <anchor>beaf915c611af5992efb6c65d11a6f8d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsReadOnly</name>
      <anchor>4024c7cfb5a6b10275538943f1d45c28</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ReadCache</name>
      <anchor>09efd63ae7ac4313f6c6c07409d50d8b</anchor>
      <arglist>(const char *type, const char *scope, uint32 id)</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentScope</name>
      <anchor>c66d9b7c679fdda2722c4d92f68daccc</anchor>
      <arglist>(const char *scope)</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentType</name>
      <anchor>f313ceafd06b7a528b7d4925181994b0</anchor>
      <arglist>(const char *type)</arglist>
    </member>
    <member kind="function">
      <name>SetReadOnly</name>
      <anchor>37027ad3efed70589a378920b6c808ef</anchor>
      <arglist>(bool ro)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVfsDirectoryChanger</name>
    <filename>classcsVfsDirectoryChanger.html</filename>
    <member kind="function">
      <name>csVfsDirectoryChanger</name>
      <anchor>099b0cce77fa3c7518aea39f87a6848f</anchor>
      <arglist>(iVFS *vfs)</arglist>
    </member>
    <member kind="function">
      <name>~csVfsDirectoryChanger</name>
      <anchor>4dec5a5654c0382679c2a57bb0f7c0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ChangeTo</name>
      <anchor>56c2978e303462165e8fab5f39485ca0</anchor>
      <arglist>(const char *filename)</arglist>
    </member>
    <member kind="function">
      <name>PushDir</name>
      <anchor>e36127c7dba3a300f006a9bee025a5be</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csView</name>
    <base>scfImplementation1&lt; csView</base>
    <base> iView &gt;</base>
    <filename>classcsView.html</filename>
    <member kind="function">
      <name>csView</name>
      <anchor>7aeec91fd03445863638c7aca5986339</anchor>
      <arglist>(iEngine *iEngine, iGraphics3D *ig3d)</arglist>
    </member>
    <member kind="function">
      <name>~csView</name>
      <anchor>759c0d20ba41b75c851e9e0b18ca7229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddViewVertex</name>
      <anchor>e8847ca9743570c2b8a57821d97b73b4</anchor>
      <arglist>(int x, int y)</arglist>
    </member>
    <member kind="function">
      <name>ClearView</name>
      <anchor>c71ec710eb13caeb6892ccef5fbfa9e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>d4407ebd4f82f3d642e14c949d8a4934</anchor>
      <arglist>(iMeshWrapper *mesh=0)</arglist>
    </member>
    <member kind="function">
      <name>GetCamera</name>
      <anchor>9dbba0334bfb853e158e3379c633424b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetClipper</name>
      <anchor>a40d35665c354cfcbe3fe2bea1b835c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetContext</name>
      <anchor>e3b84e3d9c48b11e6fecd74e0a44ebfc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetEngine</name>
      <anchor>e85e857e055ba95a7283e395697f72db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>RestrictClipperToScreen</name>
      <anchor>7895b9bc0ba9a2b9d790d2ffa61079cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetAutoResize</name>
      <anchor>4337049ef2cbdffb7c8c03c8266ef97a</anchor>
      <arglist>(bool state)</arglist>
    </member>
    <member kind="function">
      <name>SetCamera</name>
      <anchor>aac69b8df74bbeb13d50fc8d19155868</anchor>
      <arglist>(iCamera *c)</arglist>
    </member>
    <member kind="function">
      <name>SetContext</name>
      <anchor>d3a2b2c08e21c36831e523c817fb7890</anchor>
      <arglist>(iGraphics3D *ig3d)</arglist>
    </member>
    <member kind="function">
      <name>SetEngine</name>
      <anchor>da142bfff145a279a259bff3a653d02c</anchor>
      <arglist>(iEngine *e)</arglist>
    </member>
    <member kind="function">
      <name>SetRectangle</name>
      <anchor>e6deef0420fc076dc5a4d0e50f568cb5</anchor>
      <arglist>(int x, int y, int w, int h)</arglist>
    </member>
    <member kind="function">
      <name>UpdateClipper</name>
      <anchor>4522ed71e300b9e1c44f66bc1929036d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVirtualClock</name>
    <base>scfImplementation1&lt; csVirtualClock</base>
    <base> iVirtualClock &gt;</base>
    <filename>classcsVirtualClock.html</filename>
    <member kind="function">
      <name>Advance</name>
      <anchor>5a7a5ae17720ca637fe1cce12d01fd1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentTicks</name>
      <anchor>6857d06127ee64b06bd97b663a936303</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetElapsedTicks</name>
      <anchor>fd25e0e367b639007d153c82a844756a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Resume</name>
      <anchor>1e7cea5a9a9fc67688271ab64bba41fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Suspend</name>
      <anchor>dde2d554d25ad1ea5ff3e5283aeed241</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csWeakRef</name>
    <filename>classcsWeakRef.html</filename>
    <member kind="function">
      <name>csWeakRef</name>
      <anchor>87badf815dbe45e0f7b47d5f3965c435</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWeakRef</name>
      <anchor>c64faca4f7677544b410f15885dc169a</anchor>
      <arglist>(T *newobj)</arglist>
    </member>
    <member kind="function">
      <name>csWeakRef</name>
      <anchor>3eafb0c2223f85045a60a2a4180a4a3f</anchor>
      <arglist>(csRef&lt; T &gt; const &amp;newobj)</arglist>
    </member>
    <member kind="function">
      <name>csWeakRef</name>
      <anchor>ca95b86a6ae5156946f2df5df2570381</anchor>
      <arglist>(csWeakRef const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csWeakRef</name>
      <anchor>11b7f728f8ca1b98900b687e68fffdab</anchor>
      <arglist>(const csPtr&lt; T &gt; &amp;newobj)</arglist>
    </member>
    <member kind="function">
      <name>~csWeakRef</name>
      <anchor>bb80dae24d92a7528667caadf493e244</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IsValid</name>
      <anchor>b2bc16f5ef7b1cae5ba0302cc5058c9b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>4b76c171ce47d84d81892ae79b6f6fd4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator T *</name>
      <anchor>a6466d1c980018ba8f16605c53a6d63d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator-&gt;</name>
      <anchor>7d17b009ac82d545ce093552e68706a3</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ad49d01833ae0b3c1c3c1f82586cf278</anchor>
      <arglist>(csWeakRef const &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ee9ceafec91af653d2c5fe885af9bf92</anchor>
      <arglist>(csPtr&lt; T &gt; newobj)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>c74feea6be2084c8a3eaca03e512c7f5</anchor>
      <arglist>(csRef&lt; T &gt; const &amp;newobj)</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>ee1273a4ca16b024bf2114d31d29a57b</anchor>
      <arglist>(T *newobj)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>eac9873d01b42639c03c453a88eaab54</anchor>
      <arglist>(T *obj, const csWeakRef &amp;r1)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>24afe03609ed7f187765a7ea80961069</anchor>
      <arglist>(const csWeakRef &amp;r1, T *obj)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>a22267caa40927b1fd7b8b0b6fb35daa</anchor>
      <arglist>(const csWeakRef &amp;r1, const csWeakRef &amp;r2)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>382e2831177e7aa01e9d2218750ff4b6</anchor>
      <arglist>(T *obj, const csWeakRef &amp;r1)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>d4fd36095e229026f91565ab2fc12856</anchor>
      <arglist>(const csWeakRef &amp;r1, T *obj)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>ef2c187a1684ce47ed35de24cb59d838</anchor>
      <arglist>(const csWeakRef &amp;r1, const csWeakRef &amp;r2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csWeakRefArray</name>
    <base>csSafeCopyArray&lt; csWeakRef&lt; T &gt; &gt;</base>
    <filename>classcsWeakRefArray.html</filename>
    <member kind="function">
      <name>csWeakRefArray</name>
      <anchor>ff313d94f082ff00e02ad53d89676773</anchor>
      <arglist>(int ilimit=0, int ithreshold=0)</arglist>
    </member>
    <member kind="function">
      <name>Compact</name>
      <anchor>411d4c916037dbcbd0931b7f79b1051d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csWideSparse3D</name>
    <base>csSparse3D</base>
    <filename>classcsWideSparse3D.html</filename>
  </compound>
  <compound kind="class">
    <name>csWin32CustomCursors</name>
    <filename>classcsWin32CustomCursors.html</filename>
  </compound>
  <compound kind="class">
    <name>csWin32RegistryConfig</name>
    <base>scfImplementation1&lt; csWin32RegistryConfig</base>
    <base> iConfigFile &gt;</base>
    <filename>classcsWin32RegistryConfig.html</filename>
    <member kind="function">
      <name>csWin32RegistryIterator</name>
      <anchor>2d7cd1dd491a4add6eb378c1b33139d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>c7f7575e742d0549f2a699bb4ffdba17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Close</name>
      <anchor>85f7f54f4ac7e74153a1e748454ff4f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteKey</name>
      <anchor>33035cf4c20b06cf5f828a9757e24af4</anchor>
      <arglist>(const char *Key)</arglist>
    </member>
    <member kind="function">
      <name>Enumerate</name>
      <anchor>c29298fbb929ed4dba97d57daf331775</anchor>
      <arglist>(const char *Subsection=0)</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>68b9ff7111fbae27326ac0ed265fba1c</anchor>
      <arglist>(const char *Key, bool Def=false) const </arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>dbff21a5476ca6a1e2d0a6f4f9b4d3c3</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>GetEOFComment</name>
      <anchor>127186ba95646a877035dd16034867dc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>296ab62133b7b0418e4a5c2e340df2a4</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>06b408eed05fc2e77896f6ca9e3f0ee5</anchor>
      <arglist>(const char *Key, float Def=0.0) const </arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>01653ae73d610c0b52eb2d4cd7b72925</anchor>
      <arglist>(const char *Key, int Def=0) const </arglist>
    </member>
    <member kind="function">
      <name>GetStr</name>
      <anchor>04325f7942794369b27142dedfe25a4a</anchor>
      <arglist>(const char *Key, const char *Def=&quot;&quot;) const </arglist>
    </member>
    <member kind="function">
      <name>GetVFS</name>
      <anchor>5f309ce1e0b982be5accdbad4896e1bf</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>KeyExists</name>
      <anchor>45f8a00b2de8434d2679ec19158af664</anchor>
      <arglist>(const char *Key) const </arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>3f01c814ef0b4e966f491e3645fad565</anchor>
      <arglist>(const char *iFileName, iVFS *=0, bool Merge=false, bool NewWins=true)</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>a9f2a5b99fc6835e24c5efb4176e5e3a</anchor>
      <arglist>(const char *Key, HKEY parent=HKEY_CURRENT_USER)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>3a8b6f3197fe76a5ddf44c6b70af811d</anchor>
      <arglist>(const char *iFileName, iVFS *=0)</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>60b982a8a96271cf70d36b89b740820f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>11fc03c6da5c97db62b3bc35a121dd95</anchor>
      <arglist>(const char *Key, bool Value)</arglist>
    </member>
    <member kind="function">
      <name>SetComment</name>
      <anchor>56de946a28e14d9702cc7c26c2b54031</anchor>
      <arglist>(const char *Key, const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetEOFComment</name>
      <anchor>bd52bf1a5a93386e17a15ccf9cf8ef74</anchor>
      <arglist>(const char *Text)</arglist>
    </member>
    <member kind="function">
      <name>SetFileName</name>
      <anchor>2b87d62f4a4b4c519f907611e4998d78</anchor>
      <arglist>(const char *, iVFS *)</arglist>
    </member>
    <member kind="function">
      <name>SetFloat</name>
      <anchor>1a40181d308a58a724ba72113cf5eed0</anchor>
      <arglist>(const char *Key, float Value)</arglist>
    </member>
    <member kind="function">
      <name>SetInt</name>
      <anchor>63e3f776010beea80ba85f72f76534e4</anchor>
      <arglist>(const char *Key, int Value)</arglist>
    </member>
    <member kind="function">
      <name>SetStr</name>
      <anchor>de3e146f04918761d1a2ebd779ee1e59</anchor>
      <arglist>(const char *Key, const char *Val)</arglist>
    </member>
    <member kind="function">
      <name>SubsectionExists</name>
      <anchor>6e5d482e8c3448178fc50f45cc90fa9f</anchor>
      <arglist>(const char *Subsection) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cswinCallStackHelper</name>
    <filename>classcswinCallStackHelper.html</filename>
    <member kind="function">
      <name>CreateCallStack</name>
      <anchor>67d631821765ce896281d022563be514</anchor>
      <arglist>(HANDLE hProc, HANDLE hThread, CONTEXT &amp;context, int skip=0, bool fast=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cswinMinidumpWriter</name>
    <filename>classcswinMinidumpWriter.html</filename>
    <member kind="function">
      <name>customHandler</name>
      <anchor>f5e9acd0b9d9feeca4603997f2ef34e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>0fa6eefe1ca92ff9357915d2696b04b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oldFilter</name>
      <anchor>6d10b555dc557cdb845d755800be702d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FnCrashMinidumpHandler</name>
      <anchor>35551f1181f43aa949ddd2e2a26156ba</anchor>
      <arglist>(const char *dumpFile)</arglist>
    </member>
    <member kind="function">
      <name>DisableCrashMinidumps</name>
      <anchor>32b9e89d40209d95d2f2eb686c4bd218</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>EnableCrashMinidumps</name>
      <anchor>037b2b97cfdfe2fa8888a31e161f9f71</anchor>
      <arglist>(FnCrashMinidumpHandler handler=0)</arglist>
    </member>
    <member kind="function">
      <name>SetCrashMinidumpObjectReg</name>
      <anchor>ff92edf02ad60ad2670bc978c1e00642</anchor>
      <arglist>(iObjectRegistry *object_reg)</arglist>
    </member>
    <member kind="function">
      <name>WriteMinidump</name>
      <anchor>011e700be720efa91ff75339c34d67cf</anchor>
      <arglist>(PMINIDUMP_EXCEPTION_INFORMATION except=0, bool dumpHeap=false)</arglist>
    </member>
    <member kind="function">
      <name>WriteWrappedMinidump</name>
      <anchor>5dc685efa45987e37fe270cdb6d6dbb7</anchor>
      <arglist>(iObjectRegistry *object_reg=0, PMINIDUMP_EXCEPTION_INFORMATION except=0, bool dumpHeap=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csXRotMatrix3</name>
    <base>csMatrix3</base>
    <filename>classcsXRotMatrix3.html</filename>
    <member kind="function">
      <name>csXRotMatrix3</name>
      <anchor>f033eb7d179bc46a5f566f234a45c2d9</anchor>
      <arglist>(float angle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csXScaleMatrix3</name>
    <base>csMatrix3</base>
    <filename>classcsXScaleMatrix3.html</filename>
    <member kind="function">
      <name>csXScaleMatrix3</name>
      <anchor>b0dd071cac694f5760ece07974ad283a</anchor>
      <arglist>(float scaler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csYRotMatrix3</name>
    <base>csMatrix3</base>
    <filename>classcsYRotMatrix3.html</filename>
    <member kind="function">
      <name>csYRotMatrix3</name>
      <anchor>765b63f20ab51766a1b79150c9c40a50</anchor>
      <arglist>(float angle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csYScaleMatrix3</name>
    <base>csMatrix3</base>
    <filename>classcsYScaleMatrix3.html</filename>
    <member kind="function">
      <name>csYScaleMatrix3</name>
      <anchor>e461ae74854241aa270aae22f09428c6</anchor>
      <arglist>(float scaler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csZRotMatrix3</name>
    <base>csMatrix3</base>
    <filename>classcsZRotMatrix3.html</filename>
    <member kind="function">
      <name>csZRotMatrix3</name>
      <anchor>ccd3335b6c57c7b48b3156dbc99df34b</anchor>
      <arglist>(float angle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csZScaleMatrix3</name>
    <base>csMatrix3</base>
    <filename>classcsZScaleMatrix3.html</filename>
    <member kind="function">
      <name>csZScaleMatrix3</name>
      <anchor>21203eff67eaabd5154fdcbeed0d18ad</anchor>
      <arglist>(float scaler)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectDetection</name>
    <filename>classDirectDetection.html</filename>
    <member kind="function">
      <name>object_reg</name>
      <anchor>711307642480c3cd58665d799d7a1473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Devices</name>
      <anchor>1db002be301c77414f297c66dd4f886c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DirectDetectionDevice</name>
    <filename>classDirectDetectionDevice.html</filename>
    <member kind="function">
      <name>DirectDetectionDevice</name>
      <anchor>0ba98c6b7a68f16ff4e6d8e6192ec24b</anchor>
      <arglist>(const DirectDetectionDevice &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>DirectDetectionDevice</name>
      <anchor>8dabaa73e31a1fb9618345d6e392da2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~DirectDetectionDevice</name>
      <anchor>45075d9130f48b90484f2cba77b20207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeviceDescription2D</name>
      <anchor>234a0c9287d318e1a9f492a26495a516</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DeviceName2D</name>
      <anchor>1e8fe5c4a00de4a4215b1a76ebdd3830</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Guid2D</name>
      <anchor>229f6658bb41f442e4ebff6a5212e73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IsPrimary2D</name>
      <anchor>3f619e2c262e094eca28a97838334dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Windowed</name>
      <anchor>f1bee2cbec3b95e16ee09cdc11fb85b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameBegin3DDraw</name>
    <base>scfImplementation1&lt; FrameBegin3DDraw</base>
    <base> iEventHandler &gt;</base>
    <filename>classFrameBegin3DDraw.html</filename>
    <member kind="function">
      <name>engine</name>
      <anchor>c8c7a2c63004879fe438815be2b0cb40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>g3d</name>
      <anchor>d8e55afd22540ac993ac513cc6cb7978</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object_reg</name>
      <anchor>e106df3a366de940348497e021724010</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>view</name>
      <anchor>fcc39e21c2203dc0baf6f747ab933853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>e5f8becceec3962f5ea8bc98dec1e3af</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FramePrinter</name>
    <base>scfImplementation1&lt; FramePrinter</base>
    <base> iEventHandler &gt;</base>
    <filename>classFramePrinter.html</filename>
    <member kind="function">
      <name>g3d</name>
      <anchor>1ef73992694a85c089d867af852b21cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>364dc046123282715a47f816256cff12</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameSignpost_2DConsole</name>
    <base>scfImplementation2&lt; FrameSignpost_2DConsole</base>
    <base> iFrameEventSignpost</base>
    <base> scfFakeInterface&lt; iEventHandler &gt; &gt;</base>
    <filename>classFrameSignpost__2DConsole.html</filename>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>fe718dca5a3e80cac0e0cf111270428b</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>2c597389689fab7aa501afb9115e6470</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;r1, csRef&lt; iEventNameRegistry &gt; &amp;r2, csEventID e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameSignpost_3D2D</name>
    <base>scfImplementation2&lt; FrameSignpost_3D2D</base>
    <base> iFrameEventSignpost</base>
    <base> scfFakeInterface&lt; iEventHandler &gt; &gt;</base>
    <filename>classFrameSignpost__3D2D.html</filename>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>8a22956ef5032d5fb990c0e61006b071</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>f380cf7beefa1220dce8bc467dcfbdd9</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;r1, csRef&lt; iEventNameRegistry &gt; &amp;r2, csEventID e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameSignpost_ConsoleDebug</name>
    <base>scfImplementation2&lt; FrameSignpost_ConsoleDebug</base>
    <base> iFrameEventSignpost</base>
    <base> scfFakeInterface&lt; iEventHandler &gt; &gt;</base>
    <filename>classFrameSignpost__ConsoleDebug.html</filename>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>37e653560992517d3fa2148b5a0b5f62</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>4aab22de5446c98dd0f26ce0cab9fe15</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;r1, csRef&lt; iEventNameRegistry &gt; &amp;r2, csEventID e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameSignpost_DebugFrame</name>
    <base>scfImplementation2&lt; FrameSignpost_DebugFrame</base>
    <base> iFrameEventSignpost</base>
    <base> scfFakeInterface&lt; iEventHandler &gt; &gt;</base>
    <filename>classFrameSignpost__DebugFrame.html</filename>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>2643502a7fb975f8b3bc41fba8d538ee</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>0a24e61c926fa6e3ee5d7edd460aaa36</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;r1, csRef&lt; iEventNameRegistry &gt; &amp;r2, csEventID e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FrameSignpost_Logic3D</name>
    <base>scfImplementation2&lt; FrameSignpost_Logic3D</base>
    <base> iFrameEventSignpost</base>
    <base> scfFakeInterface&lt; iEventHandler &gt; &gt;</base>
    <filename>classFrameSignpost__Logic3D.html</filename>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>90091ebc74fa707f839fa63b4f3a336b</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const </arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>53627e3486675626f766612aa0bab6fb</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;r1, csRef&lt; iEventNameRegistry &gt; &amp;r2, csEventID e) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfArray</name>
    <base>scfImplementation1&lt; scfArray&lt; IF</base>
    <base> Backend &gt;</base>
    <base> IF &gt;</base>
    <filename>classscfArray.html</filename>
    <member kind="function">
      <name>scfArray</name>
      <anchor>g66a9edf87e5dc48cc0bda5c87ac28c9e</anchor>
      <arglist>(iBase *scfParent)</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>ca79ac947c24809b054483aca2bc9c2c</anchor>
      <arglist>(ContainedType const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>073b73b8c5a8409ccb1c85c330b709e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteFast</name>
      <anchor>9bc8724f37504c7d08cb10db845af7ae</anchor>
      <arglist>(ContainedType const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>9245d8c6e46823fe181bc6b04b9241bb</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndexFast</name>
      <anchor>33ec7a32bfe3ffcd11408baf46445f77</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>0ab2fdb486e20709634c44a9e848bf54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetExtend</name>
      <anchor>b918ce788c526ba8458ca6ba2eb6cd28</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>db7333f4429792ef6d37b25491172ee6</anchor>
      <arglist>(size_t n, ContainedType const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>c0371cf4c8a5deb273438ace31358879</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>dadecf2b6233dfaba34dd1aa25225444</anchor>
      <arglist>(ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>PushSmart</name>
      <anchor>0b537a672b6fbc5651f6ae3c9fa1c4c8</anchor>
      <arglist>(ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>837c50a020483067923f4e5bbd0c5c04</anchor>
      <arglist>(size_t n, ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>b933782acffe65e47cabffa159436c3c</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>b3d39d5d767614249dcfbf2b053a8d7d</anchor>
      <arglist>(size_t n, ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>8d06b0784b513ba1753d9e91fff61774</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>30d6ebbdc58abcf5bcd69e1abcc277f3</anchor>
      <arglist>(ContainedType const &amp;which) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>4c669b90c9309a36ff836bfe09419838</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetAll</name>
      <anchor>8e65d43047882c1e9a68987b442003b3</anchor>
      <arglist>(ContainedType *dest) const </arglist>
    </member>
    <member kind="function">
      <name>GetIndex</name>
      <anchor>1605acdded4267f758121fbfe3551159</anchor>
      <arglist>(const ContainedType *which) const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>72ebd96666262385b29f2e52ccffe671</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>f3bbf67d69b58522550ce1bb213cf67a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>079775941f005d8868b490fae400624a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>631a1f13f6150f0c4cd5efd4ea252c10</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>ad468cf5991d50b503220300d16b79d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfArray</name>
      <anchor>9d09384c5cf6d3e55b6390906f85d067</anchor>
      <arglist>(const Backend &amp;storage, iBase *scfParent)</arglist>
    </member>
    <member kind="function">
      <name>scfArray</name>
      <anchor>bbf8e7b55dc33f5a68ffd6a5ec88a99e</anchor>
      <arglist>(const Backend &amp;storage)</arglist>
    </member>
    <member kind="function">
      <name>storage</name>
      <anchor>3610cde4e2cd8226570a758518492c7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfArrayWrap</name>
    <base>scfImplementation1&lt; scfArrayWrap&lt; IF</base>
    <base> Backend &gt;</base>
    <base> IF &gt;</base>
    <filename>classscfArrayWrap.html</filename>
    <member kind="function">
      <name>Delete</name>
      <anchor>abceb4332d197a12a014622b4f846254</anchor>
      <arglist>(ContainedType const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>37bf4990d808243927f3920dd8b9af83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteFast</name>
      <anchor>7c6e7e0440af01a8b8a5de9699f9c736</anchor>
      <arglist>(ContainedType const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>1521a06776990348c98a0172e415ff37</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndexFast</name>
      <anchor>0f4580d8fea89e68b0545e285d13b0d8</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>fead12cb73c96da85815016da16b470b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetExtend</name>
      <anchor>da22c63ff36556d6ab2f786af22970b8</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>b0a26dff65159a158b4ad2e8ccf724aa</anchor>
      <arglist>(size_t n, ContainedType const &amp;item)</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>ae35c60996bbb25baf2a0a1fb52dcd16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>0dd9e39078561165ded0b5747412ebbb</anchor>
      <arglist>(ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>PushSmart</name>
      <anchor>6e2018ee30157dd0e7705f47c7cdc7fd</anchor>
      <arglist>(ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>92ef34b1e9ef25e60b8b688bbbf5889a</anchor>
      <arglist>(size_t n, ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>659a140ed9f729c9acf417869ba0e0b9</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>840a5566abd5a4cfb8ce5e39db2273d0</anchor>
      <arglist>(size_t n, ContainedType const &amp;what)</arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>3bf0ba0d506ac6d2b258040b7cfb582e</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>9e0d2931117921d85a5afa395cc5cbf4</anchor>
      <arglist>(ContainedType const &amp;which) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>0eee4e7add92ae394313d10644abd41b</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetAll</name>
      <anchor>564a848ab22df64ef8c3015d16ae0ebe</anchor>
      <arglist>(ContainedType *dest) const </arglist>
    </member>
    <member kind="function">
      <name>GetIndex</name>
      <anchor>73b645541d179c72cabecac1424e5b65</anchor>
      <arglist>(const ContainedType *which) const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>5c817c4af9ef5002692adaedccd6f8f0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>29dc0e436d764a2e695058ce4cbb567d</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>f20a7b45b9baaa8adbc2afb0d8b83930</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>68c65fa115cf99456438c0a97e4801a1</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>13605eee5e92d2eaebb26e8cc4377597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfArrayWrap</name>
      <anchor>e276c30e44aaf354bc335b4a52aed1be</anchor>
      <arglist>(Backend &amp;storage, iBase *scfParent)</arglist>
    </member>
    <member kind="function">
      <name>scfArrayWrap</name>
      <anchor>8ad0cdd8cb853c7ac87240a245243bed</anchor>
      <arglist>(Backend &amp;storage)</arglist>
    </member>
    <member kind="function">
      <name>storage</name>
      <anchor>110c6ca27ef37f3afb52990307f18ddf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfArrayWrapConst</name>
    <base>scfImplementation1&lt; scfArrayWrapConst&lt; IF</base>
    <base> Backend &gt;</base>
    <base> IF &gt;</base>
    <filename>classscfArrayWrapConst.html</filename>
    <member kind="function">
      <name>Find</name>
      <anchor>10c4a7a41da69c06ac04b1ff0c0b39ae</anchor>
      <arglist>(ContainedType const &amp;which) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>17b84a1a11b1060087d60cc2535ae76a</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetAll</name>
      <anchor>7926ce9a7f3993ad349daf4c90c16c84</anchor>
      <arglist>(ContainedType *dest) const </arglist>
    </member>
    <member kind="function">
      <name>GetIndex</name>
      <anchor>503dbea63bc44e44ccd9f71eb9f23c8e</anchor>
      <arglist>(const ContainedType *which) const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>d6b2721d5ca9c7ebacef571d83c96293</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>c2fb7c911bf5aa182e618a7c7b3d220f</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>d6306b2ff875b071fcce3f808f46e30c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>scfArrayWrapConst</name>
      <anchor>5d2e13a6a60f832c66c4dff88c5a8685</anchor>
      <arglist>(const Backend &amp;storage, iBase *scfParent)</arglist>
    </member>
    <member kind="function">
      <name>scfArrayWrapConst</name>
      <anchor>b177f29202652d46eac39df0787e2504</anchor>
      <arglist>(const Backend &amp;storage)</arglist>
    </member>
    <member kind="function">
      <name>storage</name>
      <anchor>948c67a9e84826fd6ad7e2eb6509b7f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfFakeInterface</name>
    <filename>classscfFakeInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>scfImplementation</name>
    <base>iBase</base>
    <filename>classscfImplementation.html</filename>
    <member kind="function">
      <name>~scfImplementation</name>
      <anchor>7d21b87815ee2e35dd3610977f5c493c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>WeakRefOwnerArray</name>
      <anchor>2a3f6af7e13b0a4d2782056a5b56cf1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfRemoveRefOwners</name>
      <anchor>b883da91edf750ac33b370e6c2979311</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>8769ab8ac6a7d157c536f9f7926082e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfParent</name>
      <anchor>fd66881aa3adfbdb3d837fa522ecf825</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfRefCount</name>
      <anchor>ed31c70c9bd3e65a7ffa6ea04100a772</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfWeakRefOwners</name>
      <anchor>aaca3135ce771adc55c4352ea6486842</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation</name>
      <anchor>078155dc64d96b87a42f12356da2635f</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementation</name>
      <anchor>d7091a92d430d94708d260f693f07b99</anchor>
      <arglist>(const scfImplementation &amp;)</arglist>
    </member>
    <member kind="function">
      <name>AddRefOwner</name>
      <anchor>240bcf10a91bd4b235fabe701469dfdd</anchor>
      <arglist>(void **ref_owner)</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>9b996efbd8891c74a46f2c6705b56f89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetRefCount</name>
      <anchor>74a51a35cc3b3ab0f95ecc2765a256ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>821518e0247da63ba7c6e60fc98dce19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>1eef7188d9451bb5a491e731e1508f10</anchor>
      <arglist>(const scfImplementation &amp;)</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>39e24bafa13bc6e292887c25b9a40203</anchor>
      <arglist>(scfInterfaceID iInterfaceID, scfInterfaceVersion iVersion)</arglist>
    </member>
    <member kind="function">
      <name>RemoveRefOwner</name>
      <anchor>6b485c4c91700bbe65249d99ee43562f</anchor>
      <arglist>(void **ref_owner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation0</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation0.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>c1d9b3559b3efc1939d1c08ba62d2c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>e3f30c92b05cb06a4b6b60fe870b5763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation0</name>
      <anchor>44003b9c72cffd864c8fb9ba08e2656b</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation0</name>
      <anchor>11e82e0f9d65197348ddcd701a9fd723</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>874c0b98d6e12a6710bf57a8c4c36c89</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation1</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation1.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>65600c1d9994633f3aa9b7e8fdb83df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>63879ddaac0f9fb6987da279e4f1b3c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation1</name>
      <anchor>111b1726bb9364379d0e5d0044c884b5</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation1</name>
      <anchor>b424618270ed78eae0deb66711164ffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>57c8afe96ab774365da99dd7c6aa00f1</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation2</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation2.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>cd248e76f4f38539064177edb0e3de8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>906f6daf91b8a2cf8d3f34727a0b0dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation2</name>
      <anchor>c18345bb5314886076aea2712e0bc9fb</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation2</name>
      <anchor>25c630b06d76a21169ed39decfe1b3fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>2b21cc2fd687a92276be0c4e86c13206</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation3</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation3.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>374875a07a4cdcb11ddb60a9038393f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>38d7a85f6d90a694dd5c45b0cd4add51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation3</name>
      <anchor>a8e17699cc0c3f99e3550c74315dc127</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation3</name>
      <anchor>63334c8336aeed294f412967ca888d8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>d4560cb4ae4256b92008fb2c0d2b19f5</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation4</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation4.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>9eab4fff7bc27529a9bf27343e30ab9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>f0ac19982b3ca5792a0cc81ba1bcf2ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation4</name>
      <anchor>f0a93c57a12d119582ad877605bd40a8</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation4</name>
      <anchor>706014fbec061cdf47c480a91bbabd66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>58706639323b202de7e6aa73e96fe785</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation5</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation5.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>c4aac3ee432635e7a1a5d186a91b1c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>0b589ee9cc81a70391fd44dfc6330401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation5</name>
      <anchor>4917d11bd9e2ff4639b1ee88265a1a07</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation5</name>
      <anchor>86ed43b03ef296f90d5ed3c79669f640</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>ae0e9c4d62c3318d2688a1d1a4e68d90</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation6</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation6.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>3b4ac592226d7f36ec85f099c4e552cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>cc65a54afece37b05745ca021d533fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation6</name>
      <anchor>cbff234f2803c744e3c30d8b2f1616f4</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation6</name>
      <anchor>5b86ea4c52754180ea12bdd2c97903f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>70dc7b983f97cd16f75341295bc67502</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementation7</name>
    <base>scfImplementation</base>
    <filename>classscfImplementation7.html</filename>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>062b8e67a699d968284c4dde7cfa1d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>47d52da72e248cdd7c1a1f7ec499f2c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementation7</name>
      <anchor>fc953c90d000d63a2210d9015fc577c1</anchor>
      <arglist>(Class *object, iBase *parent=0)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementation7</name>
      <anchor>de5672581e3ae41263b56b6a79943a70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>8677a45339f1a540b1f012291b53caa4</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt0</name>
    <filename>classscfImplementationExt0.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>24f19aaaba7091d8dd375c9b7151aabb</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>f6c6c51d7c69acedec9bbf17fc9a97a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>09d8153de29be0a875b524d1814bb6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>ec22e2f7ed134169e131de40e1fb0668</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>3c22955d1818684104b2a7c4639e21e5</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>e83d1c16829af9cde708d79b8ba14fa1</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>04f43e56bde49b0382bef87790d3c290</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>dee0744b47258ff943413c65e7593679</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>a606137f1ac787a84ec849d44b4e36ad</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt0</name>
      <anchor>cf7187368a0d486e67bdee853d0cc08d</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt0</name>
      <anchor>96860739b5fc506bb22c73b9232ba717</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>be8648b69c0b5df539b8d0dfa6f79ab5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt1</name>
    <filename>classscfImplementationExt1.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>e10d3950a8ffe65686d8e8f248e38d75</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>35f88aa535ae5e0a5268df31ae31c011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>876ff3cf8dbaa40af95b440ce2bc5109</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>587b6d4619e9a49caa3535d4a5f8f098</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>1ea5daf31ce121aee1841449ac463155</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>6507e9f410d20dd6cb229ceafd8c8b96</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>7efc54cfe52a2f540996eae2a0991af3</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>1855f05254b390206d8a379b9e6abb65</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>84f94e6bfd0c366d02200cdb40d86535</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt1</name>
      <anchor>87d355f3c2f9cc62d2e3ed6394287456</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt1</name>
      <anchor>2098fdaac28d918e25528c048f99c47f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>b109191a8e7915a25e3db912fb1496df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt2</name>
    <filename>classscfImplementationExt2.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>f6d80183c3286c6f7d2b045fd4262d86</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>4bf61f6ff167a9638a0b85f136d14990</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>e9aae8afc17da99230975605645dead4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>813517cdaa495f2f681ad7a2273c7bbb</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>e86456aaf253706ae3c523af6a0fad45</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>91e4aa083b888362c3563f4e72575be1</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>f6e7a852798c1d249488c08c93df6973</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>2738863426bad7e94304adcaaac56581</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>f1b6485ec0ce99770cddcd27c22ffc14</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt2</name>
      <anchor>6993b263b74f3cebaac64d0114c4a3f8</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt2</name>
      <anchor>13b4d6c8706debf74806d8d8703a3456</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>2cf0ed2788167cbdba0a2da492fa01ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt3</name>
    <filename>classscfImplementationExt3.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>b3c8864f3bae7e180ea515712a2811c1</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>e76a60f780f1852da1486b5693640f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>deff327d01585dcfe39ded6343545d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>d4e399c9ac1fd9ab3a65aef534812f30</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>bec82b9a7e74796520539875c8e27de9</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>a80be1f9bbf1ecec665db85da2496428</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>028ecdad690dd6f5c2d5137f0d597922</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>0faf22e24b1dadfd525556d96f7ebc11</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>963a8714ea2b8966ef07a244ff16ffe2</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt3</name>
      <anchor>17e8fcfb393b625fdb064f61cffb09e5</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt3</name>
      <anchor>53f9ad452638c136227db3ab20fb4ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>ad419c75c545beaf2df9ce4163df6027</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt4</name>
    <filename>classscfImplementationExt4.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>c8efe97818792a2f740f220a531f4f0e</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>98b165f4856bfdb73b61c73417122a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>35defc335e413ce8fd3a92d5cffbfd1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>8e3ed9f44f6d6825e592951b6c8cefbb</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>5c1424e108b9a5e885873124c1fc0aa2</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>3a0b0382130d3bac703dd77d248140fb</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>01c51f88843092fa6f616a0274a11218</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>9302795e3469dde389aadd96a1879ddf</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>b24301d4fdf331df24e3b8eaf9b04945</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt4</name>
      <anchor>e35048e8e205a64183254543da338753</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt4</name>
      <anchor>10ca90639dc4ec44ef491b7daa46b8af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>2e6349be00b92a6d2e8a3690e3fad2f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt5</name>
    <filename>classscfImplementationExt5.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>6ec574456e9122fa60874e3de94a8788</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>9ef2367a30fbda2d8380efb32db8fdb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>85c7ce6961a5deb73516c3b11f34081f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>91f638c7c2d5ad3093d29922d3a0b19c</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>180232165ac28b191ed9bcdf9b58f2bc</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>94238f93ebab0f23280ed5be068e2433</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>8d5f1dc81f8582332ec944f097daccab</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>34fe013a9e6aaee5776477259d35534e</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>de79d8eff92be0c4edf61766f33197ba</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt5</name>
      <anchor>6cb25a0122570f3bae4e1e51a802da1d</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt5</name>
      <anchor>66f95ec7e4358e9dcda0f82ea3bb4174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>ec92926f0561671c7fc1e569f50886d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt6</name>
    <filename>classscfImplementationExt6.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>2fb59512a163ac463ec3af29e56d63bd</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>12a1054f77472e6a6224d5acfe20162b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>c5237febb9195cb2aade440b620afdf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>2886f11b7a412fc6f17636d28972d031</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>de125c36752aa4ff3b3597ab8aedfef3</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>50cd6d377536f4db3c115cdfd1cd4499</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>69139bc6337161f3c7c52822e9e96296</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>61893dd06a3543d4968de586205ac9d8</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>5dbdeddc46d0486156a68d8f59a4fd65</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt6</name>
      <anchor>93012a8ab9a1470c1a8ff3cb4368d2cf</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt6</name>
      <anchor>82420cceb78437616bc8e22410900726</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>d29180f9c94cffa8e9e25e60ed014854</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationExt7</name>
    <filename>classscfImplementationExt7.html</filename>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>351fe944c5e2adc15c67d83d5063ef4b</anchor>
      <arglist>(scfInterfaceID id, scfInterfaceVersion version)</arglist>
    </member>
    <member kind="function">
      <name>scfClassType</name>
      <anchor>d5883c85fb7948810eaeb1e75e84d673</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationType</name>
      <anchor>4507b54cde0ff94cb3373ce056437c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>e6df9fdad68c3b381420cd9650f5edc9</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5, T6 t6)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>9885b861fde183d6033d7f67c96cf7ce</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4, T5 t5)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>0901bf80bf30c5c4b12373fe65efbca5</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3, T4 t4)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>8738f495de67a523364e7b1ca16c60e5</anchor>
      <arglist>(Class *object, T1 t1, T2 t2, T3 t3)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>48cd9be802feda7b82c4857bbf1785a0</anchor>
      <arglist>(Class *object, T1 t1, T2 t2)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>0f41383a0414d68a640c762e3d77d051</anchor>
      <arglist>(Class *object, T1 t1)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationExt7</name>
      <anchor>c47dc077c2b92477d37e944695dc9e31</anchor>
      <arglist>(Class *object)</arglist>
    </member>
    <member kind="function">
      <name>~scfImplementationExt7</name>
      <anchor>455c414f524d23288f240d7d36776dbe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfObject</name>
      <anchor>b58a00e44cf31ba86341b239fc54ba40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationPooled</name>
    <filename>classscfImplementationPooled.html</filename>
    <member kind="function">
      <name>scfPooledImplementationType</name>
      <anchor>f2f5ab662528f83c3e471abfd2e136d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>bab605517d3c1487924e4f8784f9a61f</anchor>
      <arglist>(void *instance)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationPooled</name>
      <anchor>c7be4eb466d47c022be89ca3b291ec5d</anchor>
      <arglist>(scfClassType *object, A a, B b, C c, D d, E e)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationPooled</name>
      <anchor>2e606396f66b73f2f5f9800a38708308</anchor>
      <arglist>(scfClassType *object, A a, B b, C c, D d)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationPooled</name>
      <anchor>bedfdac55eda1c11e830afb9cf543a52</anchor>
      <arglist>(scfClassType *object, A a, B b, C c)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationPooled</name>
      <anchor>cefe9aad547258a0185b0c4596ed0bad</anchor>
      <arglist>(scfClassType *object, A a, B b)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationPooled</name>
      <anchor>df45c05faa6d16e10928d84b4d8925af</anchor>
      <arglist>(scfClassType *object, A a)</arglist>
    </member>
    <member kind="function">
      <name>scfImplementationPooled</name>
      <anchor>def293aa1a41eccbd09e0f54322c7d7c</anchor>
      <arglist>(scfClassType *object)</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>190eb4c5f30cf89f24c49a0e881ef30d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>afdea77682092c363fbf4ba793ad0388</anchor>
      <arglist>(void *instance, Pool &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>operator new</name>
      <anchor>c24385e59ba780384c9cdf4ff46e85f3</anchor>
      <arglist>(size_t n, Pool &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>scfPool</name>
      <anchor>3bab04c238b73519ffa2643633ef6887</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfImplementationPooled::Pool</name>
    <filename>classscfImplementationPooled_1_1Pool.html</filename>
    <member kind="function">
      <name>Pool::Pool</name>
      <anchor>285225a9a2e893577732ee08cc0171df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Pool::~Pool</name>
      <anchor>f15b8be2dacae89088850fe3fbbd86ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Pool::scfImplementationPooled&lt; Super &gt;</name>
      <anchor>f1dbd04f3365819f3fb43d31ad5b3751</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfInterfaceTraits</name>
    <filename>classscfInterfaceTraits.html</filename>
    <member kind="function">
      <name>InterfaceType</name>
      <anchor>153dfb1318197b174bff509dce7949d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>7324e46f774fb28f5f65826d48916d19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>a9e7ab83ea055afd26caedec3688a86b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetVersion</name>
      <anchor>b8a0be87ff0ff5abb35471c8aa3c9b9f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfString</name>
    <base>scfImplementation1&lt; scfString</base>
    <base> iString &gt;</base>
    <filename>classscfString.html</filename>
    <member kind="function">
      <name>scfString</name>
      <anchor>fa5a85fdd83279fe7fa73ef30d8a57b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>scfString</name>
      <anchor>e6463fd9f747355d0ace7b329a992c84</anchor>
      <arglist>(size_t iLength)</arglist>
    </member>
    <member kind="function">
      <name>scfString</name>
      <anchor>16a10f5477b78874f2bbaccdd0d78e35</anchor>
      <arglist>(const iString &amp;copy)</arglist>
    </member>
    <member kind="function">
      <name>scfString</name>
      <anchor>0a52b9a714380dadf4676823b8ddaa10</anchor>
      <arglist>(const char *copy)</arglist>
    </member>
    <member kind="function">
      <name>~scfString</name>
      <anchor>26bbc5cf03859253969ca96d741701b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>5c5eab980bb73ee8d9696b60c9cf4239</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>99bbc49036f7193b7ce9679c59571326</anchor>
      <arglist>(iString const *iStr, size_t iCount=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>459dcef41bf64aa86dac0052b7359928</anchor>
      <arglist>(const char *iStr, size_t iCount=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>c91dbdb12d4869daf2fface71ff0c23b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>2d626845df3f9f7f37166d1d311ef608</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Compare</name>
      <anchor>2caecf46a7c2372da2154e79ad7efe9e</anchor>
      <arglist>(const iString *iStr) const </arglist>
    </member>
    <member kind="function">
      <name>CompareNoCase</name>
      <anchor>9889e8730d8ae0c8db933c04423ac2b9</anchor>
      <arglist>(const iString *iStr) const </arglist>
    </member>
    <member kind="function">
      <name>Downcase</name>
      <anchor>43c4fc9f1dd792f392cd88536f8a18c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>9a02c06383aa14c43f02a39ea4e68e19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>4d5e5be27e4bf490ad7afa4d962c2426</anchor>
      <arglist>(const char *search, size_t pos=0) const </arglist>
    </member>
    <member kind="function">
      <name>FindFirst</name>
      <anchor>65ac51984d803de00d45dd727e970091</anchor>
      <arglist>(const char c, size_t p=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>FindLast</name>
      <anchor>62a1fe655464bd67791cd4e0488ee827</anchor>
      <arglist>(const char c, size_t p=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>47c2ffde4b3f31a992f3146030ed7474</anchor>
      <arglist>(const char *format,...)</arglist>
    </member>
    <member kind="function">
      <name>FormatV</name>
      <anchor>ac3c222a0ab40564eed8a8587c9f424a</anchor>
      <arglist>(const char *format, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>GetAt</name>
      <anchor>d113d0b8310e1232456197d99fb01261</anchor>
      <arglist>(size_t iPos) const </arglist>
    </member>
    <member kind="function">
      <name>GetCapacity</name>
      <anchor>1e99cee71e8b36f8c696df1b9b5a086e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetCsString</name>
      <anchor>75fd36838ac5e928483e268bd5ecab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetCsString</name>
      <anchor>7aa9826d1ac3e74f87e8cd70710c46a5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>f670e53439317fb6027396e57d101184</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>0ba66aab0f04cb0c70e2c07e4f937391</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetGrowsBy</name>
      <anchor>ff3469e844327d8bc5924757c88be31b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>210e648b6747dfed3145798d557800a8</anchor>
      <arglist>(size_t iPos, iString const *iStr)</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>8e906b40364fc2825794a4827f95a0eb</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>65466dbb6a4a68f04d2f8e7795647a43</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator char const *</name>
      <anchor>8d19c6ffbf1d8e67c29915b7500de3d5</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>352169022f679dafe6e54189dc53ad62</anchor>
      <arglist>(const iString &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>8293cabf47ebe64969adcc8e28b3baa0</anchor>
      <arglist>(const iString &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>d994f3293462ff9b7b5d5b3999e51ae9</anchor>
      <arglist>(char c)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>18254b14ebc1260f0506e4ec3baf03e7</anchor>
      <arglist>(const char *iStr)</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>ab901ad95d934fa6415979df0c02a482</anchor>
      <arglist>(const iString &amp;iStr)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>2dd4b2b62498a9c25938e32d83f40dbe</anchor>
      <arglist>(const iString &amp;iStr) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>3a3ed5ce1549f576f483b76645455526</anchor>
      <arglist>(size_t iPos) const </arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>976bd1355e1a54f5ea5d98e6e5e9ea2e</anchor>
      <arglist>(size_t iPos)</arglist>
    </member>
    <member kind="function">
      <name>Overwrite</name>
      <anchor>beba2c238d015cb519c118b74ce221c6</anchor>
      <arglist>(size_t iPos, iString const *iStr)</arglist>
    </member>
    <member kind="function">
      <name>Reclaim</name>
      <anchor>bf8e24155cb599b391bacd19d453d59f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>d7204950a0e9e328105f9b70dfb8b3c1</anchor>
      <arglist>(const char *iStr, size_t iCount=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>651aa843bff5f018493a7e3d9a84434a</anchor>
      <arglist>(const iString *iStr, size_t iCount=(size_t)-1)</arglist>
    </member>
    <member kind="function">
      <name>ReplaceAll</name>
      <anchor>9e139c366269edec3dd2d088b582f472</anchor>
      <arglist>(const char *search, const char *replacement)</arglist>
    </member>
    <member kind="function">
      <name>ReverseSlice</name>
      <anchor>47aeec8534e628eef397aa42d7ad37a5</anchor>
      <arglist>(size_t start, size_t len=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>ReverseSubString</name>
      <anchor>8d485fd70c0413952494bcd7c8838c20</anchor>
      <arglist>(iString *sub, size_t start=0, size_t len=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>SetAt</name>
      <anchor>a7809d4437eff55048a8a089403200f2</anchor>
      <arglist>(size_t iPos, char iChar)</arglist>
    </member>
    <member kind="function">
      <name>SetCapacity</name>
      <anchor>22b96d8885bec50bd840b3bbdb566c77</anchor>
      <arglist>(size_t NewSize)</arglist>
    </member>
    <member kind="function">
      <name>SetGrowsBy</name>
      <anchor>9936edb127e1337479f1c0964dcfde26</anchor>
      <arglist>(size_t)</arglist>
    </member>
    <member kind="function">
      <name>ShrinkBestFit</name>
      <anchor>06dd0f7981dbecc62349a07e9951997f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Slice</name>
      <anchor>ce178ed10088a3286089ea5e36536684</anchor>
      <arglist>(size_t start=0, size_t len=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>SubString</name>
      <anchor>cd8e0da5c850f1667fe9986c8cc2b571</anchor>
      <arglist>(iString *sub, size_t start, size_t len=(size_t)-1) const </arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>c76dc3eee72f40cf9b72fc446fd316d2</anchor>
      <arglist>(size_t iPos)</arglist>
    </member>
    <member kind="function">
      <name>Upcase</name>
      <anchor>7c2783be018aa5947017619ae109bd7a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfStringArray</name>
    <base>scfImplementation1&lt; scfStringArray</base>
    <base> iStringArray &gt;</base>
    <filename>classscfStringArray.html</filename>
    <member kind="function">
      <name>scfStringArray</name>
      <anchor>7d134bf0b4c28f77d23ed415525a1ba5</anchor>
      <arglist>(int limit=16, int delta=16)</arglist>
    </member>
    <member kind="function">
      <name>~scfStringArray</name>
      <anchor>66d1087f23b229406b60ee6b438f879f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>98b5c5e6327f8912ade8624a17e0c7c3</anchor>
      <arglist>(const char *str, bool case_sensitive=true) const </arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>cf2af2abadb57e25e26dfa85906e5d0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>a4e489ec1cce5bf6ffe063caa4f02ecd</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>ffc576367c3b02a7df273632c097c1c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>17a1300ee30f82291ce4503b30f9b582</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <name>FindCaseInsensitive</name>
      <anchor>61d3f920a20538eff0591d012d348040</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <name>FindSortedKey</name>
      <anchor>930deb9c7bb378104c326498589d9447</anchor>
      <arglist>(const char *value) const </arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>1cecb0cdce1491e25f05196b8f9d25f0</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>4ae1b4214e8b22c71d24fca965ee1969</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>c6f085440cffaee49b2cb79e6b40fa70</anchor>
      <arglist>(size_t n, char const *value)</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>9611f532c3ac75c2e460ae9253f35e29</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>777146a7b59384c2143a13d1fe86dd61</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>bc404ef75ee8872f66eb6501bf5ddf4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>448d86dd33e51449b5a8222aaa5559cc</anchor>
      <arglist>(char const *value)</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>9d9152ddf058d6cb254f4cf72db6dd68</anchor>
      <arglist>(bool case_sensitive=true)</arglist>
    </member>
    <member kind="function">
      <name>THREADED_LOADING</name>
      <anchor>g2052922789b45ef9cbecb3960ab75416</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_COMPILE_ASSERT</name>
      <anchor>aa07aa55c3426e804db26e5e879102ea</anchor>
      <arglist>(B)</arglist>
    </member>
    <member kind="function">
      <name>CS_DO_JOIN</name>
      <anchor>f34218c0cae51fe8b038fa5dd09efab2</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_DO_JOIN2</name>
      <anchor>2b534f75b6463ac9daa4d5da9819768f</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_JOIN</name>
      <anchor>eee0ea638f7b25d9b545037f6ef87a4e</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>@76</name>
      <anchor>79e9f285d34216706a748fd7ba8941b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SOUND_ELEMENT_MAX_CHANNELS</name>
      <anchor>3753a3357de67633466955d89dc78aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SOUND_INTERNAL_FREQUENCY_DIVISOR</name>
      <anchor>1e4762f59d72a6cf34ce725c5adc9c93</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>crystalspace.h</name>
    <filename>crystalspace_8h.html</filename>
    <member kind="function">
      <name>_CSBASEEVENT_MAXARRAYINDEX</name>
      <anchor>g487643362c7d0b7f28b441480bd2495a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>3c40aa3d0784f8bf39a80b2b89d4a339</anchor>
      <arglist>(float f, const csColor4 &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>888e62de0c007ced8e7be19b25971043</anchor>
      <arglist>(const csColor4 &amp;s, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>e11a8dd2047b41a3f192821162e44c7c</anchor>
      <arglist>(const csColor4 &amp;v1, const csColor4 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>82caddc4371c98306c07f0be90317a1d</anchor>
      <arglist>(float f, const csColor &amp;s)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>0ea2521eed4493c04620d2b4873f9a07</anchor>
      <arglist>(const csColor &amp;s, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>c99c344a2408f1e1928b247db5d64365</anchor>
      <arglist>(const csColor &amp;v1, const csColor &amp;v2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>d68d66f341f4072ac5ec609287514c48</anchor>
      <arglist>(const csColor4 &amp;s1, const csColor4 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>4152cd06665dffa1b7bded50af1bbe34</anchor>
      <arglist>(const csColor &amp;s1, const csColor &amp;s2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>d095999a9f16e965e1e0f5dcc5dc6f05</anchor>
      <arglist>(const csColor4 &amp;s1, const csColor4 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <name>operator-</name>
      <anchor>55e738db674cbea902cb06597df8dacf</anchor>
      <arglist>(const csColor &amp;s1, const csColor &amp;s2)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>272b0e32b5c29c0489ab7eaad9fde14e</anchor>
      <arglist>(const csColor4 &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>operator/</name>
      <anchor>a9b4d9b2f7603a763b65c580bf00eaad</anchor>
      <arglist>(const csColor &amp;v, float f)</arglist>
    </member>
    <member kind="function">
      <name>csQroundSure</name>
      <anchor>g20ad6ed7b2fc5754d8696f8d4eeebb90</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_CSEVENT_ADDUINT</name>
      <anchor>2f085db7cfa6fb05c9529081945b09c4</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="function">
      <name>CS_CSEVENT_FINDUINT</name>
      <anchor>487c84571f4a55a8bc6b411ee422d1cf</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <name>CS_CSEVENT_ADDINT</name>
      <anchor>9f1de86eec14af4b809265d414fe6ac3</anchor>
      <arglist>(type)</arglist>
    </member>
    <member kind="function">
      <name>CS_CSEVENT_FINDINT</name>
      <anchor>7b617507691f31082e526bc1e22cc484</anchor>
      <arglist>(T)</arglist>
    </member>
    <member kind="function">
      <name>csEventFlattenerError</name>
      <anchor>85bab57d6277aecb4be9b35ff34e0e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventFlattenerErrorNone</name>
      <anchor>85bab57d6277aecb4be9b35ff34e0e86f363219b56731ccfa4863af6bfaeedff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventFlattenerErroriBaseEncountered</name>
      <anchor>85bab57d6277aecb4be9b35ff34e0e86d6c4f9f7e794b7255141ffa29b994d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventFlattenerErrorAttributeRetrieval</name>
      <anchor>85bab57d6277aecb4be9b35ff34e0e86fac8e81656dbee30288a532001da2b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventFlattenerErrorWrongFormat</name>
      <anchor>85bab57d6277aecb4be9b35ff34e0e86d779c4fc3952db8c62eaf530136b8b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DEF_EVENT_QUEUE_LENGTH</name>
      <anchor>054ca799eab350a68e6008ee6a06678c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csfxBlueScreen</name>
      <anchor>fb3ed64150cab86b9c2c960c40a4756f</anchor>
      <arglist>(iGraphics3D *g3d, float fadevalue)</arglist>
    </member>
    <member kind="function">
      <name>csfxFadeOut</name>
      <anchor>d354a37d94f1aad5879decab2455f2ec</anchor>
      <arglist>(iGraphics3D *g3d, float fadevalue)</arglist>
    </member>
    <member kind="function">
      <name>csfxFadeTo</name>
      <anchor>70f41c1be0ebcdcf757e3b1489e0a1d0</anchor>
      <arglist>(iGraphics3D *g3d, iTextureHandle *tex, float fadevalue)</arglist>
    </member>
    <member kind="function">
      <name>csfxFadeToColor</name>
      <anchor>90969974397d8d84798928503217cb07</anchor>
      <arglist>(iGraphics3D *g3d, float fadevalue, const csColor &amp;color)</arglist>
    </member>
    <member kind="function">
      <name>csfxGreenScreen</name>
      <anchor>87dd634dbec7e6cc411788e894d3dfb4</anchor>
      <arglist>(iGraphics3D *g3d, float fadevalue)</arglist>
    </member>
    <member kind="function">
      <name>csfxInterference</name>
      <anchor>f0f8dc0c1cc21152115a95b9614cf5a4</anchor>
      <arglist>(iGraphics2D *g2d, float amount, float anim, float length)</arglist>
    </member>
    <member kind="function">
      <name>csfxRedScreen</name>
      <anchor>20cadd9e0961f3fb358318358de13256</anchor>
      <arglist>(iGraphics3D *g3d, float fadevalue)</arglist>
    </member>
    <member kind="function">
      <name>csfxScreenDPFX</name>
      <anchor>9ed86d6eb4d62ed55c011080f92ee915</anchor>
      <arglist>(iGraphics3D *g3d, iTextureHandle *tex, uint mixmode, float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <name>csfxScreenDPFXPartial</name>
      <anchor>38ac713d7295c3436418e5314b872c43</anchor>
      <arglist>(iGraphics3D *g3d, int x, int y, int w, int h, iTextureHandle *tex, uint mixmode, float r, float g, float b, float a)</arglist>
    </member>
    <member kind="function">
      <name>csfxShadeVert</name>
      <anchor>1ff9cc04469e6b2c4dae8dae174419f5</anchor>
      <arglist>(iGraphics3D *g3d, const csColor &amp;topcolor, const csColor &amp;bottomcolor, uint mixmode=CS_FX_COPY)</arglist>
    </member>
    <member kind="function">
      <name>csfxWhiteOut</name>
      <anchor>10880536e4c865b453fc5f532690142d</anchor>
      <arglist>(iGraphics3D *g3d, float fadevalue)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>csgeom.h</name>
    <filename>csgeom_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>csgfx.h</name>
    <filename>csgfx_8h.html</filename>
    <member kind="function">
      <name>csObjectContainer</name>
      <anchor>dd135d9dbae8ee650e6f620090d6be2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>csplugincommon.h</name>
    <filename>csplugincommon_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>csqint.h</name>
    <filename>csqint_8h.html</filename>
    <member kind="function">
      <name>csQint16</name>
      <anchor>90381bbf0cc10f7d8bedd1910c2f22bd</anchor>
      <arglist>(float n)</arglist>
    </member>
    <member kind="function">
      <name>csQint24</name>
      <anchor>3494d636dcc0e1fe4014ce4a9679d3f8</anchor>
      <arglist>(float n)</arglist>
    </member>
    <member kind="function">
      <name>csQint8</name>
      <anchor>688b8c7cf1118f38efde5f4ed9fb632f</anchor>
      <arglist>(float n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>csqsqrt.h</name>
    <filename>csqsqrt_8h.html</filename>
    <member kind="function">
      <name>csLibraryHandle</name>
      <anchor>ga025e6332743710b40f0fdbe0c90e80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStringFastDefault</name>
      <anchor>f6715753272ba078edc12216596ce980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>77d7b0d58725a1b3c5fd0adfebc23559</anchor>
      <arglist>(const csStringBase &amp;iStr1, const char *iStr2)</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>27aa0a1a5ae26e95eef4c460123fb0f5</anchor>
      <arglist>(const char *iStr1, const csStringBase &amp;iStr2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cssysdef.h</name>
    <filename>cssysdef_8h.html</filename>
    <member kind="function">
      <name>CS_NO_MALLOC_OVERRIDE</name>
      <anchor>f33ff364485ee085705994f639c54dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PLUGIN_NAMESPACE_BEGIN</name>
      <anchor>b792f98a2a2db53412f0d9269022a1a0</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>CS_PLUGIN_NAMESPACE_END</name>
      <anchor>35ca9298918766ab003f1b784b3b6e71</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>CS_PLUGIN_NAMESPACE_NAME</name>
      <anchor>7d9ba8bcac3618355f56ed893d6df8b1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>cs_calloc</name>
      <anchor>d3539be57344876574948a6ccaf8dc13</anchor>
      <arglist>(size_t n, size_t s)</arglist>
    </member>
    <member kind="function">
      <name>cs_free</name>
      <anchor>7af27c7b7c38c438787a3d2f4e5079c4</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>cs_malloc</name>
      <anchor>bcc451ff5f6451f8b8bcbe91c762bcf0</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>cs_realloc</name>
      <anchor>b95c8e1d42fe5f3f3014d8c43606b392</anchor>
      <arglist>(void *p, size_t n)</arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>9af82fae5d5d6faf4fe03145c64b68cf</anchor>
      <arglist>(void *p, const CS::AllocPlatform &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator delete[]</name>
      <anchor>750728221d2acca4d1988fe662500eb2</anchor>
      <arglist>(void *p, const CS::AllocPlatform &amp;)</arglist>
    </member>
    <member kind="function">
      <name>platform_calloc</name>
      <anchor>41b9288b9607aafe004ad569b966f56b</anchor>
      <arglist>(size_t n, size_t s)</arglist>
    </member>
    <member kind="function">
      <name>platform_free</name>
      <anchor>f232999cc62689305807a895d3f79123</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>platform_malloc</name>
      <anchor>d1ad984dfefdf6885ce1e3492086d1c6</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>platform_realloc</name>
      <anchor>6e295aac1935ee41c69670ab7caf6175</anchor>
      <arglist>(void *p, size_t n)</arglist>
    </member>
    <member kind="function">
      <name>ptcalloc</name>
      <anchor>ab20698eac0c79c861f601d013009221</anchor>
      <arglist>(size_t n, size_t s)</arglist>
    </member>
    <member kind="function">
      <name>ptfree</name>
      <anchor>557c37039eeaacd44f05f78404d43902</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>ptmalloc</name>
      <anchor>371d525e94f5a658540cf8778344ee82</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>ptrealloc</name>
      <anchor>54e1920d30e1364401de0db16455eba1</anchor>
      <arglist>(void *p, size_t n)</arglist>
    </member>
    <member kind="function">
      <name>__attribute__</name>
      <anchor>9d373a9b65ff25b2db84c07394e1c212</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>_CS_IMPLICITPTRCAST_NAME</name>
      <anchor>eadac43e70d3dae7b999d8a7b26690f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_DEFAULT_STATIC_VARIABLE_REGISTRATION</name>
      <anchor>7572dee0d7caa0e1bbe22827600d6f8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_STATIC_CLASSVAR_REF</name>
      <anchor>9480a5c49b1431433663ecec91b68321</anchor>
      <arglist>(var, getterFunc, Type)</arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_STATIC_VARIABLE_REGISTRATION</name>
      <anchor>d3a08d984fccc3606b005d21d95a9c7e</anchor>
      <arglist>(func)</arglist>
    </member>
    <member kind="function">
      <name>CS_DEFINE_STATIC_VARIABLE_REGISTRATION</name>
      <anchor>34cff917c17e47cb7af9642367e6d4b7</anchor>
      <arglist>(func)</arglist>
    </member>
    <member kind="function">
      <name>CS_EXPORT_SYM_DLL</name>
      <anchor>5bdef1249e6a0df0857a8b6ac1151107</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EXPORTED_FUNCTION</name>
      <anchor>e2ce39bfd93ebeb3498d7269baa9a820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EXPORTED_NAME</name>
      <anchor>98a357da90de38c5595450fd4e32a9fc</anchor>
      <arglist>(Prefix, Suffix)</arglist>
    </member>
    <member kind="function">
      <name>CS_FORCEINLINE_TEMPLATEMETHOD</name>
      <anchor>28e20ab0f0f6398b95a4c0674b65751e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GNUC_PRINTF</name>
      <anchor>8e48e51430e3babbaf943b676c17ec31</anchor>
      <arglist>(format_idx, arg_idx)</arglist>
    </member>
    <member kind="function">
      <name>CS_GNUC_SCANF</name>
      <anchor>f9f528fcf2834ab286bab988d5c90e8f</anchor>
      <arglist>(format_idx, arg_idx)</arglist>
    </member>
    <member kind="function">
      <name>CS_GNUC_WPRINTF</name>
      <anchor>1d9accf337fabb00d46c9635b4286857</anchor>
      <arglist>(format_idx, arg_idx)</arglist>
    </member>
    <member kind="function">
      <name>CS_GNUC_WSCANF</name>
      <anchor>35f3e34a44c9c900d34e3043fad2dfcc</anchor>
      <arglist>(format_idx, arg_idx)</arglist>
    </member>
    <member kind="function">
      <name>CS_HEADER_GLOBAL_COMPOSE</name>
      <anchor>0701115fa65b187965af12b4a593b1cc</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_HEADER_LOCAL_COMPOSE1</name>
      <anchor>5ceaa9e15a50f413a691537b228f2c70</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_HEADER_LOCAL_COMPOSE2</name>
      <anchor>d8ebf205d2307f334207ac808b3727e3</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_CLASSVAR_ARRAY</name>
      <anchor>88910dc36f5da24ee450780912a281fb</anchor>
      <arglist>(Class, var, getterFunc, Type, initParam)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_CLASSVAR_EXT</name>
      <anchor>99b60f0917cca3cd96404b318385a0dd</anchor>
      <arglist>(Class, var, getterFunc, Type, initParam, kill_how)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_CLASSVAR_REF</name>
      <anchor>f2cb07427cd86b66e9386c806127c0c7</anchor>
      <arglist>(Class, var, getterFunc, Type, initParam)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_CLASSVAR_REF_ARRAY</name>
      <anchor>637d8dd9002bc67b0883a00e1886b81f</anchor>
      <arglist>(Class, var, getterFunc, Type, initParam)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_CLASSVAR_REF_EXT</name>
      <anchor>dd02a35ef68e2b3a2421986d414cbc3e</anchor>
      <arglist>(Class, var, getterFunc, Type, initParam, kill_how)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_VAR_ARRAY</name>
      <anchor>f4d232eae4597abd256a52d8bd490633</anchor>
      <arglist>(getterFunc, Type, initParam)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_VAR_EXT</name>
      <anchor>1f80ba00e44e0745c61b81d02a0dc8b5</anchor>
      <arglist>(getterFunc, Type, initParam, kill_how)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_VARIABLE_REGISTRATION</name>
      <anchor>d2cd1fa21174a66f412e5fc6d4200c37</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPORT_SYM_DLL</name>
      <anchor>a50c601f90fadd453343a9a93e39bf4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_NAMESPACE_PACKAGE_NAME</name>
      <anchor>f0a9fe2459ed9f7eb5a86e07952c4a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_STRING_TO_WIDE_</name>
      <anchor>f4bcf7e8c715e37b5bc751715c351d93</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CSDEF_FRIEND</name>
      <anchor>2f3eb1a4afbbdfb1c8c9d6a9335f112d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStaticVarCleanupFN</name>
      <anchor>f5849b4724c6e9394f944641a5f68837</anchor>
      <arglist>(void(*p)())</arglist>
    </member>
    <member kind="function">
      <name>CS_ALIGNED_MEMBER</name>
      <anchor>5d8d64bebccf32da81cda892904bbc28</anchor>
      <arglist>(Member, Align)</arglist>
    </member>
    <member kind="function">
      <name>CS_ALLOC_STACK_ARRAY</name>
      <anchor>8185c7b21a22716685e7608a1f31a27f</anchor>
      <arglist>(type, var, size)</arglist>
    </member>
    <member kind="function">
      <name>CS_ASSERT</name>
      <anchor>c380bd47888ecfe73e7b7a40b6f827a1</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_ASSERT_MSG</name>
      <anchor>98cf1ab82994ac8a7c2a25120f6f15d2</anchor>
      <arglist>(m, x)</arglist>
    </member>
    <member kind="function">
      <name>CS_CONST_METHOD</name>
      <anchor>66bba4b4bdb4b6dadd37563abc499d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DEBUG_BREAK</name>
      <anchor>e0cf7ba630c8b3da1065ef398fc5e383</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_STATIC_CLASSVAR</name>
      <anchor>9e3fbfaf27ee31f36c4f994e232e11a8</anchor>
      <arglist>(var, getterFunc, Type)</arglist>
    </member>
    <member kind="function">
      <name>CS_DEFINE_STATICALLY_LINKED_FLAG</name>
      <anchor>50cd5757a8cd22085081f130aa8e26cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DEPRECATED_METHOD</name>
      <anchor>6aa75111b26a9a9e9cc8213e8e245d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DEPRECATED_METHOD_MSG</name>
      <anchor>69b27a22db26f4a2bb7a26a85d2ab06b</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <name>CS_DEPRECATED_TYPE</name>
      <anchor>cb08eeedad04ba9cc9c2a5919bab119f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DEPRECATED_TYPE_MSG</name>
      <anchor>91e256b131a2cf6b4b9db8830a0c88f4</anchor>
      <arglist>(msg)</arglist>
    </member>
    <member kind="function">
      <name>CS_FUNCTION_NAME</name>
      <anchor>92bb2a51bb45506ed1214feb410034b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_HEADER_GLOBAL</name>
      <anchor>8eb0223a04fafdddc64f1f3bc687cfd3</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_HEADER_LOCAL</name>
      <anchor>3e96743ac7cb2828c7e4714e2f887a27</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_APPLICATION</name>
      <anchor>891b81da1f8bd98065e99456203234f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_FOREIGN_DLL</name>
      <anchor>be4c75d5a2dc7b45e54d1ff777811258</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_IMPLICIT_PTR_CAST</name>
      <anchor>b8b4e5655675ca59b0c4d8419ae243ec</anchor>
      <arglist>(classname)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_PLUGIN</name>
      <anchor>77da1ed4fe633f896570e977f5916608</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_CLASSVAR</name>
      <anchor>750513ddfb2783fa081a966543f56e5b</anchor>
      <arglist>(Class, var, getterFunc, Type, initParam)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLEMENT_STATIC_VAR</name>
      <anchor>61813b56c11d1bd8486ad2ced24348d9</anchor>
      <arglist>(getterFunc, Type, initParam)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMPLICIT_PTR_CAST</name>
      <anchor>15431b2aca13c8d4653f4387bf5b1141</anchor>
      <arglist>(classname, ptr)</arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_PLATFORM_APPLICATION</name>
      <anchor>579d0bb91d147be822a8f30acdc87033</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MAXPATHLEN</name>
      <anchor>a46e2d433bae30274321c3869fada066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_NO_EXCEPTIONS</name>
      <anchor>9b945dcc0128078df43f9c6635cf871c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_NO_NEW_OVERRIDE</name>
      <anchor>de33763dfc921d342905beefbb4be0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PURE_METHOD</name>
      <anchor>b3427ad7a206cd0ebf118b9d40084164</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REGISTER_STATIC_FOR_DESTRUCTION</name>
      <anchor>459ff917b201b53e2df6ac10b0a554bb</anchor>
      <arglist>(getterFunc)</arglist>
    </member>
    <member kind="function">
      <name>CS_STATIC_VARIABLE_CLEANUP</name>
      <anchor>9f98b09fc5f5c5e6bcb2cabe2ac18075</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_STRING_TO_WIDE</name>
      <anchor>dceb8db1fe1c12cad8cfc6477b42ea1c</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_TEMP_DIR</name>
      <anchor>00badfa33d7da3a5a6a37cef8edd3def</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEMP_FILE</name>
      <anchor>8b676be6ae8572966e5c2e0705adad8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VA_COPY</name>
      <anchor>d1a95e13bd870b3531da80fc8d2a0e50</anchor>
      <arglist>(dest, src)</arglist>
    </member>
    <member kind="function">
      <name>operator new</name>
      <anchor>4cb62af6b416b419d9747d6b11b5c28b</anchor>
      <arglist>(size_t s, const CS::AllocPlatform &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator new[]</name>
      <anchor>171e5c211e259a96eae76303eb14c6d4</anchor>
      <arglist>(size_t s, const CS::AllocPlatform &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cstool.h</name>
    <filename>cstool_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>cstypes.h</name>
    <filename>cstypes_8h.html</filename>
    <member kind="function">
      <name>_INTPTR_T_DEFINED</name>
      <anchor>g3ce96ec9d1fcd8dfccadb47145718f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_PTRDIFF_T_DEFINED</name>
      <anchor>g54bd20b818e5c78e53e6e56acf5fe946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_UINTPTR_T_DEFINED</name>
      <anchor>g106239fcf6108905a1beb6837f7343c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WCHAR_T_DEFINED</name>
      <anchor>gdf17d03cf50828d37c13b2eef1f8efd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WCTYPE_T_DEFINED</name>
      <anchor>gde04325ad47236b5625376dc4afe00e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WINT_T</name>
      <anchor>g551670863eb3c1db08e4b28b7fc30cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WCHAR_T_SIZE</name>
      <anchor>gbce5c52bd8d62397d8050ea135e7ef73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wchar_t</name>
      <anchor>g43124e776b499fd41c598b2f6d210242</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wint_t</name>
      <anchor>gfd307bf4f6f216075c93f524a7d4c739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_OUTPUT_CHAR</name>
      <anchor>95379146c23b14d697233d8c7ca1b0fa</anchor>
      <arglist>(buf, chr)</arglist>
    </member>
    <member kind="function">
      <name>OUTPUT_CHAR</name>
      <anchor>1e2e100eca6f9d2e5335e1e31303f65e</anchor>
      <arglist>(chr)</arglist>
    </member>
    <member kind="function">
      <name>OUTPUT_CHAR</name>
      <anchor>1e2e100eca6f9d2e5335e1e31303f65e</anchor>
      <arglist>(chr)</arglist>
    </member>
    <member kind="function">
      <name>UCTF_CONVERTER</name>
      <anchor>5986e43141e3b48f52e8b4777445ecdc</anchor>
      <arglist>(funcName, fromType, decoder, toType, encoder)</arglist>
    </member>
    <member kind="function">
      <name>CS_UC_MAX_WCHAR_T_ENCODED</name>
      <anchor>gd35001a319ee965133bc2ddcda05ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FAIL</name>
      <anchor>63e0c1f08ddfa85e3b7e3c3176c040d8</anchor>
      <arglist>(ret)</arglist>
    </member>
    <member kind="function">
      <name>GET_NEXT</name>
      <anchor>02601ccd5eed1adfa4fd22228efb3da0</anchor>
      <arglist>(next)</arglist>
    </member>
    <member kind="function">
      <name>SUCCEED</name>
      <anchor>82bc06cf44e2201df39aa76de6019980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_PHASE_2D</name>
      <anchor>754fd78231a571e0e56e2630b0a4736f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_PHASE_3D</name>
      <anchor>fe3929bf12ab372791dfa4f926761d08</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_PHASE_CONSOLE</name>
      <anchor>4c23b693961ab200f5decd08f6faa852</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_PHASE_DEBUG</name>
      <anchor>e816522aa09b4fa75dc09de21329b9e6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_PHASE_FRAME</name>
      <anchor>412901a6fddc603080b4ae1259e47401</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_PHASE_LOGIC</name>
      <anchor>4ada3b18ed11fdfb128f8a272177fe5d</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_FRAME_EVENT_SHORTCUTS</name>
      <anchor>g3d079fa37a1b0a6d60075c2d7ff1b473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_INPUT_EVENT_SHORTCUTS</name>
      <anchor>ge7c559dd3119047a21de473c2eff7623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_SYSTEM_EVENT_SHORTCUTS</name>
      <anchor>g65135ddc0fbc0f93e268d6e1130f9525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_FRAME_EVENT_SHORTCUTS</name>
      <anchor>ge4e3450580c0a8f206e81ebe05ebfabe</anchor>
      <arglist>(object_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_INPUT_EVENT_SHORTCUTS</name>
      <anchor>g1279124beda5c4770fa9f13c6894e24d</anchor>
      <arglist>(object_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_SYSTEM_EVENT_SHORTCUTS</name>
      <anchor>ge1a844893cb98664fc2c11689afaa3f6</anchor>
      <arglist>(object_reg)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>csutil.h</name>
    <filename>csutil_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>csver.h</name>
    <filename>csver_8h.html</filename>
    <member kind="function">
      <name>CS_VER_QUOTE</name>
      <anchor>a674a7c5c0b86d9ada729ecbd12ee955</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <name>CS_COMPILER_NAME</name>
      <anchor>60af1e6c0a99f0540618382218b576e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PLATFORM_NAME</name>
      <anchor>40c5c89e79a037fbe073585cf11a6052</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PROCESSOR_NAME</name>
      <anchor>c020653ce7e9fe701c9e662305571be3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_RELEASE_DATE</name>
      <anchor>8e95fa173c9fef6d126e1b48249b5cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VERSION</name>
      <anchor>0fc4e5841615ca0d182834a5685e33d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VERSION_BUILD</name>
      <anchor>5350f82950f12c6189df6f53872ef156</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VERSION_MAJOR</name>
      <anchor>25a6095ebdb47bc56d486b71060389ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VERSION_MINOR</name>
      <anchor>efc2cf32063219e6be599601bda8aef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VERSION_NUMBER</name>
      <anchor>7a70e444f2689fd8fe7fc7dc947a8e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSCURSOR_Default</name>
      <anchor>a42027a7cf1ec45e193096f5295f60e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSCURSOR_MouseDown</name>
      <anchor>79bd8ba1e87e98d1baa5a081ddeebfcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DG_ADD</name>
      <anchor>b8289b83e70ca2c59fae5c9ba5c7a1c6</anchor>
      <arglist>(obj, desc)</arglist>
    </member>
    <member kind="function">
      <name>DG_ADDCHILD</name>
      <anchor>b3d50524a71ca9c62488fbba2cafe513</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <name>DG_ADDI</name>
      <anchor>dcb21be8cad8d7d5a0849c132a60d826</anchor>
      <arglist>(obj, desc)</arglist>
    </member>
    <member kind="function">
      <name>DG_ADDPARENT</name>
      <anchor>f26d5aa744e6aeaab3faaad4cd1c9ae3</anchor>
      <arglist>(child, parent)</arglist>
    </member>
    <member kind="function">
      <name>DG_DESCRIBE0</name>
      <anchor>6efdd061a55ede7bd37f50bc9f1cd758</anchor>
      <arglist>(obj, desc)</arglist>
    </member>
    <member kind="function">
      <name>DG_DESCRIBE1</name>
      <anchor>d53e95c4c351ee7c1d4b9e022408eba7</anchor>
      <arglist>(obj, desc, a)</arglist>
    </member>
    <member kind="function">
      <name>DG_DESCRIBE2</name>
      <anchor>ce999dff04035f7f3e278c01e5cb8e81</anchor>
      <arglist>(obj, desc, a, b)</arglist>
    </member>
    <member kind="function">
      <name>DG_LINK</name>
      <anchor>b9776dd4643d9ff5955d73a539a5e4bf</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <name>DG_REM</name>
      <anchor>4a88e8764b3bdf8078925ab92423b399</anchor>
      <arglist>(obj)</arglist>
    </member>
    <member kind="function">
      <name>DG_REMCHILD</name>
      <anchor>a8eed5eb762206691cd3644370e4b123</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <name>DG_REMPARENT</name>
      <anchor>6083696dcd48a86a8cc4da9614de0b8a</anchor>
      <arglist>(child, parent)</arglist>
    </member>
    <member kind="function">
      <name>DG_TYPE</name>
      <anchor>39d8d1a2350fdd82d163442f95bbf0cb</anchor>
      <arglist>(obj, type)</arglist>
    </member>
    <member kind="function">
      <name>DG_UNLINK</name>
      <anchor>59e577795036b03c53cf68427287580d</anchor>
      <arglist>(parent, child)</arglist>
    </member>
    <member kind="function">
      <name>@78</name>
      <anchor>1b70d876770ccff427513794d6b0b2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SEQUENCE_LIGHTCHANGE_NONE</name>
      <anchor>1b70d876770ccff427513794d6b0b2a747b796e7b1f919fd36cc960eb591bc55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SEQUENCE_LIGHTCHANGE_LESS</name>
      <anchor>1b70d876770ccff427513794d6b0b2a7003628ad03747b08e6bf75545e799e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SEQUENCE_LIGHTCHANGE_GREATER</name>
      <anchor>1b70d876770ccff427513794d6b0b2a729a7194001b550e811008129dc92aaeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSEVTYPE_Joystick</name>
      <anchor>aa14be004a159edfc9be0380b0e2fc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSEVTYPE_Keyboard</name>
      <anchor>7d93b0db9cca46cfc5a3426fac94e7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSEVTYPE_Mouse</name>
      <anchor>32af74a89955ff9b07073d6da4fca58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ALT</name>
      <anchor>62328951e9057ade3abe72117a4b0eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ALT_FIRST</name>
      <anchor>93d6f778a33d54fdb43ecec63551ecce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ALT_LAST</name>
      <anchor>32a6f8868eea14dbb2d7100db8b1e452</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ALT_LEFT</name>
      <anchor>6c9748d9196ee67d03ef2ca0db1c47da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ALT_NUM</name>
      <anchor>cbfde01e406872a6d00f68e21706851d</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ALT_RIGHT</name>
      <anchor>0370e5ac2e009985f5a2fbb902cf90a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_BACKSPACE</name>
      <anchor>45f2b9e0c170be2241ee58e65960acb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CAPSLOCK</name>
      <anchor>574e897a5f65d915d28453aed1abf5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CENTER</name>
      <anchor>24ed847e76e2617bfb92707839647fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CONTEXT</name>
      <anchor>65cf5d0f4459ec9c328e29663d39e77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CTRL</name>
      <anchor>f6ecb5888bde573aaf339ecf4f1c3d61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CTRL_FIRST</name>
      <anchor>e656d233c38f774eece6308d45ad8d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CTRL_LAST</name>
      <anchor>b16a5ad5f7fa595684ad9aab00b0b1d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CTRL_LEFT</name>
      <anchor>112d094fe5222bf133d678f8951a12db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CTRL_NUM</name>
      <anchor>70db7b0417596fc8702bd97bf241e84b</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_CTRL_RIGHT</name>
      <anchor>fcc01fae355b207e56f2f9c700ced526</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_DEL</name>
      <anchor>f6804755207bb7a10e44063af72c6d7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_DOWN</name>
      <anchor>d6c47a95616617d9c6694bff01ea60cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_END</name>
      <anchor>72de3c1ad57aebf180eaaed5ee87573c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ENTER</name>
      <anchor>c0c9de283bddc0f525392030a8e52b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_ESC</name>
      <anchor>6e14f174197057d9b4b4a703068ef359</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F1</name>
      <anchor>507569c1b80a62f483b53ab914f38f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F10</name>
      <anchor>4948eba3a2dd20923bc16c7652f42d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F11</name>
      <anchor>f54f66e677a3e8ca33b3a0105c2e6f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F12</name>
      <anchor>1dc7b4287106e0fb590ada11ef1fce36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F2</name>
      <anchor>549dad9e55e35eff138ee6a272704be2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F3</name>
      <anchor>f89c17442edb028c3713672665bec534</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F4</name>
      <anchor>58c257be0bb780d68292403a25fb8f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F5</name>
      <anchor>90166e52b5549ad7ca79283a403d04b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F6</name>
      <anchor>b1a701b1668edfa1fc16e5c60399d7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F7</name>
      <anchor>de533b0ef62e942a812a0956cba71890</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F8</name>
      <anchor>16a5dbe788501350b055e709ccc0e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_F9</name>
      <anchor>4cd7dde3cc8c60d4428ff65f1757b886</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_HOME</name>
      <anchor>c71b2a819615dc93c63d7ffa8347cb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_INS</name>
      <anchor>9d31cb6f6bdcafb6f1211d1ce02b2af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_IS_MODIFIER</name>
      <anchor>16b3127f5bdda4738676955a80c906cb</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_IS_PAD_KEY</name>
      <anchor>2e25574b8c65ee9857ee5c735db6396c</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_IS_SPECIAL</name>
      <anchor>ba7cedcf63695ecf2b26e0d0961ef633</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_LEFT</name>
      <anchor>028daa3194fab65cc6ca5efde7d453be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER</name>
      <anchor>d5b4cb1060577689b08af6d82023204d</anchor>
      <arglist>(type, num)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER_COMPARE_CODE</name>
      <anchor>7ce0a3c0f201bdde5642fcb49d705b1d</anchor>
      <arglist>(key1, key2)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER_COMPARE_MASK</name>
      <anchor>8a04d2859a4e35a634d67c20f17c6a12</anchor>
      <arglist>(bitmask1, bitmask2)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER_FIRST</name>
      <anchor>66abd197584b0fbc2a827f03ded830c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER_LAST</name>
      <anchor>ae7f60d1418a8ff0223b311348ef7571</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER_NUM</name>
      <anchor>be514077a73a14da0f6d2420650d3ff6</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIER_TYPE</name>
      <anchor>80b01299a01aa5d08a50e96d1ae7704a</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_MODIFIERTYPE_SHIFT</name>
      <anchor>564ba514e67ae11e50a7d3655ad9d6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD0</name>
      <anchor>756e3d86a9f55a4db6266b852b5ebb36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD1</name>
      <anchor>1375b07c20522891ff90c9977fb38229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD2</name>
      <anchor>a09487caa81a322fec810e516b9685ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD3</name>
      <anchor>3e880b6d8e9a02d6bd46afad0dc53b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD4</name>
      <anchor>10e8de879513e77df4ad152f5b433865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD5</name>
      <anchor>d7132d76df6034d9f29a1cd395242db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD6</name>
      <anchor>6be30cdfcbb9f5a50e010b47a7a6b892</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD7</name>
      <anchor>fdf8b2143fc88c17ad516bae4bda6025</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD8</name>
      <anchor>27f6d8fe53fc9745edc8eb5fbe1c4f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD9</name>
      <anchor>ac73206f922713bb1497d2bf226aeb60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD_FLAG</name>
      <anchor>3f5f1b7e2f96be17b29d99fa34b672d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD_KEY</name>
      <anchor>54cc94ffeaf9b53c37c8d86df08e2a40</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAD_TO_NORMAL</name>
      <anchor>85c6c3921338945349bbc59804edd31f</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADDECIMAL</name>
      <anchor>46dc898a5d2338288ed41c8924d4b009</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADDIV</name>
      <anchor>b9291ba8fea69dee843795bd2c9a47d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADENTER</name>
      <anchor>b38e61209410486660c336f9b7a23db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADMINUS</name>
      <anchor>dcb4cdbba050e0d4b90013278b36e957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADMULT</name>
      <anchor>60e0b463281913287bc4326082a4df2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADNUM</name>
      <anchor>c35caa15e0d13e11bf331f740cc589e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PADPLUS</name>
      <anchor>818390e1210de8a037182ebed3442db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PAUSE</name>
      <anchor>67db376c57f68afe9dde3e2319cc2118</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PGDN</name>
      <anchor>dd35639aa64f31e8d999317d7f5d0ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PGUP</name>
      <anchor>ff593433668e3967a3200b65344c0168</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_PRINTSCREEN</name>
      <anchor>fb3f8458e97a3a684114c31aa684d86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_RIGHT</name>
      <anchor>0fb991fc196484b3752dd2fa515ccd07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SCROLLLOCK</name>
      <anchor>57cbe652555b2dd698ef185cadb16cc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SHIFT</name>
      <anchor>99b5e749fac7cc44709bfddb663fb1cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SHIFT_FIRST</name>
      <anchor>75e0aa165d231a4fd64718700e0e8240</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SHIFT_LAST</name>
      <anchor>fe64b39533380ad2ff375767c665ae03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SHIFT_LEFT</name>
      <anchor>c4ec362bbc367cd390b93b13a4d3c4ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SHIFT_NUM</name>
      <anchor>cf4de1243a150f00add0b89510084d96</anchor>
      <arglist>(n)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SHIFT_RIGHT</name>
      <anchor>f7ad0cd2654d736200de589add458a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SPACE</name>
      <anchor>c44f1ae95bae43e40f7ab633fb6e84ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SPECIAL</name>
      <anchor>4580f3b433e6286f05167e976deafc50</anchor>
      <arglist>(code)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SPECIAL_FIRST</name>
      <anchor>79383233e95613c1a1e17a5a9bb4078a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SPECIAL_LAST</name>
      <anchor>7e621029a74e7cae89bc0c4bc95008e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_SPECIAL_NUM</name>
      <anchor>8c02aafd21934e783c42f29fff3167bc</anchor>
      <arglist>(rawCode)</arglist>
    </member>
    <member kind="function">
      <name>CSKEY_TAB</name>
      <anchor>fe9db489437ab364eec9ef29f803603f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSKEY_UP</name>
      <anchor>847a728a516a2d39c78098caae647345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_ALLMODIFIERS</name>
      <anchor>4090c450fd668ef91062983f0637fda6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_ALLSHIFTS</name>
      <anchor>07d7df34d538ab33019374482346a1b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_ALT</name>
      <anchor>bd889bad19559e75e329b28ab3afb543</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_CAPSLOCK</name>
      <anchor>1b834dcf5893ee50f09bca42f73ba2a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_CTRL</name>
      <anchor>2e1ee9892a1018949fac332fde0d0ffd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_NUMLOCK</name>
      <anchor>80d9e8754325adfbc5416a30427fe5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_SCROLLLOCK</name>
      <anchor>7771157f7c246a93339f50075744965f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSMASK_SHIFT</name>
      <anchor>913a1f2e0660f96e2800e35cda781f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyCharType</name>
      <anchor>01c809d9f3c8b5c7985bc34b611ecdd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyModifierNumType</name>
      <anchor>d8718bff9baa98437e56a13227096d83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyModifiers</name>
      <anchor>a15d9d23743af7a204a03988bc233b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyModifierType</name>
      <anchor>c86e95aa6cc3a5946fd256043175f71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_csKeyCharType</name>
      <anchor>a9fe74a26bf5b3c216b2ea7b821d266e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyCharTypeNormal</name>
      <anchor>a9fe74a26bf5b3c216b2ea7b821d266e0fdbc303da5deae05e46246065d8a979</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyCharTypeDead</name>
      <anchor>a9fe74a26bf5b3c216b2ea7b821d266e956fba12c395ae284639642feefa82d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_csKeyModifierNumType</name>
      <anchor>0768a4bea2903e98b943d6ec82ed3c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierNumLeft</name>
      <anchor>0768a4bea2903e98b943d6ec82ed3c070e155434e4af3a5f6d10437abb12c6ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierNumRight</name>
      <anchor>0768a4bea2903e98b943d6ec82ed3c071f3c4ca798117271e08a6d2a136bbef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierNumAny</name>
      <anchor>0768a4bea2903e98b943d6ec82ed3c07752642a33ec6695936599e24f6d49ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_csKeyModifierType</name>
      <anchor>912eb0936bd273cd2364621a21b1f284</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierTypeShift</name>
      <anchor>912eb0936bd273cd2364621a21b1f284771de24ae5026eb2160fc869bb0808fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierTypeCtrl</name>
      <anchor>912eb0936bd273cd2364621a21b1f2842e8b1c927a59a0fd43b7894ba1f1be93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierTypeAlt</name>
      <anchor>912eb0936bd273cd2364621a21b1f284fbe47871afd23bc09433525811a9b084</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierTypeCapsLock</name>
      <anchor>912eb0936bd273cd2364621a21b1f2842f7e2e87bd012ce7a55b1d455b7280af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierTypeNumLock</name>
      <anchor>912eb0936bd273cd2364621a21b1f284becfdeef6a24f461a5d109730904e491</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyModifierTypeScrollLock</name>
      <anchor>912eb0936bd273cd2364621a21b1f284bdecc70c3e9b0ac8da270f6fe2fc6c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLYPH_INDEX_LOWER_COUNT</name>
      <anchor>gcde26a5809ed6f8dde22397552e2b786</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLYPH_INDEX_LOWER_MASK</name>
      <anchor>gad3dab6535c3b4475f55ae381a613644</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLYPH_INDEX_UPPER_SHIFT</name>
      <anchor>gd8bff11d9fbd4837ebf95d81e3a7ed49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RELEVANT_WRITE_FLAGS</name>
      <anchor>g3b6f4f6eec9948663b3507ca45fc71ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FORMATTER_TYPENAME_QUALIFIER</name>
      <anchor>61ab9369a2d73a114c26188937a9c206</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>__STDC__</name>
      <anchor>8bdd19cad331a646ae8375be00e34cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>no_argument</name>
      <anchor>3bc1d5f667b5b4ca4b4abb685dc874ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>optional_argument</name>
      <anchor>cca06c0a947656bd8b395bf1084ffb72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>required_argument</name>
      <anchor>6ece8d8dfa8378778f7290fdaba5b8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>option</name>
      <anchor>df33c342f1f93d3574188740b6d00a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>optarg</name>
      <anchor>db50a0eab9fed92fc3bfc7dfa4f2c410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>opterr</name>
      <anchor>e30f05ee1e2e5652f174a35c7875d25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>optind</name>
      <anchor>d5e1c16213bbee2d5e8cc363309f418c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>optopt</name>
      <anchor>475b8db98445da73e5f62a1ef6324b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_1PASS_SGIS</name>
      <anchor>49502a48b1761c54e7712b2a7624e9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_2PASS_0_SGIS</name>
      <anchor>6f88f24f5aabf5739c9ae604c1729d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_2PASS_1_SGIS</name>
      <anchor>b7e995d0e4115249466e4661750ab7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_4PASS_0_SGIS</name>
      <anchor>c494352ec0e96ac67fdfe9d8189ff96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_4PASS_1_SGIS</name>
      <anchor>ebac9095c5a86980ebc8665fda7d68d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_4PASS_2_SGIS</name>
      <anchor>66623e50c957f19c4754b68090f037ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_4PASS_3_SGIS</name>
      <anchor>44803f3eb30e5141f36a6a303253e6b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE_BIT_EXT</name>
      <anchor>e7334e01278a1e31e28748ca8401ba36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE_SGIS</name>
      <anchor>b2bb2d97155be82a9efdd77243085da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_ALPHA_TO_MASK_SGIS</name>
      <anchor>b25a91683761a9d063c3298f41133b31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_ALPHA_TO_ONE_SGIS</name>
      <anchor>3ef686c0fa05a6337b1cacd916443870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_BUFFERS_SGIS</name>
      <anchor>9bb9283642e0968f8fc36648efb88063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_MASK_INVERT_SGIS</name>
      <anchor>9327cbd41490fd9bc8e92f5d02450920</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_MASK_SGIS</name>
      <anchor>259d99ff0e18c7811cc01b98e9c51a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_MASK_VALUE_SGIS</name>
      <anchor>7c6f46865103580482285addda4bdc46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_PATTERN_SGIS</name>
      <anchor>0e0ca405513fabdbf243c1b19d169116</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLES_SGIS</name>
      <anchor>e8288aab3962697faacae653234bdcbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLX_SAMPLE_BUFFERS_SGIS</name>
      <anchor>9982de9c99b7711bfa697f73af805598</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLX_SAMPLES_SGIS</name>
      <anchor>cf146da3d7cb0171c58c1ef16defb34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_2X_BIT_ATI</name>
      <anchor>377aec5d6de6a0065d9d1e0737fe3d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_4X_BIT_ATI</name>
      <anchor>7811821ec70db409ee59fa2a8619e34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_8X_BIT_ATI</name>
      <anchor>5117916e92fe65a48cdb4e8152bf5a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ADD_ATI</name>
      <anchor>d13af4783e71c99c23e4ff25b0c060f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BIAS_BIT_ATI</name>
      <anchor>8db7b7d37460c9b0af022f5318f5702b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLUE_BIT_ATI</name>
      <anchor>c1466f113ced7af99ada97c910175a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CND0_ATI</name>
      <anchor>84c43b2f8917e365271277d06ff6d24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CND_ATI</name>
      <anchor>161a35ed7e6beea58db44c54c6d9f06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMP_BIT_ATI</name>
      <anchor>a923cafb745c3cfc3cd318e284c61540</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_0_ATI</name>
      <anchor>a586154013e00b150a1bb2bb5cfcbe05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_1_ATI</name>
      <anchor>2f12ee6ab907f3155cc4c932ea9d6bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_2_ATI</name>
      <anchor>730a7118709f550abceba59113a4c4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_3_ATI</name>
      <anchor>9790a78e29fa264bb43d1c76ac3c8451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_4_ATI</name>
      <anchor>bbd5a83013f2d13c3f465f308d57f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_5_ATI</name>
      <anchor>9587099e426acd5e70ae8062e0f529f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_6_ATI</name>
      <anchor>d0d9b75e4af2e6c5969899458b6d6463</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CON_7_ATI</name>
      <anchor>15e7c6c9ff3bf1ef82c635f84fa0a9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT2_ADD_ATI</name>
      <anchor>e9c506d55f6a65eff2db79874c607f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_ATI</name>
      <anchor>b8259509dab91df9f25931e432941989</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT4_ATI</name>
      <anchor>d503bc95b3998bab00bf1d7114c32d2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EIGHTH_BIT_ATI</name>
      <anchor>e67d2042775226d7e8936a1f137ee77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_SHADER_ATI</name>
      <anchor>f7dde0c98eaa8622272531f54113d05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_GREEN_BIT_ATI</name>
      <anchor>310590938bea2b709ecb424be4cd78a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HALF_BIT_ATI</name>
      <anchor>83ed6ace9730d728c106bf3175e9977f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LERP_ATI</name>
      <anchor>69a54a83efb7911721d1a2230d0f65bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAD_ATI</name>
      <anchor>8d8562d90ab63ca2ef4da8f583da387e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MOV_ATI</name>
      <anchor>b5d4fb4c04dd90b7926ca60ed17554cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MUL_ATI</name>
      <anchor>dcd0fbd61ac319b737991b53b94bf82e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NEGATE_BIT_ATI</name>
      <anchor>8e63ca39bb5fcf6d95f8c4a6e55b7dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUARTER_BIT_ATI</name>
      <anchor>12c0f3afe4d5db5cea43c0c6c5e3407c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RED_BIT_ATI</name>
      <anchor>1bb772e513934dcce901bc8c87b21e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REG_0_ATI</name>
      <anchor>e605a0f343021e90edaec14a31998614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REG_1_ATI</name>
      <anchor>ef6238b0189a7b228d4c5fb6161891e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REG_2_ATI</name>
      <anchor>4d633cde66076eccf978eaf674f75e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REG_3_ATI</name>
      <anchor>69a573463c4582e0a75034286bad7488</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REG_4_ATI</name>
      <anchor>86af736bf8d31f047eaaa8defff60739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REG_5_ATI</name>
      <anchor>6b6304c5d934789c20aec6a9a9c0c46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SATURATE_BIT_ATI</name>
      <anchor>f9e47a724f3f585781d99712252be9d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_INTERPOLATOR_ATI</name>
      <anchor>8eebb92367d671ecb0b434cc83fa4553</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SUB_ATI</name>
      <anchor>19136b45650535634aeee193ac3b3057</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SWIZZLE_STQ_ATI</name>
      <anchor>2c28ffe251eae1e411b9ab069758b965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SWIZZLE_STQ_DQ_ATI</name>
      <anchor>3011095062d59fd9025631d73aa34d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SWIZZLE_STR_ATI</name>
      <anchor>31f559b0657573e0e776fd5884aad300</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SWIZZLE_STR_DR_ATI</name>
      <anchor>22cf8ec81426cd1d9589a7be018182c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_422_AVERAGE_EXT</name>
      <anchor>95d2ac32e0528175190f173671bd66ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_422_EXT</name>
      <anchor>ad503453be8635ce634e74657b7a2592</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_422_REV_AVERAGE_EXT</name>
      <anchor>faa3d818e1b68101b8bda1d334b67198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_422_REV_EXT</name>
      <anchor>77c00d20089a5af8d25c86355635d71e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ABGR_EXT</name>
      <anchor>ba576ffdac23399a47e57b1771c8b58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ACTIVE_STENCIL_FACE_EXT</name>
      <anchor>d95865cf31ada5dececbc1fe5951a108</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_TEST_TWO_SIDE_EXT</name>
      <anchor>823a39df4e965f6665ad70743c725947</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ACTIVE_TEXTURE</name>
      <anchor>6fc1b36f39e5859ac72ebfaf3722a0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ADD_SIGNED</name>
      <anchor>312488560198574eb8fde9970fe26747</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLAMP_TO_BORDER</name>
      <anchor>a5d86f453ce19bef15e848d313c653e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLAMP_TO_BORDER_SGIS</name>
      <anchor>1eb138a9f37352177296700349ab1334</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLIENT_ACTIVE_TEXTURE</name>
      <anchor>f63f4282cc56a189eb80eae77d67b3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE</name>
      <anchor>fa40fcd465207b4de60ccfddcc77248e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_ALPHA</name>
      <anchor>9df51268efd1d3926d9cc3cd9bad25c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_RGB</name>
      <anchor>e89fd86422b8c78e1eac7c255b56ebce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_ALPHA</name>
      <anchor>1d4cae88f55b01dc32912907caf0e388</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_INTENSITY</name>
      <anchor>9bb9ee74b17675d2eb85780c9eb30e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_LUMINANCE</name>
      <anchor>48550b692c808f2770a7c4953d574c6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_LUMINANCE_ALPHA</name>
      <anchor>7b67d430c0f3c1a6b370946a4993dc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGB</name>
      <anchor>6d53cfb9b7cbe9abb9253afcea445b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGBA</name>
      <anchor>61f07c72b49869caa447fed2d8ab892b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_TEXTURE_FORMATS</name>
      <anchor>393084c570497e0e45cd3946c1a130b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT</name>
      <anchor>85a64b02e8734c9e6e0b12d9a9578d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_RGB</name>
      <anchor>b1a90a0b6d5bde2a751b881202a53831</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_RGBA</name>
      <anchor>a052e4a5d3f11f1cc0f058b05356a67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INTERPOLATE</name>
      <anchor>8287eef1d8138f5cd1cd7cce1bc8e8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_CUBE_MAP_TEXTURE_SIZE</name>
      <anchor>632039148b57b1df2b23f1ef1c94de34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_UNITS</name>
      <anchor>8f6ece15f415fdb5e36304c8f97ca6e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE</name>
      <anchor>a2b6486ff7ecee8bf04e3371f197527a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE_BIT</name>
      <anchor>0b551148113ae3e7f81e5e9276be21ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_MAP</name>
      <anchor>c85ab960342ae6bd06881aabf31899d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NUM_COMPRESSED_TEXTURE_FORMATS</name>
      <anchor>88d44856e13232d3c0bec297fd38d627</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND0_ALPHA</name>
      <anchor>4858581ec49b6bb7a23205a1103984a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND0_RGB</name>
      <anchor>97cb8ba4f6f099566ab373ad4254cd65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND1_ALPHA</name>
      <anchor>98df3c998ca3bbe641306fbcc5ba7426</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND1_RGB</name>
      <anchor>e33197196d9b7d4171c133728294e2d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND2_ALPHA</name>
      <anchor>929e99a6d416dd551747b4123fc1fac4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND2_RGB</name>
      <anchor>0065ddd6026c47784f8f9c4b14e30203</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PREVIOUS</name>
      <anchor>c36f5aadd8726da49cbaf146a56a544d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRIMARY_COLOR</name>
      <anchor>a038438b64c1ddcc4f6a55a3212fc472</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_CUBE_MAP</name>
      <anchor>2235d0c1385ca8f93745311a04e05527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REFLECTION_MAP</name>
      <anchor>26f8fe65ab3dc613b54b38220c54ac5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RGB_SCALE</name>
      <anchor>dd3c8e05aff8c0afefa64707ef366915</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_ALPHA_TO_COVERAGE</name>
      <anchor>974e3d03b26a60757018116abc99455f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_ALPHA_TO_ONE</name>
      <anchor>5c64c1196bf55d6676a28e219298ac38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_BUFFERS</name>
      <anchor>826c1addfb8459689d3268cd592ebe3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_COVERAGE</name>
      <anchor>28521a0c7005cfc7ada652c82cba801d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_COVERAGE_INVERT</name>
      <anchor>493a344af6533267a8be2b58a23130fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_COVERAGE_VALUE</name>
      <anchor>0ec2d62f355f2dc750d1977345938b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLES</name>
      <anchor>1527624bc8306b779ce730bcc4f757a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE0_ALPHA</name>
      <anchor>eae9bfcce5a919f700d60fc24a36e3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE0_RGB</name>
      <anchor>e1fd330f86e60ac3438e8b1df3f7a7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE1_ALPHA</name>
      <anchor>d0201b0486b1e48c92cd0e98aebb3d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE1_RGB</name>
      <anchor>6b7e9b816088b68a2f6549eec0bee1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE2_ALPHA</name>
      <anchor>f9507cfed117a6fb4a90f1c2f8457707</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE2_RGB</name>
      <anchor>3821b7f8c55b1dffbee97dfa2400003a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SUBTRACT</name>
      <anchor>181172fc9fc3ac2d3189ff966484ac09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE0</name>
      <anchor>16cc91096144fc7048b45e2add14915b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE1</name>
      <anchor>171671ae6383113df51b846373930771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE10</name>
      <anchor>10ac92e56a389e6d61fa67fce9647343</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE11</name>
      <anchor>c2a90866d1cde7e6180739930c102f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE12</name>
      <anchor>451e0157013321b6c4f00e47578f8d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE13</name>
      <anchor>d2bca89bea17bfd0fe0f3f64aab40549</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE14</name>
      <anchor>6c992a9191154ef9a7d224157b46f1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE15</name>
      <anchor>6a3147750845b658205b5efe6a279a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE16</name>
      <anchor>552aba54f1f9531860c2b332fd0869b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE17</name>
      <anchor>ccdb7c47dae700218b31fb2b129ee0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE18</name>
      <anchor>08cd70d6ead4e0219daa481299f8f10e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE19</name>
      <anchor>cdbdc0b3c774163814b3923049d7d532</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE2</name>
      <anchor>0058cf020ea54103d5533abcb2d6899c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE20</name>
      <anchor>3a0a7bc78dccb9b36c17a8ec664473f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE21</name>
      <anchor>d3cc84e18c6e199a24ab0ca59741f13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE22</name>
      <anchor>d7bb0cc4784c49d1eb83c8d09e06c9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE23</name>
      <anchor>8e98a806da366c64ec10765b122ecf1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE24</name>
      <anchor>3ad5b3e82f51885b0ebc604e54b624f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE25</name>
      <anchor>ffa8df39d0f4c718934bc194a118babb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE26</name>
      <anchor>7097b44e05a237ba70bd11ba1ead56b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE27</name>
      <anchor>3cc96950e9132633e9f7b7610c990d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE28</name>
      <anchor>07ec904516d5981c54dc4ffb9654a86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE29</name>
      <anchor>4ac3541defe5f96fa06dd57f0a8891b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE3</name>
      <anchor>030cbee394ac326b01e35753a7fba1fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE30</name>
      <anchor>78da9f28544559f2bfccf8a9d43a406e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE31</name>
      <anchor>dbb8b4ec84d0ddb49ebc9c2290c8be20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE4</name>
      <anchor>1f7d1f6b7274d0ad760d5c9bd83393e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE5</name>
      <anchor>7b22a0e4f5a5b887ff14d8a53ea31524</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE6</name>
      <anchor>db5131f23766351a34d36c0668d1e4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE7</name>
      <anchor>0f11172d6d2daa661bdb02545dff3644</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE8</name>
      <anchor>77bab3d67794d30842400a30868f03ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE9</name>
      <anchor>0a199c41bfc291046eaaa1546b8418f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BINDING_CUBE_MAP</name>
      <anchor>b7d35cf593b0af570c79a6a9a8d2c479</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPRESSED</name>
      <anchor>72b1a842a461287f48c6e9601243bbee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE</name>
      <anchor>d70b42f24717cb3f3c3c494a7e45d488</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPRESSION_HINT</name>
      <anchor>7970d7bc60644feb1efd44ac9ce1e796</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP</name>
      <anchor>26e189fe84285eb8fae26721662dbe8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X</name>
      <anchor>e642ad8e3baa2512e2e27be2cf17373d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</name>
      <anchor>8d31f977b3490eb05832ecc261313462</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</name>
      <anchor>2d568ba9541df33fb21dc5bacbe7b4a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_POSITIVE_X</name>
      <anchor>b83eb56dce8e1f7900585d35016abf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y</name>
      <anchor>0605d5ef41613665b34391f9ba398997</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z</name>
      <anchor>9c63e51b23baa3e2abc01cc0c892a111</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_COLOR_MATRIX</name>
      <anchor>7454c4fee21755ef1d20da95542c6961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_MODELVIEW_MATRIX</name>
      <anchor>0c34ffa53a0274d9c166bdc4df2acc74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_PROJECTION_MATRIX</name>
      <anchor>19b1e353ea3faed6b89763c5915671ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_TEXTURE_MATRIX</name>
      <anchor>ad823388048763dc1fdbaef3ee1b8fa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ACTIVE_TEXTURE_ARB</name>
      <anchor>3d1cdb2bb788ad14678c573385317e57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLIENT_ACTIVE_TEXTURE_ARB</name>
      <anchor>41f5906c588989322740f2ca87a35c1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_UNITS_ARB</name>
      <anchor>3f8c72ef43026b3f2cd7eec99f1111d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE0_ARB</name>
      <anchor>52f7e4ad7d25b51800d52f7cf4459a39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE10_ARB</name>
      <anchor>22e31ae0c89419041f5c0f2c03d0e5ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE11_ARB</name>
      <anchor>ceb7a2ccaecfde6c623b84f126db07f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE12_ARB</name>
      <anchor>67cfe435b4c26fb4660963eb33b170e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE13_ARB</name>
      <anchor>007d7adc732a72614650b6286828e12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE14_ARB</name>
      <anchor>0d9434f43e17c5e54acd60032d7b24df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE15_ARB</name>
      <anchor>b5b376fa3be9af7c8dca9e6796e7a467</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE16_ARB</name>
      <anchor>0a7609a188daa51d92323efec12521f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE17_ARB</name>
      <anchor>7ff96afdff3dd5d0020643dcfedddd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE18_ARB</name>
      <anchor>3009d9288b5ff6a7218a04efb42f94f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE19_ARB</name>
      <anchor>6b2f54a8037012a8dc8e10146b29ba4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE1_ARB</name>
      <anchor>ffdf381031ef9f48ddf76805cdf8d0a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE20_ARB</name>
      <anchor>a050e993492ce097cf0273be4838014f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE21_ARB</name>
      <anchor>8cd9b3a28066afd7694b4fc4c9629f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE22_ARB</name>
      <anchor>57e5fe52a954449546b89da9f45fd415</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE23_ARB</name>
      <anchor>2939ad95f95329f1864350f7f6f671ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE24_ARB</name>
      <anchor>35a9bfe5b9159b6acf132c2443037b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE25_ARB</name>
      <anchor>3f2b8c9b9b107ace1cdef8f7982f99c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE26_ARB</name>
      <anchor>4e7e2342e0ef23951d29ff5bb7a27559</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE27_ARB</name>
      <anchor>ea7c294abd4ba4cb46912fcd0f609b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE28_ARB</name>
      <anchor>6de7d27243b3d0fdd4a359928369e0e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE29_ARB</name>
      <anchor>3a192b61218c6778fa93d6972e8f831a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE2_ARB</name>
      <anchor>5c56f2e8fd1ca5abe5f47e76036ec2d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE30_ARB</name>
      <anchor>b36202e145b2813b5f19155a21182e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE31_ARB</name>
      <anchor>6c79418aa7cfc73ac32ab90bc32dd780</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE3_ARB</name>
      <anchor>d379be7cb9fd935261564bca80457188</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE4_ARB</name>
      <anchor>dbe2a3237c679830c2d077f20bef8b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE5_ARB</name>
      <anchor>c11d76fda26a77a8017a9d4397f742fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE6_ARB</name>
      <anchor>5e44a9dbcc6b13ad4564f259d6a5285d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE7_ARB</name>
      <anchor>0cb625355976404d3f15e24225beaf4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE8_ARB</name>
      <anchor>b9964f4ef836cd122d7771e69a32fdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE9_ARB</name>
      <anchor>de4ab7cb48946653986aea05ebca4886</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ACTIVE_VERTEX_UNITS_ARB</name>
      <anchor>fe03e7507dba029c5c728e80a9f4e4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_WEIGHT_ARB</name>
      <anchor>5d4dbcc01865bfe5799a793886630797</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_UNITS_ARB</name>
      <anchor>9e24ccd85383bb763c2429341d5fa705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW0_ARB</name>
      <anchor>eb39b3752a59fa1f51df89b024110926</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW10_ARB</name>
      <anchor>72301c30dfc55bbf2e09efb1afd5b981</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW11_ARB</name>
      <anchor>ed5e6112a973119f1371cd49ac59441a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW12_ARB</name>
      <anchor>c4792a2be2daa154baccec97f7cd2d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW13_ARB</name>
      <anchor>9d5f45788d300eb39e7bbdb484b12d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW14_ARB</name>
      <anchor>d2524ece2a56056b605ecf35920f6332</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW15_ARB</name>
      <anchor>84c9aabf79ad7516e2e4f5e1d7435a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW16_ARB</name>
      <anchor>f1ecbd1d1808edf1053d73006e0bd388</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW17_ARB</name>
      <anchor>cdfd7a85cab798f8e14a42b4b4cf23b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW18_ARB</name>
      <anchor>2262cf727686c205f0caa6c0d278fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW19_ARB</name>
      <anchor>be90204235839fcf2f22e8475a724954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW1_ARB</name>
      <anchor>6ee7f305f7045428538999639d4f5547</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW20_ARB</name>
      <anchor>8de58099b0142fb99d353c73895e0cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW21_ARB</name>
      <anchor>de827440bda3995911639746b687578f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW22_ARB</name>
      <anchor>eee52676dd58650e79a6992ee01525d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW23_ARB</name>
      <anchor>e8cd306e49a5b92831d43f1c62419ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW24_ARB</name>
      <anchor>e244b71b4055a0fd37b5674ae193839d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW25_ARB</name>
      <anchor>abe837230691b8591dd75ac20647f666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW26_ARB</name>
      <anchor>61065a2d525b87aa4fa95f4263b9eb00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW27_ARB</name>
      <anchor>ed581914d18b35d1630797eed90a7fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW28_ARB</name>
      <anchor>926aca92e40048ee41f33944599d5f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW29_ARB</name>
      <anchor>fd4038cab11b535dc3821001c90daf54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW2_ARB</name>
      <anchor>8dc08b37e90f3123ea27e6dbf5e01ac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW30_ARB</name>
      <anchor>94c34679eb56f659baae85a5f2367510</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW31_ARB</name>
      <anchor>c165b6ee5baea631c49d2f47f316a4dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW3_ARB</name>
      <anchor>8bad9653084a1f64c44609664868a527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW4_ARB</name>
      <anchor>83fc3a493f188752436bbd0a0d74296c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW5_ARB</name>
      <anchor>e64453e3222c8b6d37dec88492552ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW6_ARB</name>
      <anchor>98cb5de6fb7bcde330f58a9a0cbcf701</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW7_ARB</name>
      <anchor>917edab383c3fa1c955d31fa995cc222</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW8_ARB</name>
      <anchor>c19ed02429a8b229877da4d1db521e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW9_ARB</name>
      <anchor>0d43d460af5a70905259b64d6a4161c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_BLEND_ARB</name>
      <anchor>1c2f7d3159c88badaf40fb6cb2a98e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_ARB</name>
      <anchor>3689b10d11e254159d28b9b516f461f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_POINTER_ARB</name>
      <anchor>ebc4e6ec752a7f80a1247aad2ba4c932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_SIZE_ARB</name>
      <anchor>92e50e574f3d23f717e86589f2c74771</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_STRIDE_ARB</name>
      <anchor>444c6ee1e48470429cd91230d1e6bfb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_TYPE_ARB</name>
      <anchor>095021ade0aecbdaed5db861606fab70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_SUM_UNITY_ARB</name>
      <anchor>766a854ce8b2dfa88b18335c531b39f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ADD_SIGNED_ARB</name>
      <anchor>2beaca3371ab12a8a2870eb9f3dbc10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_ALPHA_ARB</name>
      <anchor>51cd6921cb69072baae5c5527da2c633</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_ARB</name>
      <anchor>d4c9f43d7ec9962afff14de8e1e26c4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_RGB_ARB</name>
      <anchor>11e172d19176c9dbc4a654f3ed0661d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_ARB</name>
      <anchor>eafd5182e917fd57c02593acfaf4cc37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INTERPOLATE_ARB</name>
      <anchor>c825a742197eb5727fbab86125fabd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND0_ALPHA_ARB</name>
      <anchor>8fe6481c363e98c6187fc5c46c42f8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND0_RGB_ARB</name>
      <anchor>0c6bc7f44854de31ee249e45cc6bb487</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND1_ALPHA_ARB</name>
      <anchor>f7c8b6f1a758bad73c2d66d211b3facf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND1_RGB_ARB</name>
      <anchor>365fa5dfad8bc9050186bad0fbccd3da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND2_ALPHA_ARB</name>
      <anchor>b2370c3879e2e722fb97f5d8d4917ad3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND2_RGB_ARB</name>
      <anchor>dedfa8f970adcbd17a1bf9b317ba247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PREVIOUS_ARB</name>
      <anchor>24a4ee159c9974051295a0950c76c865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRIMARY_COLOR_ARB</name>
      <anchor>e92ed5bf4c9ea82af212731519e4f954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RGB_SCALE_ARB</name>
      <anchor>8790c9d55cf268a27d1c8ceffcee2f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE0_ALPHA_ARB</name>
      <anchor>5381097cf8761a63fac7e0cd241dc694</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE0_RGB_ARB</name>
      <anchor>d6f48350acc935580b15f972fc88058b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE1_ALPHA_ARB</name>
      <anchor>52d110c63decc7cbd5c2c73a2dc3e577</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE1_RGB_ARB</name>
      <anchor>21bcd24f8985d2f2a73acd7b1f5cda7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE2_ALPHA_ARB</name>
      <anchor>76e177b9f5817fc8afc8ab993c59a58b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE2_RGB_ARB</name>
      <anchor>042d2781498f17131e6d5f217c49235c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SUBTRACT_ARB</name>
      <anchor>07084a221a5e2f372d7d3e38df084aea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ADD_SIGNED_EXT</name>
      <anchor>99a413f92f5d7f48eac150313e9c14fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_ALPHA_EXT</name>
      <anchor>255c21d2b3063606504b0beec5c8e2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_EXT</name>
      <anchor>2e273069e7699f4ff1d1351497ff6a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE_RGB_EXT</name>
      <anchor>f159195a87191c457a6f6b3ba5a6aa11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_EXT</name>
      <anchor>2237d910fdf7b66e9bd3167b9f90f516</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INTERPOLATE_EXT</name>
      <anchor>ddafb06c9b38577b00ec7fc1847afa8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND0_ALPHA_EXT</name>
      <anchor>e40184d42da6833f833b26c3e764264d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND0_RGB_EXT</name>
      <anchor>e1340b36e53e8944966733f91821482c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND1_ALPHA_EXT</name>
      <anchor>b0928f78d8cf1fe5513aaefdb9ae274f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND1_RGB_EXT</name>
      <anchor>4536bac66ad5f01113d5c844a03b9e11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND2_ALPHA_EXT</name>
      <anchor>3cfa377dc5d7259842117197b2bc8a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND2_RGB_EXT</name>
      <anchor>c46e7ba74ead005d719e703f326ac0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PREVIOUS_EXT</name>
      <anchor>de5ff6e748965ebce4f219069fcf02ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRIMARY_COLOR_EXT</name>
      <anchor>6349861278824b305ef32f02980bb577</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RGB_SCALE_EXT</name>
      <anchor>b6c506cf91e2a11ebb34c86d51cfd804</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE0_ALPHA_EXT</name>
      <anchor>641340cd5bdf7ef928abe4f61573fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE0_RGB_EXT</name>
      <anchor>224182f913d011209adfbb753608ec65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE1_ALPHA_EXT</name>
      <anchor>0530a1e623d0eca15ebc550a15655de4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE1_RGB_EXT</name>
      <anchor>12c782c4048426e0604c10717a39b545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE2_ALPHA_EXT</name>
      <anchor>b9cc98399f92da05d5cb2f5b1296d18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE2_RGB_EXT</name>
      <anchor>ae17331f4e7c3cb591633d89bef1de0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ALIASED_LINE_WIDTH_RANGE</name>
      <anchor>eab1bea19aab745e66b39860f3b8409c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ALIASED_POINT_SIZE_RANGE</name>
      <anchor>36db9789a611e54ea050f1368a5f38d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BGR</name>
      <anchor>35d2992fb6ceb223785f916798c69901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BGRA</name>
      <anchor>56707576fd3e2da55343c25da155294d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLAMP_TO_EDGE</name>
      <anchor>e90f81f48642444b4ba7fa5cacf40569</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LIGHT_MODEL_COLOR_CONTROL</name>
      <anchor>d46e3a863ebaff593693904190edbe22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_3D_TEXTURE_SIZE</name>
      <anchor>9eb2f6fcd1311d528057b82ea84ad75f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_ELEMENTS_INDICES</name>
      <anchor>9dd94df46c02d0d705915fda674ab1f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_ELEMENTS_VERTICES</name>
      <anchor>b6be24928d250f1a9e4e3d34a3ae9f4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PACK_IMAGE_HEIGHT</name>
      <anchor>38a7218f9071810d5aa631da23d6ae89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PACK_SKIP_IMAGES</name>
      <anchor>1ebbcabd1c72d2bee103207ff35e471f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_3D</name>
      <anchor>1660ed6ba07c342ff4ac182374d48b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RESCALE_NORMAL</name>
      <anchor>26be8568349f16a356797abb59af0c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SEPARATE_SPECULAR_COLOR</name>
      <anchor>da3e23d2924780debb18fbe2f9c54fb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SINGLE_COLOR</name>
      <anchor>f71a33341136f2a30f241af8107e9eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SMOOTH_LINE_WIDTH_GRANULARITY</name>
      <anchor>a5db837b996108c90673c2bc27976301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SMOOTH_LINE_WIDTH_RANGE</name>
      <anchor>f56abdbd62a3b09f6bf0f2d42be34443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SMOOTH_POINT_SIZE_GRANULARITY</name>
      <anchor>d452d03588a8433130ea344b22478b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SMOOTH_POINT_SIZE_RANGE</name>
      <anchor>4e846c594d59f16b86215e553fb574b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_3D</name>
      <anchor>6c865f303c89ec764158e0016e50d4a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BASE_LEVEL</name>
      <anchor>4054a5aebcfc3a6e1566802d1ecb161d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_DEPTH</name>
      <anchor>8177de06943e9e08b6f69767c8c18b06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MAX_LEVEL</name>
      <anchor>48898b4f27c2e100bd856fd4ea66d774</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MAX_LOD</name>
      <anchor>aa37f45604d20d8984672d908e608c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MIN_LOD</name>
      <anchor>e3c158c6a713b4faa2e8616292368f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_WRAP_R</name>
      <anchor>1b69ad7ea841f21165a25e58411b6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNPACK_IMAGE_HEIGHT</name>
      <anchor>a1e6adc033f5df7d4dbf160b5ee0e093</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNPACK_SKIP_IMAGES</name>
      <anchor>631a0e701301001433205a1c5ba9a4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_BYTE_2_3_3_REV</name>
      <anchor>ebe39160c74c33c76b1e77695a179747</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_BYTE_3_3_2</name>
      <anchor>d57d095154f5964429dc149add582257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_10_10_10_2</name>
      <anchor>57051f9ece699613fa17e87c9ec66910</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_2_10_10_10_REV</name>
      <anchor>efaf553edc188af69b624b40bbecc380</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_8_8_8_8</name>
      <anchor>c164b28463958d495e51702198e6d1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_8_8_8_8_REV</name>
      <anchor>eafffc5d69d3f9e05af201e59c0e78d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_1_5_5_5_REV</name>
      <anchor>e0f0fe9a3a82b9a25d0d35aa20931097</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_4_4_4_4</name>
      <anchor>da3c99cc89e14622e4c62b911fda24fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_4_4_4_4_REV</name>
      <anchor>30dd1a52571e3a1deffa686bf1208c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_5_5_5_1</name>
      <anchor>654599021b9e26bd6feb4c7cd001ef7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_5_6_5</name>
      <anchor>ecec622a15619219f88d13271b5fd581</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_5_6_5_REV</name>
      <anchor>513c57ee211a7cb499956f20e1f0363d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ALL_COMPLETED_NV</name>
      <anchor>f898aac1ca2402680749e3dbe8cf94a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FENCE_CONDITION_NV</name>
      <anchor>fc2a41db7ed2cda1d7dd1785b31338d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FENCE_STATUS_NV</name>
      <anchor>b7fc7646ef3948e81380a5db1d2728b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_BUFFER</name>
      <anchor>7180045dcb52b22af2cd0366026bc3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_BUFFER_BINDING</name>
      <anchor>5ecd4619421b6ddb35898ec4d38a9815</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_ACCESS</name>
      <anchor>2f96540081e62b2137b049d19dffe23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_MAP_POINTER</name>
      <anchor>627d65edccdcab9bae34bbec24d20f90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_MAPPED</name>
      <anchor>f551f91736f672b4da7cb21790040656</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_SIZE</name>
      <anchor>97c3f50440fbe7eb098cfeede90d1686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_USAGE</name>
      <anchor>3c6158f6c9440fe495d4e14c2dea95a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_BUFFER_BINDING</name>
      <anchor>a0c030b98068db9ec0a0e49d0a0ef324</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_FOG_COORD</name>
      <anchor>c388147bbc1fc6a83e5f077ba26d1cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_QUERY</name>
      <anchor>3a40361f1742ce1d96079817f5b02640</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_COPY</name>
      <anchor>d35941788a5c3ad4a19c3263fff294e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_DRAW</name>
      <anchor>c1915ebc9c952b9e7140f4bcc78319a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_READ</name>
      <anchor>40b4752ffc850a91fc26d507395511fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING</name>
      <anchor>609cd6a89260d808c01a1f94bfb1193f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_BUFFER</name>
      <anchor>d26c63125c72cbf0347b589d51676e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_BUFFER_BINDING</name>
      <anchor>2af45d6380eba1087a8e5bc684d6ab72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD</name>
      <anchor>54ca0b81f388c56a0f5ed4284de238a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD_ARRAY</name>
      <anchor>1d2616b400f9ea5d82f5ce6dfd2e53b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD_ARRAY_BUFFER_BINDING</name>
      <anchor>cf2ea0fb7bfbb4a5d030d987d88407d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD_ARRAY_POINTER</name>
      <anchor>80ead4fe1d89080d7f830e9dd1fd8871</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD_ARRAY_STRIDE</name>
      <anchor>ec9cd977adc76140ecc083db90d5cb2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD_ARRAY_TYPE</name>
      <anchor>7a488608b5044635725a445489ce55f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORD_SOURCE</name>
      <anchor>bf1572b696205f638704a84bd46f85f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING</name>
      <anchor>050ffbb90bb6f9feb4823200094703d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_BUFFER_BINDING</name>
      <anchor>25b4469ee770b86f9cfb5a33d925bbb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_BUFFER_BINDING</name>
      <anchor>b38c3ddb781a053aa5b5f7451f4c93af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUERY_COUNTER_BITS</name>
      <anchor>ffc3fd3d326f4bc17ec3ae70f64e3f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUERY_RESULT</name>
      <anchor>5f22b4318913632dfd529bc7536fa1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUERY_RESULT_AVAILABLE</name>
      <anchor>a3b4655feeeed8b7e7e981c994af1731</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_READ_ONLY</name>
      <anchor>fe26dad29b9cb2620e815e5fecea71f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_READ_WRITE</name>
      <anchor>a5fd429fd2b79f5936c1421afb205dcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLES_PASSED</name>
      <anchor>b0f6ab004415a67dd3d9be86546c0391</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING</name>
      <anchor>a369d6ae05d52b3c105180927dda1680</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRC0_ALPHA</name>
      <anchor>bdf71dbfa895309419063f5ed71833e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRC0_RGB</name>
      <anchor>1631beb4d4744c2dbb985bd6d3d1964c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRC1_ALPHA</name>
      <anchor>35a28830b374907100ab8886c885bbaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRC1_RGB</name>
      <anchor>3f37dbd949df78380b1ad8ba1cb84ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRC2_ALPHA</name>
      <anchor>f399fc8aedb7069dda597b490b18fa1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRC2_RGB</name>
      <anchor>3d502987f54308264b36939a4d2bb3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_COPY</name>
      <anchor>0009b9a26c78d29e6ed13cc056edc720</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_DRAW</name>
      <anchor>b7dffdc215fbbe75b6ccacfecfc14648</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_READ</name>
      <anchor>2cf81671d9eb48057082ae18523d5a4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STREAM_COPY</name>
      <anchor>6321e334ff05c0a003c26d5f953989e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STREAM_DRAW</name>
      <anchor>aab0960233739efbd5d1ae2b2fb919cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STREAM_READ</name>
      <anchor>bd37e222235517858eb4fe1d8c09de40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING</name>
      <anchor>431fc201ab69cc23b9e4040333c328c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_BUFFER_BINDING</name>
      <anchor>79550920c9e83ff8535c6bf8e51b2ebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING</name>
      <anchor>65e409180ae116e584f27b88d3429e2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_BUFFER_BINDING</name>
      <anchor>c601d7cb29a4d3d35e2e7654beab6e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WRITE_ONLY</name>
      <anchor>b43997c5949dffce6674a7bb8a3059da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_BUFFER_ARB</name>
      <anchor>cb1c5ea3239de87d09959457ffa42f6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>a31e7d2730e196f2f41933e1b70ae121</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_ACCESS_ARB</name>
      <anchor>853f4c607af437774c13275eb0b3e0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_MAP_POINTER_ARB</name>
      <anchor>f75d1ffa1ce8a2a75fce9f81384f6bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_MAPPED_ARB</name>
      <anchor>095119080825a1f803a87031750c7217</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_SIZE_ARB</name>
      <anchor>79b32a071af137fa59ca406e3e8254e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUFFER_USAGE_ARB</name>
      <anchor>f76ad34f6b2ded96a99fa8fce2731a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>c582a701af66e598087965f9531bc30e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_COPY_ARB</name>
      <anchor>ab5519bbfacbf59b42f90d4432d92fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_DRAW_ARB</name>
      <anchor>08d478afbd15cb6a37c101dc152f7b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_READ_ARB</name>
      <anchor>381dcfb8b8bfd7bd1082f82cf0f78535</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>eb36fa5904fd28bfca696c4305bcbe14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_BUFFER_ARB</name>
      <anchor>e01505dfe71e32eddbd73c3c0ce713ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>37d58cc04db7ee70ec314e007b4d9f5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>28ebc90da902b2a52b2fbf729eb9aba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>46a562817d0b8da437857f523ce8ae3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>62044a50ad83ae9df0b7a6bfc6f59909</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_READ_ONLY_ARB</name>
      <anchor>fd2a43c89320f8b77dc60bff0f0ff8ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_READ_WRITE_ARB</name>
      <anchor>6081beecc6dc9b99f3b321e029c4757e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>2a696fc689fa84f48d9ed7cb195695b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_COPY_ARB</name>
      <anchor>ecd9dc2bd498061b27ff70ec41f27886</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_DRAW_ARB</name>
      <anchor>52d827f177e657db3ce0c6fdb33a94b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_READ_ARB</name>
      <anchor>35ca79d477fe20c1be752a615d373b89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STREAM_COPY_ARB</name>
      <anchor>b8116c517fb5aa039889b208e2d0a5be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STREAM_DRAW_ARB</name>
      <anchor>e37a7ed05a3194b55fdd38f0ab1ce05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STREAM_READ_ARB</name>
      <anchor>f7ee8b15d3bc29b44d164d30af8259e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>0280aa997eea1c697aae3e1d1e8aa8be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>c8f950c64ca4a7a0bf04019c4f1c9980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>2edd2fc34f4005ad63607fec6c1aba3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB</name>
      <anchor>77ad736f6cf5a42926e5b55d2e7482f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WRITE_ONLY_ARB</name>
      <anchor>18ea1a5fccedc8a14d87c0849b5f47db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_ELEMENT_LOCK_COUNT_EXT</name>
      <anchor>255a5ce7f18b7f1b28746355714bfe84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_ELEMENT_LOCK_FIRST_EXT</name>
      <anchor>48ceffdaa56a2f7055a7abb661325528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_OBJECT_BUFFER_ATI</name>
      <anchor>dacb3c6c1a78e2ad0abbcf8a16c5309a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ARRAY_OBJECT_OFFSET_ATI</name>
      <anchor>329a0d52b40358ca2bc25fb6cbe883d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DISCARD_ATI</name>
      <anchor>703dead2340f8d73cced27ea64df09e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DYNAMIC_ATI</name>
      <anchor>8685b152c484ad0c1730a16f114691de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_BUFFER_SIZE_ATI</name>
      <anchor>47668fc6d0e4914fab72354203a44f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_BUFFER_USAGE_ATI</name>
      <anchor>3043243a3dc062880f80a4f738fc50f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRESERVE_ATI</name>
      <anchor>c3931a18d55a4b1cb50ff8219ef6be6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STATIC_ATI</name>
      <anchor>e0a0d28ca09a0aa2f41d8eafb0a1651a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ATTRIB_ARRAY_POINTER_NV</name>
      <anchor>8048490b9efe0cda02983be461c6e541</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ATTRIB_ARRAY_SIZE_NV</name>
      <anchor>cab0475dba9943e0f97b5d992194e2bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ATTRIB_ARRAY_STRIDE_NV</name>
      <anchor>06ed303f8a6114fc221770ef9e7b4b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ATTRIB_ARRAY_TYPE_NV</name>
      <anchor>f9bb2b993fb601e83d8d204a294a4e58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_ATTRIB_NV</name>
      <anchor>6141718b8526c4b10e631bc03ced2dd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_MATRIX_NV</name>
      <anchor>8562500ab7885a0efba03e3e8d02722d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_MATRIX_STACK_DEPTH_NV</name>
      <anchor>69a844878a8cd9b0fb5dceb3b1a2df22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_IDENTITY_NV</name>
      <anchor>ed38ef7d3b31290feb616105633a5281</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INVERSE_NV</name>
      <anchor>68b2ee52e4d9e41ad25c0aad51fa9bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INVERSE_TRANSPOSE_NV</name>
      <anchor>089b2b6e7ff5b82c321cf52bc8bbcab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB0_4_NV</name>
      <anchor>8039e0f59b39f98409db8f488e0dfe2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB10_4_NV</name>
      <anchor>a6cadd8e9259c24940458ac74be636e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB11_4_NV</name>
      <anchor>28fb0a7695ec0ba03a24103d8c00f5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB12_4_NV</name>
      <anchor>e34201c834d691412c8ea7b97659b331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB13_4_NV</name>
      <anchor>163f00fdaf297768bd4a92a50c53d782</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB14_4_NV</name>
      <anchor>cfcfd02a67755dc57789960ad4fa4ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB15_4_NV</name>
      <anchor>42d4b8efdf7f2127f7b4cbda1c98cf62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB1_4_NV</name>
      <anchor>b215283c4126aa7da1bb825f6a9e0069</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB2_4_NV</name>
      <anchor>65a09724705239db031d852081f678cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB3_4_NV</name>
      <anchor>0aea5c4cc61c0feaea7e4e86dc422439</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB4_4_NV</name>
      <anchor>cf8df6fe5fa1f71dfb42b1b793821b26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB5_4_NV</name>
      <anchor>e139967363da4a568386b34dbf6f47cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB6_4_NV</name>
      <anchor>c420ae69bbe481ae1c249889b18fc86e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB7_4_NV</name>
      <anchor>7ca5ae2e8113e7781a3f28305aead191</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB8_4_NV</name>
      <anchor>3b414212d6fa089193b8f7c7d23c00b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP1_VERTEX_ATTRIB9_4_NV</name>
      <anchor>6bc2e1241dcf64a4cb0c8f46d528f59d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB0_4_NV</name>
      <anchor>88a130b8af32cea0734636d9c7079759</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB10_4_NV</name>
      <anchor>23326bbaec470f3a1acc2d05f52ed8cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB11_4_NV</name>
      <anchor>215ee8ba8a95a4895c75d5dd0be1eb28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB12_4_NV</name>
      <anchor>cabe05412382f2200c02030630626e64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB13_4_NV</name>
      <anchor>856d8fd551e839c47e9cc8b05f3658c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB14_4_NV</name>
      <anchor>8abdb8292534cf5f9d3fe652e9bb8feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB15_4_NV</name>
      <anchor>69099070a7a15f973823a91845d553cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB1_4_NV</name>
      <anchor>bba3d2e80643ab245bdca062223689af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB2_4_NV</name>
      <anchor>4e3e47130fa8c1b06437bfc6dfc66fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB3_4_NV</name>
      <anchor>b7e677149731afde7fe29999abd28e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB4_4_NV</name>
      <anchor>b63fbd2dc7d6c60e3fc78c2fb0c66e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB5_4_NV</name>
      <anchor>c493cec6642a7193e883504f6033b286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB6_4_NV</name>
      <anchor>120155996331fb6e5db67b61e64a5e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB7_4_NV</name>
      <anchor>e65522a4f40973bff20aee5d4c17abcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB8_4_NV</name>
      <anchor>750015713b5caecb22a3a63e41ee9498</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP2_VERTEX_ATTRIB9_4_NV</name>
      <anchor>94df31200946f64b8d912a9b936da598</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX0_NV</name>
      <anchor>b15e7ff788b496109136f3d10ae7ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX1_NV</name>
      <anchor>8ebe45a1754be4f1f4ea4fe3ea556736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX2_NV</name>
      <anchor>b8f1d3faa5a8b0b6e8b53e1a2c5affe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX3_NV</name>
      <anchor>1d9c44d10393450b4ec2f3efef7a6b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX4_NV</name>
      <anchor>d5543d563cc5fe4290f252eba28177c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX5_NV</name>
      <anchor>894ebe705df187ee6d3be4d5cdf9f954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX6_NV</name>
      <anchor>f51dfb760407db116f98c5f6710f535f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX7_NV</name>
      <anchor>9b1f62838126bd3206a9aa764cd8ed67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TRACK_MATRICES_NV</name>
      <anchor>c14bd9b6d090c347da79bc56ad868fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV</name>
      <anchor>aa1bd0166d1045c9c35c4826a03e306b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW_PROJECTION_NV</name>
      <anchor>dedfe2d8118aa41acd21b77c549d17a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ERROR_POSITION_NV</name>
      <anchor>98b6ed8fdbe1eed03982ff06434bbc0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_LENGTH_NV</name>
      <anchor>8c6825010eed07eadfa291d96c1c6787</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_PARAMETER_NV</name>
      <anchor>edcf0fb64d7e003fde2ac0b00b82a0ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_RESIDENT_NV</name>
      <anchor>e7ba31118fee490050fd3a973d4d7381</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_STRING_NV</name>
      <anchor>d38b2a0dcd3ae914ec54d2904c05c066</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_TARGET_NV</name>
      <anchor>692077ea3ca1b0a1e3591dcd61a0a0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRACK_MATRIX_NV</name>
      <anchor>f71f788cfcc0dce60be49adc185e2ec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRACK_MATRIX_TRANSFORM_NV</name>
      <anchor>1fcc09e8d6bb2014baf1235317f5ff35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_NV</name>
      <anchor>a332af8be4d7a375070c992e3d93cdfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY0_NV</name>
      <anchor>7524fd78ca0e3d53ff8b216ade1e577c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY10_NV</name>
      <anchor>f8898bb67bea879b233a6e55675a9c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY11_NV</name>
      <anchor>4cea5bbb704fb4cca3ad4a31640d45ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY12_NV</name>
      <anchor>18d2e2cbfe085148b81ff2d1e8ab8415</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY13_NV</name>
      <anchor>99c532c7dc8bccb897f0ecdfe947ad78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY14_NV</name>
      <anchor>6fcd9def4174b7bf966ee3b5facc2dc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY15_NV</name>
      <anchor>2bacb7d23f1cefe799a75fc18f003617</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY1_NV</name>
      <anchor>b30c0e413eeaf257a55a0d20896acebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY2_NV</name>
      <anchor>91441e9ba61425a6badc3cded00aca7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY3_NV</name>
      <anchor>ff82802cc29b5dee4e80531e5ed02bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY4_NV</name>
      <anchor>97f6a6cf66a84d42218b11a843a9447e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY5_NV</name>
      <anchor>8739e37706cad368fd5784fbf7b72fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY6_NV</name>
      <anchor>1937170099696dd012902c338accb353</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY7_NV</name>
      <anchor>91af9bf3adfa445374ca477ac9b17276</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY8_NV</name>
      <anchor>5ef51a73c1491903cc90bdb02ff18fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY9_NV</name>
      <anchor>1e22f24af9b348d045d32866ceaddd00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_BINDING_NV</name>
      <anchor>d312df7c68c51acaebaa633380543efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_NV</name>
      <anchor>b5a7778b2748992e5770a4a627a645fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_POINT_SIZE_NV</name>
      <anchor>d9217a671972a303a8b863a253f5b631</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_TWO_SIDE_NV</name>
      <anchor>007ab043691b0dbc1b40b5c3cfb6cb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STATE_PROGRAM_NV</name>
      <anchor>9f4b909ccf5a60b7499d1bc274f66d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BGR_EXT</name>
      <anchor>32be6e62b1a51becc92406849a539734</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BGRA_EXT</name>
      <anchor>fbca5fa2e51fe8d9a1a33d2989cc5a9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BIAS_BY_NEGATIVE_ONE_HALF_NV</name>
      <anchor>c66b69ca7f52f2784825db7359a9b28d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_SUM_CLAMP_NV</name>
      <anchor>2f84b9da832d5a69109de6b472cd8bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER0_NV</name>
      <anchor>15ae680c2bbc775cfaa8d522aad22710</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER1_NV</name>
      <anchor>56b5f5a52a6961ff1821af209ac0439a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER2_NV</name>
      <anchor>d7a406eef71a77c86d2d8da6ef2bb1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER3_NV</name>
      <anchor>bc2bd15b13c6a650bbbfd150af868425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER4_NV</name>
      <anchor>c7df589b288a8aa76302366e0a3a4b81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER5_NV</name>
      <anchor>1c4e81857846568ab09f7f1f0a00955c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER6_NV</name>
      <anchor>a94783ba75f06b19449413f66820e636</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER7_NV</name>
      <anchor>d364bf97d12dfc83a755d45d013ac19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_AB_DOT_PRODUCT_NV</name>
      <anchor>962d60fe8d7c581e25b60ed55c426345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_AB_OUTPUT_NV</name>
      <anchor>42f6d61992647e0647a8b55b56571568</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_BIAS_NV</name>
      <anchor>b1d0ee0cfd498a12dedcc4b70e68e287</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_CD_DOT_PRODUCT_NV</name>
      <anchor>d15a48be9e3f50fd4a9692e76930e297</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_CD_OUTPUT_NV</name>
      <anchor>a5c280de129437b502eebc7bb152bbe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_COMPONENT_USAGE_NV</name>
      <anchor>dd52627ebaf78ad5374e17435b1bad64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_INPUT_NV</name>
      <anchor>cf47936943c4cb3a44e7759ba589a2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_MAPPING_NV</name>
      <anchor>7b3d91e844bdfe508cb18e16b3b14c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_MUX_SUM_NV</name>
      <anchor>45deebc1bbaa4d760e611fa4e15f73a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_SCALE_NV</name>
      <anchor>f593ab0f866947ed9f3903835ce7567e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINER_SUM_OUTPUT_NV</name>
      <anchor>7afda3e143a2d4db3c7d542b9103dc5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_COLOR0_NV</name>
      <anchor>352100abbffda4fb8763f771adb664f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_COLOR1_NV</name>
      <anchor>659b1d6a4709678df49b74148425a820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DISCARD_NV</name>
      <anchor>e68786cfd2f64aab537e4224bea9d9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_E_TIMES_F_NV</name>
      <anchor>db43bdfd4107d85aaf91932e56f050bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EXPAND_NEGATE_NV</name>
      <anchor>f4642911ed4604ed59c3241ce88fce8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EXPAND_NORMAL_NV</name>
      <anchor>97359e41199839e011642c84db08af72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HALF_BIAS_NEGATE_NV</name>
      <anchor>4da18e7beca683d530f52f4d6b5c502c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HALF_BIAS_NORMAL_NV</name>
      <anchor>dd334c3322f5879938b61ef2c5ffe707</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_GENERAL_COMBINERS_NV</name>
      <anchor>718e9467103f10c718e8f409030520d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NUM_GENERAL_COMBINERS_NV</name>
      <anchor>8b833e034f3ea18e82df6b4e5178f50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRIMARY_COLOR_NV</name>
      <anchor>4c678d734016b53f2d57bf4466b45440</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REGISTER_COMBINERS_NV</name>
      <anchor>6b0ab5ec0f5327b8629657906908e3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SCALE_BY_FOUR_NV</name>
      <anchor>c925964c1ef8efe8c07ce6ff633f6b6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SCALE_BY_ONE_HALF_NV</name>
      <anchor>b245df801bb5089f11f3dce96d8ff1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SCALE_BY_TWO_NV</name>
      <anchor>0a75d122faea551b19a9b64ec03a8d3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_NV</name>
      <anchor>1cdfbb05f432e472e337d5077ba42440</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_IDENTITY_NV</name>
      <anchor>8f29ce5c18cf8bce1cb77ea8057a7e3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_NEGATE_NV</name>
      <anchor>5c3d751967eabe1e22db62a9dbc15f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SPARE0_NV</name>
      <anchor>4dce054391cd554881fd7cbe7e5ea379</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SPARE0_PLUS_SECONDARY_COLOR_NV</name>
      <anchor>c039c3e9f3bd330d587b25b7ec972458</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SPARE1_NV</name>
      <anchor>6ec220f12ae58fa5c64e92dd9d1a48bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_IDENTITY_NV</name>
      <anchor>817936bba382e9bec560664aa31e5e76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INVERT_NV</name>
      <anchor>a2d0a1cc18cd57807a313a82e120c632</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_A_NV</name>
      <anchor>e8c75a16d2f29930b3121b3f70d95c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_B_NV</name>
      <anchor>321d01491b1019d5d361322e2952a740</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_C_NV</name>
      <anchor>6a30897c9b2c3ed36d990b5977d37bfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_D_NV</name>
      <anchor>2d2ce31e463d010642e1311cbdec60c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_E_NV</name>
      <anchor>7c5cc7793e6708a28828760af707bcea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_F_NV</name>
      <anchor>b8403e4070fbf878521bbd2fc4a3cf6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIABLE_G_NV</name>
      <anchor>64eb49850f09015df3c02ab7fe2fbe0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_COLOR</name>
      <anchor>aeb7ae1c6700f8dc186672a2abdd825e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_EQUATION</name>
      <anchor>2e51c4b0c223640236a52fb26503874b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_MATRIX</name>
      <anchor>30768d064fa99d8bb5996bafe7914612</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_MATRIX_STACK_DEPTH</name>
      <anchor>dd7432a526d1858fb8e19c31574527eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE</name>
      <anchor>15ed9454505d8ed1b3f3598d231ed9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_ALPHA_SIZE</name>
      <anchor>1471c5feb1934db1bf576fc60c6e97e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_BIAS</name>
      <anchor>32cd65a4ace7f64260fbec54c818d3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_BLUE_SIZE</name>
      <anchor>e8e8734ba40b80cfe017c1a961093a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_FORMAT</name>
      <anchor>9e3a3ded630592037491f0c62fd8a381</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_GREEN_SIZE</name>
      <anchor>5a9954d296cfbdee62b745eda2bca3b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_INTENSITY_SIZE</name>
      <anchor>4a290871d9e2f9022dd8e964d78bdbdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_LUMINANCE_SIZE</name>
      <anchor>7bb97bb6797e2ce543d0314bcc6f7530</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_RED_SIZE</name>
      <anchor>8afb15e935de90877c7e3eefdd28c133</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_SCALE</name>
      <anchor>ec92579e9017715501644fa75665b1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_WIDTH</name>
      <anchor>55444a6503044558791cb85d4e9b100c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_ALPHA</name>
      <anchor>a8e645785d8215f658c2576d90df1e5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_BORDER</name>
      <anchor>753677dedf883b38fa6c5502b17c4e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_COLOR</name>
      <anchor>44a85282cd9022542edd9b29b44b4221</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_1D</name>
      <anchor>ada4e8aa2327463487b11db0a8dee20a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_2D</name>
      <anchor>b6596a0c07d03c03ad72b6406b8fa0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_BORDER_COLOR</name>
      <anchor>161f3ba1898cd146f31651c741d8daa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_BORDER_MODE</name>
      <anchor>927d3aa8df6dcd426be75032bdc8620b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_FILTER_BIAS</name>
      <anchor>8604966237a6b79980b06c249b02f968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_FILTER_SCALE</name>
      <anchor>540318e98b09af62428147cceff01d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_FORMAT</name>
      <anchor>9c7222b9262e32c7b0cf406277c13f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_HEIGHT</name>
      <anchor>3eff403f76d44094d4bb7c04156afe46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_WIDTH</name>
      <anchor>a5e1fe3544d20624c29fde754752e537</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FUNC_ADD</name>
      <anchor>f477e4fa3e741406c0c3532cc5062758</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FUNC_REVERSE_SUBTRACT</name>
      <anchor>8439350af7b66d0115f23d27a6511917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FUNC_SUBTRACT</name>
      <anchor>d0017e5c11a6be44b705d87053607fca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM</name>
      <anchor>dc63b539a0896bef2cab522bc7711947</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_ALPHA_SIZE</name>
      <anchor>dfd6f0543d2f48afa4c05d56d9d37748</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_BLUE_SIZE</name>
      <anchor>5ba7b608a146532635aa3a058c14e67e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_FORMAT</name>
      <anchor>dd0e20ededc17589551b9b24d07695d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_GREEN_SIZE</name>
      <anchor>255c0a3d5818cb80ba4c74525a62f6f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_LUMINANCE_SIZE</name>
      <anchor>699154088022f561f7c39b34e535069a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_RED_SIZE</name>
      <anchor>7ff8aa546601bfc5ddabd57e3d74e9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_SINK</name>
      <anchor>9fbf1c60c5018d99f94dbab3f6c275e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_WIDTH</name>
      <anchor>b82a54c12a829fc926927616b64ca8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_IGNORE_BORDER</name>
      <anchor>b6c1b08ed3bb3c17b18d04823c9b073e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX</name>
      <anchor>d615339259858b91f67bf893e2a0b1b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_COLOR_MATRIX_STACK_DEPTH</name>
      <anchor>00e586a66947fe6f51e0aec955ebf44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_CONVOLUTION_HEIGHT</name>
      <anchor>02c69b382a20810d5c3c8f036004cb8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_CONVOLUTION_WIDTH</name>
      <anchor>3a8d919f43fc44308410859905737c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIN</name>
      <anchor>9aa39c311e7b5958879e80579cc129aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MINMAX</name>
      <anchor>c47fcd809a49db130915a0b2da6795ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MINMAX_FORMAT</name>
      <anchor>4908c9eb24dfe46d85bf377a63175ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MINMAX_SINK</name>
      <anchor>bcfd969299540d4ef201e2d4152684c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ONE_MINUS_CONSTANT_ALPHA</name>
      <anchor>316d4feb613d04854aba437a278add28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ONE_MINUS_CONSTANT_COLOR</name>
      <anchor>a9fd0672b1352e0a68a7cf268df3734e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATIX_ALPHA_BIAS</name>
      <anchor>8d54b652d3f8d97c40e595608c908936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_ALPHA_SCALE</name>
      <anchor>501b391e69fd678e081402dc457233c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_BLUE_BIAS</name>
      <anchor>ee6e70167ae07c1e9281687f85e9bf13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_BLUE_SCALE</name>
      <anchor>422df7e6dfd366de9f78e790bb60d813</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_COLOR_TABLE</name>
      <anchor>2befa03ff3c64e5bfd7f870f546fcbb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_GREEN_BIAS</name>
      <anchor>3156ca5678724982c303956e282a8d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_GREEN_SCALE</name>
      <anchor>5cce706c60938c8abadc3adc82a41384</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_RED_BIAS</name>
      <anchor>47acaeed7320bc1c6bce0fee1fa2d5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_RED_SCALE</name>
      <anchor>af54c3a8513abc52510d7e89b9e056d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_ALPHA_BIAS</name>
      <anchor>194d32b291e6ce5f66c9c0c02d4e01ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_ALPHA_SCALE</name>
      <anchor>0ec276b53dbfbba4912300766c98764d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_BLUE_BIAS</name>
      <anchor>095942ecfec0da250c326a71fb00db39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_BLUE_SCALE</name>
      <anchor>e48a6625f550f29d43691a2b95235e59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_COLOR_TABLE</name>
      <anchor>a497771906b9d63ecd2e43db2fa96283</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_GREEN_BIAS</name>
      <anchor>0a42963578aad647b5b86d5b0e5f2778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_GREEN_SCALE</name>
      <anchor>73d4a426cf831646db38f250cef87cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_RED_BIAS</name>
      <anchor>d0d0540af972ced1abaa41c3aa50c352</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_RED_SCALE</name>
      <anchor>7619915fb0608f760b086a983e6f1aee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_COLOR_TABLE</name>
      <anchor>fa0aeb76019d88f6aabdd78bd9f99255</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_HISTOGRAM</name>
      <anchor>2716960c964c19c0f731212a9d87353e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE</name>
      <anchor>1fd5301bba01002fbdc77099780c6e56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_POST_CONVOLUTION_COLOR_TABLE</name>
      <anchor>ea3b3835746e512db9dd4d8faa53802d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REDUCE</name>
      <anchor>1dbc0286954509fbecea26fb49347c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REPLICATE_BORDER</name>
      <anchor>a9566ae6ab500f9fcc95d0a0a95d7b2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SEPARABLE_2D</name>
      <anchor>e62aef209252ace8373e8aa83fd44eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TABLE_TOO_LARGE</name>
      <anchor>cb8af967f196db31e975a38467021707</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_WRAP_BORDER</name>
      <anchor>e639ed1f3ab1e4a951bcabc4b89f14d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_COLOR_EXT</name>
      <anchor>60ec3cc2bc6c84b12ef218fa88f746de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_ALPHA_EXT</name>
      <anchor>547d3c7f8887be69ac599993405eccca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONSTANT_COLOR_EXT</name>
      <anchor>3163be56d61841a830b74b1cd4cd94c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ONE_MINUS_CONSTANT_ALPHA_EXT</name>
      <anchor>fd2f7cbb10dc976a31efb8189d06ffef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ONE_MINUS_CONSTANT_COLOR_EXT</name>
      <anchor>371e2f91ba7a606110eeb79897b18a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_DST_ALPHA</name>
      <anchor>1e8f20eb4f51cb2254e13789a19f48cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_DST_RGB</name>
      <anchor>c3979a3a4c982af6bc325e14ab943cd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_SRC_ALPHA</name>
      <anchor>f2983dce40f413d43ca839abdeafd3ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_SRC_RGB</name>
      <anchor>eb51171f8c89cddec550fba045e62651</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_SUM</name>
      <anchor>d128c4352d240ad0dbdd574fbf5c00a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPARE_R_TO_TEXTURE</name>
      <anchor>1dc7d6e1f3357d3b9e686b800d2d4ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_FOG_COORDINATE</name>
      <anchor>c484320c34676d56821edb530042524a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_SECONDARY_COLOR</name>
      <anchor>498903538395b6ff653e63d57d1a615c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DECR_WRAP</name>
      <anchor>e394492c09563af8f82764c864d77864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT16</name>
      <anchor>26b057c4fa415d8de41d43990828b0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT24</name>
      <anchor>d871b289b8410082db98e4b3af0301f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT32</name>
      <anchor>834857c13895c0375a5d2f4f0df7c7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_TEXTURE_MODE</name>
      <anchor>878be7212e908bb676501a98cfee4a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE</name>
      <anchor>a4c840736b2b88dc9b917ded6105d1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY</name>
      <anchor>4bfc7f76d272eda015e225e0b29555ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_POINTER</name>
      <anchor>d2cfb69cc6d52e42b361659cc793e94d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_STRIDE</name>
      <anchor>e130784bc3a0b50a7cd3b20aaf0d1b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_TYPE</name>
      <anchor>a6440b6edfac2ad68e3fde151ccb8813</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_SOURCE</name>
      <anchor>b8c54153bac17581605fafd9d973df33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_DEPTH</name>
      <anchor>e546ff0a0f2123ffb97ad0a3c9bc3448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_GENERATE_MIPMAP</name>
      <anchor>8d7cd84f0b84e7a77585c8c695f6709f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INCR_WRAP</name>
      <anchor>e9efa4d7622ad01999c4c29081218943</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_LOD_BIAS</name>
      <anchor>f3c04d4a742575ddfbfbea5569f8386d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIRRORED_REPEAT</name>
      <anchor>05bc3a1fdd98251d126a8946a10f9dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_DISTANCE_ATTENUATION</name>
      <anchor>7ad856733e5bc9530270fb24d52e545b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_FADE_THRESHOLD_SIZE</name>
      <anchor>ea5e5751981b4dbce199bef211d40c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SIZE_MAX</name>
      <anchor>171aeb07c5b056c848d518caaec78bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SIZE_MIN</name>
      <anchor>1b40949a3039e44a2fb5e7a9a6ff6ded</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY</name>
      <anchor>6ac28b896f75279635379ad3df75404c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_POINTER</name>
      <anchor>91c34b3865bc510b1a61738cb2634aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_SIZE</name>
      <anchor>ccbcd313b5484e96c78edf37b67b0498</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_STRIDE</name>
      <anchor>6de5c3369b29b78b9e817e130c4e13a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_TYPE</name>
      <anchor>a1affab18bb7c6679745f2e3bb10ad3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPARE_FUNC</name>
      <anchor>06b8fecef765b110cff1a8aa1adbd794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPARE_MODE</name>
      <anchor>f5a50515d121e0ef24a67977c667add0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_DEPTH_SIZE</name>
      <anchor>73ddc0f0c3f8f296d0b01da64b710193</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_FILTER_CONTROL</name>
      <anchor>375902931852ab1b76ef575c01746b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_LOD_BIAS</name>
      <anchor>40c7ab0c2d1b3d6c7d12cdb317bb3e61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_DST_ALPHA_EXT</name>
      <anchor>649e5e1cfad83a4c4e8c62e21d3be4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_DST_RGB_EXT</name>
      <anchor>6b724151316c69675e0bbc924d0f19a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_SRC_ALPHA_EXT</name>
      <anchor>77fadfeb10316263647b8e8b5096e33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_SRC_RGB_EXT</name>
      <anchor>8757ee79809302512de0348aa80fbb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_EQUATION_ALPHA</name>
      <anchor>85a60a922c2e2abe0838e20bbcc7dbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_EQUATION_RGB</name>
      <anchor>2d24de280ec5f40a3c9e42f488ba0236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL</name>
      <anchor>43c7205c5f4dc7a535bd32817766e272</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL_VEC2</name>
      <anchor>40a09ccdfe230775cf871b10f4361183</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL_VEC3</name>
      <anchor>0c51fbe743a6c9da5d2f7ac4306b66df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL_VEC4</name>
      <anchor>1985184535af747c30a8a12481e2ffd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COORD_REPLACE</name>
      <anchor>629de8cb4586f47cc1fb687961b98dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_VERTEX_ATTRIB</name>
      <anchor>5bb317422e4b2f35eb0f54f625dfc49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER0</name>
      <anchor>a2469283a1f0e9ac2e284fda0986904b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER1</name>
      <anchor>2d6bd6c745a1de4d1465f593fb9c6490</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER10</name>
      <anchor>442e587e94fbac12a5295a511215183e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER11</name>
      <anchor>3dff209c91c5e127ec86e459ca6ad46a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER12</name>
      <anchor>061a16dbc7b68f091e1903067b929067</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER13</name>
      <anchor>bdbe6e924fa1252fbd9d67e292d4b93e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER14</name>
      <anchor>819521c69534374257cebeb5e2025d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER15</name>
      <anchor>46467585334deca0ddc280cfdff4965e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER2</name>
      <anchor>b3e702cb6674aec6967dd262580942cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER3</name>
      <anchor>72edb5a40dd8de4cedc6bdc8d03f5158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER4</name>
      <anchor>6dc6a00d55ace50abd475919abe731b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER5</name>
      <anchor>42b24eef0f5ea7e18cff8280b99fc75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER6</name>
      <anchor>3ddf0efa0deb687be24a1320b18a951b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER7</name>
      <anchor>0785682bd6abfebf09c7d9824e9e0c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER8</name>
      <anchor>b4c4e3ed6fa6175de281ffca5447e44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER9</name>
      <anchor>2f5f605eddcf20b6e45962a51533d420</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_MAT2</name>
      <anchor>b66c332d55f70b7fe36640d49235a7d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_MAT3</name>
      <anchor>61fcf58656eb22c75d2353e091458e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_MAT4</name>
      <anchor>f2f9eda8aec4c169cf1800b61ead61fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_VEC2</name>
      <anchor>e32c545990d8412e8a8246632df99824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_VEC3</name>
      <anchor>3bd312b25bbe841d5231ad69c4a0541a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_VEC4</name>
      <anchor>696cfaceb3256bf19e990e46702fe527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_SHADER</name>
      <anchor>1a0294662b50921555cae95fb20740d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INT_VEC2</name>
      <anchor>2e72a47b144427174af2d6d87a7ab073</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INT_VEC3</name>
      <anchor>08b6c6a8259ac4ad9ad5d8e7c3d13bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INT_VEC4</name>
      <anchor>e3fd6dab6e2260ce7fa4cdccbcfba0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LOWER_LEFT</name>
      <anchor>e8b5c2980cf1e2a2ff8d940b57cdcd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS</name>
      <anchor>97d4815b832e756dc3841617c5f4540e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_DRAW_BUFFERS</name>
      <anchor>91ba8bd0010298f5ccacbf675b968040</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS</name>
      <anchor>6ba6f2409d8bd8df147e09b0e3eb2820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_COORDS</name>
      <anchor>947620859e913f928cd74a082ad9ed29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_IMAGE_UNITS</name>
      <anchor>a1e280e2514abe7d70e7faea3566af6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VARYING_FLOATS</name>
      <anchor>f3bf01941a3298694c5b196bc0bdd514</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_ATTRIBS</name>
      <anchor>676ebaa9cbb5d801e916cc8f0c245f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS</name>
      <anchor>a937c6648af59f9616f68dd4c7fdd787</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_UNIFORM_COMPONENTS</name>
      <anchor>df723a88758cec8f0d102e11d1a7cf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH</name>
      <anchor>f6afbab7f2c5b80eda3cf30cc1c570e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_ATTRIBUTES</name>
      <anchor>986e3438e436dcfdbfad9ba59394e21a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_UNIFORMS</name>
      <anchor>b5ffb9b05253784cd2c147c85d53ee4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_UNIFORMS_MAX_LENGTH</name>
      <anchor>0e86dd25b4da22d9954a81f33facd796</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ATTACHED_OBJECTS</name>
      <anchor>939fe92a3cf55b8876b4d3fcc4876fd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_COMPILE_STATUS</name>
      <anchor>26b1af16430c991e2aeb51159855918b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_DELETE_STATUS</name>
      <anchor>35ebe0de2f9064315aa89c40e053749a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_INFO_LOG_LENGTH</name>
      <anchor>7266e60e0c1b8fc6646a8de654b5fbcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_LINK_STATUS</name>
      <anchor>2395db5060b1e3676c677af00e9a7fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_SHADER_SOURCE_LENGTH</name>
      <anchor>83679935ea1e32f1721a7c0cbdbbc352</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_SUBTYPE</name>
      <anchor>3b170a1eb6f46a1013f9ba783dc2bdbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_TYPE</name>
      <anchor>9419b6bca21d505f04b52aaf5fb71e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_VALIDATE_STATUS</name>
      <anchor>621d32e7da174b63c1df3533b551245a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SPRITE</name>
      <anchor>a9c2d29fbaccd5badfc18959375c7d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SPRITE_COORD_ORIGIN</name>
      <anchor>f7bfdf67a9b594c8e33ca5cdd5dcfb5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_OBJECT</name>
      <anchor>d23474d5b9f69e723740279f19668a0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SHADER_OBJECT</name>
      <anchor>5d386805398c2f55ae253acecb38089e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_REF</name>
      <anchor>5c9a40aceb53d69be5ffaff15c7d7c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_VALUE_MASK</name>
      <anchor>7f03d101f47e0c779761cf20b8652dad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_WRITEMASK</name>
      <anchor>3e0903a295456617def915dbc0932a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UPPER_LEFT</name>
      <anchor>7bd958bbbacde2a29bfd74d50e1ddac7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_ENABLED</name>
      <anchor>5ec11ddfc4685d748eb5aa0f2ae6b8c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED</name>
      <anchor>27329f794ceb87696a167be875ce7fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_POINTER</name>
      <anchor>2d788006ebbb2cf18f4427626b9969f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_SIZE</name>
      <anchor>23a9e9e68af6b13075642a1353fd115f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_STRIDE</name>
      <anchor>d708be36b5d59b68ab7c9f19f9733881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_TYPE</name>
      <anchor>719a3174d4b848cbf2883d45803fbe30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_POINT_SIZE</name>
      <anchor>7bfa8245cd2258d1b2ab510d2885d40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_TWO_SIDE</name>
      <anchor>849c1bb5fc1b42785834dd174a95b68d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER</name>
      <anchor>ceb29bc16e885f956eb9e351a7dd6276</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_EQUATION_ALPHA_EXT</name>
      <anchor>56c6273823f93796b3a7b7433cd81b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_EQUATION_RGB_EXT</name>
      <anchor>8375cbf4cbf6a5cac207c1a2691f5620</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BLEND_EQUATION_EXT</name>
      <anchor>aa651ebba53e26be7f5b87e85104ef4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FUNC_ADD_EXT</name>
      <anchor>8f043648e31e7f0b53ef160f159c9150</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_EXT</name>
      <anchor>21d769e684f6c26608a612ed04773515</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIN_EXT</name>
      <anchor>70f62d16502e28c2319711fd032320ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL_VEC2_ARB</name>
      <anchor>8a9feb95e641ca51e933c27f55a1ced0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL_VEC3_ARB</name>
      <anchor>a6376db3e82e02d4b226c40c68535386</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BOOL_VEC4_ARB</name>
      <anchor>e85aeb57ebdf4ba4fa37ea0ea054e773</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_MAT2_ARB</name>
      <anchor>954efac55233f54d97a3c9f347d1bf03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_MAT3_ARB</name>
      <anchor>b62d536f4a1c8baa740c7b0af2e50245</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_MAT4_ARB</name>
      <anchor>24145ee3e559eb4a0a41a3095bf23489</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_VEC2_ARB</name>
      <anchor>5a915785c9c1384397508f85023c1a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_VEC3_ARB</name>
      <anchor>e006c284df5b4e1c8690407157c255d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_VEC4_ARB</name>
      <anchor>4b4710222c39469d8c19acd2b7227e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INT_VEC2_ARB</name>
      <anchor>b1461d6824f7963ac496446ab3483804</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INT_VEC3_ARB</name>
      <anchor>ba0b5b54e90ac26b72c6efa66b9377ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INT_VEC4_ARB</name>
      <anchor>2b5ce762a7a459d77e2f0c786f8f1be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_UNIFORMS_ARB</name>
      <anchor>e477a6628ae48bd715fcb4705cfd167c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_UNIFORMS_MAX_LENGTH_ARB</name>
      <anchor>81f5fc12d6a5165aa4816b0a10c25401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ATTACHED_OBJECTS_ARB</name>
      <anchor>819dcf0331519d9319bb20d356e6a5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_COMPILE_STATUS_ARB</name>
      <anchor>631e9e70a5429e15a85299dd91977360</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_DELETE_STATUS_ARB</name>
      <anchor>f1fdb7f5aae5d8d729a1cecadefc1d36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_INFO_LOG_LENGTH_ARB</name>
      <anchor>15891ff4b57899953121ddc1b4526861</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_LINK_STATUS_ARB</name>
      <anchor>7d08a14c95fd192b889cac7455bb3415</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_SHADER_SOURCE_LENGTH_ARB</name>
      <anchor>80a858ed3f18341de6ebaa6240a8624c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_SUBTYPE_ARB</name>
      <anchor>cb1eadeab998cc67a92b8364cff24ea2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_TYPE_ARB</name>
      <anchor>7e8aadcd710711b53333987f661d0a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_VALIDATE_STATUS_ARB</name>
      <anchor>6fb6c19e9f5ed84b8b964250071e1bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_OBJECT_ARB</name>
      <anchor>01dbd05169c339aa106f4e19c4c68e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SHADER_OBJECT_ARB</name>
      <anchor>cc1bdfb0670f8857acfe51b3c99ef5e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUMP_ENVMAP_ATI</name>
      <anchor>1ba18a5050a1594fe69dccd7371056bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUMP_NUM_TEX_UNITS_ATI</name>
      <anchor>7f2d7d8bcbecb67b568d9d0e6ee1a344</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUMP_ROT_MATRIX_ATI</name>
      <anchor>77423d183c0ab47e933a7ee52de91e15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUMP_ROT_MATRIX_SIZE_ATI</name>
      <anchor>1861eb8f13e611587312f9d92912fcc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUMP_TARGET_ATI</name>
      <anchor>6ac2d3730e4b2511f42c69090fc8822b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_BUMP_TEX_UNITS_ATI</name>
      <anchor>20a1835bb5bf76a8c2908d1088cc135b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DU8DV8_ATI</name>
      <anchor>fc066152583a53c75a16a64d7c53ca61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DUDV_ATI</name>
      <anchor>4fd72382f5d3963b366eeff6466b3df2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLAMP_TO_BORDER_ARB</name>
      <anchor>4e575170092853f85624ce37e614e207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLAMP_TO_EDGE_SGIS</name>
      <anchor>7ef043a00ac945f362d8084401a8c129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CLIP_VOLUME_CLIPPING_HINT_EXT</name>
      <anchor>1fff75c0542989ebe40b2abe80648743</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_COUNT_EXT</name>
      <anchor>cd66887ddd5fef4fe5170799bcc77189</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_EXT</name>
      <anchor>cef31c990755e5735c51cddb326341c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_POINTER_EXT</name>
      <anchor>312e8d1ce91a7c55157b545ee0b47d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_SIZE_EXT</name>
      <anchor>b35f9ed698bfcdf369cfa6c8fcb15ec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_STRIDE_EXT</name>
      <anchor>c77c238639594407fc52b54816ee5d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_TYPE_EXT</name>
      <anchor>40824c6b3c6c005b5eadce466ca89e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOUBLE_EXT</name>
      <anchor>0f0f8e27053667ae681c5fccd1d8946c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_COUNT_EXT</name>
      <anchor>020cc424168bf0aead42d056973f5c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_EXT</name>
      <anchor>4444cf3102bcf14257bc2610e20e4826</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_POINTER_EXT</name>
      <anchor>e1652570bf70bb83d37cb8559eb680dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_STRIDE_EXT</name>
      <anchor>0c94b362c3f8b77f12913aff80b90d51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_COUNT_EXT</name>
      <anchor>1b49eb4716b448b0f3ea7fcfb1ac9d8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_EXT</name>
      <anchor>44c06b225b7d8130be69560be3a59fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_POINTER_EXT</name>
      <anchor>acf4bfb78c546c6e1536ddc82ab0207e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_STRIDE_EXT</name>
      <anchor>cbbf258b8d9d655b9d2e1573804567bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_TYPE_EXT</name>
      <anchor>44a040d77b567d4ec32f839a14335e9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_COUNT_EXT</name>
      <anchor>4a18c98d7e16648833f78116a7be9826</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_EXT</name>
      <anchor>bc658a2f91bfb6c203bb52a2cff75839</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_POINTER_EXT</name>
      <anchor>5296d3bfe6072e7e03da47231d2bc474</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_STRIDE_EXT</name>
      <anchor>7f0cac7197914dca1568adf3f2b4a36a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_TYPE_EXT</name>
      <anchor>7f0b3bae5197df86f6d57146668a42ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_COUNT_EXT</name>
      <anchor>8904b2150293bc2d7932054da6323a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_EXT</name>
      <anchor>1a0bb3b3f8a3a01cb0773014052edfa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_POINTER_EXT</name>
      <anchor>7269c0fdd29b47570503a3b3dddb0408</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_SIZE_EXT</name>
      <anchor>64adb8291e37a801fa3a49a11c9ac14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_STRIDE_EXT</name>
      <anchor>3010197af61d4336855ea9bad35dd953</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_TYPE_EXT</name>
      <anchor>cf558f75c3579b0cb8f0dec4d9af90dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_COUNT_EXT</name>
      <anchor>69bca0f4a2384c6c510bfe3237df7f39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_EXT</name>
      <anchor>603e034055a458b4916623c096f26960</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_POINTER_EXT</name>
      <anchor>7ad97bd4f0711821bc06a7661c9e2902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_SIZE_EXT</name>
      <anchor>2d157b984cd5304d016430a028f52f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_STRIDE_EXT</name>
      <anchor>dd069b4723b79d4807c6a0c5321ef25e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_TYPE_EXT</name>
      <anchor>d33f940bd8cb0e14b9e3c058a788c109</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_LIST_IBM</name>
      <anchor>229a2525a705825ba39bc2d5e676a113</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>9e485172931c748f3e7d7102abca1a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_LIST_IBM</name>
      <anchor>7dd06e299288ea4963676e62a676fe46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>f9ffd6f6619081acae2aad3104aeb41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_LIST_IBM</name>
      <anchor>dbaeded59bfc1cc920d0ee176722b389</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>7f44ae93fd6b5f2025ef2d92799b1a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_LIST_IBM</name>
      <anchor>f3bcf9acb8c6e1ba50f13a9372c5b7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INDEX_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>5a2e1038ed023481d58b30d650f8a520</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_LIST_IBM</name>
      <anchor>37da9e08b1b313f1d5e89a7b8610da26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>b06062b6136558e835065c1763ee65af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_LIST_IBM</name>
      <anchor>88d1278170e87f5e41a833b3dfedc156</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>21e95f456b44c876c8747d0b8aa6b876</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_LIST_IBM</name>
      <anchor>cff3e2f228e19c5dc24c4047adafc58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>7fa38c4c303ca929d72b40ff7ae38fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_LIST_IBM</name>
      <anchor>1fe27df3f44e58b5055499681c143e78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_LIST_STRIDE_IBM</name>
      <anchor>fe4a441260879aa79c6d9945bb9443dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT0_EXT</name>
      <anchor>4ff278d72e0f56e9a713ef0dc40b744c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT10_EXT</name>
      <anchor>09fa29bdcf12849a2f31b43743e393bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT11_EXT</name>
      <anchor>7e0548e31a67349325353584ff33c681</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT12_EXT</name>
      <anchor>dcf680d12d03d052b276df5bcbd7de88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT13_EXT</name>
      <anchor>a7b8ddd745264c4b58892a3e66966526</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT14_EXT</name>
      <anchor>68304dbddaa9a0f8e6bb75a2e56043cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT15_EXT</name>
      <anchor>7c90bb127cfe0c5ad309c96d62a7b20f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT1_EXT</name>
      <anchor>bb41a580a48b0db9ab09bd666b197c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT2_EXT</name>
      <anchor>e095e9224b140740da4120b4df6ee383</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT3_EXT</name>
      <anchor>5e1b0f6369ed1fec16d1a6a30f27b3e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT4_EXT</name>
      <anchor>f6d67cab75dc9104ce5d26351a8df930</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT5_EXT</name>
      <anchor>b6cf2e09b26e4c491520a6ab2db51a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT6_EXT</name>
      <anchor>57887f8f8eb2e0d40123a5be0d6618a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT7_EXT</name>
      <anchor>b540eeec29302c91687ccd26bbd6376e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT8_EXT</name>
      <anchor>261067b4aa6b8948178607a586a86fe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_ATTACHMENT9_EXT</name>
      <anchor>96ce593a2ce620f5481621c8e556d3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_ATTACHMENT_EXT</name>
      <anchor>17871868e3ed0792b5782b36b94bd80c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT</name>
      <anchor>ea11419a9b191790fe3414b6f329535c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT</name>
      <anchor>57188ec3e667a0ff2e4295b18bf9c011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT</name>
      <anchor>fb4c713e2e7c1eaa4b60735d4a1f0dd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT</name>
      <anchor>770d657a3b2065f9f3d86b73112d7520</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT</name>
      <anchor>38a86ff657d1bb669c30d5d71328a49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_BINDING_EXT</name>
      <anchor>a2f842365229a5a10fdafc445dadf777</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_COMPLETE_EXT</name>
      <anchor>4e59e117d25bea953dfa017e08d1c3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_EXT</name>
      <anchor>e5a5d93368758da93a44c2fe8df29185</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT</name>
      <anchor>268da796c680af213faff739cfdd91b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT</name>
      <anchor>40dd75292fef8732b397a1bf4241631c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT</name>
      <anchor>5b20e3d2e251ddc8a57536e5c90436ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT</name>
      <anchor>4495f7dce20c9643acaf77044a827530</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT</name>
      <anchor>ef8caac76934dfb6688f086595be9d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT</name>
      <anchor>9da899ca15cb6f3b95a56e015498eb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT</name>
      <anchor>4eeea1011dd39c7962ccc429aed24d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_STATUS_ERROR_EXT</name>
      <anchor>d5eb6592d3f65758182a4b8c8644292a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAMEBUFFER_UNSUPPORTED_EXT</name>
      <anchor>2b67225cbc7d7c72deb5e8e5c19c81f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INVALID_FRAMEBUFFER_OPERATION_EXT</name>
      <anchor>40e4302481280dfea42fefe95f8a4946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_COLOR_ATTACHMENTS_EXT</name>
      <anchor>a4c6dc169b490cfa81f19423ca65a1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RENDERBUFFER_BINDINGS_EXT</name>
      <anchor>ece5f4e98a7cfffcde2615a97ac4f864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RENDERBUFFER_EXT</name>
      <anchor>b100b55f57703b4c81a56ff9acf2f74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RENDERBUFFER_HEIGHT_EXT</name>
      <anchor>6f132e96954f63cca94246a874acaddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RENDERBUFFER_INTERNAL_FORMAT_EXT</name>
      <anchor>c7ad1fe8d7abffcddc91938037978cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RENDERBUFFER_SIZE_EXT</name>
      <anchor>41e7491cd25c6eb9e8b2c38581e6fa82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RENDERBUFFER_WIDTH_EXT</name>
      <anchor>b83837bce35855de1ffc3785e824bc91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_ATTACHMENT_EXT</name>
      <anchor>44a68e4acac8d53163b052b77f574ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_INDEX16_EXT</name>
      <anchor>6b4436419191cffbd0c5bf603c77b0d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_INDEX1_EXT</name>
      <anchor>3a2da24fcb2c123fb45df3ade27602b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_INDEX4_EXT</name>
      <anchor>82bcf75fb2f7b0d550ffb6e0ccc942ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_INDEX8_EXT</name>
      <anchor>f9ee0fca7fa7d1900f982c97c18bef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_INDEX_EXT</name>
      <anchor>622e22dd1dba061c53e14878dd0c8ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_INDEX12_EXT</name>
      <anchor>0925dc8b933713a94efcff87cd39bba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_INDEX16_EXT</name>
      <anchor>c0599b7d1f9b099b212a08eae6ae23f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_INDEX1_EXT</name>
      <anchor>543a2054de613839eae3518ae474fbe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_INDEX2_EXT</name>
      <anchor>a2227a85a34c9ffbb44bec566c5ff65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_INDEX4_EXT</name>
      <anchor>3e066ff71c6537f79910469d46d8c1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_INDEX8_EXT</name>
      <anchor>415d3122c4e51790002876126a307c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_ALPHA_SIZE_EXT</name>
      <anchor>8f93a07746c122bf753fc30cb788dcc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_BLUE_SIZE_EXT</name>
      <anchor>8d5a61b5db232c67b3282a42008b5a2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_FORMAT_EXT</name>
      <anchor>cf271dd49a46543a63dd86bae288d711</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_GREEN_SIZE_EXT</name>
      <anchor>677d123260ba24dfb161d081c76ac597</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_INTENSITY_SIZE_EXT</name>
      <anchor>37a37dae9e2c9d99c3919800e91469c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_LUMINANCE_SIZE_EXT</name>
      <anchor>56d5884e276aa8d76c57b6cd93e2001b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_RED_SIZE_EXT</name>
      <anchor>d7654880ec7229eeff3919c7061f63d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_WIDTH_EXT</name>
      <anchor>afb7359917227fe25a071e475a92fc4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_1D</name>
      <anchor>e56cb65f000060401633c6be4b355229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_2D</name>
      <anchor>40f2c61c395ecf71dc688aca17c4ef4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_3D_EXT</name>
      <anchor>847d994af0d03bca0e188b96fcc3c4d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_1D</name>
      <anchor>e1b8293c9e42f233bbc2fc151b644fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_2D</name>
      <anchor>d4de17abefa73fa2ef53379f73b734be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_3D_EXT</name>
      <anchor>1b6d77d52099ad70dcf664c9c28019e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_INDEX_SIZE_EXT</name>
      <anchor>d91656131e579ff320f55be18359f3a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_MATRIX_SGI</name>
      <anchor>1e5816df1feffec4ce29837ecd142537</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_MATRIX_STACK_DEPTH_SGI</name>
      <anchor>9b94dba68e49844834420611b5f7117b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI</name>
      <anchor>c2c9e03e7e211acbbea8ad938a15d866</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI</name>
      <anchor>40f82bccf843c6dba584841780f2bb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI</name>
      <anchor>d4ea1f440645882397344bd53847b067</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI</name>
      <anchor>68df29b6719cc192d565a8576b8d79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI</name>
      <anchor>93e0887d1967652796855a970cf2c39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI</name>
      <anchor>ed98fc9f7e99f5aff56ad811d8107670</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI</name>
      <anchor>77cfb9ce05b58d460ec1d394159ab2a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_RED_BIAS_SGI</name>
      <anchor>4bb4f4cd3672735d79e38d3390bbe02e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_RED_SCALE_SGI</name>
      <anchor>0f4c05beb3c5118279f68cc591d3df06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_SUM_ARB</name>
      <anchor>ec03f19ecb079e28e278fe2f2bc4e9ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_MATRIX_ARB</name>
      <anchor>156dd80da92183d7b6a6f63f0edb29ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_MATRIX_STACK_DEPTH_ARB</name>
      <anchor>fe1cca8a77b823984170337b474d7d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_VERTEX_ATTRIB_ARB</name>
      <anchor>23aea7a14ad99161a2196c2317c25d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX0_ARB</name>
      <anchor>6e2e6d77baeb09b9e8bdaa8c6b15b35c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX10_ARB</name>
      <anchor>0d959d4ffe6cebd4a8df2e6983b151d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX11_ARB</name>
      <anchor>adfdd559663b98722fdd0ccb754b0590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX12_ARB</name>
      <anchor>b3c107e119bc2f67624f3e1b02f3a34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX13_ARB</name>
      <anchor>4f758ad7ec574223a5adc8c5bd2807ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX14_ARB</name>
      <anchor>c0b5e16e244a26912f99a65d4edb5c13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX15_ARB</name>
      <anchor>6da09adc9ac51bbab0a14c7846d56992</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX16_ARB</name>
      <anchor>381950b3d7a1d8ec6abc2d3fe0229722</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX17_ARB</name>
      <anchor>5431ba735f894a8181318afd42698d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX18_ARB</name>
      <anchor>e9d347f566d42d4a7552042a4910169f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX19_ARB</name>
      <anchor>89b6cbd127d9ed022da6cd72575ac51c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX1_ARB</name>
      <anchor>8ccabb21ca243d3743f10e55b0153aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX20_ARB</name>
      <anchor>a124c3ea6a84df17e6b8cf92ae428068</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX21_ARB</name>
      <anchor>fef9da61b60774018c7fd025ce2f1feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX22_ARB</name>
      <anchor>74a53a1aceb6a03c78cff3b642389a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX23_ARB</name>
      <anchor>fe9d398fddc36679770c52fffd9075cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX24_ARB</name>
      <anchor>e2d7a57b63a1fecb0f56a71aeb32ca3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX25_ARB</name>
      <anchor>b4c76b22cd476dfa6d4dd142c099b777</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX26_ARB</name>
      <anchor>7fd4a96db77788c1080f951d1576ff13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX27_ARB</name>
      <anchor>d8cb865d9795665a3252fc948ac3719f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX28_ARB</name>
      <anchor>d05c6269412c87966c4a5f93f96819a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX29_ARB</name>
      <anchor>5cb423b0cbe5e85e2152fff61410ed7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX2_ARB</name>
      <anchor>a8cf2da9ddab14be483fe7084b6c3b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX30_ARB</name>
      <anchor>149b40e267b65dce7ee0384c4806974f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX31_ARB</name>
      <anchor>b3ab477e830655dba6eeac67b633f15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX3_ARB</name>
      <anchor>760b46981594cc2396f6a822326cf412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX4_ARB</name>
      <anchor>2c59139e6da233f8f2ee077c0abc8a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX5_ARB</name>
      <anchor>4b2aebcc94af17eefb54afa196bfca5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX6_ARB</name>
      <anchor>8e7627f16215a0b846717d50ac4163bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX7_ARB</name>
      <anchor>3ac93e85f9b5ce27b9b8139334ecac04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX8_ARB</name>
      <anchor>ee46d5f200261d1b9891588bc2823e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX9_ARB</name>
      <anchor>868c6f96e2f9dfae856a3a9c035e212f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB</name>
      <anchor>839104d7c96607dc6b5c2aa9ba6fd4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_ATTRIBS_ARB</name>
      <anchor>c125882d6bff243eb94eab54371683e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_ENV_PARAMETERS_ARB</name>
      <anchor>554358da18b1964567c87d950de35c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_INSTRUCTIONS_ARB</name>
      <anchor>b0ff0e5866976191429bf1e3d5d95c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB</name>
      <anchor>61def4e10e64fdfb0d961529f2d29b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_MATRICES_ARB</name>
      <anchor>2044a9276264b61227f5c07f86631f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB</name>
      <anchor>7078ed0e4123499049d0785b8dbd7817</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name>
      <anchor>5189a1315fb905f710d9aa0d44e73614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB</name>
      <anchor>b0a254a201c69c194966a6c42113a32f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name>
      <anchor>10979fc8d90b84bfcd8c1b25378992c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB</name>
      <anchor>dfec1172793bfa533edb803f498aeba4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB</name>
      <anchor>47a6f625a2473ab8725cdce296e1352d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_PARAMETERS_ARB</name>
      <anchor>e9fe65e3170515ee05754f337ddfe646</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_TEMPORARIES_ARB</name>
      <anchor>2b82d98a4930003284478c725924fa73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_ATTRIBS_ARB</name>
      <anchor>7642f207f5b952cce8859efa6ad03a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ADDRESS_REGISTERS_ARB</name>
      <anchor>27d35362f5f6c5ac2acd04776326fa8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ATTRIBS_ARB</name>
      <anchor>fa18236581a25d5c5c1de0da5c3d6f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_BINDING_ARB</name>
      <anchor>7f1005bf576a00f8157e3d4cbcb84cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ERROR_POSITION_ARB</name>
      <anchor>1c6a1bc963e289308bdc6cfc56045694</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ERROR_STRING_ARB</name>
      <anchor>3719377662041961e1f8e8798d35c0f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_FORMAT_ARB</name>
      <anchor>bea9256878c64639634d8154cb956761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_FORMAT_ASCII_ARB</name>
      <anchor>3548a6b472d63d5ee6647ae466990832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_INSTRUCTIONS_ARB</name>
      <anchor>b90f0275619b91635ecb72af642b11de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_LENGTH_ARB</name>
      <anchor>23301733f1a7e9626f1cf8cac242d3cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB</name>
      <anchor>09156f5f0992a29addbf9eaeb8f746cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_ATTRIBS_ARB</name>
      <anchor>84ff4c23d774c5c653ac025d4c676c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB</name>
      <anchor>4b0080664dee33231e1d4d2779fc817b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_PARAMETERS_ARB</name>
      <anchor>230fe8d69cf4a541a80bae440a42a427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_TEMPORARIES_ARB</name>
      <anchor>c3078c1fbbfc034e4ac4a3a5d92277b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_PARAMETERS_ARB</name>
      <anchor>d6c7d73a586bb05a738cf39759217e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_STRING_ARB</name>
      <anchor>1d170de8ba33fba4c1538c7237f60cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_TEMPORARIES_ARB</name>
      <anchor>5e669fd8030346042293a62a770e0bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB</name>
      <anchor>dfb36766165a8a1742de7323e943d8f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_CURRENT_MATRIX_ARB</name>
      <anchor>61621409aa3bdd74b143465ed45795db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB</name>
      <anchor>b0c8d4a94d427fc26d3cfea8ad421195</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB</name>
      <anchor>c3e2ea329d1a48983a1c79865cbf844b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB</name>
      <anchor>5c10502ad1c7519986f795a7dcef0db8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB</name>
      <anchor>12dfc14fcd0b718af64b4726e2ef5518</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB</name>
      <anchor>e19ac94f9452d930789a2d5c024cb629</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB</name>
      <anchor>85f6cec1279c8b32a355b23ad0ac0099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_ARB</name>
      <anchor>d7bcacc5d716c9b697d1af8f675ebabe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_POINT_SIZE_ARB</name>
      <anchor>5fd52c78c1e61a1ce4c6fe90020aaf23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_PROGRAM_TWO_SIDE_ARB</name>
      <anchor>c046a6df3c13fa20a1eb19cf323b7a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_SUM_EXT</name>
      <anchor>b18fd48738fff07d744dbcc6920464b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_SECONDARY_COLOR_EXT</name>
      <anchor>37dae0589d187e435151edb58b6ef813</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_EXT</name>
      <anchor>e8308c039d6cc3fc16ca16ef1f6b6a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_POINTER_EXT</name>
      <anchor>997871c1859e7d7719db28effdd3faeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_SIZE_EXT</name>
      <anchor>085c2d30ca3ae534f507e70ed9d890ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT</name>
      <anchor>6240ac627c340d7c4f912734a301be73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SECONDARY_COLOR_ARRAY_TYPE_EXT</name>
      <anchor>dd02ad61bdb6dc5b806a87589b9a9ba3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_ALPHA_SIZE_SGI</name>
      <anchor>81aeeb0ee3492e0f53a6910711a71548</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_BIAS_SGI</name>
      <anchor>92ae56459d4533c9e90ae5c63903f7de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_BLUE_SIZE_SGI</name>
      <anchor>84274112ddefcf05bca7b24e4a541fa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_FORMAT_SGI</name>
      <anchor>905c13639d320b93c084df3b49d44cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_GREEN_SIZE_SGI</name>
      <anchor>8557d1d60b7b3d893f9e0aa25c9396d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_INTENSITY_SIZE_SGI</name>
      <anchor>afcdbd69fe615f0b50c898771513a8ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_LUMINANCE_SIZE_SGI</name>
      <anchor>468f677e40ea12ca23d2597f6c8ead86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_RED_SIZE_SGI</name>
      <anchor>68f8e77dea1fe0d10d8b153f55d8396b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_SCALE_SGI</name>
      <anchor>41d6f6af001ccd634c487e2b92980d37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_SGI</name>
      <anchor>c61699d1c6a5a099915c412d0b58d3a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COLOR_TABLE_WIDTH_SGI</name>
      <anchor>1be5c448fbe5ad596fff9ad6b40e4419</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI</name>
      <anchor>9e82e05b12f4729b49f58b1c7bee0bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_COLOR_TABLE_SGI</name>
      <anchor>09b23236bbe6a3531ed284fdae19b5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_COLOR_TABLE_SGI</name>
      <anchor>80cf9963a640aeff648e78fd24d1b5c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI</name>
      <anchor>c71cef47057695edf71a274ce1e7135f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI</name>
      <anchor>be33d39da160e4e4b14dc6a25bc7f525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMBINE4_NV</name>
      <anchor>dfaf3a53223044e9aa16518406395483</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND3_ALPHA_NV</name>
      <anchor>052d824f437843d0633da401803121d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OPERAND3_RGB_NV</name>
      <anchor>bb4caf86bf032ebbff38a560f45112d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE3_ALPHA_NV</name>
      <anchor>c0fb9d35219196abb26f406480944817</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SOURCE3_RGB_NV</name>
      <anchor>dcc513d810406b65209ce77edd661613</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPARE_R_TO_TEXTURE_ARB</name>
      <anchor>f4d69081972263db4cfdfe5ad836e476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPARE_FUNC_ARB</name>
      <anchor>61b39b4b4bdda3a8d403050f45dbe59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPARE_MODE_ARB</name>
      <anchor>d09367a91fb405c54c1d121ed3b8beae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_ALPHA_ARB</name>
      <anchor>5aa819cf8c5d8f10d395fbf20b9ad6ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_INTENSITY_ARB</name>
      <anchor>2e0d1a6db7da0abc561463f125e397bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_LUMINANCE_ALPHA_ARB</name>
      <anchor>64aae08d8243ef671bf2a19afc9cc5a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_LUMINANCE_ARB</name>
      <anchor>70ee883c02540c3f82e6c2c0f88a6e98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGB_ARB</name>
      <anchor>94ca346f3a187ec925bea865cd9ca78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGBA_ARB</name>
      <anchor>ae4672d854ed9febf82945f9fea7f393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_TEXTURE_FORMATS_ARB</name>
      <anchor>627e0a3efa826d10a7d46d0b4d6a9098</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB</name>
      <anchor>fea861fd6a3db5b4956cd15bc86c832d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPRESSED_ARB</name>
      <anchor>016a33500d8145b8b325cc28a4cd98df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB</name>
      <anchor>4d3adca17ec71753a1f47338258a6442</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPRESSION_HINT_ARB</name>
      <anchor>e2e92ecb1bf69bad3e1f9791ebc10071</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGB_FXT1_3DFX</name>
      <anchor>059c06b172591c0e27cc913297d42604</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGBA_FXT1_3DFX</name>
      <anchor>ec1ad65583b8165141af6675bb3dd5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGB_S3TC_DXT1_EXT</name>
      <anchor>76871dbc9ac35424b25ebc707ca11390</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGBA_S3TC_DXT1_EXT</name>
      <anchor>aeed69f7c55e377901d9ff6d00463efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGBA_S3TC_DXT3_EXT</name>
      <anchor>ababc4e27a4845063f8d1b7b91c20b2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_RGBA_S3TC_DXT5_EXT</name>
      <anchor>5f6e032bc5f877d09491c9a8ed191571</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SLUMINANCE</name>
      <anchor>17c89a377697ac50dc3490af30c3d955</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SLUMINANCE_ALPHA</name>
      <anchor>d1762f15cc0871cb72bbfb5eb237384c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB</name>
      <anchor>925753efd9b79076fd73cf8e563538ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_ALPHA</name>
      <anchor>6dfc548c814dbe76f0b86443930614bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_PACK_BUFFER</name>
      <anchor>836578dbccb4de7ca40be25acb258c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_PACK_BUFFER_BINDING</name>
      <anchor>7d6b225c2cca6bcf22ac423de26433a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_UNPACK_BUFFER</name>
      <anchor>fdf430582faee074c2b8436b6ea98089</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_UNPACK_BUFFER_BINDING</name>
      <anchor>19a48ce0e424e5cf44974f2427887f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE</name>
      <anchor>eaaf7abd250d2e1602ce8eba0bdaccc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE8</name>
      <anchor>c6408c5601164692663e897f0c9dbfba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE8_ALPHA8</name>
      <anchor>2cb69c2acce1da1f1d368a121699bf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE_ALPHA</name>
      <anchor>646b5042cb7eaf8a7feaa76d3ff67dfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB</name>
      <anchor>d48339b0f8a7055390d2d6d0f8b31dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB8</name>
      <anchor>f6fd630d51edb4f0b6f27787e5a5ac65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB8_ALPHA8</name>
      <anchor>770a8348ad2322d8017b3c561bdc2a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB_ALPHA</name>
      <anchor>5bc33677c0708553a3dc8a6dbddd2107</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SLUMINANCE_ALPHA_EXT</name>
      <anchor>13fad395db5bec3f904120dc070feb1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SLUMINANCE_EXT</name>
      <anchor>69d6cb2cca5f1bdd2ae9e6491c022d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_ALPHA_EXT</name>
      <anchor>2c43c7141abc341b671ad0a34569fcb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT</name>
      <anchor>d19377002e628e741137eb70eb05a936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT</name>
      <anchor>893e97f8ef7726415045e76780461737</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT</name>
      <anchor>395018cd2caaae0ed13483d0adb1680e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_EXT</name>
      <anchor>722c54883ae53c73512718b642b2057f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COMPRESSED_SRGB_S3TC_DXT1_EXT</name>
      <anchor>dd24c893fc041cea9ba721cb8c9f3755</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE8_ALPHA8_EXT</name>
      <anchor>7bef4e41772236027212542f660fdb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE8_EXT</name>
      <anchor>d22d5573818e05e5db8713d3993e85e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE_ALPHA_EXT</name>
      <anchor>9a06bcd392eb3b051b3bad2f7bbb210e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SLUMINANCE_EXT</name>
      <anchor>163b9788240a9be984efc14d0e7d0854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB8_ALPHA8_EXT</name>
      <anchor>c2b5469a1a005d2bbd88c4d4eb2cd2f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB8_EXT</name>
      <anchor>2d8067f33735d7627c80716cb61ae175</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB_ALPHA_EXT</name>
      <anchor>38f5e7766fee64f7d61921e7552b1542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SRGB_EXT</name>
      <anchor>7b4db8def70360d75d5486e700ec510e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONST_EYE_NV</name>
      <anchor>190e1c02a523f98a8a9df4277c569424</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CULL_FRAGMENT_NV</name>
      <anchor>d7f4946a511e88becb3dd04e9efad0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CULL_MODES_NV</name>
      <anchor>be95e67754b4eb6a33d3303dcdea7814</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPENDENT_AR_TEXTURE_2D_NV</name>
      <anchor>4ee6c310195270edf473cd33480554d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPENDENT_GB_TEXTURE_2D_NV</name>
      <anchor>3a42ad63d1b163b3e6690010163bb243</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV</name>
      <anchor>a687825e7e9933664508e2d2199b1c16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_DEPTH_REPLACE_NV</name>
      <anchor>01534ab6e3994a4516559377f663f565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV</name>
      <anchor>e735f0271ead87b4bedba9e318192096</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_NV</name>
      <anchor>08be6f36d1b4bba5253fd5236c377fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV</name>
      <anchor>32601e9ec6df5b209723f8359f8a16c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_TEXTURE_2D_NV</name>
      <anchor>bb27a9eecefc045345a3a2cf0b93210c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV</name>
      <anchor>57db977a82f592520cffd31f06e86964</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV</name>
      <anchor>7f4e9bad02b762f4c44a09f93192fc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DS_BIAS_NV</name>
      <anchor>a952c67aca4187cfd340804f03c83f7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DS_SCALE_NV</name>
      <anchor>e8fbfba00eaab20cf204dddb1586ef33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT8_MAG8_INTENSITY8_NV</name>
      <anchor>d49f0d31410ec1255ae6940dd6902c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT8_MAG8_NV</name>
      <anchor>8a702902dd0ad591aa31579384bff614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT8_NV</name>
      <anchor>3fc9d88d55fca111f7d2b443f4ae2702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT_MAG_INTENSITY_NV</name>
      <anchor>4ee6f5fea554ca6bdd4c64cc212633a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT_MAG_NV</name>
      <anchor>72600080a260fc75df54c808aa4aa578</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT_MAG_VIB_NV</name>
      <anchor>42271728ce9b04670f3805b3f126ad2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DSDT_NV</name>
      <anchor>d75abb33a3a52d6a3221174535d31dd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DT_BIAS_NV</name>
      <anchor>54979ea6eeae6eefc70f6022c72ad235</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DT_SCALE_NV</name>
      <anchor>37ac4870954fd3742af4dd081150980d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HI_BIAS_NV</name>
      <anchor>ea516ed2fe457c55c85ee94cdb1beac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HI_SCALE_NV</name>
      <anchor>70f140c54af187cbbe0477e90ec02da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HILO16_NV</name>
      <anchor>7554d7f9948c4cb2a2d0b5e73756cdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HILO_NV</name>
      <anchor>b710285d98f4aa7c4d2e4dcf8a270653</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LO_BIAS_NV</name>
      <anchor>f7d601b3102a184f3e2b13436bf4027b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LO_SCALE_NV</name>
      <anchor>29537cf9351e4e69ce258c83463fa158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAGNITUDE_BIAS_NV</name>
      <anchor>e0755c87969dbab728fc24055f92e6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAGNITUDE_SCALE_NV</name>
      <anchor>bb9a087a2bfc6fe0b0083abde44a989d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_TEXTURE_2D_NV</name>
      <anchor>38bbc1682b0b12cb0080d963b953d5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_TEXTURE_BIAS_NV</name>
      <anchor>5e6ec56fcbbceedb60992db867b63fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_TEXTURE_MATRIX_NV</name>
      <anchor>4ef75b7d70365dc490a4cd3e5e6d979a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_TEXTURE_RECTANGLE_NV</name>
      <anchor>0bbbe612cd4e7b2141514717203f09ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV</name>
      <anchor>c24a9856b5b454a680e73b8fbb659695</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_TEXTURE_SCALE_NV</name>
      <anchor>9f16d4d5e18720bbf9f22f271f10f00f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PASS_THROUGH_NV</name>
      <anchor>19c58a991e692368f8d79dba02e4e6a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PREVIOUS_TEXTURE_INPUT_NV</name>
      <anchor>777bbfa42658ab348f7f8d945a6667b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV</name>
      <anchor>94f3d9da7c7f0c17fd77b9e09ed5f0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SHADER_CONSISTENT_NV</name>
      <anchor>057a82389278a1d89e69858e8e22dcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SHADER_OPERATION_NV</name>
      <anchor>e6e250a9d3b57ca1c7c3feade2f28899</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_ALPHA8_NV</name>
      <anchor>462f348c0cf5cf8dca9113de68b4af6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_ALPHA_NV</name>
      <anchor>9e8015b884e1998dbfb8411cf53237a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_HILO16_NV</name>
      <anchor>206b48daa4b469e4d6d381f39b3eb053</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_HILO_NV</name>
      <anchor>7e2a8c8236572ee1d140c3470c16c9b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_INTENSITY8_NV</name>
      <anchor>7d3f0f40a1a6203735c2ca78122e8545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_INTENSITY_NV</name>
      <anchor>d66c6571291ca80c02d3b6e6488efa4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_LUMINANCE8_ALPHA8_NV</name>
      <anchor>c3db198753d3a9d475e0ec8c41136aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_LUMINANCE8_NV</name>
      <anchor>8e27100cd5557260b8779cece3284881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_LUMINANCE_ALPHA_NV</name>
      <anchor>58a01897ff7550e06335686b8fe0e048</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_LUMINANCE_NV</name>
      <anchor>1adef2891d1f90dcafdb634d288f7049</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_RGB8_NV</name>
      <anchor>d98caca23dca937b7617cb9f7b31a939</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV</name>
      <anchor>0d199ffe01ff6f5b1aa15e911a325a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_RGB_NV</name>
      <anchor>86d2d2f006735de0b3e56f8aa89ea69c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_RGB_UNSIGNED_ALPHA_NV</name>
      <anchor>007f37f93fe4b54ae4d4510f6da69be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_RGBA8_NV</name>
      <anchor>e439cb05f690ea13e36db44552dd83fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_RGBA_NV</name>
      <anchor>7356cb10f918aa1be5d11d5e71dca2c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BORDER_VALUES_NV</name>
      <anchor>c27b09140276f0c0be05810bfcdecd25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_DS_SIZE_NV</name>
      <anchor>7e0cccbd301acea7565c83fb76210d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_DT_SIZE_NV</name>
      <anchor>92b8f60e59c2e7aff796b1710b43b92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_HI_SIZE_NV</name>
      <anchor>f06bbc3cc0c8a58695d51eecc4a46266</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_LO_SIZE_NV</name>
      <anchor>cfd2712d4f614f6e104b3e827fbbdafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MAG_SIZE_NV</name>
      <anchor>c29092d4ed56e0cabad91605a07aa069</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_SHADER_NV</name>
      <anchor>53dd4e08237db42007aafcc639c83b33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_8_8_S8_S8_REV_NV</name>
      <anchor>80d1b8049578225925adee6114e0ff1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_S8_S8_8_8_NV</name>
      <anchor>b85dc7d9ed9ea2fd61dab55aac99137f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VIBRANCE_BIAS_NV</name>
      <anchor>07661ce478d35f45b9987dc799900c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VIBRANCE_SCALE_NV</name>
      <anchor>03b3a3440b477229145186c91b4621c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_1D_EXT</name>
      <anchor>1831a92309a1b7dc718e0118e6fce4f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_2D_EXT</name>
      <anchor>025de61ff93f5e5cd93edf66509fd74f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_BORDER_MODE_EXT</name>
      <anchor>296eeaae35cc5502f588c0cb29831b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_FILTER_BIAS_EXT</name>
      <anchor>deeba35f270133716adee4de6505458c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_FILTER_SCALE_EXT</name>
      <anchor>467ee88e8fd48327d8216589e88803fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_FORMAT_EXT</name>
      <anchor>40991780c33f434e075092e2705d4133</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_HEIGHT_EXT</name>
      <anchor>c9c8dfbc399f7d99feee34e74d82cdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CONVOLUTION_WIDTH_EXT</name>
      <anchor>30a25289aa610ca37ad5fad5534211ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_CONVOLUTION_HEIGHT_EXT</name>
      <anchor>2f1cf69a9ee2712f3229481c21e2c1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_CONVOLUTION_WIDTH_EXT</name>
      <anchor>ce854e040a07ad50b4442c9c82c0c9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_ALPHA_BIAS_EXT</name>
      <anchor>9ee5b7a0ca198787ce18493eec857ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_ALPHA_SCALE_EXT</name>
      <anchor>c7ae2cf65b441f57fe4389e67cd9debe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_BLUE_BIAS_EXT</name>
      <anchor>8a2778a1baaff61c1e9ab5ad90be4546</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_BLUE_SCALE_EXT</name>
      <anchor>0f478556904d63d5ba8f641477d058bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_GREEN_BIAS_EXT</name>
      <anchor>f3d90c54dacceb622447e22800640328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_GREEN_SCALE_EXT</name>
      <anchor>c5c1787c53b8ae362b1ad9ffc48e7855</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_RED_BIAS_EXT</name>
      <anchor>3cdab3cd7758e5580bfaeb9bb013dd6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POST_CONVOLUTION_RED_SCALE_EXT</name>
      <anchor>f82b1b23c812abd694889a8c8c8350ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REDUCE_EXT</name>
      <anchor>4101fa51db9ed1f3980f40d7be7563b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SEPARABLE_2D_EXT</name>
      <anchor>435dd55b0629d8a491970f987231abe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COORD_REPLACE_ARB</name>
      <anchor>cb7631ab9790175dd5256ba6fb7b0a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SPRITE_ARB</name>
      <anchor>08d2c10e808cb35e1eb1f067321a0a00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_COORD_REPLACE_NV</name>
      <anchor>e29ff075e26f8e333c785c23a4c23cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SPRITE_NV</name>
      <anchor>2ec2cfb8a19b87634e79d343067505c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SPRITE_R_MODE_NV</name>
      <anchor>eea553f994d259159f2fc77b2816bb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CULL_VERTEX_IBM</name>
      <anchor>23dfc5378a832ed1f786a4d0eedb3270</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_FOG_COORDINATE_EXT</name>
      <anchor>ec4ad8b73b9126761d914bdae26936c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_EXT</name>
      <anchor>f219b279d47a5b5dca276c6de0fa74f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_POINTER_EXT</name>
      <anchor>a2f222ef5ca994fa97382523b44bb0cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_STRIDE_EXT</name>
      <anchor>251ffcba70e0ca7f6c4518cb11e14414</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_ARRAY_TYPE_EXT</name>
      <anchor>f7be21f6f2b732aef5a27b54280124e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_EXT</name>
      <anchor>80cc7ad341d1c8745e57c22477ef2b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_COORDINATE_SOURCE_EXT</name>
      <anchor>1de88d33778a83c513a154e2eb18ead3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_DEPTH_EXT</name>
      <anchor>446b854752bbe34f89679d7e98ca5e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_MATRIX_INDEX_ARB</name>
      <anchor>18926afe8b65f8804e000c77b8cf64ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_PALETTE_MATRIX_ARB</name>
      <anchor>f0c2db233824e47ec30dd6a11d70196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_INDEX_ARRAY_ARB</name>
      <anchor>04104b6a38584f43d25b44c13d904ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_INDEX_ARRAY_POINTER_ARB</name>
      <anchor>ff9e8093cdf852c0550e31395b41384c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_INDEX_ARRAY_SIZE_ARB</name>
      <anchor>d12b0f078eed21adfbab8c9b713e6c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_INDEX_ARRAY_STRIDE_ARB</name>
      <anchor>67e5345cb2e35088d0f12bf7ac7cda92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_INDEX_ARRAY_TYPE_ARB</name>
      <anchor>fbaaf55136ea6bd819538c93dfac4b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_PALETTE_ARB</name>
      <anchor>60f4d635bf46bc2ab0f5b38449ad0ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB</name>
      <anchor>ee717060b28f0bc74f16df3a87808eec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PALETTE_MATRICES_ARB</name>
      <anchor>01282453b2e4ebcc2d8ece6a5646e319</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_OCCLUSION_QUERY_ID_NV</name>
      <anchor>35f2764ee5d8eba42a94941a30f08780</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_COUNT_AVAILABLE_NV</name>
      <anchor>06b4a45c10129a462b1f151222fb075a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_COUNT_NV</name>
      <anchor>db91e91e14493a8b6ea4b32125d96b0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_COUNTER_BITS_NV</name>
      <anchor>807384bc9938bee0332e9e7d53529c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_QUERY_ARB</name>
      <anchor>1a99272a79beb2c11ee6d8df89dbdfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUERY_COUNTER_BITS_ARB</name>
      <anchor>300b9a43c952811ad00c3238824af96b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUERY_RESULT_ARB</name>
      <anchor>fe6a7e6dd3fc749521facdc709f1b79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_QUERY_RESULT_AVAILABLE_ARB</name>
      <anchor>2767b059926f09b114c4b4ef555283ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLES_PASSED_ARB</name>
      <anchor>e15e94a6e68daec5a04c417d88776e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_VERTEX_EXT</name>
      <anchor>3d016e00e5d0907c2d5a20e7d4acc712</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FULL_RANGE_EXT</name>
      <anchor>f5f2fa131e97452a04102f90f3d21b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INVARIANT_DATATYPE_EXT</name>
      <anchor>8938367b0d8dbd1a28e7c25069fdf836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INVARIANT_EXT</name>
      <anchor>751576246ae7972b0341e94d8cd85b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INVARIANT_VALUE_EXT</name>
      <anchor>db0a6490632b7c971c2fa0b9e61b2274</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LOCAL_CONSTANT_DATATYPE_EXT</name>
      <anchor>fed08673d93faa2c2a2b118a99662d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LOCAL_CONSTANT_EXT</name>
      <anchor>abfae267fd32e344bcfe1934bf9f2d2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LOCAL_CONSTANT_VALUE_EXT</name>
      <anchor>e4401b9f6cc1a271ca434820fb82d22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LOCAL_EXT</name>
      <anchor>f3a372d5e93d651411a7df0a7809d2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MATRIX_EXT</name>
      <anchor>1ec9ac9e3db7f86f698cab975a9808ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT</name>
      <anchor>8c2f729f1c891b520b9240d360a9cc35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT</name>
      <anchor>4009460449fb2df6b87e02795e804e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name>
      <anchor>c89ce8c69a96bf2695806fa0e4fc7d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT</name>
      <anchor>892527003835bfba147a2753a1418e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT</name>
      <anchor>89298280d2f8d7f537f573c27ef3dce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT</name>
      <anchor>41606dbc92b003086f516d93f664fe89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_SHADER_INVARIANTS_EXT</name>
      <anchor>c3bf1b923287b0f791c80e5eb9f9f6f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name>
      <anchor>30deb8b7d2d5939fe8b5e1160d280027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_SHADER_LOCALS_EXT</name>
      <anchor>65ee2f939bf5d47edc55c7da35dbf167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_SHADER_VARIANTS_EXT</name>
      <anchor>a684d6ee65d6600468c46ff831b3e6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MVP_MATRIX_EXT</name>
      <anchor>b0f043774b4910ea290a0ed5b46b61a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NEGATIVE_ONE_EXT</name>
      <anchor>d0b88c02bfeeffa7c1809d970e0841b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NEGATIVE_W_EXT</name>
      <anchor>0013018c97b1bd134aa95db8699366c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NEGATIVE_X_EXT</name>
      <anchor>0680318a5ad06e98e6631ec0fef01144</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NEGATIVE_Y_EXT</name>
      <anchor>0df77eca4c4d9169b70e1002e5493db1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NEGATIVE_Z_EXT</name>
      <anchor>7e9f4906c829b46161f9d2f4a4afa457</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMALIZED_RANGE_EXT</name>
      <anchor>d695b8f36ec789991ae23f00ac595c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ONE_EXT</name>
      <anchor>15863742821a604db79768c476e2abaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_ADD_EXT</name>
      <anchor>340d7384e252b6a5b22bf56ddee49855</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_CLAMP_EXT</name>
      <anchor>ba09d709f0a7b5f82065ebf77ade1b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_CROSS_PRODUCT_EXT</name>
      <anchor>2919987fe6b7397e82734d6b370c5195</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_DOT3_EXT</name>
      <anchor>83b38360754c95dcc782aa41d72a7aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_DOT4_EXT</name>
      <anchor>31d1bb16f460be5f7da522c839de0ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_EXP_BASE_2_EXT</name>
      <anchor>051ab645a105c87ef94733bea72a8719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_FLOOR_EXT</name>
      <anchor>b55d2b3e595e82297991a5d556994ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_FRAC_EXT</name>
      <anchor>cbbf9d859c18093a38931c6d51fc6142</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_INDEX_EXT</name>
      <anchor>1e66a8915d33794ca994175afc83cb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_LOG_BASE_2_EXT</name>
      <anchor>4d3cbad14eabbd008f372198dde9f34b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_MADD_EXT</name>
      <anchor>941c222ea42a2b8120d352609b506901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_MAX_EXT</name>
      <anchor>89c3062e684f04c8e5799c5654432881</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_MIN_EXT</name>
      <anchor>e7ee6ae455345576ac1e087352057c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_MOV_EXT</name>
      <anchor>14f7f1b96108f94bb5bb5f993c3531be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_MUL_EXT</name>
      <anchor>04b603369054c8349f4644ab7e642e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_MULTIPLY_MATRIX_EXT</name>
      <anchor>5382030c00e05ee3a1af8fb9b1cb2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_NEGATE_EXT</name>
      <anchor>5aab8486855dd3b5460e0e9829502a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_POWER_EXT</name>
      <anchor>5e41c6993fe09779d4c49251f6adf2eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_RECIP_EXT</name>
      <anchor>add6e35479ae74aa5f158ff72df46819</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_RECIP_SQRT_EXT</name>
      <anchor>1837774d916cc21a30d830800f9fc7d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_ROUND_EXT</name>
      <anchor>139440e359f8928838f772c00a22874b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_SET_GE_EXT</name>
      <anchor>38c73002685e191984d556a63b597425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_SET_LT_EXT</name>
      <anchor>5d4674ce2e6e61d7c6ae1c3cccc6ed0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OP_SUB_EXT</name>
      <anchor>258c32c36fc6781c49e6b3702b330d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_COLOR0_EXT</name>
      <anchor>6658254a5748548047bbfa77e81da14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_COLOR1_EXT</name>
      <anchor>9e0b24e6362e65333320a752b0699e24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_FOG_EXT</name>
      <anchor>5bcabeb1b631fa5ac301cfc0a611539b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD0_EXT</name>
      <anchor>fb64e940c7403cd8266247db502717c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD10_EXT</name>
      <anchor>aaa128c5c030ca7585e0c2eacaa17e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD11_EXT</name>
      <anchor>afa4f7b9b9df9f0011d87fbe3ab71294</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD12_EXT</name>
      <anchor>1403f2a0e9db502f0a56bfed923b145b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD13_EXT</name>
      <anchor>a8c20bd82b1de72bdc2c27dad156252a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD14_EXT</name>
      <anchor>2e94df051e7ba423605df49675125b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD15_EXT</name>
      <anchor>26bff66828114371202b2a09d9ce2f59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD16_EXT</name>
      <anchor>08e30ed81d78a69cbffd61d3f079b98c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD17_EXT</name>
      <anchor>ed2ef78dcea5d212154ae16917238fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD18_EXT</name>
      <anchor>52b98726418d67dcba5923ba09987fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD19_EXT</name>
      <anchor>934df7c07fc7eddea7be2c63ea2cf900</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD1_EXT</name>
      <anchor>1ee0e56aa24f1d3455e32e7b6801640f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD20_EXT</name>
      <anchor>3699d7d0b9e2bba6b818825b28647cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD21_EXT</name>
      <anchor>564ae11b7d068f21559b9103828b5d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD22_EXT</name>
      <anchor>3ac53e5144dadbe02f8ab6454df5983e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD23_EXT</name>
      <anchor>59fca5324a8f1f86dfa5171d965ab938</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD24_EXT</name>
      <anchor>4f813a249859f8b36ccc554656dd077b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD25_EXT</name>
      <anchor>e83e7087ff91126bed4311a669487eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD26_EXT</name>
      <anchor>1d2b99c152d11dedb3e11da931e47f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD27_EXT</name>
      <anchor>66f7e5d96090c9c76034cff5827214ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD28_EXT</name>
      <anchor>0d621cb9c96e4d9d827725f19076d2d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD29_EXT</name>
      <anchor>95958583df7bf3dfe43e95c639ce546f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD2_EXT</name>
      <anchor>ca722c2681d07989003c35a29a8784f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD30_EXT</name>
      <anchor>d98881797ab3f740d8f4666aee93eab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD31_EXT</name>
      <anchor>657c8015b20efb7048d373e774be2ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD3_EXT</name>
      <anchor>4d741592af67e36886a69ee989709010</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD4_EXT</name>
      <anchor>b82698a3080aba91c0b08a7091583a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD5_EXT</name>
      <anchor>840894cc4babb4c49be6c376b253c8e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD6_EXT</name>
      <anchor>1445ff36b3f79a6c2e849f4c3caffbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD7_EXT</name>
      <anchor>6cb2b4ec77526e7b1a7de99aa10e38d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD8_EXT</name>
      <anchor>f220386f6564fe0f09d1f8d311519b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_TEXTURE_COORD9_EXT</name>
      <anchor>4ceadbb40b56dacd4c09d247622d9dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OUTPUT_VERTEX_EXT</name>
      <anchor>615f875bdd94840f399047277076ae25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SCALAR_EXT</name>
      <anchor>ddaa0b88bf7fac85d87ef920e4f6d0c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_ARRAY_EXT</name>
      <anchor>d1c0f6a92f4c53510f3ab80ea091742c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_ARRAY_POINTER_EXT</name>
      <anchor>d2dfa96531015f1908bc7e7c92c0667d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_ARRAY_STRIDE_EXT</name>
      <anchor>ec75c3d351fe183d56e80da493977685</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_ARRAY_TYPE_EXT</name>
      <anchor>3ed967437e493e21f096c2922d2da473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_DATATYPE_EXT</name>
      <anchor>769c6fa1de10e2a6f3149fd8c7620157</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_EXT</name>
      <anchor>b1c2deb45740e0fffc4eef0fc651e459</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VARIANT_VALUE_EXT</name>
      <anchor>2d0a93cac41e7c5b5f7b42b09cabd7ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VECTOR_EXT</name>
      <anchor>2a13d4c2924997fbe711dcd228b0f6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_BINDING_EXT</name>
      <anchor>d637a1137c62a92de45cde3c5a8f2423</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_EXT</name>
      <anchor>a5a0abc881f5bd62b555b8535a09caa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_INSTRUCTIONS_EXT</name>
      <anchor>0ea64049abd884e9cebaaa8b95e1041d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_INVARIANTS_EXT</name>
      <anchor>04d8ac005fc6e8c6bfbf4e95689ebbd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT</name>
      <anchor>09186e17c212551bf18ee0f8e1501425</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_LOCALS_EXT</name>
      <anchor>73a235b24cfd1a73aa70ebc32564c116</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_OPTIMIZED_EXT</name>
      <anchor>05a2fc9a7bbd0c719c484b9c626f339d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_VARIANTS_EXT</name>
      <anchor>d6eb89b849a8e30bed30c3da862fcea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_W_EXT</name>
      <anchor>fcc172282476a03c027d70f559bbad13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_X_EXT</name>
      <anchor>1232c40bf70affc84247b16674e4d614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_Y_EXT</name>
      <anchor>7ac1af55b77c0b6a58dcac585dabcf9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_Z_EXT</name>
      <anchor>711f6d3cab8ca90215d2b047f70f11f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ZERO_EXT</name>
      <anchor>67a14850ddc3df36175fa3d3fab66408</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_CURRENT_VERTEX_WEIGHT_EXT</name>
      <anchor>4a08496aa30c806e8c0bf14192db91c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW0_EXT</name>
      <anchor>f791b79963f830c7c6e3f899e384bcb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW0_MATRIX_EXT</name>
      <anchor>180959316973cf5e7282cf14f59c7bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW0_STACK_DEPTH_EXT</name>
      <anchor>1e220d5d86161de155620c3dcc6a71bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW1_EXT</name>
      <anchor>270cba62cd911b9ebdd13720844d00cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW1_MATRIX_EXT</name>
      <anchor>d52e7281fe368e52ee4ab32fff23e091</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MODELVIEW1_STACK_DEPTH_EXT</name>
      <anchor>dc8e6c9fdc62d6a62a7f87c3e652d13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_WEIGHT_ARRAY_EXT</name>
      <anchor>7058ed209421bfa7d420cde9bf226966</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT</name>
      <anchor>982241a9bdad1a35fe564f8facce923e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT</name>
      <anchor>c4118692640456a97e69e586396c7400</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT</name>
      <anchor>8e6e4e896fab760a5ca189ab7cb57a3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT</name>
      <anchor>8d3470c8d07104d3582ba61741b7a07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_WEIGHTING_EXT</name>
      <anchor>790db2025ca25cf2264deba59e9a4039</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DECR_WRAP_EXT</name>
      <anchor>8ff9ae02e45839045dafc77056d0ee93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INCR_WRAP_EXT</name>
      <anchor>5704af45db2b9c64a8ca3e9c983f6471</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPENDENT_HILO_TEXTURE_2D_NV</name>
      <anchor>c807d06fb2e5e3a201e61c96e548dd96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPENDENT_RGB_TEXTURE_3D_NV</name>
      <anchor>6d8e9d9c65f230d02084520861025af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV</name>
      <anchor>b764558a3e9b953cebbb17fca92cf78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV</name>
      <anchor>68f68110b2934489245e5026f2448ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_PASS_THROUGH_NV</name>
      <anchor>0b09d6599a6e9407f384a604846af3fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_TEXTURE_1D_NV</name>
      <anchor>c67bd7dbb1176479222329103f6ca129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FORCE_BLUE_TO_ONE_NV</name>
      <anchor>0b2c27fea042d07fd5203ffb0f046bdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HILO8_NV</name>
      <anchor>266aacf166961b07951793518f37c823</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV</name>
      <anchor>13cde4e810b26c0d8cb6caf56ea33703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV</name>
      <anchor>c6168ab85ff8ca2b666750781a2b4584</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_HILO_TEXTURE_2D_NV</name>
      <anchor>de03a04a71e28b97e6e420e59eb4da9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV</name>
      <anchor>bbc3efb4a2fcd2b735b579dc656ba6cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV</name>
      <anchor>ec9b90753b27923b2963cbbec93314aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV</name>
      <anchor>642711adcf77dd962b71430b120cbf74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV</name>
      <anchor>6a3b8298af2ac6f439b7b8ba8db89901</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV</name>
      <anchor>b1e5db326097d1a32bc7d68bfaab6dab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SIGNED_HILO8_NV</name>
      <anchor>aab9d98225d4c8629e41083d92f06bd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH24_STENCIL8_EXT</name>
      <anchor>977d93453dbd8b304989cbd9b1606490</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_STENCIL_EXT</name>
      <anchor>6962edce3c3764b8e7b354934e150e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_STENCIL_SIZE_EXT</name>
      <anchor>5b82b667c9a89b17c03f5e4c30b75f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_24_8_EXT</name>
      <anchor>011e0913b0d88575d3a3e4fa98940965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_CLAMP_NV</name>
      <anchor>c70f5bf5cffa2d34ab430be7f227a9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT16_ARB</name>
      <anchor>6d78bd241e215a14f1aee776d501bc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT24_ARB</name>
      <anchor>720637b12a359130c68d2b5598c78e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT32_ARB</name>
      <anchor>80f92da69c84a61253b06ebec99d2900</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_TEXTURE_MODE_ARB</name>
      <anchor>2b2854f413bbf9d2e9cf2ab18a0e754d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_DEPTH_SIZE_ARB</name>
      <anchor>7ab9cb0cb0d6d0e00b6bebc2007cbc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT16_SGIX</name>
      <anchor>6d917ddf4600cbe3bd800858dd3e87c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT24_SGIX</name>
      <anchor>ff3bebdc355c913cdd81238ed698bd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_COMPONENT32_SGIX</name>
      <anchor>957d381f2202d8c7b1f31b7a057058d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_STENCIL_NV</name>
      <anchor>912fde950690b8b00a08200da4bf59af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_24_8_NV</name>
      <anchor>a242ed308ce41965314124f219df24b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_STENCIL_TO_BGRA_NV</name>
      <anchor>f58b87cc77c862953ed02f2c0577fa59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DEPTH_STENCIL_TO_RGBA_NV</name>
      <anchor>c39eca34947d78670cc67f00d89f25f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DISTANCE_ATTENUATION_EXT</name>
      <anchor>b4f79e552bfa98366ff4977cbc9304a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_FADE_THRESHOLD_SIZE_EXT</name>
      <anchor>20802b84f5a710f59572b85b834d7e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SIZE_MAX_EXT</name>
      <anchor>8436839348d23154e3869c6aeffbc7af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SIZE_MIN_EXT</name>
      <anchor>fe264fc08310763751800ab65fa8b369</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_RGB_ARB</name>
      <anchor>8129362f88866ded868ebba6630b073c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_RGBA_ARB</name>
      <anchor>198597e26e0321ba98c303b2fa218be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_RGB_EXT</name>
      <anchor>d804c64ee77baeb1713dd2c5c416db30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT3_RGBA_EXT</name>
      <anchor>cf539358f110d68224eca4dced619a10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DOT_PRODUCT_TEXTURE_3D_NV</name>
      <anchor>1d0feb369a16b6771ec7e384e771cea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER0_ARB</name>
      <anchor>5fa6b22241789664662336f9c80f111e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER10_ARB</name>
      <anchor>8cd4f2ebe43c2cf24a5aa8d11d93a36a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER11_ARB</name>
      <anchor>6c9c2cbd6317d63c1fb479a3e752e529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER12_ARB</name>
      <anchor>88906c0176518b245214111f46f17bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER13_ARB</name>
      <anchor>d1e81301c78a1adfc534ce22458fb2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER14_ARB</name>
      <anchor>2ff5021b971080bbc2a7d4821d8c0c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER15_ARB</name>
      <anchor>6e19c237d02eb7cda494756bfc8d9dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER1_ARB</name>
      <anchor>2b9b1aad21cfcef7c75d5017e94f7519</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER2_ARB</name>
      <anchor>326a36b2357e5e36600cd65d9f76abac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER3_ARB</name>
      <anchor>dc5ddc92dc3e28fa678a7d648fda123d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER4_ARB</name>
      <anchor>53a7d2fb097f31fb39d5346150da3a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER5_ARB</name>
      <anchor>30e3def5005860a8d90d947592212ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER6_ARB</name>
      <anchor>6483a20f6b0fd121b9e61b43c3d8de27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER7_ARB</name>
      <anchor>c24a3235fdbeace814538f0370d4c42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER8_ARB</name>
      <anchor>7020c95bdbf5ec3ad6993945376a8824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_BUFFER9_ARB</name>
      <anchor>a46c0e64a961e77ef54866406b05fdb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_DRAW_BUFFERS_ARB</name>
      <anchor>e31358785fa6bf90a9d45e9b10bc4f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_DRAW_PIXELS_APPLE</name>
      <anchor>ceb9698f0d16cb824b27ccae1fd89708</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FENCE_APPLE</name>
      <anchor>43f6c8e4fc3dadc613cb9a59cd56954d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_APPLE</name>
      <anchor>7fc353ac3c76d53cb162072300670bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_POINTER_APPLE</name>
      <anchor>77c3712148562c3843a1e1c1f48bce1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_TYPE_APPLE</name>
      <anchor>3ce2959fd646905d25c97abd6fb95ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_ATI</name>
      <anchor>c0d748284df954ba94d03ebf1a13252b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_POINTER_ATI</name>
      <anchor>1267937bb0aa30bfb3f500f6fc1974cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_TYPE_ATI</name>
      <anchor>9fd31f453c418ff8270fff081271a2b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_POINTER_NV</name>
      <anchor>6884fb8f761ccccd0b2f80f60be0c91e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_ELEMENT_ARRAY_TYPE_NV</name>
      <anchor>8c87ace119c3413dfe2a042dce0dec7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EMBOSS_CONSTANT_NV</name>
      <anchor>a90eb3af667185519e3459b19a0b46bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EMBOSS_LIGHT_NV</name>
      <anchor>9743a3182ce8de77d10238cbe33a96a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EMBOSS_MAP_NV</name>
      <anchor>f62bba70e9f898b7753ce6b1fd6bf6f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_2D_NV</name>
      <anchor>f4d47cad474433a651c08b0a23def87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_FRACTIONAL_TESSELLATION_NV</name>
      <anchor>14c37304a9d4ac1c31f39c64dbec46f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_TRIANGULAR_2D_NV</name>
      <anchor>94e66225ef3be6d7080efc967b7975f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB0_NV</name>
      <anchor>96a26ce861f84834f5bd6715c817ac9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB10_NV</name>
      <anchor>32e8c2e8b02bc8fdd6ce9c550baf8a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB11_NV</name>
      <anchor>ae88b48e60fffd44eceb95b8fec64456</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB12_NV</name>
      <anchor>afdd41661a0e66603bb9b5187fb22d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB13_NV</name>
      <anchor>b626658e0524d4cb1fc21b2ef75eb077</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB14_NV</name>
      <anchor>096a4856e83659669617d2ff50a86481</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB15_NV</name>
      <anchor>c2d950abf392e84ab43057381b285e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB1_NV</name>
      <anchor>48620293c4613b7095e0ac4309e23cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB2_NV</name>
      <anchor>d0bc8f7d6e92a5c4de35c9c578a544c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB3_NV</name>
      <anchor>4a11f9477c91f5d32e7a7c3d212b438c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB4_NV</name>
      <anchor>ff5a17977361b33a4b5476c303a6d08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB5_NV</name>
      <anchor>6c9cecac2e07ec6509bc7ecbc118ee55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB6_NV</name>
      <anchor>b627cd579c5ce0bb1716be1b41ed7efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB7_NV</name>
      <anchor>14b691e0ae2cbc749066953836cb978a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB8_NV</name>
      <anchor>e77da54964c2a043f5cb07012262dd4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EVAL_VERTEX_ATTRIB9_NV</name>
      <anchor>cb3cf8de72e70bd779113b4b4d96239f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP_ATTRIB_U_ORDER_NV</name>
      <anchor>d5fc8ac75c66df7fce687013f6289fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP_ATTRIB_V_ORDER_NV</name>
      <anchor>394db60e8be8f50d0fd0c29f7c11a628</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAP_TESSELLATION_NV</name>
      <anchor>96ae91e6c7098faa0ea56be81949f8e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_MAP_TESSELLATION_NV</name>
      <anchor>a7e75cddcd1f8297784205c568570210</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_RATIONAL_EVAL_ORDER_NV</name>
      <anchor>3a970e07aeee1e9d1a56b095bab846a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EYE_PLANE_ABSOLUTE_NV</name>
      <anchor>300d9fc4afa246ce40cad073967f3cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_EYE_RADIAL_NV</name>
      <anchor>e1245e40b905b669041d64099397dbf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_DISTANCE_MODE_NV</name>
      <anchor>a48a9c59f8786ec0e244ea4a56dfcbb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_CLEAR_COLOR_VALUE_NV</name>
      <anchor>50347bada2fb52e79f637746919d42f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_R16_NV</name>
      <anchor>fc28347faf59afb2ef318fc617e7389d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_R32_NV</name>
      <anchor>74e1ea14a404cc3b3accfc80371a551e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_R_NV</name>
      <anchor>0e35b68a0ca3960e4d02007f106cdc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RG16_NV</name>
      <anchor>06d19ca1e5717f3be88b879eb37b03f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RG32_NV</name>
      <anchor>42fb7f602cd23d7f26f43b2c110f54a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RG_NV</name>
      <anchor>f544133b3fc28eec104fa2e5e2bdef8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGB16_NV</name>
      <anchor>afa13cc0aa82c1ebe98c7900362c7e90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGB32_NV</name>
      <anchor>349a351d9f755087db8471f66bb9716b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGB_NV</name>
      <anchor>3d47cb109295288fb9fed9ec48a95099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGBA16_NV</name>
      <anchor>43c163fe9371f449e6d00ff2297e2aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGBA32_NV</name>
      <anchor>945fc420f26ed5f1941022278c5ffd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGBA_MODE_NV</name>
      <anchor>b02db357e1be6e3314b483f3e11dbc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FLOAT_RGBA_NV</name>
      <anchor>0b793163fa49e8baefa8780ca156a54c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_FLOAT_COMPONENTS_NV</name>
      <anchor>52ee33087e62bbd7a5a39cdcbcdd2dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_R_NV</name>
      <anchor>5fca6822282f60bc4567578e526ea3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RG_NV</name>
      <anchor>fdc259215ca7fcf9039347b670e87d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGB_NV</name>
      <anchor>2312d69f2e8e260ff63de5dc42034f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BIND_TO_TEXTURE_RECTANGLE_FLOAT_RGBA_NV</name>
      <anchor>ed68101a19d71372fa2f5673b998e9cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_FLOAT_COMPONENTS_NV</name>
      <anchor>514a9f09518e6ee2521981dd2d9350d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_FLOAT_R_NV</name>
      <anchor>540dcda7f14fb508d31f7463b2a07907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_FLOAT_RG_NV</name>
      <anchor>8026a4edbb97e4d9162b39995d8a0173</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_FLOAT_RGB_NV</name>
      <anchor>040fff2b7bec1295b7adba2ee16d66e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_FLOAT_RGBA_NV</name>
      <anchor>3cc1b7ec1f80ca32ee77643a514b9237</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_OFFSET_SGIX</name>
      <anchor>98b5908055b0a28f17b84a9c0193aef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FOG_OFFSET_VALUE_SGIX</name>
      <anchor>00137dbb4d51895d9d8ff31feba295bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FORMAT_SUBSAMPLE_244_244_OML</name>
      <anchor>ea886532b08c9c42548ceef3cd6a27d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FORMAT_SUBSAMPLE_24_24_OML</name>
      <anchor>b3ae603f1bf87c0f17546c1dd5e595f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_PROGRAM_ARB</name>
      <anchor>3752d06345bf9b7cd556c8c18f1af1df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB</name>
      <anchor>0a3844dfc5d6766d166fd16a83087849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name>
      <anchor>18976e75636a5d28a5e1e2cfa3477e27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name>
      <anchor>2be0f0ad505c7415604be985b6add29c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name>
      <anchor>486c49ecd3ccd7817239b714e23d2fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB</name>
      <anchor>72488af52d9f9004695aef4da465afd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB</name>
      <anchor>e32ef20f92d41db853dfd36573b0da32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_COORDS_ARB</name>
      <anchor>8a43e31ad6ecfc7e840dd80cc44438b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_IMAGE_UNITS_ARB</name>
      <anchor>4b1b083176bc9e9fc132692f589d3436</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ALU_INSTRUCTIONS_ARB</name>
      <anchor>5eb810f874fa3cece06a685d2c5b18b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB</name>
      <anchor>667c1d35dd005779fb65980da6302d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB</name>
      <anchor>2380e40c36bd8d42f1e3468eb9c4ef37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB</name>
      <anchor>256d1c0898a9e842a1bc472cf7963ab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_TEX_INDIRECTIONS_ARB</name>
      <anchor>8e353235a029666f75d2c7ca8d842226</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_TEX_INSTRUCTIONS_ARB</name>
      <anchor>bce582cf2d6e50b709dde2865a3ac313</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_PROGRAM_BINDING_NV</name>
      <anchor>04cdfb866258d7332d7a5a90fb2ca7b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_PROGRAM_NV</name>
      <anchor>bbd63448f69924f0c2f93ec249dbe6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV</name>
      <anchor>8a1628d90938a683ed20576ed195cc82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_COORDS_NV</name>
      <anchor>4a5bc19a15acd2179c765406805f26a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_IMAGE_UNITS_NV</name>
      <anchor>8af9643787290034aed7729a47baa1c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROGRAM_ERROR_STRING_NV</name>
      <anchor>8e3a12aaa4b6ed9d0dfeb5b5e4d85abf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FRAGMENT_SHADER_ARB</name>
      <anchor>5cc824276a0a610a920ab9e3a0bed3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB</name>
      <anchor>af52509949799afbaee793e9678f9e80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FUNC_REVERSE_SUBTRACT_EXT</name>
      <anchor>46a02f13902cdf021bb59fdfab23b96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_FUNC_SUBTRACT_EXT</name>
      <anchor>eaa01030ee3b2b3dedee9dcf46efbd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_GENERATE_MIPMAP_HINT_SGIS</name>
      <anchor>acb38307723117d051220be785bbcd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_GENERATE_MIPMAP_SGIS</name>
      <anchor>88a81c788f81e0325a66e8294aa59a4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_ALPHA_SIZE_EXT</name>
      <anchor>35c9b64a3db01e7cc4d63fa4250c4480</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_BLUE_SIZE_EXT</name>
      <anchor>9fec1556824092b376aac027447fa9c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_EXT</name>
      <anchor>1d7f8b82ac499635ec6b9144790c15bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_FORMAT_EXT</name>
      <anchor>50f06c060e84e5a756a8459493a9c507</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_GREEN_SIZE_EXT</name>
      <anchor>7d3c95f5f5526bff5d8eb5993eda24f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_LUMINANCE_SIZE_EXT</name>
      <anchor>ea3fe7d6edabbdb51fd17b4470a735f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_RED_SIZE_EXT</name>
      <anchor>93a562e74a135cc915d6c77ad9133818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_SINK_EXT</name>
      <anchor>61d47d7210ccece9fa9bbac23d6405d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_HISTOGRAM_WIDTH_EXT</name>
      <anchor>0b71930eda36bfa995c8e8a40961328f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MINMAX_EXT</name>
      <anchor>887374aba79ca68624e8859ed15c8d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MINMAX_FORMAT_EXT</name>
      <anchor>cdfd1aafa4b5bf85ff483b5ea4767a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MINMAX_SINK_EXT</name>
      <anchor>070887c9a4519be4408ad185a3f84d6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_HISTOGRAM_EXT</name>
      <anchor>a00e4c2b8bf59bdbab7ac5fdc0befc98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INTERLACE_OML</name>
      <anchor>745522ff805e2f98e24950858d496666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INTERLACE_READ_OML</name>
      <anchor>a8227e116def16e08615c1a94b5e09b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_INTERLACE_SGIX</name>
      <anchor>a384291e4d4e7cfcecaeb30bbc572f6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_LIGHT_MODEL_COLOR_CONTROL_EXT</name>
      <anchor>dcf51d551294f28f0355f8463bc9737f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SEPARATE_SPECULAR_COLOR_EXT</name>
      <anchor>fd239a141295a983f2a440781cda4a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SINGLE_COLOR_EXT</name>
      <anchor>593e9aeddef6f33d4ecf78a61e2755e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_3D_TEXTURE_SIZE_EXT</name>
      <anchor>006a505ad519db19385366c3fbb12ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PACK_IMAGE_HEIGHT_EXT</name>
      <anchor>dea424b22939de3d329f48c9b0e54a20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PACK_SKIP_IMAGES_EXT</name>
      <anchor>338f4a855bcfc0703e6c4d21ebc55a93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_DEPTH_EXT</name>
      <anchor>83ab5a881500431d94cef3bb7dfc91a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_WRAP_R_EXT</name>
      <anchor>2356893451a14a5ee1f3c32d121b2d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNPACK_IMAGE_HEIGHT_EXT</name>
      <anchor>41f32cfcec66a0595e7020637e2bf379</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNPACK_SKIP_IMAGES_EXT</name>
      <anchor>0a2136ef67ffb905ff1734fdfa8485bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB</name>
      <anchor>d35a87121920e6462b479e26dfaf69a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VARYING_FLOATS_ARB</name>
      <anchor>d0c4f1236242ba4b674f5eb54a528a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB</name>
      <anchor>f5eaa1888813d3c68513faeb334bb346</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB</name>
      <anchor>850faeb33d8331c55479e63e30d4a1df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB</name>
      <anchor>50f55f0914b850552d894ca5d684009a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OBJECT_ACTIVE_ATTRIBUTES_ARB</name>
      <anchor>2a5a01258b0bb907aa9ff7341a69a3cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SHADER_ARB</name>
      <anchor>8db63d8394d2fb15d70fdac444e7c868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB</name>
      <anchor>eec2093a9470d87086ac25aaeb5c8b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_MAP_ARB</name>
      <anchor>b57a8cb4825feb2d22b5ae3fd9d55f58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_CUBE_MAP_ARB</name>
      <anchor>ce2cdd0728b7d0385270b8e39fbc92ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REFLECTION_MAP_ARB</name>
      <anchor>dc6c44e58bdb9530731c3bdde5c57b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BINDING_CUBE_MAP_ARB</name>
      <anchor>b746ba2030709d933ddd9355beceee85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_ARB</name>
      <anchor>6345477179677cbc9d23149a0c2338ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB</name>
      <anchor>ea7d57e726bd12de57be89bd9575b7ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB</name>
      <anchor>60e8313711816e9c58e1110f4228f065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB</name>
      <anchor>0f227ccd59d9649e1c2b51478ed296fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB</name>
      <anchor>4504ef42f9abf044ed41c11d8d20bdbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB</name>
      <anchor>4d5ef0ad5b048658cb396166032353ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB</name>
      <anchor>756d409a09859664cd9276a7fd7eb628</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI</name>
      <anchor>52e14ca9f9922e9b735e8513607880fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_ATI</name>
      <anchor>31727dc0f01750719bfa5c814f24e33c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_NORMAL_MODE_ATI</name>
      <anchor>e81bc10b86fbabe8cea302e0420d4124</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI</name>
      <anchor>1786c898dc9e78d8892f1287804a819a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI</name>
      <anchor>19cc33e316ba0774bb83b5a595eeda96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_POINT_MODE_ATI</name>
      <anchor>3f8de3283a47109fb9469341ddcd6c95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI</name>
      <anchor>c5bbaf200b7029e667e3aa9766935be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI</name>
      <anchor>1f596fc0cb18f57d45c8eb519ce91455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI</name>
      <anchor>ebe2311d500628e30bd79931ae4f4b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB</name>
      <anchor>1a990f79c906e2f5ecfd72bb915c6848</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_RECTANGLE_ARB</name>
      <anchor>75556b084a48e5d09d481b49d33a01ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BINDING_RECTANGLE_ARB</name>
      <anchor>d2212067630c4de4d365b1cdca38e6a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_RECTANGLE_ARB</name>
      <anchor>c429f0ea5d9d2f9ea349cf825b4cb769</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT</name>
      <anchor>540143c789b1bd849962750f4ff21e08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_RECTANGLE_EXT</name>
      <anchor>b5074f104e2f12d02207778c2470e61f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BINDING_RECTANGLE_EXT</name>
      <anchor>8f509a47dff5756c8f90d1ceab58ae1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_RECTANGLE_EXT</name>
      <anchor>8a0c86543aa1fd717ab71f9c0e123ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_RECTANGLE_TEXTURE_SIZE_NV</name>
      <anchor>0957ed0aa08ed37189007bbf85efd492</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_RECTANGLE_NV</name>
      <anchor>993441ff2787763694ca20b49df93fc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BINDING_RECTANGLE_NV</name>
      <anchor>a201327aeca8a456ba4ad2200acd7160</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_RECTANGLE_NV</name>
      <anchor>8086185ae815ff734e7c294bf1c8c2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_SHININESS_NV</name>
      <anchor>4edd502e0f153e799da5db454f6f12cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_SPOT_EXPONENT_NV</name>
      <anchor>6507ce80d640aaac79cb2553697ce968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_LOD_BIAS_EXT</name>
      <anchor>14d72e2a9325309a2f2ee86445c34432</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_FILTER_CONTROL_EXT</name>
      <anchor>fe93fba1ee48590f7c4be6144e97bae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_LOD_BIAS_EXT</name>
      <anchor>da8467789b03ea2ef0ec9cdfca65877a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT</name>
      <anchor>d1cf646d8224fdedcce963d095f71c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MAX_ANISOTROPY_EXT</name>
      <anchor>00b65957cb070504d8e364031b176737</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE</name>
      <anchor>c71c8f6a891d0827d3b156886ace8699</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STORAGE_CACHED_APPLE</name>
      <anchor>90d485c73018097d46f0ba8046ed9020</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STORAGE_SHARED_APPLE</name>
      <anchor>e3cb8456fa7098889c154bb688b01d42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_APPLE</name>
      <anchor>d958f6a291e413035af8ff433f4aa3a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE</name>
      <anchor>2c169af9ff0bb35239853e216f17d070</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_POINTER_APPLE</name>
      <anchor>523cca0ad710c291be34e02b09bf6698</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_STORAGE_HINT_APPLE</name>
      <anchor>46dd6e11e4f816f6218ed0f93221e8fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV</name>
      <anchor>e2552e0558b8c06d5aa10cda68945f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_LENGTH_NV</name>
      <anchor>c210b6b71c50ef8f5c79880d1ec28ee9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_NV</name>
      <anchor>102fc5a5c74942cad3681df6cffc01ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_POINTER_NV</name>
      <anchor>780ba6dfb986c8b7b77b4d34138f3fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_VALID_NV</name>
      <anchor>cc9f0bad7dbb4e72c14dd63196c756f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MAX_VERTEX_STREAMS_ATI</name>
      <anchor>82b5be21bf0a47696df7994fe1528ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_SOURCE_ATI</name>
      <anchor>b863e45e7c4cd0bdd24640a6a97ed024</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM0_ATI</name>
      <anchor>f77afccb3c1a29231f87c8296a22700d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM1_ATI</name>
      <anchor>27e51ceedbc3d9653ce9d325be157e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM2_ATI</name>
      <anchor>11e7dab41fbe121699d05f6fc76e11dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM3_ATI</name>
      <anchor>1aa1d137bbfc3b43fa9162662966e037</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM4_ATI</name>
      <anchor>c3d92c3f367647e3b9ff44edb9ecaed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM5_ATI</name>
      <anchor>a72b951b6903523d1f5eec3b3e7ff13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM6_ATI</name>
      <anchor>694f243a7db59c6e071bcdc81c6b5c6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_STREAM7_ATI</name>
      <anchor>c33884bef584579e14e9f7ce96ecf8b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIRROR_CLAMP_ATI</name>
      <anchor>e67e7cf5a7fac4c02892bc10b07ca090</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIRROR_CLAMP_TO_EDGE_ATI</name>
      <anchor>1d4bb0e3aaeb94e757a301235eeed323</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIRRORED_REPEAT_ARB</name>
      <anchor>2c7182f052dec2409bdcf35ccd753bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MIRRORED_REPEAT_IBM</name>
      <anchor>c22ff9e6c5573a2be2d97da145cb5a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE_ARB</name>
      <anchor>f8a2a4cdd1572339a01b657a3a37d856</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE_BIT_ARB</name>
      <anchor>b1799cb8508f761c98608853fea4d7c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_ALPHA_TO_COVERAGE_ARB</name>
      <anchor>411891855dda47a37df1ef2bd80c182d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_ALPHA_TO_ONE_ARB</name>
      <anchor>68cab153252536e5d373c43e9011905a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_BUFFERS_ARB</name>
      <anchor>0726922ffc8dd007fbfae5e400330d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_COVERAGE_ARB</name>
      <anchor>5a19e0c54d728ef235db1234bb6d70d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_COVERAGE_INVERT_ARB</name>
      <anchor>6bc0ecf9fe4f00a1782245b3c77e93ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLE_COVERAGE_VALUE_ARB</name>
      <anchor>c1c034894bceb837ffbc15285d2b45ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SAMPLES_ARB</name>
      <anchor>0748808632631e1761050633fe027eb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SAMPLE_BUFFERS_ARB</name>
      <anchor>c9792da6e4869780e07504635b3e1a42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SAMPLES_ARB</name>
      <anchor>99289a023da8e683eb7de95543e22c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_MULTISAMPLE_FILTER_HINT_NV</name>
      <anchor>09a7a386351a919528a05f1de4a1b63a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_NORMAL_MAP_NV</name>
      <anchor>c0b31313ba0bc6444de2b6b899b7fc6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_REFLECTION_MAP_NV</name>
      <anchor>d38be0d100e800582db0192dd5cceade</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OCCLUSION_TEST_HP</name>
      <anchor>22daf1b41f916066c813394a809f5109</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_OCCLUSION_TEST_RESULT_HP</name>
      <anchor>48c637394588fad4caebda85852798e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PACK_RESAMPLE_OML</name>
      <anchor>556bfb1b6527bd01115a665c57cbe5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RESAMPLE_AVERAGE_OML</name>
      <anchor>ed076e3a192aeb1e0ab4c321fb6de486</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RESAMPLE_DECIMATE_OML</name>
      <anchor>9dd241ee43db832e8dce321753e66273</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RESAMPLE_REPLICATE_OML</name>
      <anchor>40ef2455bab17770e83c0953d7d26874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RESAMPLE_ZERO_FILL_OML</name>
      <anchor>9c4a63eaa6492d676a10fb08bcc849c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNPACK_RESAMPLE_OML</name>
      <anchor>4f3f7b1f54ff2feaea0fe258595917d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PER_STAGE_CONSTANTS_NV</name>
      <anchor>e684ba3b435939f9a3ff0ebc565ed183</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS</name>
      <anchor>03f3b3cbb9aa70607f3296851f1dd343</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS</name>
      <anchor>b0ca3f2a8690cacc9b453214fb0f43a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_GROUP_COLOR_SGIS</name>
      <anchor>f79d5b32c5354cc320c6fef90d0cc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_TEXTURE_SGIS</name>
      <anchor>9882267c7af823dbc5031ab477400cbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_PACK_BUFFER_ARB</name>
      <anchor>33442ed4126f53a339ac7061baf89435</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_PACK_BUFFER_BINDING_ARB</name>
      <anchor>5fdcb9cc7488e9fafd3e1faf11cf6cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_UNPACK_BUFFER_ARB</name>
      <anchor>f287830aa9785013826e3bb81b2365bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_UNPACK_BUFFER_BINDING_ARB</name>
      <anchor>b3b78d5b517fd0da0268c69e8aec4f52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_PACK_BUFFER_BINDING_EXT</name>
      <anchor>b2cb03cc173fa663bec83111251f6d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_PACK_BUFFER_EXT</name>
      <anchor>ed9e58bc0e24f27a9d9771337444e766</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_UNPACK_BUFFER_BINDING_EXT</name>
      <anchor>fca1b2c3a11b046b45e36fc15b4c47a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PIXEL_UNPACK_BUFFER_EXT</name>
      <anchor>4638afec0f4636f396796aeff7884310</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_DISTANCE_ATTENUATION_ARB</name>
      <anchor>8436c933eb189392754de2518665d94c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_FADE_THRESHOLD_SIZE_ARB</name>
      <anchor>df9966c52f3900df31a76bd615db351d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SIZE_MAX_ARB</name>
      <anchor>015ae9d32c5b744a62492459147efe83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POINT_SIZE_MIN_ARB</name>
      <anchor>3dffec2a58d27eeda9baca31088940b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POLYGON_OFFSET_BIAS_EXT</name>
      <anchor>c00eb413b15d6b9e5e3233ba123955cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POLYGON_OFFSET_EXT</name>
      <anchor>2809440f39362c351e31d5ae9127411d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_POLYGON_OFFSET_FACTOR_EXT</name>
      <anchor>5b7607079ca197d24699fc14ee8684e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRIMITIVE_RESTART_INDEX_NV</name>
      <anchor>6d2449fc10865402de703707dd764648</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PRIMITIVE_RESTART_NV</name>
      <anchor>999db7d2d9673547a8d88d5521396e0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_PROXY_TEXTURE_COLOR_TABLE_SGI</name>
      <anchor>ba618a6b554e101ec809f28d485b7bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COLOR_TABLE_SGI</name>
      <anchor>0e2dc494e03bb00801c9ee4af6415402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_RASTER_POSITION_UNCLIPPED_IBM</name>
      <anchor>dc57bf3d52b6aa51c993dd434b5cd0ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SHADOW_AMBIENT_SGIX</name>
      <anchor>400a75350f09c742a62f776b511e74ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_SHARED_TEXTURE_PALETTE_EXT</name>
      <anchor>6346fed26c6ac240723e0f912185c1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_FAIL_ATI</name>
      <anchor>e23363d61c051ebcc7136e3cd3b49849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_FUNC_ATI</name>
      <anchor>9493f2a338e099361a0ec2668031b5d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI</name>
      <anchor>13500d38d7d905dfeaaadffd83611a1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI</name>
      <anchor>c384dade0b97791c276e1e6b8de7cd2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXT_FRAGMENT_SHADER_ATI</name>
      <anchor>7e6f36618146339c89a54740631d2bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_1D_BINDING_EXT</name>
      <anchor>b8c6077ddd57e913fb87a8f65aaea198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_2D_BINDING_EXT</name>
      <anchor>ee0c8b993963c6bc540106c2322cc855</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_3D_BINDING_EXT</name>
      <anchor>fa4425bccef49dcb22972da33d0464cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_PRIORITY_EXT</name>
      <anchor>eaf823693e15ce70d2451103c9d985f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_RESIDENT_EXT</name>
      <anchor>9db08a400e9b3173a43ad05cef09ea11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_BASE_LEVEL_SGIS</name>
      <anchor>6cffbec20f615220cfe3c4c9a6023d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MAX_LEVEL_SGIS</name>
      <anchor>08339bdcecc6c765c95c55df207abdf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MAX_LOD_SGIS</name>
      <anchor>99bdfce7c5356621a33180b4a539db3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_MIN_LOD_SGIS</name>
      <anchor>433c7bd706b4078c1b649ea2eae9a6af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COLOR_WRITEMASK_SGIS</name>
      <anchor>7c27686eec31c991a6ffd1bf4edd1534</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TEXTURE_COMPARE_FAIL_VALUE_ARB</name>
      <anchor>55157956c685886952c7547ae7db602e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_COLOR_MATRIX_ARB</name>
      <anchor>ca9c5da6ef5315c5c49345949c1bac6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_MODELVIEW_MATRIX_ARB</name>
      <anchor>6a8cd8c67fb15508f34b2e362fd1543b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_PROJECTION_MATRIX_ARB</name>
      <anchor>8d5d470f5d732940570ba7f343c67d40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_TRANSPOSE_TEXTURE_MATRIX_ARB</name>
      <anchor>b5344c3088b6af94b7c72b4e4d302cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNPACK_CLIENT_STORAGE_APPLE</name>
      <anchor>c1729649cf983ca18459756c75e257f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_BYTE_3_3_2_EXT</name>
      <anchor>398dcdd0ef8494d181a8636a4b32357b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_10_10_10_2_EXT</name>
      <anchor>bd7431873fdc607ff3a8b5c2b6531693</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_INT_8_8_8_8_EXT</name>
      <anchor>3671bf162ae762d9266ebd5512aff9eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_4_4_4_4_EXT</name>
      <anchor>ea6b5bd47d55702e4822a64ec5b97b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_UNSIGNED_SHORT_5_5_5_1_EXT</name>
      <anchor>4989dac57f34fc13065b9bf155103ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_BINDING_APPLE</name>
      <anchor>9325608c1db5fdde01919a4a280fb389</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV</name>
      <anchor>228f1e25b6f758b6152ad4fd289a8603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCELERATION_ARB</name>
      <anchor>131f3cc56b5489a6fd8f7efa556634ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_ALPHA_BITS_ARB</name>
      <anchor>eb27a625f80aaa587b86c28ea44fbe65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_BITS_ARB</name>
      <anchor>e70e59419a58e3c6c1951cad5e78c055</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_BLUE_BITS_ARB</name>
      <anchor>0044e12ada2c0cee252e1205400413a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_GREEN_BITS_ARB</name>
      <anchor>491952e52b2caad0be533c23b65b16e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_RED_BITS_ARB</name>
      <anchor>c457cdee636955daf428b8d5311f7870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ALPHA_BITS_ARB</name>
      <anchor>5d54c3606cc49e80cb6420b145a2119a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ALPHA_SHIFT_ARB</name>
      <anchor>a5f833102cee048157f3c96a887d9922</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX_BUFFERS_ARB</name>
      <anchor>de9ba085a4a1ad9db1fea0ede7139948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BLUE_BITS_ARB</name>
      <anchor>25743041a05d4564428d28a2e0e35e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BLUE_SHIFT_ARB</name>
      <anchor>33128dba5304ec64ed26475722828a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_COLOR_BITS_ARB</name>
      <anchor>f979369c958742bf188a9dc993886b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DEPTH_BITS_ARB</name>
      <anchor>75b1340d23a385c2b1ce88a303930820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DOUBLE_BUFFER_ARB</name>
      <anchor>8acd69a2be1c4ed51226145c520ecbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DRAW_TO_BITMAP_ARB</name>
      <anchor>1509eb13bd86db634067c22218dbbde2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DRAW_TO_WINDOW_ARB</name>
      <anchor>9b0723a3d7c302c78c2c225a142e6e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_FULL_ACCELERATION_ARB</name>
      <anchor>c7e61d450f6af6ffd08143f33421958e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENERIC_ACCELERATION_ARB</name>
      <anchor>5352d3160045983765b46358b3a43d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GREEN_BITS_ARB</name>
      <anchor>4b67d94c2dbd3c5ad5235eeac10749db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GREEN_SHIFT_ARB</name>
      <anchor>6d6fd2424c846bcd2800ea296e76113f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NEED_PALETTE_ARB</name>
      <anchor>b2dc3925b8ae5000a84920192d80cecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NEED_SYSTEM_PALETTE_ARB</name>
      <anchor>35239e4dce57200276d0d72fc2ccf5b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NO_ACCELERATION_ARB</name>
      <anchor>6e99b85ae842730daef27353a9e3d434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NUMBER_OVERLAYS_ARB</name>
      <anchor>85f0cf7dcb4fa8628282ffcb64bc8c07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NUMBER_PIXEL_FORMATS_ARB</name>
      <anchor>c08792306c4cb9c9f258979cebd7895d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NUMBER_UNDERLAYS_ARB</name>
      <anchor>740af5b0cb6eaa7c3b509ae41b7c3297</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PIXEL_TYPE_ARB</name>
      <anchor>74709fd85aae5b059d39dd4b51694249</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_RED_BITS_ARB</name>
      <anchor>cf6d0dc14bd58ab03b10d4cf1534625a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_RED_SHIFT_ARB</name>
      <anchor>266ab3ccd927f4caf9df1f426c960c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SHARE_ACCUM_ARB</name>
      <anchor>6da7ce52485fdd258b9ab494eedcd98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SHARE_DEPTH_ARB</name>
      <anchor>ba970a427c2dca2f2a3907d867d3ca7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SHARE_STENCIL_ARB</name>
      <anchor>5b0fd4fef9367431eb546d3e735803ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_STENCIL_BITS_ARB</name>
      <anchor>0adda3bf0bcae1b1f66094f4331570bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_STEREO_ARB</name>
      <anchor>2aa289efbc19a76be9dc0ac303f01689</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SUPPORT_GDI_ARB</name>
      <anchor>ba61f71193fd3d3d86c685f7b34e56dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SUPPORT_OPENGL_ARB</name>
      <anchor>fddc80fbff35c1f270613b83090eca85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_COPY_ARB</name>
      <anchor>c27ce73d3f143c8353ef1df789ef046e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_EXCHANGE_ARB</name>
      <anchor>0d1f93ca815d7a25ab315f7c0eacae84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_LAYER_BUFFERS_ARB</name>
      <anchor>c314b1700a0bcda2d7530373d9dde7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_METHOD_ARB</name>
      <anchor>2c1814f7285f6392517ed940fb675f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_UNDEFINED_ARB</name>
      <anchor>ddc0aa8a0b99095e09cc748e17dcd8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_ALPHA_VALUE_ARB</name>
      <anchor>4ed17228cd09c34f556948807c91a2d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_ARB</name>
      <anchor>2a9cc47f0c03ed77341edc8c502b9ff1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_BLUE_VALUE_ARB</name>
      <anchor>bc05aa81ef07b7c2e4f3a55bd30dfded</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_GREEN_VALUE_ARB</name>
      <anchor>f61c714bf83ed4ab06e6e5e8970008e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_INDEX_VALUE_ARB</name>
      <anchor>b0dce9ba7c0a09bb36e508d872d313cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_RED_VALUE_ARB</name>
      <anchor>9f6ea6a06f906059c0103fc38479170a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TYPE_COLORINDEX_ARB</name>
      <anchor>8bf596fcd313de5ab063c732774063cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TYPE_RGBA_ARB</name>
      <anchor>9ef316350bc3d0261a55e22242da3573</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCELERATION_EXT</name>
      <anchor>2916477b75e565075d11be52b770e4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_ALPHA_BITS_EXT</name>
      <anchor>84275880feeb17215f67565f4da5f48b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_BITS_EXT</name>
      <anchor>5861b098b33e6c4caf1a8965789ec015</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_BLUE_BITS_EXT</name>
      <anchor>0e76ced70d79d1c281373433d0dbda39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_GREEN_BITS_EXT</name>
      <anchor>b4b78fc6225b380f71b2b5e4030957de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ACCUM_RED_BITS_EXT</name>
      <anchor>cc4f642c4eb50fecca152a845f9f132e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ALPHA_BITS_EXT</name>
      <anchor>f5cf43af3d8ef3e2185cb3463cefd207</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ALPHA_SHIFT_EXT</name>
      <anchor>4f1bab83605c47cca36f2e1451fd8339</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX_BUFFERS_EXT</name>
      <anchor>9b1b7793edce9175d76868dd59d6f277</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BLUE_BITS_EXT</name>
      <anchor>7a4ea12ad0ec62069b41b383fbf64a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BLUE_SHIFT_EXT</name>
      <anchor>98fdf8cd509c4ce4463a8a056e57e6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_COLOR_BITS_EXT</name>
      <anchor>8b8c8ffb7c5ab9b004e22b80852b79c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DEPTH_BITS_EXT</name>
      <anchor>588b0c76227199af09a823cccbc8d7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DOUBLE_BUFFER_EXT</name>
      <anchor>77c90d9df38d4c022cccb2086647b360</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DRAW_TO_BITMAP_EXT</name>
      <anchor>c7f2df35d17bf05d9054cdc65676d694</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DRAW_TO_WINDOW_EXT</name>
      <anchor>bc2854b61642bae13df628740f22d93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_FULL_ACCELERATION_EXT</name>
      <anchor>2f04b282bbfb2cb4a1de0eea2617f10f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENERIC_ACCELERATION_EXT</name>
      <anchor>248225339b2328b488d6f12f6d05ee67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GREEN_BITS_EXT</name>
      <anchor>f40f5104d474727e099c4cffabc54fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GREEN_SHIFT_EXT</name>
      <anchor>1beb5406a8f7d0a2baad1722c0fcc359</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NEED_PALETTE_EXT</name>
      <anchor>b880a89f34eb701077a395245a93432f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NEED_SYSTEM_PALETTE_EXT</name>
      <anchor>fc8cc643517a0c95dd2e41256373cdfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NO_ACCELERATION_EXT</name>
      <anchor>3e7a68431bf5c129c8574a4bc2e0d266</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NUMBER_OVERLAYS_EXT</name>
      <anchor>a168f73f349569d18588a782b215882b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NUMBER_PIXEL_FORMATS_EXT</name>
      <anchor>02b40cff4e9c5236e2efb2a8b9c8ba68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NUMBER_UNDERLAYS_EXT</name>
      <anchor>f7c27dbf2bf15c5740c35f55e43aaa06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PIXEL_TYPE_EXT</name>
      <anchor>f70c220c9473946fda180c70ee8110d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_RED_BITS_EXT</name>
      <anchor>3878784a8ec69eec90c1748c6eed96b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_RED_SHIFT_EXT</name>
      <anchor>b13d56cf8ebe635361e43c1d14db9e74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SHARE_ACCUM_EXT</name>
      <anchor>70528ce3cc7d08b118b54251d56e8624</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SHARE_DEPTH_EXT</name>
      <anchor>f0c91b10c8987a23fd49abe5b7726e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SHARE_STENCIL_EXT</name>
      <anchor>f0121e21140c019cc4c2a996b9fa2f35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_STENCIL_BITS_EXT</name>
      <anchor>07074bca58bc97de5fb2e72f2e171936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_STEREO_EXT</name>
      <anchor>f41898c14c7103984878d144bc1aee9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SUPPORT_GDI_EXT</name>
      <anchor>3bdea97216e39c01308ead803c70d17e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SUPPORT_OPENGL_EXT</name>
      <anchor>f269ce9e91afd6de9f831f14011d50c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_COPY_EXT</name>
      <anchor>1712a407e684c764eaee84a7072ecf4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_EXCHANGE_EXT</name>
      <anchor>15dc8b430b60855a5f01215b762f4e8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_LAYER_BUFFERS_EXT</name>
      <anchor>f5593d11200e09825e586c4419136151</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_METHOD_EXT</name>
      <anchor>301c7708a1e5a21b5c74cf981b94290a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_SWAP_UNDEFINED_EXT</name>
      <anchor>a3af1fa82176cfb619b1024958771392</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_EXT</name>
      <anchor>3b4a412e0399218dfe402380d1eb2b37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TRANSPARENT_VALUE_EXT</name>
      <anchor>8bd8249522026330b56c44b9f75c78b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TYPE_COLORINDEX_EXT</name>
      <anchor>0fa4b51bb215c2b30863da3dca7393e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TYPE_RGBA_EXT</name>
      <anchor>4a4fa815a56b3ced62a7d35edb6fd157</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX0_ARB</name>
      <anchor>ac6ff5ff0fe80b29dfa18116f409ef9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX1_ARB</name>
      <anchor>22efbf4037d231a78c6b44f44f18138b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX2_ARB</name>
      <anchor>d5468c533d492762307c54843005939e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX3_ARB</name>
      <anchor>723b1ceb9d816b121918ebcebedf4509</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX4_ARB</name>
      <anchor>4590e5d0e54fd0709246d12972faf878</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX5_ARB</name>
      <anchor>bfa26f2ef5558912380614077d01c11c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX6_ARB</name>
      <anchor>75c89f506a739edd65c58c1c0bbb7144</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX7_ARB</name>
      <anchor>af4d6346518779b319de4f5853c0a1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX8_ARB</name>
      <anchor>23daa2691df3c97928a0a05ac8e8c3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_AUX9_ARB</name>
      <anchor>8d5e7155972f8380a3586ad58952399e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BACK_LEFT_ARB</name>
      <anchor>f0bf1753968873282dd47c90a32a3642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BACK_RIGHT_ARB</name>
      <anchor>1c48d2baa1a6571777ff238795df09b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BIND_TO_TEXTURE_RGB_ARB</name>
      <anchor>5885666f9ddcf5e24cba27a6cc7fea5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BIND_TO_TEXTURE_RGBA_ARB</name>
      <anchor>c1305e90a9d951b0d3abf44a5004a3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_CUBE_MAP_FACE_ARB</name>
      <anchor>23900ad81fafd2242ed6d7c30a1b5a57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_FRONT_LEFT_ARB</name>
      <anchor>8a7996246a8869efb7c3e54d9a029bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_FRONT_RIGHT_ARB</name>
      <anchor>b111c5e9f3ab8119e5f82fda212f3f06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MIPMAP_LEVEL_ARB</name>
      <anchor>a01d8cd206cbcc03654ded015ef314f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MIPMAP_TEXTURE_ARB</name>
      <anchor>0a85f4e8b6880c0482225d79cd0d595c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_NO_TEXTURE_ARB</name>
      <anchor>822ebae295e46c6e4fee5183fb16af45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_1D_ARB</name>
      <anchor>536b7f16817bd892f30dd67181138c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_2D_ARB</name>
      <anchor>b3638f21cd6fef0ff7684ad29fd42298</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_ARB</name>
      <anchor>c70f0e77aa0d427270463b5284223313</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB</name>
      <anchor>e577ea7e7aa69a2c1f5dc232cc4ade78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB</name>
      <anchor>7216236e0cd23535d73358e1dd06cb5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB</name>
      <anchor>fe687e69abd2d5e10d7ebe0cb8ac2227</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB</name>
      <anchor>4cb2ec90501fd77c3224ef748c1f01af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB</name>
      <anchor>fa47fb9c961e5a05540bc3aac87b760e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB</name>
      <anchor>61020a8fd98ebed6af9ec1c2f2066451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_FORMAT_ARB</name>
      <anchor>c5568e1893bea5119750cce290e51543</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_RGB_ARB</name>
      <anchor>a8e971af28667351deca4ed1ad68447e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_RGBA_ARB</name>
      <anchor>82511b9960b4f6eaca94de22a76e317d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_TEXTURE_TARGET_ARB</name>
      <anchor>192fc0dc3758050181b423ca2604fdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_BACK_COLOR_BUFFER_BIT_ARB</name>
      <anchor>6d2853c28d30616eed6102b905df2b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DEPTH_BUFFER_BIT_ARB</name>
      <anchor>44d6260c41640c5d05c051144ea8d863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_FRONT_COLOR_BUFFER_BIT_ARB</name>
      <anchor>c865567a7d53cc4a929d357a6769145a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_STENCIL_BUFFER_BIT_ARB</name>
      <anchor>cead508dee137b6e3517ef7b871a49f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DIGITAL_VIDEO_CURSOR_ALPHA_FRAMEBUFFER_I3D</name>
      <anchor>4b85ab502fc949433b4e82eecc79958c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DIGITAL_VIDEO_CURSOR_ALPHA_VALUE_I3D</name>
      <anchor>e97ae9b5577e5d1f9a5c8159b4482462</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DIGITAL_VIDEO_CURSOR_INCLUDED_I3D</name>
      <anchor>02db424ba5910c6eef521a1b1d2a6592</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DIGITAL_VIDEO_GAMMA_CORRECTED_I3D</name>
      <anchor>e51cab191b8a2a996b36024d0b17b5ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DRAW_TO_PBUFFER_ARB</name>
      <anchor>96e1f671cfc6ac0930c31a1cd0742d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MAX_PBUFFER_HEIGHT_ARB</name>
      <anchor>1f82fa69634a81f8ab407240b95df5f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MAX_PBUFFER_PIXELS_ARB</name>
      <anchor>2f56e6cef8e60e45a1dca9f08db524b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MAX_PBUFFER_WIDTH_ARB</name>
      <anchor>fe7252e31e53dd49c32075c7359816bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_HEIGHT_ARB</name>
      <anchor>9b0a9b9a933aca4a57ce0c665d13c682</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_LARGEST_ARB</name>
      <anchor>def2a95fbd105e06e8a699cc61c3fc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_LOST_ARB</name>
      <anchor>965793730415a067e6445bd7cc325b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_WIDTH_ARB</name>
      <anchor>5c1dc6dc8a0aaf63b0ec5250001fc561</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_DRAW_TO_PBUFFER_EXT</name>
      <anchor>32d922d43b66ebc4e6293cd2c0b68b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MAX_PBUFFER_HEIGHT_EXT</name>
      <anchor>b2ca92cc20f8c9ade873aee54bcd5ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MAX_PBUFFER_PIXELS_EXT</name>
      <anchor>ac146378415a6fcb07377feb64b9407b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_MAX_PBUFFER_WIDTH_EXT</name>
      <anchor>2f92d35045682b1fc2d87eb78d1a914e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_OPTIMAL_PBUFFER_HEIGHT_EXT</name>
      <anchor>18f8ab77d4839b76302318611a98b9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_OPTIMAL_PBUFFER_WIDTH_EXT</name>
      <anchor>d0ad4dd12f9eff3fa4b771be91173023</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_HEIGHT_EXT</name>
      <anchor>d8ab0ab268e82b5dd0e7a674d94cd329</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_LARGEST_EXT</name>
      <anchor>ee2573dd71418bb53de6336cd2543445</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_PBUFFER_WIDTH_EXT</name>
      <anchor>7c812e205282bb85cd75dd34d5a5c989</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ERROR_INCOMPATIBLE_DEVICE_CONTEXTS_ARB</name>
      <anchor>24d209feb0c2b3c5f5623ba69b46c276</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_ERROR_INVALID_PIXEL_TYPE_ARB</name>
      <anchor>b710992bdfa3ddd75368ad46eb36335e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GAMMA_EXCLUDE_DESKTOP_I3D</name>
      <anchor>59e3456bed7402d944cd5fe2645190e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GAMMA_TABLE_SIZE_I3D</name>
      <anchor>36653a33d0fc22ef09d02841e8f54ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_DIGITAL_FIELD_I3D</name>
      <anchor>faf54cc956c1171b2eec918a45afbbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_DIGITAL_SYNC_I3D</name>
      <anchor>134b7e1def50c251da5a8ad4aa28a1ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_EDGE_BOTH_I3D</name>
      <anchor>d6c6b4ffd5bdfbac31d752a378ae1c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_EDGE_FALLING_I3D</name>
      <anchor>d9fc11ea652391727848bbd9fdc2914a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_EDGE_RISING_I3D</name>
      <anchor>9c6fb4ea610044c050d4909baab50af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_EXTERNAL_FIELD_I3D</name>
      <anchor>a2f04fd2c6a9130f7bca50112a8d9509</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_EXTERNAL_SYNC_I3D</name>
      <anchor>e7f24c17966fd6b088b413f34139883b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_EXTERNAL_TTL_I3D</name>
      <anchor>5d8953ff20acd5bd16865c3fdf8d727f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_GENLOCK_SOURCE_MULTIVIEW_I3D</name>
      <anchor>bd463daf7f20fda23eb29f4e9cf8820f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_IMAGE_BUFFER_LOCK_I3D</name>
      <anchor>d14bfc5da636c0bb522e2c3a113e9009</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>WGL_IMAGE_BUFFER_MIN_ACCESS_I3D</name>
      <anchor>6a11cbfb71e905bff73a08345c007261</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGLACTIVESTENCILFACEEXT</name>
      <anchor>f54fc72d4a9e3523a55747f1278d5876</anchor>
      <arglist>(GLenum face)</arglist>
    </member>
    <member kind="function">
      <name>csGLACTIVETEXTURE</name>
      <anchor>6fa9f4656d734c1996598fec438a6e26</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <name>csGLCLIENTACTIVETEXTURE</name>
      <anchor>55a6f06893256f95afb5d276a9b3bbc5</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXIMAGE1D</name>
      <anchor>450f95e5bee0f378bb76d5a8e969e960</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXIMAGE2D</name>
      <anchor>cd26200e0b0dd81b557628234c645efe</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXIMAGE3D</name>
      <anchor>0b36cf0c469497b115200d50b9a8c0b2</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXSUBIMAGE1D</name>
      <anchor>e196747c9705454c0f06f827d4d8191a</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXSUBIMAGE2D</name>
      <anchor>60b27672cef83113928607e6df5fc38e</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXSUBIMAGE3D</name>
      <anchor>e9be8eceb1bdb84209367494ff96b0a8</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMPRESSEDTEXIMAGE</name>
      <anchor>f12d11470443a7bcdd9266fbc10ca5b9</anchor>
      <arglist>(GLenum target, GLint level, GLvoid *img)</arglist>
    </member>
    <member kind="function">
      <name>csGLLOADTRANSPOSEMATRIXD</name>
      <anchor>13afc8b3e8a7d6c9c3345706e0b594e3</anchor>
      <arglist>(const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLLOADTRANSPOSEMATRIXF</name>
      <anchor>a3a01d2730d4659655c885c17d3e85af</anchor>
      <arglist>(const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1D</name>
      <anchor>6019cfa616ac05fa696e5c72616f4b8a</anchor>
      <arglist>(GLenum target, GLdouble s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1DV</name>
      <anchor>94d77c98108b8cb9db62b3f9e82d9a7b</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1F</name>
      <anchor>f8237d31959af5a175e3cb587532438e</anchor>
      <arglist>(GLenum target, GLfloat s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1FV</name>
      <anchor>d14bd7051d3b17dc074376c32c32dac5</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1I</name>
      <anchor>9f700f21840f1ba1cc283d70621b3a12</anchor>
      <arglist>(GLenum target, GLint s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1IV</name>
      <anchor>d26d4270b77d6a4e2c34ace56856a3db</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1S</name>
      <anchor>91fd0536ff02ed5561442df0383b6c3e</anchor>
      <arglist>(GLenum target, GLshort s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1SV</name>
      <anchor>a8335ae57c3ea21f1e4d1543dffacb48</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2D</name>
      <anchor>ba0ecdc4369979128994fc079ab8fdaf</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2DV</name>
      <anchor>1bd5cef7f642d9ad653ad82787c6e5c2</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2F</name>
      <anchor>f3abef87f52328ee72db0f7219e88e37</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2FV</name>
      <anchor>01fe801847fcb8571ac22e8ac3626f19</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2I</name>
      <anchor>f6630e9aa1590f85e8b1e2a047f675d6</anchor>
      <arglist>(GLenum target, GLint s, GLint t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2IV</name>
      <anchor>b5b69e081d5500a8089cc9481a480c80</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2S</name>
      <anchor>0d28d364e30ec23c0cb722e03dc7052e</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2SV</name>
      <anchor>7ba12cc957d0c5266bb36a6b69a64d99</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3D</name>
      <anchor>fe6e0e2150b50b237900cc3c171d52e7</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3DV</name>
      <anchor>ae2512f9f0396f94561fa1955b1bda0c</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3F</name>
      <anchor>ef512eff1e9c063f63671a77dcac8965</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3FV</name>
      <anchor>dc6d8630fbcb7761a7f48827deed2a1c</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3I</name>
      <anchor>a930b12d531685ea8ea290c64e737a39</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3IV</name>
      <anchor>632ea2560fc775f15880bcd97060ec38</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3S</name>
      <anchor>ba69c0e5162d05399d5537b619237cba</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3SV</name>
      <anchor>ba8724529b965994c8c20eca439dbb3d</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4D</name>
      <anchor>696ebb5e31a121025f80bb1cbffc4f6f</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4DV</name>
      <anchor>c533327a119d626390b3a13c6b0e6a52</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4F</name>
      <anchor>cc91fc22c58468fa46e19c6487222279</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4FV</name>
      <anchor>3cf99d1d1776371b2056bc2c8b0557c0</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4I</name>
      <anchor>27a9a878afd825f3120f2c15a3979273</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r, GLint q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4IV</name>
      <anchor>71a2d9ea091da761a56156d4fd064358</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4S</name>
      <anchor>9325a6493a2ff49ac849a1449d1ef522</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4SV</name>
      <anchor>90200a87c285055bed62df9d1afd9701</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTTRANSPOSEMATRIXD</name>
      <anchor>e7ce034227e4c505ca9aa7563107b4af</anchor>
      <arglist>(const GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTTRANSPOSEMATRIXF</name>
      <anchor>bf04911b52c071ec925af80f06d0d104</anchor>
      <arglist>(const GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLSAMPLECOVERAGE</name>
      <anchor>3e74466247654e0b96cce0b80fe3d434</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <name>csGLACTIVETEXTUREARB</name>
      <anchor>2f61adbae692b5b61792ba50deb280dc</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <name>csGLCLIENTACTIVETEXTUREARB</name>
      <anchor>0b716606495a9c2e0728b80a89a1c3c3</anchor>
      <arglist>(GLenum texture)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1DARB</name>
      <anchor>6482155344d764253c51d5dace3504fb</anchor>
      <arglist>(GLenum target, GLdouble s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1DVARB</name>
      <anchor>d47bc27b1d882167e81b91e1c7267892</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1FARB</name>
      <anchor>ca6c10eb5d3022303ef1651425f183f0</anchor>
      <arglist>(GLenum target, GLfloat s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1FVARB</name>
      <anchor>d27c77f51248952aa2f5dbb751775782</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1IARB</name>
      <anchor>59f22426da1b9da690e5e81d04bce61b</anchor>
      <arglist>(GLenum target, GLint s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1IVARB</name>
      <anchor>0a113fb6410038e820d59486435a4ffb</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1SARB</name>
      <anchor>fba7edd368e5570357a8dfccc301f839</anchor>
      <arglist>(GLenum target, GLshort s)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD1SVARB</name>
      <anchor>34af90f52af6e05d540d7fa50274ccfc</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2DARB</name>
      <anchor>30b910287d3363c70901574a0e8724fd</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2DVARB</name>
      <anchor>08ff5476c24d04fccbfffa383e77e055</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2FARB</name>
      <anchor>7633b6bbb9e230ad485997f905e8c805</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2FVARB</name>
      <anchor>d97ff1fc5f337ca11fde6f1e0915cd8e</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2IARB</name>
      <anchor>1e46def9657908bfb862f36ec45d8f84</anchor>
      <arglist>(GLenum target, GLint s, GLint t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2IVARB</name>
      <anchor>0556d01c56c4f461ffc0c83eb37c2fcc</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2SARB</name>
      <anchor>bbc535cb2caea967c9d3b0b18a02638c</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD2SVARB</name>
      <anchor>c1024d948d2d2e6b706c2248a145f39d</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3DARB</name>
      <anchor>2426d3c3eaf9a3022b12b4e6b2ae1f5e</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3DVARB</name>
      <anchor>89705e8f51471e7c286133ea3ede99d6</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3FARB</name>
      <anchor>1a3c624b4b6df0eb079dc9170d334a5b</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3FVARB</name>
      <anchor>159bc11487855c9601f8f51410c286ff</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3IARB</name>
      <anchor>aed4603a08161d56fcf38bb95adc4c9d</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3IVARB</name>
      <anchor>abf80e5c5c42efc9c1808bca823754d4</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3SARB</name>
      <anchor>09aac356062276c48d82d0862e60ac04</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD3SVARB</name>
      <anchor>b231522ab66fc4410b48511ae4f030f1</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4DARB</name>
      <anchor>9d95f6fbb057cc1318c1139684c0c13c</anchor>
      <arglist>(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4DVARB</name>
      <anchor>e1b14b64656d0d43da5215340d119cc0</anchor>
      <arglist>(GLenum target, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4FARB</name>
      <anchor>74bb8c42c84e35337ff50c1670091adc</anchor>
      <arglist>(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4FVARB</name>
      <anchor>5229140e6ef6691483a2f48a2d265951</anchor>
      <arglist>(GLenum target, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4IARB</name>
      <anchor>3ff237eb0ec9d7c37da1fa802a7b7c14</anchor>
      <arglist>(GLenum target, GLint s, GLint t, GLint r, GLint q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4IVARB</name>
      <anchor>b14860ef958a927f28a6b9b43d11e6e8</anchor>
      <arglist>(GLenum target, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4SARB</name>
      <anchor>17aff67a855736996592b87c26e51f62</anchor>
      <arglist>(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTITEXCOORD4SVARB</name>
      <anchor>45ba0fbbb4ff347c61084ac7873b2941</anchor>
      <arglist>(GLenum target, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLALPHAFRAGMENTOP1ATI</name>
      <anchor>9e2bd1a52ad7778a1ca0480cdd97beb8</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)</arglist>
    </member>
    <member kind="function">
      <name>csGLALPHAFRAGMENTOP2ATI</name>
      <anchor>e403ebf1410862e25acbdc63d09501c7</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)</arglist>
    </member>
    <member kind="function">
      <name>csGLALPHAFRAGMENTOP3ATI</name>
      <anchor>905504093d2463be48137456261ebf98</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)</arglist>
    </member>
    <member kind="function">
      <name>csGLBEGINFRAGMENTSHADERATI</name>
      <anchor>03a232577a163278dc8eec55790d70c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDFRAGMENTSHADERATI</name>
      <anchor>91591b25d07abb6d665385296d42d091</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORFRAGMENTOP1ATI</name>
      <anchor>722e17280f770799da0828e9efcb61eb</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORFRAGMENTOP2ATI</name>
      <anchor>b0845d275db133b764e8e0d750b29e37</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORFRAGMENTOP3ATI</name>
      <anchor>5957ca7ed62158ccc9445d41a9ac06be</anchor>
      <arglist>(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEFRAGMENTSHADERATI</name>
      <anchor>1ac2965458bb7544dd086248fdc89022</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLENDFRAGMENTSHADERATI</name>
      <anchor>76a01b59015f76085b094983894bf53a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLGENFRAGMENTSHADERSATI</name>
      <anchor>d04707fcc36bfadb4a37e38a019c1fe1</anchor>
      <arglist>(GLuint range)</arglist>
    </member>
    <member kind="function">
      <name>csGLPASSTEXCOORDATI</name>
      <anchor>25f53d7b85232fafb4f7f52baff86c03</anchor>
      <arglist>(GLuint dst, GLuint coord, GLenum swizzle)</arglist>
    </member>
    <member kind="function">
      <name>csGLSAMPLEMAPATI</name>
      <anchor>798e270d5c42507a63b33b80f058baa1</anchor>
      <arglist>(GLuint dst, GLuint interp, GLenum swizzle)</arglist>
    </member>
    <member kind="function">
      <name>csGLSETFRAGMENTSHADERCONSTANTATI</name>
      <anchor>099318d50da617628d3891868cfab123</anchor>
      <arglist>(GLuint dst, const GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLAREPROGRAMSRESIDENTNV</name>
      <anchor>24091a459bac5f0a40712a36e32bd72b</anchor>
      <arglist>(GLsizei n, const GLuint *ids, GLboolean *residences)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDPROGRAMNV</name>
      <anchor>5ca108a538e71577453ae4d3ddd6220d</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEPROGRAMSNV</name>
      <anchor>d65f04fef023f5da6b572e3cfddf96b9</anchor>
      <arglist>(GLsizei n, const GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLEXECUTEPROGRAMNV</name>
      <anchor>482911a892c3a8f795597aa4fe7ad73b</anchor>
      <arglist>(GLenum target, GLuint id, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENPROGRAMSNV</name>
      <anchor>5405fbeff0ad6aeabf6e8d8b362673a4</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMIVNV</name>
      <anchor>347516e93865396b311ab71d27396b31</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMPARAMETERDVNV</name>
      <anchor>90cf3104929ffa45eb79e17e97a1535b</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMPARAMETERFVNV</name>
      <anchor>6073b783311b26f369ad15a2478d45c9</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMSTRINGNV</name>
      <anchor>fe9a4641b5e27577500a95c027dbc490</anchor>
      <arglist>(GLuint id, GLenum pname, GLubyte *program)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETTRACKMATRIXIVNV</name>
      <anchor>f2ff26c8bad3137bd7e6fdb0b7c5d02b</anchor>
      <arglist>(GLenum target, GLuint address, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBDVNV</name>
      <anchor>807f98ebd5c6ab1e683cd0aaeaf3a474</anchor>
      <arglist>(GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBFVNV</name>
      <anchor>6d9c8984bbf5b8e1a1fac416f6768444</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBIVNV</name>
      <anchor>28c8b4acec5a5ca5c2acac84f9e3b5d1</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBPOINTERVNV</name>
      <anchor>b61046cbab3d6c83a3a7f67eeef64d68</anchor>
      <arglist>(GLuint index, GLenum pname, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLISPROGRAMNV</name>
      <anchor>f874e785d31e48d11fd1efc7c1de65d2</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLLOADPROGRAMNV</name>
      <anchor>8cf08ab054050cbb7779e3ab2288d602</anchor>
      <arglist>(GLenum target, GLuint id, GLsizei len, const GLubyte *program)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMPARAMETER4FNV</name>
      <anchor>fa9716894bb8674841e29cef511a346e</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMPARAMETER4FVNV</name>
      <anchor>29c7d36fc45d3eb96434b3dbafee6150</anchor>
      <arglist>(GLenum target, GLuint index, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMPARAMETERS4DVNV</name>
      <anchor>d42a95f170367a91c9fefbcc7a994bfe</anchor>
      <arglist>(GLenum target, GLuint index, GLuint num, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMPARAMETERS4FVNV</name>
      <anchor>48ffb119e2db11246e6469329928bedd</anchor>
      <arglist>(GLenum target, GLuint index, GLuint num, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLREQUESTRESIDENTPROGRAMSNV</name>
      <anchor>35078de6dbb00f14609f81d65e302ff6</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLTRACKMATRIXNV</name>
      <anchor>6315b291ee6882c34d627e6a97937b2a</anchor>
      <arglist>(GLenum target, GLuint address, GLenum matrix, GLenum transform)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1DNV</name>
      <anchor>94806801a5f78f6cc5e736b8bd77d139</anchor>
      <arglist>(GLuint index, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1DVNV</name>
      <anchor>0516c68ff00509faa7a475c1ebcf67f2</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1FNV</name>
      <anchor>82ae1e2cf40919f75280a820c5e507d9</anchor>
      <arglist>(GLuint index, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1FVNV</name>
      <anchor>7b57402ca2cdde0845deb9cb7d5ab239</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1SNV</name>
      <anchor>4cf1121f4977c50911a757dddc794f16</anchor>
      <arglist>(GLuint index, GLshort x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1SVNV</name>
      <anchor>c9a404a79a46ee971d8b3aa2d057cf86</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2DNV</name>
      <anchor>871c97090d5c6f7f07e0cda0f7cb6e10</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2DVNV</name>
      <anchor>960ef0afcae8480180bd4af41b7666e0</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2FNV</name>
      <anchor>4c0a153907c55c38a1d46bfad6dd16bc</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2FVNV</name>
      <anchor>b287d23193a02631d831042811d3e0bf</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2SNV</name>
      <anchor>161d64bf9ae700cb82aa8aeb4858087e</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2SVNV</name>
      <anchor>f81b393fae3f6e8f410546903cd1dc1d</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3DNV</name>
      <anchor>d6f0cf1729114e59891afc064d31d5d1</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3DVNV</name>
      <anchor>7ab9ff8feec1edf08ccedee2f60b1f86</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3FNV</name>
      <anchor>dbcb1f5563ebac08597df9009b17438f</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3FVNV</name>
      <anchor>2ca414ac39a4f190f7f4b0c9297973b7</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3SNV</name>
      <anchor>55b9d2fff16bdda927b695a5189b8a1b</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3SVNV</name>
      <anchor>670a5626bfc548e09a832f284d356eb8</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4DNV</name>
      <anchor>d7c46bbb7f09cba1e318b2b75edc58f6</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4DVNV</name>
      <anchor>bc5636568b51982ff2c0f696aff920ef</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4FNV</name>
      <anchor>2994cd441d65f49b9732f519ef4c9c1b</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4FVNV</name>
      <anchor>109187401599411b206e98b0c49f4acc</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4SNV</name>
      <anchor>44850feb78dd8980c8ae23ea7515f33f</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4SVNV</name>
      <anchor>adfd4aeb0d69f7a155fd1c50c81414b9</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4UBNV</name>
      <anchor>1282b48280250e7bde6d273bbe10f238</anchor>
      <arglist>(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4UBVNV</name>
      <anchor>ac52202ee80bab357468b84b8145123d</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBPOINTERNV</name>
      <anchor>9ea0b3b77ef582e0819535d1e01f03f8</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS1DVNV</name>
      <anchor>ccf7b25ac6d10cdb39fa68e154774950</anchor>
      <arglist>(GLuint index, GLsizei n, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS1FVNV</name>
      <anchor>c5c992e8d2e1bae99832da5dc04e8833</anchor>
      <arglist>(GLuint index, GLsizei n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS1SVNV</name>
      <anchor>01def042797e040ffa15a337ffc31c23</anchor>
      <arglist>(GLuint index, GLsizei n, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS2DVNV</name>
      <anchor>3d27306860d26a631e9c477916f895ec</anchor>
      <arglist>(GLuint index, GLsizei n, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS2FVNV</name>
      <anchor>bfa8806ddcd3eb108f4843b5a5493648</anchor>
      <arglist>(GLuint index, GLsizei n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS2SVNV</name>
      <anchor>8063b1c602c2e3f7af5c8e70021ecfdf</anchor>
      <arglist>(GLuint index, GLsizei n, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS3DVNV</name>
      <anchor>abde9b1efa472887cd7b2bf9262c0714</anchor>
      <arglist>(GLuint index, GLsizei n, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS3FVNV</name>
      <anchor>67e68758bb48742afd708a7438ba417b</anchor>
      <arglist>(GLuint index, GLsizei n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS3SVNV</name>
      <anchor>3771e6b9a074e259156607ba1bb405b2</anchor>
      <arglist>(GLuint index, GLsizei n, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS4DVNV</name>
      <anchor>2f784efdd356838ea6bce3f204e9f58e</anchor>
      <arglist>(GLuint index, GLsizei n, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS4FVNV</name>
      <anchor>f8b22629e5b5795485daa01233f139ea</anchor>
      <arglist>(GLuint index, GLsizei n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS4SVNV</name>
      <anchor>6c738201a3cfa2013087eee19097dfe5</anchor>
      <arglist>(GLuint index, GLsizei n, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBS4UBVNV</name>
      <anchor>39ba7b1f7f9dba5638ac5b4703fc292f</anchor>
      <arglist>(GLuint index, GLsizei n, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLARETEXTURESRESIDENTEXT</name>
      <anchor>c8b07590a23e093a30a01da691f47473</anchor>
      <arglist>(GLsizei n, const GLuint *textures, GLboolean *residences)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDTEXTUREEXT</name>
      <anchor>fc8432e2a10458f560a25473bba2ef33</anchor>
      <arglist>(GLenum target, GLuint texture)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETETEXTURESEXT</name>
      <anchor>39559a5593ab092c8ca7b18036f83511</anchor>
      <arglist>(GLsizei n, const GLuint *textures)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENTEXTURESEXT</name>
      <anchor>a499c8d6f38fa3a58032ba3bad7e9c2c</anchor>
      <arglist>(GLsizei n, GLuint *textures)</arglist>
    </member>
    <member kind="function">
      <name>csGLISTEXTUREEXT</name>
      <anchor>6080b7e8629416bdea3563179183739e</anchor>
      <arglist>(GLuint texture)</arglist>
    </member>
    <member kind="function">
      <name>csGLPRIORITIZETEXTURESEXT</name>
      <anchor>47ea3666f7b6df3495ac72d045f3a3ad</anchor>
      <arglist>(GLsizei n, const GLuint *textures, const GLclampf *priorities)</arglist>
    </member>
    <member kind="function">
      <name>csGLARRAYELEMENTEXT</name>
      <anchor>0f71e808d5e206eb9e8b3704bd8743cf</anchor>
      <arglist>(GLint i)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORPOINTEREXT</name>
      <anchor>fe13f79788645ca27710bdd18b6a32c1</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWARRAYSEXT</name>
      <anchor>7e32b63d0d6b4ce74ed5a400595d97b0</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLEDGEFLAGPOINTEREXT</name>
      <anchor>c98e1eb065e9af99ca1c2d042965d4c7</anchor>
      <arglist>(GLsizei stride, GLsizei count, const GLboolean *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPOINTERVEXT</name>
      <anchor>22ea0a492edf79ec5aed64cac2a15ed0</anchor>
      <arglist>(GLenum pname, GLvoid *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLINDEXPOINTEREXT</name>
      <anchor>c09964398409638c4ad898aa93e8dd22</anchor>
      <arglist>(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALPOINTEREXT</name>
      <anchor>ab646b6fea8b1c94439c51fafe83cb0b</anchor>
      <arglist>(GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORDPOINTEREXT</name>
      <anchor>066a5b80b9fae9a5bb252902e0b99c07</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXPOINTEREXT</name>
      <anchor>6946838c1cccb836ee9be1c9db674ede</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLARRAYOBJECTATI</name>
      <anchor>4be88a23f7ec63efb0be44ef6bdeb648</anchor>
      <arglist>(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)</arglist>
    </member>
    <member kind="function">
      <name>csGLFREEOBJECTBUFFERATI</name>
      <anchor>2eb86fe287039d92b30b7cf2c30148e5</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETARRAYOBJECTFVATI</name>
      <anchor>433d880ab9491382c0d46c414eb83343</anchor>
      <arglist>(GLenum array, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETARRAYOBJECTIVATI</name>
      <anchor>ef3ececcac97dacf86ece11c95722393</anchor>
      <arglist>(GLenum array, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOBJECTBUFFERFVATI</name>
      <anchor>cb3076a11893413609d0cee8395c5a50</anchor>
      <arglist>(GLuint buffer, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOBJECTBUFFERIVATI</name>
      <anchor>0d347c78e3d59ae6d7c01d78a5ecd8ba</anchor>
      <arglist>(GLuint buffer, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVARIANTARRAYOBJECTFVATI</name>
      <anchor>67d92b801fcf8a895b8be2d2fd344462</anchor>
      <arglist>(GLuint id, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVARIANTARRAYOBJECTIVATI</name>
      <anchor>9e121134c3989d072690a7f982faa643</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLISOBJECTBUFFERATI</name>
      <anchor>b9d2b812f00f889238aa0eecbb5943d5</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLNEWOBJECTBUFFERATI</name>
      <anchor>f2d231b8dc654a3d38c420d248cea38d</anchor>
      <arglist>(GLsizei size, const GLvoid *pointer, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <name>csGLUPDATEOBJECTBUFFERATI</name>
      <anchor>b7b8f27081889e7768722151187a15c4</anchor>
      <arglist>(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTARRAYOBJECTATI</name>
      <anchor>764ab9e4a3fec09236ad6c85fd3700f9</anchor>
      <arglist>(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset)</arglist>
    </member>
    <member kind="function">
      <name>csGLATTACHOBJECTARB</name>
      <anchor>0432e9e4a0fe6db1b614d8a7afff9c4b</anchor>
      <arglist>(GLhandleARB containerObj, GLhandleARB Obj)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPILESHADERARB</name>
      <anchor>63096a74268a2fbe16f73e8f721a06a4</anchor>
      <arglist>(GLhandleARB shaderObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLCREATEPROGRAMOBJECTARB</name>
      <anchor>52f644d899f11f50f3a7b7172396be40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLCREATESHADEROBJECTARB</name>
      <anchor>4a9bcd282f5fa1780a555e980517879e</anchor>
      <arglist>(GLenum shaderType)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEOBJECTARB</name>
      <anchor>eae52b192b26f0ef95b93bd642df01b1</anchor>
      <arglist>(GLhandleARB obj)</arglist>
    </member>
    <member kind="function">
      <name>csGLDETACHOBJECTARB</name>
      <anchor>a2c21be7decc3884772b13fdace130c8</anchor>
      <arglist>(GLhandleARB containerObj, GLhandleARB attachedObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETACTIVEUNIFORMARB</name>
      <anchor>148a638b91b34671d32f6e1b69019c73</anchor>
      <arglist>(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETATTACHEDOBJECTSARB</name>
      <anchor>3a45d5783d910218c322e933fd01d8c8</anchor>
      <arglist>(GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHANDLEARB</name>
      <anchor>4de27dfd314d9bb7243b441458ce5d4a</anchor>
      <arglist>(GLenum pname)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETINFOLOGARB</name>
      <anchor>e5bb6d7ff93328a902c1c14972a10589</anchor>
      <arglist>(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOBJECTPARAMETERFVARB</name>
      <anchor>d6dbd158cf0354cfc9df901faea9e7c2</anchor>
      <arglist>(GLhandleARB obj, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOBJECTPARAMETERIVARB</name>
      <anchor>8d68adea62e50a6b9caadbf0d2273ab0</anchor>
      <arglist>(GLhandleARB obj, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETSHADERSOURCEARB</name>
      <anchor>44d4ebb3a463f87e2ea53b8ca5a99df3</anchor>
      <arglist>(GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETUNIFORMFVARB</name>
      <anchor>4f51709a6542a3c28e3829ee35df618f</anchor>
      <arglist>(GLhandleARB programObj, GLint location, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETUNIFORMIVARB</name>
      <anchor>b59d8a4b056ad25c7bd3713d7ecab4ee</anchor>
      <arglist>(GLhandleARB programObj, GLint location, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETUNIFORMLOCATIONARB</name>
      <anchor>30a4b48d088a1535c9befbc76313a4f2</anchor>
      <arglist>(GLhandleARB programObj, const GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLLINKPROGRAMARB</name>
      <anchor>49c3f53a27013cf732626c47953f5152</anchor>
      <arglist>(GLhandleARB programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLSHADERSOURCEARB</name>
      <anchor>d91d66871981f41d6d247cd39e10416e</anchor>
      <arglist>(GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1FARB</name>
      <anchor>c6ae6ae3b049f0037f2d2fdad93256b9</anchor>
      <arglist>(GLint location, GLfloat v0)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1FVARB</name>
      <anchor>01199d833affbe8d1d7f3f41af8be36f</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1IARB</name>
      <anchor>065af155ffd1cdeb9f3827ad7f34698a</anchor>
      <arglist>(GLint location, GLint v0)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1IVARB</name>
      <anchor>bfdcb35617b723dbdf91b86a9741ba07</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2FARB</name>
      <anchor>8a35549c170c9be4d8faee925bded2b1</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2FVARB</name>
      <anchor>1531c18441ddf281fa9c9060c4b6106b</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2IARB</name>
      <anchor>e95dad332aa56c0e391bf98bd6368ba4</anchor>
      <arglist>(GLint location, GLint v0, GLint v1)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2IVARB</name>
      <anchor>41b30b73efeddc3e800be321eefe1c3d</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3FARB</name>
      <anchor>1d8818328dae960057ba1858b3262765</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3FVARB</name>
      <anchor>7b683347c4e62a9e1b976a0086ee914c</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3IARB</name>
      <anchor>a0601ff9d475ef8a3faf6e38c001e522</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3IVARB</name>
      <anchor>27f8c52676eaa16962882dcb2db954b5</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4FARB</name>
      <anchor>2590e21dbb6e9528a9d5e20ba91d7500</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4FVARB</name>
      <anchor>325b6390f672b6e665af3856ffd17f6f</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4IARB</name>
      <anchor>f8dfce5f906d2423d30940da2ed22d9b</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4IVARB</name>
      <anchor>458caf9efbc2dc95b59e872cdf44dbe3</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX2FVARB</name>
      <anchor>37b4cada309869e5277ecc279f4107f6</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX3FVARB</name>
      <anchor>179403374ca78da1104a49735cdd6b7e</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX4FVARB</name>
      <anchor>19f56e55ff948dc536e132a71dd76161</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUSEPROGRAMOBJECTARB</name>
      <anchor>ae77a898d97d45dfa5f7d8c8c57512e8</anchor>
      <arglist>(GLhandleARB programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLVALIDATEPROGRAMARB</name>
      <anchor>3ac7051a0a18902bcc750c125308911f</anchor>
      <arglist>(GLhandleARB programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLATTACHSHADER</name>
      <anchor>fb7d8e0580b349149bab74687a8e46c7</anchor>
      <arglist>(GLuint containerObj, GLuint Obj)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDATTRIBLOCATION</name>
      <anchor>2aa03eefec44cfe45e558a9ff27cb738</anchor>
      <arglist>(GLuint programObj, GLuint index, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDEQUATIONSEPARATE</name>
      <anchor>6386f19d0a1fd4ba11eed63fb0f83dfa</anchor>
      <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPILESHADER</name>
      <anchor>ae34b3ace192bdde3cb668bc51564bb5</anchor>
      <arglist>(GLuint shaderObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLCREATEPROGRAMOBJECT</name>
      <anchor>5fcb2b3384e88c91e544c9795557f267</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLCREATESHADER</name>
      <anchor>04cc9f4259d7398dfebecef3f6fe504a</anchor>
      <arglist>(GLenum shaderType)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEPROGRAM</name>
      <anchor>0a6c7da417f9d8d601584d45a5ebd938</anchor>
      <arglist>(GLuint programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETESHADER</name>
      <anchor>f3145501e1342618d43425eb33526b71</anchor>
      <arglist>(GLuint obj)</arglist>
    </member>
    <member kind="function">
      <name>csGLDETACHSHADER</name>
      <anchor>81216aa1bcd46044daeabaebcd4c628f</anchor>
      <arglist>(GLuint containerObj, GLuint attachedObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLDISABLEVERTEXATTRIBARRAY</name>
      <anchor>6024d48ba87be90c37d3c9be485756e0</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <name>csGLENABLEVERTEXATTRIBARRAY</name>
      <anchor>9a2c19ec629569cdf825f33115a28f5c</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETACTIVEATTRIB</name>
      <anchor>6757963af66e76c0d5ee2e6f2105455d</anchor>
      <arglist>(GLuint programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLchar *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETACTIVEUNIFORM</name>
      <anchor>3e8cf323da0d431b504f27d4813ad2f2</anchor>
      <arglist>(GLuint programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLchar *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETATTACHEDOBJECTS</name>
      <anchor>afe26976b016d331a2f73b4c745e9ebc</anchor>
      <arglist>(GLuint containerObj, GLsizei maxCount, GLsizei *count, GLuint *obj)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETATTRIBLOCATION</name>
      <anchor>800e70820f429842f873ee9185175a9a</anchor>
      <arglist>(GLuint programObj, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHANDLE</name>
      <anchor>a510925bf47888c543ae3baa3cbf8ea0</anchor>
      <arglist>(GLenum pname)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETINFOLOG</name>
      <anchor>bba5601fe9644cacb49970e8f2ad2963</anchor>
      <arglist>(GLuint obj, GLsizei maxLength, GLsizei *length, GLchar *infoLog)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOBJECTPARAMETERFV</name>
      <anchor>f54d1c41d3735855daba71e782e22836</anchor>
      <arglist>(GLuint obj, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOBJECTPARAMETERIV</name>
      <anchor>1dbc81e567239dd1382f1412edeeabac</anchor>
      <arglist>(GLuint obj, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETSHADERSOURCE</name>
      <anchor>072891213d0e560a7db6823f069642e9</anchor>
      <arglist>(GLuint obj, GLsizei maxLength, GLsizei *length, GLchar *source)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETUNIFORMFV</name>
      <anchor>d037493e47ce98415f9ebb4aa77dbd76</anchor>
      <arglist>(GLuint programObj, GLint location, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETUNIFORMIV</name>
      <anchor>4eb0488074a19abbad6c334936b18eb1</anchor>
      <arglist>(GLuint programObj, GLint location, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETUNIFORMLOCATION</name>
      <anchor>be68e90e28366b9c8b390b0d82758d5f</anchor>
      <arglist>(GLuint programObj, const GLchar *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBPOINTERV</name>
      <anchor>9365cd7101fcceca8f8d10e92d2d4d85</anchor>
      <arglist>(GLuint index, GLenum pname, GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLLINKPROGRAM</name>
      <anchor>4848ae79a1420fcd962eca04191061da</anchor>
      <arglist>(GLuint programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLSHADERSOURCE</name>
      <anchor>25c81de8667699c3fc30e57e40f6ba0d</anchor>
      <arglist>(GLuint shaderObj, GLsizei count, const GLchar **string, const GLint *length)</arglist>
    </member>
    <member kind="function">
      <name>csGLSTENCILFUNCSEPARATE</name>
      <anchor>8bf3b6883aeb68b2cf4abd9dac011746</anchor>
      <arglist>(GLenum face, GLenum func, GLint ref, GLuint mask)</arglist>
    </member>
    <member kind="function">
      <name>csGLSTENCILOPSEPARATE</name>
      <anchor>53cd48159ed58870dbadec3c823dd5f6</anchor>
      <arglist>(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1F</name>
      <anchor>ff05fbcb4d62dd671a3c4a3aea226d92</anchor>
      <arglist>(GLint location, GLfloat v0)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1FV</name>
      <anchor>3846c7c71c72643ff4963bab57d9b293</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1I</name>
      <anchor>f0d5152661b66bc0660bb42b921687d6</anchor>
      <arglist>(GLint location, GLint v0)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM1IV</name>
      <anchor>f298667c2a2b4d4131cd78e80002678a</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2F</name>
      <anchor>b1b066f502bec3126c8f2d4d43fadb6e</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2FV</name>
      <anchor>8dde04db51df066dcf6a9afc47916c9e</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2I</name>
      <anchor>f6970b280d5b287080dbea4333fa769a</anchor>
      <arglist>(GLint location, GLint v0, GLint v1)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM2IV</name>
      <anchor>8a284461f08c8eeade3366dfaa80195a</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3F</name>
      <anchor>f191fac256aeead36c6a082e25e962ad</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3FV</name>
      <anchor>1129847153685de3b717c1660b270d67</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3I</name>
      <anchor>bacb8ac80770f81de7e8bf8a158c51fb</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM3IV</name>
      <anchor>eb36b2ac5d102e1c5e153e106462b21f</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4F</name>
      <anchor>eff36ffc089d23007eafc35c3f63cc7a</anchor>
      <arglist>(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4FV</name>
      <anchor>ebf8f2ab47a76ad4caae619b07ab2941</anchor>
      <arglist>(GLint location, GLsizei count, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4I</name>
      <anchor>0b35294ef2cb72ff950286089a6c65ec</anchor>
      <arglist>(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORM4IV</name>
      <anchor>dc9c06b708efd1bfeda78bd454df59cb</anchor>
      <arglist>(GLint location, GLsizei count, GLint *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX2FV</name>
      <anchor>e19e5b9c520bf6c03b1da70100b885a0</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX3FV</name>
      <anchor>08ad75aad57634bbe50abca59d53e321</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX4FV</name>
      <anchor>027aeeda8efe2a62604de3f96651228b</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUSEPROGRAM</name>
      <anchor>448b2345604a213e13ed540b873d4346</anchor>
      <arglist>(GLuint programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLVALIDATEPROGRAM</name>
      <anchor>1a213cc999bfdeaa491738dd91eb1b0b</anchor>
      <arglist>(GLuint programObj)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1D</name>
      <anchor>bcf65bf3f833dfaff23605733d5437b1</anchor>
      <arglist>(GLuint index, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1DV</name>
      <anchor>8ab43f870495e1f3e2951a0defa1754e</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1F</name>
      <anchor>9e16c4071a5497ecba4f356ad81c7834</anchor>
      <arglist>(GLuint index, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1FV</name>
      <anchor>e5eb8647940a73a75b08d51b8cd4d5d7</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1S</name>
      <anchor>27143f4fea81bd66ffd1a970e51b49c9</anchor>
      <arglist>(GLuint index, GLshort x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1SV</name>
      <anchor>c7046d06353fa5799e1209d47bc37238</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2D</name>
      <anchor>8e53fa2510dc57db0602b5485c21d82f</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2DV</name>
      <anchor>d64434a8e8625676d6c0d1c22a62b4a4</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2F</name>
      <anchor>6cf0abbf8bef7403c8719cbeec719489</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2FV</name>
      <anchor>4b53246773fb3f850317995bc49ddd86</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2S</name>
      <anchor>acfc833985bf1e79388ac0cc09bd4c68</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2SV</name>
      <anchor>c114d97ab8b4609a04e7a0dacbc2e0f0</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3D</name>
      <anchor>913e0d9411779b1e8137fc93a7b88e15</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3DV</name>
      <anchor>1bb304743d5b576eb5824e81e4a3392a</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3F</name>
      <anchor>050926ef3a67270a7777136219239e84</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3FV</name>
      <anchor>2eb76a36cebe4632ad0d175ced313c87</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3S</name>
      <anchor>c68230cdf9d16cbbb0bfc81b4b2139a3</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3SV</name>
      <anchor>bbd3c14a5571428a5a7e9714656e6457</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4BV</name>
      <anchor>ee18301ec0e6ef800461aadb7189e20c</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4D</name>
      <anchor>3cd892660a737bd0b94134dcd1faac38</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4DV</name>
      <anchor>a8fc50c290d331e3eb93d362a65dc843</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4F</name>
      <anchor>d2f0695b0743d42918b1048695ae33e0</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4FV</name>
      <anchor>2d2265bb50a69134db45760903d80a32</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4IV</name>
      <anchor>e4ebeadc21b4a92bc3e2f8495d577ed6</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NBV</name>
      <anchor>8d8e975abba2d7ad720c55b0d7c1db3c</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NIV</name>
      <anchor>826a7bcc8579ed672c314b3028e1d31b</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NSV</name>
      <anchor>0e64aecd4b66374991e6f15651d3e217</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUB</name>
      <anchor>073eff0e3ef9ba3d485a242ccd0545ad</anchor>
      <arglist>(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUBV</name>
      <anchor>22d764b3399f3c27f9c8a346b002fded</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUIV</name>
      <anchor>3eabb5ebed438478be08dc0b26ddeda3</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUSV</name>
      <anchor>4639f0a95b0900a4ad3924b8f316178f</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4S</name>
      <anchor>c5380ff28234b4e407b5e57d6314262a</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4SV</name>
      <anchor>f2163816cb0b203fe3e8b8d37b8560a4</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4UBV</name>
      <anchor>1d40a08956fac09ee59f0a3b163aaff8</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4UIV</name>
      <anchor>662ef53915f7c6266ba7359446eb98fa</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4USV</name>
      <anchor>ddb0767228fc666f6c401ef76d377722</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBPOINTER</name>
      <anchor>f152b7f181c541ac48d4c82d8436b50e</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLBEGINOCCLUSIONQUERYNV</name>
      <anchor>18d5d0ee8ceeff5a1b7a75d5a405bf4f</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEOCCLUSIONQUERIESNV</name>
      <anchor>bc114df826d288202a20ec57638798a3</anchor>
      <arglist>(GLsizei n, const GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLENDOCCLUSIONQUERYNV</name>
      <anchor>13894decda25d0b9a2b049b739a67cb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLGENOCCLUSIONQUERIESNV</name>
      <anchor>35a5e58b0aa46161757870459bdc5c90</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOCCLUSIONQUERYIVNV</name>
      <anchor>5c1806c4b7efa63860402ab5f153d902</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETOCCLUSIONQUERYUIVNV</name>
      <anchor>d09d1fec81eb997684cf8bf34a2c3cec</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLISOCCLUSIONQUERYNV</name>
      <anchor>78613c07594b206da400acabca34d2b8</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLBEGINQUERY</name>
      <anchor>919e2c3968827224257ab81da2fb4766</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDBUFFER</name>
      <anchor>a76e61abf4e42b54dc83c4bd9543b12a</anchor>
      <arglist>(GLenum target, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLBUFFERDATA</name>
      <anchor>db5714d05a313a552407798220195ab5</anchor>
      <arglist>(GLenum target, GLsizei size, const GLvoid *data, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <name>csGLBUFFERSUBDATA</name>
      <anchor>625e0f0a9b8f1571e70d0859be592fc6</anchor>
      <arglist>(GLenum target, GLsizei offset, GLsizei size, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEBUFFERS</name>
      <anchor>305db863e2d166cbb6604c57c5c9c82c</anchor>
      <arglist>(GLsizei n, const GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEQUERIES</name>
      <anchor>675b1267b9807e7d37bf43be2d99dc35</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLENDQUERY</name>
      <anchor>0361427b1a96f319ab3a44849f18109f</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENBUFFERS</name>
      <anchor>e37c3f3a4a058d420d6ce1dd909d1f9c</anchor>
      <arglist>(GLsizei n, GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENQUERIES</name>
      <anchor>4f454be862bc0e3a1070534f43472897</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETBUFFERPARAMETERIV</name>
      <anchor>2a41539a484d9b3c37255a86d5b19ba0</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETBUFFERPOINTERV</name>
      <anchor>d041ac89c77aef3e04520e4ffbf66570</anchor>
      <arglist>(GLenum target, GLenum pname, GLvoid **params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETBUFFERSUBDATA</name>
      <anchor>49beaf1c261facba4cc07c40bfb91369</anchor>
      <arglist>(GLenum target, GLsizei offset, GLsizei size, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETQUERYIV</name>
      <anchor>013943203ee0c7cbbfb0a7266824a772</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETQUERYOBJECTIV</name>
      <anchor>0fe74a53e7804f59ec8de0f0e1717427</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETQUERYOBJECTUIV</name>
      <anchor>86793130819d4fcfba4aa9926403f81a</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLISBUFFER</name>
      <anchor>66142092fd367233b6d16d158ae001e2</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLISQUERY</name>
      <anchor>0661c6ae0a4c02e49c19f9c66b125946</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLMAPBUFFER</name>
      <anchor>2f2801b500586eee2d603837d04da10a</anchor>
      <arglist>(GLenum target, GLenum access)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNMAPBUFFER</name>
      <anchor>5f7bd46f7a93a4d3de1d672de64ba4b6</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLBEGINQUERYARB</name>
      <anchor>cdb1d8843c3ac3ea6c4560b2380ece08</anchor>
      <arglist>(GLenum target, GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEQUERIESARB</name>
      <anchor>6157e56360bd82979eaaf281d700385e</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLENDQUERYARB</name>
      <anchor>76e88e92610c0b257e61590d148e7c2e</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENQUERIESARB</name>
      <anchor>01527706759ca9f052f883cd69dd6144</anchor>
      <arglist>(GLsizei n, GLuint *ids)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETQUERYIVARB</name>
      <anchor>765cceee94b96cefd7f9d1a4f0843bfb</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETQUERYOBJECTIVARB</name>
      <anchor>28ac7665e126a84f624bccd7b2446520</anchor>
      <arglist>(GLuint id, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETQUERYOBJECTUIVARB</name>
      <anchor>f6103d6d3e43c2e8ab917a66044bbca5</anchor>
      <arglist>(GLuint id, GLenum pname, GLuint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLISQUERYARB</name>
      <anchor>9730751c3b7afe289bbc835058d8143d</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLBEGINVERTEXSHADEREXT</name>
      <anchor>3cdbbd592301571154cc479d013d22df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDLIGHTPARAMETEREXT</name>
      <anchor>300d322ca00065755a724478e4e0a16c</anchor>
      <arglist>(GLenum light, GLenum value)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDMATERIALPARAMETEREXT</name>
      <anchor>3903c7f25bf53acb4a8fdb9d235f81c6</anchor>
      <arglist>(GLenum face, GLenum value)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDPARAMETEREXT</name>
      <anchor>7db1cae2dbb1f5d4dbe820813b04b476</anchor>
      <arglist>(GLenum value)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDTEXGENPARAMETEREXT</name>
      <anchor>9ddbe9c5f6cabc0d3ea528ed0fe91a9d</anchor>
      <arglist>(GLenum unit, GLenum coord, GLenum value)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDTEXTUREUNITPARAMETEREXT</name>
      <anchor>d48b14ca0d115df0efc095d7b6b8a341</anchor>
      <arglist>(GLenum unit, GLenum value)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDVERTEXSHADEREXT</name>
      <anchor>685cae42177b62a2191bcd8277e58379</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEVERTEXSHADEREXT</name>
      <anchor>b2f7205387b2d8d98536c7fc11545542</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLDISABLEVARIANTCLIENTSTATEEXT</name>
      <anchor>34e69d371c537a10d1de119e14ed51fe</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLENABLEVARIANTCLIENTSTATEEXT</name>
      <anchor>554277cc44ed619b34e7464764f34e89</anchor>
      <arglist>(GLuint id)</arglist>
    </member>
    <member kind="function">
      <name>csGLENDVERTEXSHADEREXT</name>
      <anchor>decf64d527b6badb8b3de0e3177ba333</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLEXTRACTCOMPONENTEXT</name>
      <anchor>af98bc1cd444033e462336fffee0b580</anchor>
      <arglist>(GLuint res, GLuint src, GLuint num)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENSYMBOLSEXT</name>
      <anchor>fc9475c08f634360ca8f527db34907f9</anchor>
      <arglist>(GLenum datatype, GLenum storagetype, GLenum range, GLuint components)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENVERTEXSHADERSEXT</name>
      <anchor>87690303f0ed8d9e5df192b6f65a050e</anchor>
      <arglist>(GLuint range)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETINVARIANTBOOLEANVEXT</name>
      <anchor>1401b51617915135d7589ddfdb3afb33</anchor>
      <arglist>(GLuint id, GLenum value, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETINVARIANTFLOATVEXT</name>
      <anchor>eeadfd88f2c85b8afecead29a6d3ff64</anchor>
      <arglist>(GLuint id, GLenum value, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETINVARIANTINTEGERVEXT</name>
      <anchor>d5a81e447cb0794240733daf67a94d8e</anchor>
      <arglist>(GLuint id, GLenum value, GLint *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETLOCALCONSTANTBOOLEANVEXT</name>
      <anchor>89b626f5be688daa370c1166c3da8f94</anchor>
      <arglist>(GLuint id, GLenum value, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETLOCALCONSTANTFLOATVEXT</name>
      <anchor>d02ac6f368c686df08a4d2fbeeb5ff92</anchor>
      <arglist>(GLuint id, GLenum value, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETLOCALCONSTANTINTEGERVEXT</name>
      <anchor>23a28944a8f1eabc7808eebce534b362</anchor>
      <arglist>(GLuint id, GLenum value, GLint *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVARIANTBOOLEANVEXT</name>
      <anchor>7a226ecc29fe7a54cda0e7ef7cbef49e</anchor>
      <arglist>(GLuint id, GLenum value, GLboolean *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVARIANTFLOATVEXT</name>
      <anchor>1a6f3fd936b9f6a52b37f0333e3c5706</anchor>
      <arglist>(GLuint id, GLenum value, GLfloat *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVARIANTINTEGERVEXT</name>
      <anchor>916e0df107d22464312b80cec6cea05f</anchor>
      <arglist>(GLuint id, GLenum value, GLint *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVARIANTPOINTERVEXT</name>
      <anchor>52ebf6663ddb1eab12328d6fc6cf9306</anchor>
      <arglist>(GLuint id, GLenum value, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLINSERTCOMPONENTEXT</name>
      <anchor>51bcc90863ad52b04b6e5272e70df536</anchor>
      <arglist>(GLuint res, GLuint src, GLuint num)</arglist>
    </member>
    <member kind="function">
      <name>csGLISVARIANTENABLEDEXT</name>
      <anchor>6af2286129d7305ec0c61131f7a17acc</anchor>
      <arglist>(GLuint id, GLenum cap)</arglist>
    </member>
    <member kind="function">
      <name>csGLSETINVARIANTEXT</name>
      <anchor>d95f5826c7e8944b6977b50b0255a552</anchor>
      <arglist>(GLuint id, GLenum type, GLvoid *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLSETLOCALCONSTANTEXT</name>
      <anchor>05c7de7a1a71b0ca332307fc4596d639</anchor>
      <arglist>(GLuint id, GLenum type, GLvoid *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLSHADEROP1EXT</name>
      <anchor>36f89badf4145b55bbf1d650c89ae9f3</anchor>
      <arglist>(GLenum op, GLuint res, GLuint arg1)</arglist>
    </member>
    <member kind="function">
      <name>csGLSHADEROP2EXT</name>
      <anchor>9ad5046e2ebd40e41c3a71281de79001</anchor>
      <arglist>(GLenum op, GLuint res, GLuint arg1, GLuint arg2)</arglist>
    </member>
    <member kind="function">
      <name>csGLSHADEROP3EXT</name>
      <anchor>f601b9dc781b271eb5051967937fd3ff</anchor>
      <arglist>(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3)</arglist>
    </member>
    <member kind="function">
      <name>csGLSWIZZLEEXT</name>
      <anchor>637f16438da3c8a5e8b8d0aa523aeadb</anchor>
      <arglist>(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTBVEXT</name>
      <anchor>bb7eb27e3643ed81cbcfbab4c29a3506</anchor>
      <arglist>(GLuint id, GLbyte *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTDVEXT</name>
      <anchor>84028ddfa82b352a04bb8812931da947</anchor>
      <arglist>(GLuint id, GLdouble *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTFVEXT</name>
      <anchor>02168acb5b7c1bdf195aac798a48d834</anchor>
      <arglist>(GLuint id, GLfloat *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTIVEXT</name>
      <anchor>62bf3f042151b8959ad931d7509462b5</anchor>
      <arglist>(GLuint id, GLint *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTPOINTEREXT</name>
      <anchor>983f53874a5376866c9a7763bc51b19d</anchor>
      <arglist>(GLuint id, GLenum type, GLuint stride, GLvoid *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTSVEXT</name>
      <anchor>52ec0212deca749a7b61a12d2d8ea9aa</anchor>
      <arglist>(GLuint id, GLshort *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTUBVEXT</name>
      <anchor>d85564eccca12c29a343a361be01581d</anchor>
      <arglist>(GLuint id, GLubyte *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTUIVEXT</name>
      <anchor>99602c436fa22505504beefb52487ca4</anchor>
      <arglist>(GLuint id, GLuint *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLVARIANTUSVEXT</name>
      <anchor>39eb1149bd05b9aa51a5be7707cdea53</anchor>
      <arglist>(GLuint id, GLushort *addr)</arglist>
    </member>
    <member kind="function">
      <name>csGLWRITEMASKEXT</name>
      <anchor>6483bcd5d2b221fb3fb357608a6683d1</anchor>
      <arglist>(GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDATTRIBLOCATIONARB</name>
      <anchor>e2e17a5ad6bdf5f8c7e36581fdd4a028</anchor>
      <arglist>(GLhandleARB programObj, GLuint index, const GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETACTIVEATTRIBARB</name>
      <anchor>fa6025f6a9eda4c23f94d69a2d1b162d</anchor>
      <arglist>(GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETATTRIBLOCATIONARB</name>
      <anchor>5dd8e3fc5de080cb40e43504eb9a5065</anchor>
      <arglist>(GLhandleARB programObj, const GLcharARB *name)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDBUFFERARB</name>
      <anchor>0f725a54a152fe97b781976b84143dee</anchor>
      <arglist>(GLenum target, GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLBUFFERDATAARB</name>
      <anchor>9dde6f69b2d509ab061d065ab34bf247</anchor>
      <arglist>(GLenum target, GLsizei size, const GLvoid *data, GLenum usage)</arglist>
    </member>
    <member kind="function">
      <name>csGLBUFFERSUBDATAARB</name>
      <anchor>3120e189aeabcce8754f0d9a5bb69725</anchor>
      <arglist>(GLenum target, GLsizei offset, GLsizei size, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEBUFFERSARB</name>
      <anchor>df50e9e2ff8bd7e19db44fcf6acb37df</anchor>
      <arglist>(GLsizei n, const GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENBUFFERSARB</name>
      <anchor>10e69b1ecbdda4fe1d5c3738dd4a6d47</anchor>
      <arglist>(GLsizei n, GLuint *buffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETBUFFERPARAMETERIVARB</name>
      <anchor>ba40d904b1b62a2eacc0e1182fb38c00</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETBUFFERPOINTERVARB</name>
      <anchor>6ec935e983ca96dcafd6bcdb4870e010</anchor>
      <arglist>(GLenum target, GLenum pname, GLvoid **params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETBUFFERSUBDATAARB</name>
      <anchor>2ea2c0bc2cbb64f069c21cc122d6f73c</anchor>
      <arglist>(GLenum target, GLsizei offset, GLsizei size, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLISBUFFERARB</name>
      <anchor>f6a22f52e4838fb52351cedef5f8ef3c</anchor>
      <arglist>(GLuint buffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLMAPBUFFERARB</name>
      <anchor>c0c43e6312f34ce3b44120ccccb59d4a</anchor>
      <arglist>(GLenum target, GLenum access)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNMAPBUFFERARB</name>
      <anchor>b460dbee2d803fddc9d110f6811971e1</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDFRAMEBUFFEREXT</name>
      <anchor>4865a6fdab6bb6932b89a458cb61eb8f</anchor>
      <arglist>(GLenum target, GLuint framebuffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDRENDERBUFFEREXT</name>
      <anchor>49cd3aadf313ded070c3441146f5c43f</anchor>
      <arglist>(GLenum target, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLCHECKFRAMEBUFFERSTATUSEXT</name>
      <anchor>c5e5d1551f8f0cec0ed82d5a71567509</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEFRAMEBUFFERSEXT</name>
      <anchor>4e1d8fdd0139c98d6367e35de1c02e82</anchor>
      <arglist>(GLsizei n, const GLuint *framebuffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETERENDERBUFFERSEXT</name>
      <anchor>7f3c038698323d749b106f7a58ca07e6</anchor>
      <arglist>(GLsizei n, const GLuint *renderbuffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLFRAMEBUFFERRENDERBUFFEREXT</name>
      <anchor>e32661bc108e4858eaf07c35ae428e98</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLFRAMEBUFFERTEXTURE1DEXT</name>
      <anchor>73ce3b393e7b38fb39f663a1785c93d6</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <name>csGLFRAMEBUFFERTEXTURE2DEXT</name>
      <anchor>1f3911c9b04fb41215a50cdb5604a917</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)</arglist>
    </member>
    <member kind="function">
      <name>csGLFRAMEBUFFERTEXTURE3DEXT</name>
      <anchor>5a60b373d77663608fcf72a790b46b14</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENERATEMIPMAPEXT</name>
      <anchor>064f54e492426bc694375c6c936ee80e</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENFRAMEBUFFERSEXT</name>
      <anchor>b0a174a4ed46e310ce4de9d06dd5489e</anchor>
      <arglist>(GLsizei n, GLuint *framebuffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENRENDERBUFFERSEXT</name>
      <anchor>1a6caf81c76915298bfca8c1c74b1bca</anchor>
      <arglist>(GLsizei n, GLuint *renderbuffers)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT</name>
      <anchor>95dbf5f964b598ba186effc0a69d3d59</anchor>
      <arglist>(GLenum target, GLenum attachment, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETRENDERBUFFERPARAMETERIVEXT</name>
      <anchor>7d1c952b5baabe95c7d7467599db0277</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLISFRAMEBUFFEREXT</name>
      <anchor>d700329c967c05e394a5796bc4ae9421</anchor>
      <arglist>(GLuint framebuffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLISRENDERBUFFEREXT</name>
      <anchor>67e55c0ba466e77adf963864b608b245</anchor>
      <arglist>(GLuint renderbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csGLRENDERBUFFERSTORAGEEXT</name>
      <anchor>d7d85ee789e4cdeb1065112a9a6948b5</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDPROGRAMARB</name>
      <anchor>d38eabaa8361d4e27e8d42b930b44c3d</anchor>
      <arglist>(GLenum target, GLuint program)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEPROGRAMSARB</name>
      <anchor>ea61ea08b47be2a06e30cd96d356e866</anchor>
      <arglist>(GLsizei n, const GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <name>csGLDISABLEVERTEXATTRIBARRAYARB</name>
      <anchor>89f65133b3f7e7841414d64a70079d84</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <name>csGLENABLEVERTEXATTRIBARRAYARB</name>
      <anchor>dc3419420e3a3815ab61855f14185e44</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENPROGRAMSARB</name>
      <anchor>d24bfafbafb6053382964a2f9dd67d19</anchor>
      <arglist>(GLsizei n, GLuint *programs)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMENVPARAMETERDVARB</name>
      <anchor>ee97a622be44e29b93645c72ff827f45</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMENVPARAMETERFVARB</name>
      <anchor>07a4e7fc2216c154c610bffe6047bd24</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMIVARB</name>
      <anchor>9222bc293024eeb8c66e0b335db91118</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMLOCALPARAMETERDVARB</name>
      <anchor>44d31bbbf5d0ded1e8c1dcb5c28181e7</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMLOCALPARAMETERFVARB</name>
      <anchor>e5d16c06b29c18f8d05d1cad4ab9edbd</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMSTRINGARB</name>
      <anchor>9495b9f2e24ad2fe7f6e473f17a531fd</anchor>
      <arglist>(GLenum target, GLenum pname, GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBDVARB</name>
      <anchor>6c15d7fb4d9de4b22e6b4c832b1fee95</anchor>
      <arglist>(GLuint index, GLenum pname, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBFVARB</name>
      <anchor>a32677a5507c74a75f92012435039a11</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBIVARB</name>
      <anchor>1231a0238f38e716cf4a18a4f055d293</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBPOINTERVARB</name>
      <anchor>0af0d5ba0b14d24755a88f1d36f12410</anchor>
      <arglist>(GLuint index, GLenum pname, GLvoid **pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLISPROGRAMARB</name>
      <anchor>62666bc2e01d0f98d001027591e0c373</anchor>
      <arglist>(GLuint program)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMENVPARAMETER4DARB</name>
      <anchor>f11cd46efd419672e3ac346f2db6362f</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMENVPARAMETER4DVARB</name>
      <anchor>2bccd8594e6bf6f8d2706d852554f10c</anchor>
      <arglist>(GLenum target, GLuint index, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMENVPARAMETER4FARB</name>
      <anchor>8bf7db7d55cf273e043c7aea7110fbd1</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMENVPARAMETER4FVARB</name>
      <anchor>0892d4db85d4e9c2454636b52f624e55</anchor>
      <arglist>(GLenum target, GLuint index, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMLOCALPARAMETER4DARB</name>
      <anchor>bbf5f97de264d25369bc4e815801b8bc</anchor>
      <arglist>(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMLOCALPARAMETER4DVARB</name>
      <anchor>b523f229b12f49ebae430d02f090c33a</anchor>
      <arglist>(GLenum target, GLuint index, const GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMLOCALPARAMETER4FARB</name>
      <anchor>8eacbcfc14f243ea539416198a742fd6</anchor>
      <arglist>(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMLOCALPARAMETER4FVARB</name>
      <anchor>28f8b807f27fd27f62c383cba653d076</anchor>
      <arglist>(GLenum target, GLuint index, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMSTRINGARB</name>
      <anchor>c99dc2d71bf487ef9359140b7459ab84</anchor>
      <arglist>(GLenum target, GLenum format, GLsizei len, const GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1DARB</name>
      <anchor>4b1355c864d8fc6a7e493c896b7a4b44</anchor>
      <arglist>(GLuint index, GLdouble x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1DVARB</name>
      <anchor>19f8edf184cef4f7f350830faab6d8dc</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1FARB</name>
      <anchor>0542212bec5dccd7d01034cdd3ef9286</anchor>
      <arglist>(GLuint index, GLfloat x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1FVARB</name>
      <anchor>b3a344f2657a89ba78a1b3484b8830b6</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1SARB</name>
      <anchor>e462ef393aaaab4f03192e98ee7ce1aa</anchor>
      <arglist>(GLuint index, GLshort x)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB1SVARB</name>
      <anchor>e6d1e9b7e6372f79a8bb599040a20c1b</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2DARB</name>
      <anchor>c0a524a95ab05e5aa62f63ca54b7a897</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2DVARB</name>
      <anchor>dc0b0ed05fbc76144aac4830171f5303</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2FARB</name>
      <anchor>f18ff97cbafaf84abd41b2992156ef8f</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2FVARB</name>
      <anchor>41d224ff83fc7cc15f7ddb3d005fea76</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2SARB</name>
      <anchor>79baac9140cbd7c89f9e93a949834378</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB2SVARB</name>
      <anchor>0cf07c002966180e29ab9c017b82edb4</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3DARB</name>
      <anchor>a3bb4ed7cf75d8404a8c29d932f96eb6</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3DVARB</name>
      <anchor>64eecfea70a23cb18140281a36445e0e</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3FARB</name>
      <anchor>9d44a1da377d8d47face559069be1a9c</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3FVARB</name>
      <anchor>13cdb6b67f4862070b4b59a87f0a08ba</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3SARB</name>
      <anchor>9858c69eca9b73ee09663cc7141e8537</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB3SVARB</name>
      <anchor>4a4a1a6f1bc43f668664aa1644eab664</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4BVARB</name>
      <anchor>27c42d02fb683b3bd54d17518d77e266</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4DARB</name>
      <anchor>6ba8e8443c0a3c4cc10a85bdf63310cf</anchor>
      <arglist>(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4DVARB</name>
      <anchor>1f9bb9d0df94fc4c7e89e20ef9bfe2c1</anchor>
      <arglist>(GLuint index, const GLdouble *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4FARB</name>
      <anchor>7808e0ace3c630ddf19ba1d4c674fa9c</anchor>
      <arglist>(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4FVARB</name>
      <anchor>afd1baab4667c6437b24649042e64cea</anchor>
      <arglist>(GLuint index, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4IVARB</name>
      <anchor>8d213d236debb4576a9266450604ae95</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NBVARB</name>
      <anchor>3c181024ae671f1116c83a376a0c1be1</anchor>
      <arglist>(GLuint index, const GLbyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NIVARB</name>
      <anchor>615000ec9aa74784977665f30f603390</anchor>
      <arglist>(GLuint index, const GLint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NSVARB</name>
      <anchor>91f0118e2dfe49e4cf605a33e6e471da</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUBARB</name>
      <anchor>883e78de009c2f87936923553fe5d6f9</anchor>
      <arglist>(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUBVARB</name>
      <anchor>1ac4d2a128b1172049e5d7411b09e16b</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUIVARB</name>
      <anchor>a6eaa1f74492ab7e410de7317439e980</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4NUSVARB</name>
      <anchor>7f39a0c1379fe86968720451c5f6bd19</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4SARB</name>
      <anchor>bdfc0ade2a0a4f05a6eef13d48603f40</anchor>
      <arglist>(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4SVARB</name>
      <anchor>87542f92f5a5ffa9f0699e885af41ed0</anchor>
      <arglist>(GLuint index, const GLshort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4UBVARB</name>
      <anchor>f80f58e3c2d33878433741651325f76f</anchor>
      <arglist>(GLuint index, const GLubyte *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4UIVARB</name>
      <anchor>e7c25c1e87a32ff7897f61b35aaed1e3</anchor>
      <arglist>(GLuint index, const GLuint *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIB4USVARB</name>
      <anchor>8019685f433cea4b3eb70b845506d4ae</anchor>
      <arglist>(GLuint index, const GLushort *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBPOINTERARB</name>
      <anchor>6c704e978403fc1b4e8979175ce17e02</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLBINDVERTEXARRAYAPPLE</name>
      <anchor>79a12b3765b895c40fb89b3185e60d97</anchor>
      <arglist>(GLuint array)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEVERTEXARRAYSAPPLE</name>
      <anchor>3535ddc0bed8ae6bc69fbb18a7e4e43c</anchor>
      <arglist>(GLsizei n, const GLuint *arrays)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENVERTEXARRAYSAPPLE</name>
      <anchor>e5c8e55d44d9a5a6ff7b64e4737ecb36</anchor>
      <arglist>(GLsizei n, const GLuint *arrays)</arglist>
    </member>
    <member kind="function">
      <name>csGLISVERTEXARRAYAPPLE</name>
      <anchor>f9fbe46bc72e4476e467d1a9dcbebcb2</anchor>
      <arglist>(GLuint array)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDCOLOR</name>
      <anchor>b8bd8f28f6a891779aee98382b8d2343</anchor>
      <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDEQUATION</name>
      <anchor>5f0a7e1797570ba0cf7e052a3ae7d289</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORSUBTABLE</name>
      <anchor>4905b9236a6761d971e826423839ac38</anchor>
      <arglist>(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLE</name>
      <anchor>be84de8443d9ffbb7725c2b1b89a458c</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLEPARAMETERFV</name>
      <anchor>bcd2aca0c7df97bab2579f85c4708a10</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLEPARAMETERIV</name>
      <anchor>da86e2a28bde28b21be3ef6389e6e208</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONFILTER1D</name>
      <anchor>8b50f5a2ebeecb74eaae319f4c404d8f</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONFILTER2D</name>
      <anchor>765525a761e608affbd9b01b5dacb095</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERF</name>
      <anchor>c62e57a6478dc3113cbc7e6c61c7b82c</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERFV</name>
      <anchor>4ae96263f081f56a1a15507f4de13ae3</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERI</name>
      <anchor>9968ab5e36fbd17653c64f2427ce5dc9</anchor>
      <arglist>(GLenum target, GLenum pname, GLint params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERIV</name>
      <anchor>80f441fdb9eb56690218885e8e9a338e</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCOLORSUBTABLE</name>
      <anchor>df281a2fe6fcf4dbcad43db7beaf3f83</anchor>
      <arglist>(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCOLORTABLE</name>
      <anchor>ee1bc65575208c016b13f2656f513c3f</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCONVOLUTIONFILTER1D</name>
      <anchor>7c849f0e821c8175e0d9bc1f6844471f</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCONVOLUTIONFILTER2D</name>
      <anchor>e64b63ca22935be8f5b9616a7ae723a4</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLE</name>
      <anchor>15bdc963fe97acadb77a11f9921aadb2</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEPARAMETERFV</name>
      <anchor>e9fd59e28c05760fbc8efd1f5569e29e</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEPARAMETERIV</name>
      <anchor>9344bb0437b813e1fdba8b4111d9dabd</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCONVOLUTIONFILTER</name>
      <anchor>6ec8de079d59e9649625d18e0fd7aee5</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCONVOLUTIONPARAMETERFV</name>
      <anchor>08de11ff914e99d1a4abe9faf856ba29</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCONVOLUTIONPARAMETERIV</name>
      <anchor>f6a3c667336b63408cee84d722a87e27</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHISTOGRAM</name>
      <anchor>6968a59363f2963fb8a4dbd60f2c072d</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHISTOGRAMPARAMETERFV</name>
      <anchor>86a177eb53599b53453e62f7155a4f2b</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHISTOGRAMPARAMETERIV</name>
      <anchor>a2fb925675dca1426e48b18589ac87f3</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMINMAX</name>
      <anchor>de30e705395a65bc6be9f51ac413fbb6</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMINMAXPARAMETERFV</name>
      <anchor>2ea6025ab3d2dffb0e280c570e57f27d</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMINMAXPARAMETERIV</name>
      <anchor>35f09c1a7caae6a431ae1cd11310364d</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETSEPARABLEFILTER</name>
      <anchor>4a23ae72360895795752996e92e7ab8d</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)</arglist>
    </member>
    <member kind="function">
      <name>csGLHISTOGRAM</name>
      <anchor>4bc781efaffc7bdbb15b90a6b1dc910e</anchor>
      <arglist>(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <name>csGLMINMAX</name>
      <anchor>805cf122d563a722de60d985e75a8f13</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <name>csGLRESETHISTOGRAM</name>
      <anchor>cc8c11a8f52bd41f067aa3f332e1d40f</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLRESETMINMAX</name>
      <anchor>7a33d960e4d0cd9dc15f4b37e78ab755</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLSEPARABLEFILTER2D</name>
      <anchor>cd6e1b0284b1391cc3d46840953d2277</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDCOLOREXT</name>
      <anchor>1899e9ac11801dbc82f00ce363ba31ea</anchor>
      <arglist>(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDEQUATIONEXT</name>
      <anchor>86975db52c106ac2f6380e5289856e7b</anchor>
      <arglist>(GLenum mode)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDEQUATIONSEPARATEEXT</name>
      <anchor>4b950b1274d9fb9f38ac83018010da6f</anchor>
      <arglist>(GLenum modeRGB, GLenum modeAlpha)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDFUNCSEPARATE</name>
      <anchor>20f88722d77c02b2b9c6746a00ebfd91</anchor>
      <arglist>(GLenum sFactorRGB, GLenum dFactorRGB, GLenum sFactorAlpha, GLenum dFactorAlpha)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDD</name>
      <anchor>19b89ed8b820fb4f129ec266ccb753b3</anchor>
      <arglist>(GLdouble coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDDV</name>
      <anchor>9d14fb35bd96c1218726fc2e4636f9c6</anchor>
      <arglist>(GLdouble *coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDF</name>
      <anchor>e2259744fcfe3eeab4f252c08f9c86a5</anchor>
      <arglist>(GLfloat coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDFV</name>
      <anchor>ce7b3ae7fd93e564b850b67137747889</anchor>
      <arglist>(GLfloat *coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDPOINTER</name>
      <anchor>98ab70517be3f2d7a3e92aeb5f745bab</anchor>
      <arglist>(GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWARRAYS</name>
      <anchor>7dfb4cc29f0dd1a6151b5725b8ddc034</anchor>
      <arglist>(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWELEMENTS</name>
      <anchor>4fc283a2c87059f1fd6062efbc810307</anchor>
      <arglist>(GLenum mode, GLsizei *count, GLenum type, const GLvoid *indices, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERF</name>
      <anchor>5bcd8c5f9a81e0e14c9cb686f7311cb3</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERFV</name>
      <anchor>6e90da6fd1e98620d9323b9b80c67611</anchor>
      <arglist>(GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3B</name>
      <anchor>b0fc3efd14377ad3c5707f5c7cf0dcba</anchor>
      <arglist>(GLbyte components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3BV</name>
      <anchor>c8c8abee1bf4e1398d2cc71ab48cfa9c</anchor>
      <arglist>(GLbyte *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3D</name>
      <anchor>7c3ed9287ae03521308f1208a058be13</anchor>
      <arglist>(GLdouble components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3DV</name>
      <anchor>0601271d10591895f9d9a7c5403bcaa4</anchor>
      <arglist>(GLdouble *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3F</name>
      <anchor>50259ac09256f28ace0add61bd3ce053</anchor>
      <arglist>(GLfloat components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3FV</name>
      <anchor>73f1c63795282a3504e98f96a5f1909f</anchor>
      <arglist>(GLfloat *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3I</name>
      <anchor>f00a542e20a115737f51521bee3d9a2f</anchor>
      <arglist>(GLint components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3IV</name>
      <anchor>d462fc68e34c81bb6f92294d797cf1d6</anchor>
      <arglist>(GLint *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3S</name>
      <anchor>a574f0b28e927d17b0c5bcd1097d2cb8</anchor>
      <arglist>(GLshort components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3SV</name>
      <anchor>1b4bc2c6ea8563521a2bde2665a9edad</anchor>
      <arglist>(GLshort *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UB</name>
      <anchor>4c0a89d9636f2788e12dc4e3f7583d90</anchor>
      <arglist>(GLubyte components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UBV</name>
      <anchor>2951eccdf5cd3f6a15b10617bab69c88</anchor>
      <arglist>(GLubyte *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UI</name>
      <anchor>d30892e6db73e3dae7ecbc4754f29a8b</anchor>
      <arglist>(GLuint components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UIV</name>
      <anchor>8fe01d78e472dd8b6dedbec61b1c39be</anchor>
      <arglist>(GLuint *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3US</name>
      <anchor>21ff5d51cc5b42b88891b35aad4845d5</anchor>
      <arglist>(GLushort components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3USV</name>
      <anchor>693456df590712e4bd9dd5674a1e281b</anchor>
      <arglist>(GLushort *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLORPOINTER</name>
      <anchor>297f4c548e623d2253b5198beb0d1d79</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2D</name>
      <anchor>d17eb599f7685e691a1cde0e9b6f5f67</anchor>
      <arglist>(GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2DV</name>
      <anchor>d1bd34ade5be471c63922d3d0c446c83</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2F</name>
      <anchor>9f4860a442b12dddd2d71df996a0f92f</anchor>
      <arglist>(GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2FV</name>
      <anchor>0d3bb000fd44e4d74472493af49a044e</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2I</name>
      <anchor>3f033bb839aefd79b9ef776bf2285462</anchor>
      <arglist>(GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2IV</name>
      <anchor>9f6795ae679402e201076613a189ffde</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2S</name>
      <anchor>e65d9b9cdf7aa503ace722dc3ce41ef1</anchor>
      <arglist>(GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2SV</name>
      <anchor>a3a422d7b754c01820c37d9f481c4626</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3D</name>
      <anchor>246410b7980f06ed567bdb80692b6653</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3DV</name>
      <anchor>bdc1657a0c1b680029eb8c7913ae7b26</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3F</name>
      <anchor>1c281c344f9ec8f50ce7ba15ef0d1563</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3FV</name>
      <anchor>43de959d785599a7365d7f8f21fc2de4</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3I</name>
      <anchor>361fd90a5a86f4aa1b97d807123a6d0b</anchor>
      <arglist>(GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3IV</name>
      <anchor>e74bf85540be710b3100344f9e839cf7</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3S</name>
      <anchor>74eb6083c28afa12ee4318d9f6a7c6ad</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3SV</name>
      <anchor>ca1d85d2c7678efab8539d7376c352fb</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLBLENDFUNCSEPARATEEXT</name>
      <anchor>a978e8dcdca3fee1411deac5d7b8a7f6</anchor>
      <arglist>(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)</arglist>
    </member>
    <member kind="function">
      <name>csGLCLIENTACTIVEVERTEXSTREAM</name>
      <anchor>aab18710e3dd2ead8a71d5d395a4a816</anchor>
      <arglist>(GLenum stream)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3B</name>
      <anchor>055be1a2b314469a71edc5db73f53991</anchor>
      <arglist>(GLenum stream, GLbyte coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3BV</name>
      <anchor>956affcb0c204424c896f7cab74d770d</anchor>
      <arglist>(GLenum stream, GLbyte coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3D</name>
      <anchor>57954249677a804d5783c446ec11d57f</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3DV</name>
      <anchor>12f46ff39ffc084cc993d6fc02d5d044</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3F</name>
      <anchor>58dab7c91a4d346e8618c279cd9b110c</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3FV</name>
      <anchor>7c7fe17787e4a263c9eb4965e64934cd</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3I</name>
      <anchor>361cb1e93a5ae007497fad5e68cf534a</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3IV</name>
      <anchor>2eae7dbea41f68c9d424a7760801d531</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3S</name>
      <anchor>18761f28af779d388422fdbe48869ea6</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALSTREAM3SV</name>
      <anchor>38a620db9e6c41966b6664e25b124fa0</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXBLENDENVF</name>
      <anchor>d6cd208c3df8bb2ccafe3d7ce6a42ec8</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXBLENDENVI</name>
      <anchor>eb03f74afe28974ca00ca14eee0b432a</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1D</name>
      <anchor>ef2fc31233e305f30c632d2b5ddc3ccf</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1DV</name>
      <anchor>5853d100572be742e55484c92849f8ab</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1F</name>
      <anchor>b76e9c5369a6d973e16cd56651088827</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1FV</name>
      <anchor>07f3679e436ac7cafdbb1915c5cf4f1c</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1I</name>
      <anchor>07243606597cc74f87f92c93362f7da4</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1IV</name>
      <anchor>e4d46a2267e9433072d3a6bb3a69e773</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1S</name>
      <anchor>bb6930f7f5e2552ab7d942b9980f5618</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM1SV</name>
      <anchor>ac1a777cd7d2ac6305c176769c1622cf</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2D</name>
      <anchor>b6a0128fd96aac4c60d9abc87c0d42f5</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2DV</name>
      <anchor>6d79f02a580100c0e48e63b0844af3f1</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2F</name>
      <anchor>ca1c78bb6d0d526327ad5aa5a39b5e81</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2FV</name>
      <anchor>fb06bcfceb01a3b0f1de502ae39bb0d7</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2I</name>
      <anchor>717ae9aa6c4c4458320e44c3c848dedc</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2IV</name>
      <anchor>01c46e6587a3d67b886ceb55480e0293</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2S</name>
      <anchor>ea2ba5d62c52c228590f0ad4c809ae59</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM2SV</name>
      <anchor>187a6f1d74dabbccf68a3951c6ce341c</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3D</name>
      <anchor>197b4c1b33469e07ea20296063b6d677</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3DV</name>
      <anchor>f709f377105f87df2162b21f199a4896</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3F</name>
      <anchor>68eb167a4e21d0f91a74e7ded289e8f4</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3FV</name>
      <anchor>52fc2afebeffd8881a3d57ac3a752351</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3I</name>
      <anchor>15f9e40596c6b21d8a5f28be2b4d4c87</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3IV</name>
      <anchor>00980aba9706c3684cf7bc8a67386e6e</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3S</name>
      <anchor>3abcb625cd569b427754fc27c54d3bdb</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM3SV</name>
      <anchor>73aa1b165c4a4a7633835cc392cac9a4</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4D</name>
      <anchor>c8b9053c159990abc6d02ffbdedc2e10</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4DV</name>
      <anchor>d16c00a60b9455e5e50d1e5b546230ab</anchor>
      <arglist>(GLenum stream, GLdouble coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4F</name>
      <anchor>991ec374f665c0465370cb0695547899</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4FV</name>
      <anchor>a20cefc0c1849af43c85152f3b2c5447</anchor>
      <arglist>(GLenum stream, GLfloat coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4I</name>
      <anchor>3c6eb456d5a61662332739689524ded1</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4IV</name>
      <anchor>c29f7d277a7225d600758292776594be</anchor>
      <arglist>(GLenum stream, GLint coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4S</name>
      <anchor>218d0ff04a2f145a1f8db0060b5a0605</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXSTREAM4SV</name>
      <anchor>4c969dd1ee9c042c8e74e5cb214c2701</anchor>
      <arglist>(GLenum stream, GLshort coords)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR3FVERTEX3FSUN</name>
      <anchor>295fdfd25e919d33e610f971d24a9ea5</anchor>
      <arglist>(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR3FVERTEX3FVSUN</name>
      <anchor>f5512fc601c1e54498485a00b92dc1cb</anchor>
      <arglist>(const GLfloat *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR4FNORMAL3FVERTEX3FSUN</name>
      <anchor>b94e7a7f899a66204f7d345f01b6290f</anchor>
      <arglist>(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR4FNORMAL3FVERTEX3FVSUN</name>
      <anchor>39c7e021b214ac6c39df3045ab02bcd1</anchor>
      <arglist>(const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR4UBVERTEX2FSUN</name>
      <anchor>02a7044b0ad55434f20358488b932f62</anchor>
      <arglist>(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR4UBVERTEX2FVSUN</name>
      <anchor>e787853b698e9f811061a431a8034268</anchor>
      <arglist>(const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR4UBVERTEX3FSUN</name>
      <anchor>b52463f72736e016f66b2d6a753ab1fc</anchor>
      <arglist>(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLOR4UBVERTEX3FVSUN</name>
      <anchor>670a1267b0851d86a0dc1cf974b31c07</anchor>
      <arglist>(const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMAL3FVERTEX3FSUN</name>
      <anchor>b4bed458050e60745c1cae4b17281a88</anchor>
      <arglist>(GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMAL3FVERTEX3FVSUN</name>
      <anchor>1cbc24c5a4ddaa2da1497e8019d89e91</anchor>
      <arglist>(const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUN</name>
      <anchor>ae5a5cb5a24c264bce15c7062bf7e9e7</anchor>
      <arglist>(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN</name>
      <anchor>ff77a4b39a209cf97114f0a0fb863a7b</anchor>
      <arglist>(const GLuint *rc, const GLfloat *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN</name>
      <anchor>07542173c58a43c85195c50ab9337a14</anchor>
      <arglist>(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN</name>
      <anchor>7f9f12ac07e56ec91ce70fc106d318d7</anchor>
      <arglist>(const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN</name>
      <anchor>29452afa60f461cc907323046ae7a9d2</anchor>
      <arglist>(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN</name>
      <anchor>c17fbbaf98c318624b5064f84229e705</anchor>
      <arglist>(const GLuint *rc, const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUN</name>
      <anchor>649879280a9b961580f029d89081fc82</anchor>
      <arglist>(GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN</name>
      <anchor>6c872d191caa1cf9f076deb96f50305f</anchor>
      <arglist>(const GLuint *rc, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN</name>
      <anchor>0abc3f5ade650c3bc4a1324f5ba11653</anchor>
      <arglist>(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN</name>
      <anchor>89137488e7b44862b23238770c7adf73</anchor>
      <arglist>(const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN</name>
      <anchor>a1693385d80317b6e499dcfedfc9e327</anchor>
      <arglist>(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN</name>
      <anchor>24de29e07c485ded6b4f6ab3b2ca210c</anchor>
      <arglist>(const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN</name>
      <anchor>6a6c9fce54a7784abd5c2e8329d43669</anchor>
      <arglist>(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN</name>
      <anchor>18304085d8c489793f63382859ed6503</anchor>
      <arglist>(const GLuint *rc, const GLfloat *tc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUIVERTEX3FSUN</name>
      <anchor>0ba0e101983ec0b54458bbc5a5383cc1</anchor>
      <arglist>(GLuint rc, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLREPLACEMENTCODEUIVERTEX3FVSUN</name>
      <anchor>7cf506295c405698c3a319943be829b0</anchor>
      <arglist>(const GLuint *rc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FCOLOR3FVERTEX3FSUN</name>
      <anchor>2093249b79bb50caefcc79f1312c3d6f</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FCOLOR3FVERTEX3FVSUN</name>
      <anchor>f3ff3412076de293b3f1b797afc0b0b7</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN</name>
      <anchor>890cfe8bb105489b5af139004eee7b8f</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN</name>
      <anchor>a2a72aeb724b89c8c5221118f89286ef</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FCOLOR4UBVERTEX3FSUN</name>
      <anchor>711f1efb582562d72aa005d85774081c</anchor>
      <arglist>(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FCOLOR4UBVERTEX3FVSUN</name>
      <anchor>d0b4644b60f7b63af40d9e4a4dc27bbd</anchor>
      <arglist>(const GLfloat *tc, const GLubyte *c, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FNORMAL3FVERTEX3FSUN</name>
      <anchor>87e3e9656d6edd48fb857422fc124cd1</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FNORMAL3FVERTEX3FVSUN</name>
      <anchor>10551f5fb710e851d46369fc92085a9f</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FVERTEX3FSUN</name>
      <anchor>70ebda581c1bf3c987500e88e8ee4864</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD2FVERTEX3FVSUN</name>
      <anchor>5fba475bd49edc99dfb9c2cf80df1493</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN</name>
      <anchor>0e9a84db1564139d8eb76a590e0fb7b4</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN</name>
      <anchor>9cf913ef5c01e7d1f3e992621e4339af</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD4FVERTEX4FSUN</name>
      <anchor>e1b322b067214c1ec5310366f13fdcf3</anchor>
      <arglist>(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORD4FVERTEX4FVSUN</name>
      <anchor>52c4496c44e4d3f75e6749483b827b75</anchor>
      <arglist>(const GLfloat *tc, const GLfloat *v)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORPOINTERLISTIBM</name>
      <anchor>2a0c442616a22b41ce8bb052e9affae9</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLEDGEFLAGPOINTERLISTIBM</name>
      <anchor>66cf6f3fed4ad76c3934325056a376f6</anchor>
      <arglist>(GLint stride, const GLboolean *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDPOINTERLISTIBM</name>
      <anchor>ef6ab5199e9a701b8ecd94496ea35b17</anchor>
      <arglist>(GLenum type, GLint stride, const GLvoid *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLNORMALPOINTERLISTIBM</name>
      <anchor>10f13f6cac6706d7b270076cdf5b94d3</anchor>
      <arglist>(GLenum type, GLint stride, const GLvoid *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLORPOINTERLISTIBM</name>
      <anchor>ea8ceb588685552584579fee8c93f3fb</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXCOORDPOINTERLISTIBM</name>
      <anchor>61ef86ae5f27892fb87ff1c7909b47dc</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXPOINTERLISTIBM</name>
      <anchor>a6e72b7d7f84347e188087c138e1e8ff</anchor>
      <arglist>(GLint size, GLenum type, GLint stride, const GLvoid *pointer, GLint ptrstride)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORSUBTABLEEXT</name>
      <anchor>9c82c3c9f85a88772c28ec453c2f56e8</anchor>
      <arglist>(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCOLORSUBTABLEEXT</name>
      <anchor>e53e905ba9a35612762ab7e22b59a7aa</anchor>
      <arglist>(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLEEXT</name>
      <anchor>c1942d0440c5b9d7ff5042eaf3c1acd4</anchor>
      <arglist>(GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEEXT</name>
      <anchor>b6ca08ce10b56fdedef9b075e035d522</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEPARAMETERFVEXT</name>
      <anchor>9d3787e9fb0b96203cb8eb1ec9d55e6b</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEPARAMETERIVEXT</name>
      <anchor>06f87b0962ecb2ed49634fda85837745</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLEPARAMETERFVSGI</name>
      <anchor>7856ffd87c3d81e6a4e0335da71e5d8a</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLEPARAMETERIVSGI</name>
      <anchor>c38e24736466852b5baae8f5518c4f36</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOLORTABLESGI</name>
      <anchor>883a57c9463a944c70f333f681c330c3</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCOLORTABLESGI</name>
      <anchor>03e963b41f17e2804dba2893c2630b6a</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEPARAMETERFVSGI</name>
      <anchor>886b7c7357ef8732a5e86c12c7a77835</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLEPARAMETERIVSGI</name>
      <anchor>2d44072b675f5cd542486db146869f0a</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOLORTABLESGI</name>
      <anchor>0208269c5c3cf80d86b496378b03b32d</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *table)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINERINPUTNV</name>
      <anchor>b7468cbf97ce60cc97171831b60e7426</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINEROUTPUTNV</name>
      <anchor>1827f6d0685922445339f85912775a07</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINERPARAMETERFNV</name>
      <anchor>6bf888e91c57db97e689406cd6fbf6e4</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINERPARAMETERFVNV</name>
      <anchor>8ed229e61ace7e2f0fb3985f136fb59b</anchor>
      <arglist>(GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINERPARAMETERINV</name>
      <anchor>e4e9b23c242ebfa4113534dbf0ef3cb0</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINERPARAMETERIVNV</name>
      <anchor>9fa13640af80176fdad74ebcbbd39f18</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLFINALCOMBINERINPUTNV</name>
      <anchor>718a2867478967d02575dc94dc0abee2</anchor>
      <arglist>(GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMBINERINPUTPARAMETERFVNV</name>
      <anchor>00ed4303541dfadf95f7d1da8da99cde</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMBINERINPUTPARAMETERIVNV</name>
      <anchor>5aebc969c1d2067ba7667968d10c366e</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMBINEROUTPUTPARAMETERFVNV</name>
      <anchor>e35b74f80333a2e8cf0dffcc17bbfc2a</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMBINEROUTPUTPARAMETERIVNV</name>
      <anchor>93a75ef42ea8f77ff6e010ebb475a3e7</anchor>
      <arglist>(GLenum stage, GLenum portion, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETFINALCOMBINERINPUTPARAMETERFVNV</name>
      <anchor>dac398940b72888e7ba0c83e3d152604</anchor>
      <arglist>(GLenum variable, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETFINALCOMBINERINPUTPARAMETERIVNV</name>
      <anchor>798d1fbb1aca7b7b9edd3e82be5022de</anchor>
      <arglist>(GLenum variable, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMBINERSTAGEPARAMETERFVNV</name>
      <anchor>fc00ffcbc7f10960175c26fe0b5742d6</anchor>
      <arglist>(GLenum stage, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMBINERSTAGEPARAMETERFVNV</name>
      <anchor>30d9982de5893a01e0fffbc1db01d5ad</anchor>
      <arglist>(GLenum stage, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXIMAGE1DARB</name>
      <anchor>06f8e6faff42db5712476c5443170778</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXIMAGE2DARB</name>
      <anchor>79e37d9c07af28a897825100946bca3b</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXIMAGE3DARB</name>
      <anchor>48eac68319f3d906632e2983117f3138</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXSUBIMAGE1DARB</name>
      <anchor>b25eebc1f114c56e7257ea8b5d135a43</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXSUBIMAGE2DARB</name>
      <anchor>b9dd14de76e485b69fb8d335b361ece0</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOMPRESSEDTEXSUBIMAGE3DARB</name>
      <anchor>d20c3b34200e8ddf4cc42d5787a22286</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCOMPRESSEDTEXIMAGEARB</name>
      <anchor>000913f6439523be57a78043e4e55716</anchor>
      <arglist>(GLenum target, GLint lod, GLvoid *img)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONFILTER1DEXT</name>
      <anchor>8877bc5a4869eaa4b3cfe37ad101e596</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONFILTER2DEXT</name>
      <anchor>70b4f4f72fdf68419a58d9f9d513b47a</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERFEXT</name>
      <anchor>5f537b544979198bc179a0ca0e9cc23e</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERFVEXT</name>
      <anchor>fb52b08b6d6c0fdc1bb91aa502062978</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERIEXT</name>
      <anchor>21f98c826260e835c03c4b19297198cf</anchor>
      <arglist>(GLenum target, GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLCONVOLUTIONPARAMETERIVEXT</name>
      <anchor>c989af9586fb1230b0ff1ad9a7850252</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCONVOLUTIONFILTER1DEXT</name>
      <anchor>b03f727eb5d041dbab6b339dc475536b</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYCONVOLUTIONFILTER2DEXT</name>
      <anchor>ac8458d0451c1cc9d2fcb7889d20cf50</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCONVOLUTIONFILTEREXT</name>
      <anchor>adcacd053131566a11b61557fd801588</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *image)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCONVOLUTIONPARAMETERFVEXT</name>
      <anchor>59b82ae248c7e2a8aff36756d3bae21f</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETCONVOLUTIONPARAMETERIVEXT</name>
      <anchor>4215ce1f02571998211e585fafe42540</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETSEPARABLEFILTEREXT</name>
      <anchor>b2c478302eb8485a1aecaf0eac08f58c</anchor>
      <arglist>(GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span)</arglist>
    </member>
    <member kind="function">
      <name>csGLSEPARABLEFILTER2DEXT</name>
      <anchor>22e5db10cf4197d5522391857d2409e3</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column)</arglist>
    </member>
    <member kind="function">
      <name>csGLCOPYTEXSUBIMAGE3D</name>
      <anchor>15e8d9f405401027523e6a6a0fb82a3e</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWRANGEELEMENTS</name>
      <anchor>9e82f28f17663cf49f07ab80838f6ebb</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXIMAGE3D</name>
      <anchor>ca3787dc83e22e15bd386e555b59c5e8</anchor>
      <arglist>(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXSUBIMAGE3D</name>
      <anchor>ac3978f70cf0a9e335367eb031b7f6c6</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <name>csGLCURRENTPALETTEMATRIXARB</name>
      <anchor>1bad4bdbf54476c322903c4d72a491cd</anchor>
      <arglist>(GLint index)</arglist>
    </member>
    <member kind="function">
      <name>csGLMATRIXINDEXPOINTERARB</name>
      <anchor>79a011ed24b8915a3815add4e41e4199</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLMATRIXINDEXUBVARB</name>
      <anchor>473ffe967e08dc4cd3bbf9fed651c17d</anchor>
      <arglist>(GLint size, GLubyte *indices)</arglist>
    </member>
    <member kind="function">
      <name>csGLMATRIXINDEXUIVARB</name>
      <anchor>d41160a2aec676fd67562f4e48aa9dc4</anchor>
      <arglist>(GLint size, GLuint *indices)</arglist>
    </member>
    <member kind="function">
      <name>csGLMATRIXINDEXUSVARB</name>
      <anchor>ec45ab0f9219ce64ba7c15a1d175e51a</anchor>
      <arglist>(GLint size, GLushort *indices)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEFENCESAPPLE</name>
      <anchor>187d2eca84d9e5098cc3d5d29eeb59d9</anchor>
      <arglist>(GLsizei n, const GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <name>csGLFINISHFENCEAPPLE</name>
      <anchor>d17d6c89d08693a14f2fc42c860e6dea</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLFINISHOBJECTAPPLE</name>
      <anchor>4f66b2ddd427d84833656f3eb86d3275</anchor>
      <arglist>(GLenum object, GLint name)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENFENCESAPPLE</name>
      <anchor>ac5e9b244a60704d3086dcbe29a52688</anchor>
      <arglist>(GLsizei n, GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <name>csGLISFENCEAPPLE</name>
      <anchor>05c0bc12a2e234e66db5bcd1afccb762</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLSETFENCEAPPLE</name>
      <anchor>d71b82eb36ca5bb5f5b420990b0fd535</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLTESTFENCEAPPLE</name>
      <anchor>af15da9227451f46e998bfdbcdf4bd4b</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLTESTOBJECTAPPLE</name>
      <anchor>6c11fff13820d223ca2eb695094e6a15</anchor>
      <arglist>(GLenum object, GLuint name)</arglist>
    </member>
    <member kind="function">
      <name>csGLDELETEFENCESNV</name>
      <anchor>0ae3e6c34598890169384293591936ea</anchor>
      <arglist>(GLsizei n, const GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <name>csGLFINISHFENCENV</name>
      <anchor>9311e4a260c73bde692c79edf8512d98</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLGENFENCESNV</name>
      <anchor>39569b78fda43807871705a3e706ada0</anchor>
      <arglist>(GLsizei n, GLuint *fences)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETFENCEIVNV</name>
      <anchor>2f26f82b11993cb0518d6f3b7f4f6164</anchor>
      <arglist>(GLuint fence, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLISFENCENV</name>
      <anchor>82b3e9f900913b4d455f1faaac55dd44</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLSETFENCENV</name>
      <anchor>0d864cdcb30a94c796b676cbea8349e5</anchor>
      <arglist>(GLuint fence, GLenum condition)</arglist>
    </member>
    <member kind="function">
      <name>csGLTESTFENCENV</name>
      <anchor>125c4b05c8567b4785dd623453a633f1</anchor>
      <arglist>(GLuint fence)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWELEMENTARRAYAPPLE</name>
      <anchor>c2ffc52cd7d8d7a2946f1f88036fa84d</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWRANGEELEMENTARRAYAPPLE</name>
      <anchor>8c60af319c813322c9784a49f81ad134</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLELEMENTPOINTERAPPLE</name>
      <anchor>facbf0dec9065ffcfcb70ef2450aa9ff</anchor>
      <arglist>(GLenum type, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWELEMENTARRAYAPPLE</name>
      <anchor>dbce4a01c423fb45f79956fe35b152b9</anchor>
      <arglist>(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWRANGEELEMENTARRAYAPPLE</name>
      <anchor>24ac528bf2a764bb7e73211ec7d6cd4d</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWELEMENTARRAYATI</name>
      <anchor>aa68b5886c3b7c9439ea3aa7c32ac5f8</anchor>
      <arglist>(GLenum mode, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWRANGEELEMENTARRAYATI</name>
      <anchor>2f41b195cc0e512a51ada7a58b990c88</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLELEMENTPOINTERATI</name>
      <anchor>c82343bc4b537bc64f6e815d15da7716</anchor>
      <arglist>(GLenum type, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWELEMENTARRAYNV</name>
      <anchor>ce14dd55757766c5fa4728b8b209dd05</anchor>
      <arglist>(GLenum mode, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLDRAWRANGEELEMENTARRAYNV</name>
      <anchor>8f267d6ac75d96fb6c5a3caf5eb5e9d8</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLELEMENTPOINTERNV</name>
      <anchor>3953cf887565515b5e87df36ddebded0</anchor>
      <arglist>(GLenum type, const GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWELEMENTARRAYNV</name>
      <anchor>2012129c6063066be226cb4f0a51ffd1</anchor>
      <arglist>(GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWRANGEELEMENTARRAYNV</name>
      <anchor>b559ddd89002855b4cbce622c9e1f37a</anchor>
      <arglist>(GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLEVALMAPSNV</name>
      <anchor>d2e0e0d7471488ec61917f36b6e307bf</anchor>
      <arglist>(GLenum target, GLenum mode)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMAPATTRIBPARAMETERFVNV</name>
      <anchor>00e624bdbd9dad79717e8a9e4bf80568</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMAPATTRIBPARAMETERIVNV</name>
      <anchor>6d7107098778973291fae3089535e99a</anchor>
      <arglist>(GLenum target, GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMAPCONTROLPOINTSNV</name>
      <anchor>2dfec93bbd28dd6b02d9c3238ff8525c</anchor>
      <arglist>(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMAPPARAMETERFVNV</name>
      <anchor>13d2dd6ca4f4afc1aff8c609b2e49772</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMAPPARAMETERIVNV</name>
      <anchor>3797628bb86928762102641b2328bddb</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLMAPCONTROLPOINTSNV</name>
      <anchor>f9efe948f9e5c6e7b9d8be3895f32d51</anchor>
      <arglist>(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points)</arglist>
    </member>
    <member kind="function">
      <name>csGLMAPPARAMETERFVNV</name>
      <anchor>d48578775463edb929fdc383314169b5</anchor>
      <arglist>(GLenum target, GLenum pname, const GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLMAPPARAMETERIVNV</name>
      <anchor>0afd85dfc6fb0b95acddbad3ac6c3d23</anchor>
      <arglist>(GLenum target, GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLFLUSHVERTEXARRAYRANGEAPPLE</name>
      <anchor>ff8a052d20b5eebff90d9bf6ba26a145</anchor>
      <arglist>(GLsizei length, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXARRAYPARAMETERIAPPLE</name>
      <anchor>1b13365c28858c23a42b403ce2b86c8f</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXARRAYRANGEAPPLE</name>
      <anchor>daede0c128636e8e83dc257a7040d243</anchor>
      <arglist>(GLsizei length, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLFLUSHVERTEXARRAYRANGENV</name>
      <anchor>d76a103596e28c0ba7766f2c8c339fff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXARRAYRANGENV</name>
      <anchor>c28234b42838e1c2a3be5975d0df3e2a</anchor>
      <arglist>(GLsizei length, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLALLOCATEMEMORYNV</name>
      <anchor>b40d0d0303b09d54dc2608f452024803</anchor>
      <arglist>(GLsizei size, GLfloat readFrequency, GLfloat writeFrequency, GLfloat priority)</arglist>
    </member>
    <member kind="function">
      <name>csWGLFREEMEMORYNV</name>
      <anchor>98dc412771f3688f253911b554c819c9</anchor>
      <arglist>(GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDDEXT</name>
      <anchor>764b92a5ce7519ccf15c0b2248937919</anchor>
      <arglist>(GLdouble coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDDVEXT</name>
      <anchor>598c8625537cf4baaf96e449b772b22d</anchor>
      <arglist>(GLdouble *coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDFEXT</name>
      <anchor>140cfc707673b563a10fa1afe69e0307</anchor>
      <arglist>(GLfloat coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDFVEXT</name>
      <anchor>e1c0563d0743f538cff7e198d57b7454</anchor>
      <arglist>(GLfloat *coord)</arglist>
    </member>
    <member kind="function">
      <name>csGLFOGCOORDPOINTEREXT</name>
      <anchor>3485dec0a05bd9db66a26b1f009a5650</anchor>
      <arglist>(GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHISTOGRAMEXT</name>
      <anchor>b2e3872aa41f60405143d366ea7c817b</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHISTOGRAMPARAMETERFVEXT</name>
      <anchor>786a2e91626d85de272874b0d51a6378</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETHISTOGRAMPARAMETERIVEXT</name>
      <anchor>97fef07c53ca2c143df9b1ac2fad4c49</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMINMAXEXT</name>
      <anchor>3e44f0c71f98b5cfb3171799a84b91d2</anchor>
      <arglist>(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMINMAXPARAMETERFVEXT</name>
      <anchor>5cfdc0a782556dd70035861a1d43d18a</anchor>
      <arglist>(GLenum target, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETMINMAXPARAMETERIVEXT</name>
      <anchor>96937f57c8630694f2f271663a2e42ed</anchor>
      <arglist>(GLenum target, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLHISTOGRAMEXT</name>
      <anchor>b2221e0af58bd78ece4d5e4da652407e</anchor>
      <arglist>(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <name>csGLMINMAXEXT</name>
      <anchor>9bdbb77927dee06ad9f574a591bfd021</anchor>
      <arglist>(GLenum target, GLenum internalformat, GLboolean sink)</arglist>
    </member>
    <member kind="function">
      <name>csGLRESETHISTOGRAMEXT</name>
      <anchor>19d031c38a0897ba20e49bbcc02a7d20</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLRESETMINMAXEXT</name>
      <anchor>501059232d40c56490f24b443290d0a9</anchor>
      <arglist>(GLenum target)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPIXELTEXGENPARAMETERFVSGIS</name>
      <anchor>328de05481611266aa23527b7b483319</anchor>
      <arglist>(GLenum pname, GLfloat params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPIXELTEXGENPARAMETERIVSGIS</name>
      <anchor>c4c39e7ef59a941366d53948c511f4af</anchor>
      <arglist>(GLenum pname, GLint params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPIXELTEXGENPARAMETERFSGIS</name>
      <anchor>167477244647901aa1424e90270c5b68</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPIXELTEXGENPARAMETERISGIS</name>
      <anchor>602e1d680c5536ec124dbccb2d100da2</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMNAMEDPARAMETERDVNV</name>
      <anchor>8a842ce56ed4cc0a9f73d02fa54fe2a1</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLdouble *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETPROGRAMNAMEDPARAMETERFVNV</name>
      <anchor>bf42c7dbc39d49957bf99a3b8c71ce32</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMNAMEDPARAMETER4DNV</name>
      <anchor>4ac9b4ac0d3dc05ecb7d1fcd2bea6360</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLPROGRAMNAMEDPARAMETER4FNV</name>
      <anchor>de4b406119c1274964908dca698f992c</anchor>
      <arglist>(GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETTEXBUMPPARAMETERFVATI</name>
      <anchor>d655002f191f390e5b9f9d380e79bfb0</anchor>
      <arglist>(GLenum pname, GLfloat *param)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETTEXBUMPPARAMETERIVATI</name>
      <anchor>5b7a84e8afd580e4ae81845ac8761730</anchor>
      <arglist>(GLenum pname, GLint *param)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXBUMPPARAMETERFVATI</name>
      <anchor>20b32ef4e6c65a175a7f275466cebea6</anchor>
      <arglist>(GLenum pname, GLfloat *param)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXBUMPPARAMETERIVATI</name>
      <anchor>4ed03b73af8e8901b60721338564af2f</anchor>
      <arglist>(GLenum pname, GLint *param)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBARRAYOBJECTFVATI</name>
      <anchor>c3394d02ffe325c2fb20a487e4017d08</anchor>
      <arglist>(GLuint index, GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLGETVERTEXATTRIBARRAYOBJECTIVATI</name>
      <anchor>9f25e3bd11faa0b773f24b4b6b6c8d98</anchor>
      <arglist>(GLuint index, GLenum pname, GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXATTRIBARRAYOBJECTATI</name>
      <anchor>c46ef4b557131fad1f26d9a7868f5593</anchor>
      <arglist>(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset)</arglist>
    </member>
    <member kind="function">
      <name>csGLLOADTRANSPOSEMATRIXDARB</name>
      <anchor>a3781458a6d15f3dc75fe080d2a0fed8</anchor>
      <arglist>(GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLLOADTRANSPOSEMATRIXFARB</name>
      <anchor>f92bf70a69f4d09dc694d50e288e8030</anchor>
      <arglist>(GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTTRANSPOSEMATRIXDARB</name>
      <anchor>eef95261feb03393cf515e694cd23ed7</anchor>
      <arglist>(GLdouble *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTTRANSPOSEMATRIXFARB</name>
      <anchor>c9ce0a2b5c3a684123a3017ef3808135</anchor>
      <arglist>(GLfloat *m)</arglist>
    </member>
    <member kind="function">
      <name>csGLLOCKARRAYSEXT</name>
      <anchor>9492284a96f6a50381219a9590118825</anchor>
      <arglist>(GLint first, GLsizei count)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNLOCKARRAYSEXT</name>
      <anchor>7607a82d95d0a7692760d2fbecb5c759</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWARRAYSEXT</name>
      <anchor>c747f1f69fb8e5413f0d96366c7b9e76</anchor>
      <arglist>(GLenum mode, GLint *first, GLsizei *count, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIDRAWELEMENTSEXT</name>
      <anchor>dc40be8589b8ab6ab95ae1fb25b5ab5b</anchor>
      <arglist>(GLenum mode, GLsizei *count, GLenum type, const GLvoid *indices, GLsizei primcount)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIMODEDRAWARRAYSIBM</name>
      <anchor>525d18817b7376954ed5f086dd8a0b9c</anchor>
      <arglist>(GLenum *mode, GLint *first, GLsizei *count, GLsizei primcount, GLint modestride)</arglist>
    </member>
    <member kind="function">
      <name>csGLMULTIMODEDRAWELEMENTSIBM</name>
      <anchor>5940c614e5a2b673b9797503f822a2da</anchor>
      <arglist>(GLenum *mode, GLsizei *count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint modestride)</arglist>
    </member>
    <member kind="function">
      <name>csGLPNTRIANGLESFATI</name>
      <anchor>6beecaa4c43930e97235fd7e5aa3d172</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPNTRIANGLESIATI</name>
      <anchor>d768f8757ed2d52cbf29eae954935bd0</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERFARB</name>
      <anchor>f356976be1c71f3243d729b29bb2da37</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERFVARB</name>
      <anchor>304ca79433d81cae4ce5795d0ef5b7dc</anchor>
      <arglist>(GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERFEXT</name>
      <anchor>f2930c5c6d5a6196b88ebd909120b426</anchor>
      <arglist>(GLenum pname, GLfloat param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERFVEXT</name>
      <anchor>1e3eb69ade28dcfc06b7a1c6dc01c889</anchor>
      <arglist>(GLenum pname, GLfloat *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERINV</name>
      <anchor>b0e56ae76d780d92983347aeadd63396</anchor>
      <arglist>(GLenum pname, GLint param)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOINTPARAMETERIVNV</name>
      <anchor>9b66c288cc832a352a4ab1004470ffac</anchor>
      <arglist>(GLenum pname, const GLint *params)</arglist>
    </member>
    <member kind="function">
      <name>csGLPOLYGONOFFSETEXT</name>
      <anchor>fd27ba508586fbe77a36648732a52445</anchor>
      <arglist>(GLfloat factor, GLfloat bias)</arglist>
    </member>
    <member kind="function">
      <name>csGLPRIMITIVERESTARTINDEXNV</name>
      <anchor>051551afde0e87fa66472d9a7fc6760d</anchor>
      <arglist>(GLuint index)</arglist>
    </member>
    <member kind="function">
      <name>csGLPRIMITIVERESTARTNV</name>
      <anchor>cdb186bd87f1e6feb71644a760611f57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLRESIZEBUFFERSMESA</name>
      <anchor>9606d8e69ce64b4b808080d4fcb5cb0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLSAMPLECOVERAGEARB</name>
      <anchor>6bdfc0dad7fcef4024569eff6bc731e9</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <name>csGLSAMPLEMASKSGIS</name>
      <anchor>a90765b17cd9f5c45a7ab6e37e4a0c78</anchor>
      <arglist>(GLclampf value, GLboolean invert)</arglist>
    </member>
    <member kind="function">
      <name>csGLSAMPLEPATTERNSGIS</name>
      <anchor>62b02356c12d1364772917e2d093b3ff</anchor>
      <arglist>(GLenum pattern)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3BEXT</name>
      <anchor>660841da5a9d1f4064f3899846c8085f</anchor>
      <arglist>(GLbyte components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3BVEXT</name>
      <anchor>e28953c2b29cb8bfd613c87ab249214f</anchor>
      <arglist>(GLbyte *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3DEXT</name>
      <anchor>5997c1baee7aafd0ad835b64fc939647</anchor>
      <arglist>(GLdouble components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3DVEXT</name>
      <anchor>8334d1cd18298ece24a1a30f24565676</anchor>
      <arglist>(GLdouble *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3FEXT</name>
      <anchor>4e923c10c17ae46c5ed8b732f708bacf</anchor>
      <arglist>(GLfloat components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3FVEXT</name>
      <anchor>8a84c39429a6fcc768ef80f97d43714d</anchor>
      <arglist>(GLfloat *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3IEXT</name>
      <anchor>f1132886406e9883816a3250fde8cc39</anchor>
      <arglist>(GLint components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3IVEXT</name>
      <anchor>9e199da3001f751963e79c128bae3eef</anchor>
      <arglist>(GLint *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3SEXT</name>
      <anchor>becce69cffcecfe0bc26a0c746c62aad</anchor>
      <arglist>(GLshort components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3SVEXT</name>
      <anchor>017aca4f1162fde53f4394a8320a77f9</anchor>
      <arglist>(GLshort *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UBEXT</name>
      <anchor>e1ea71a34fa98f7a45809c63c0d53471</anchor>
      <arglist>(GLubyte components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UBVEXT</name>
      <anchor>7e250bf14fef0f33af61ed3e3b5648b1</anchor>
      <arglist>(GLubyte *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UIEXT</name>
      <anchor>d13565069a3356ebb0d5dc0d6286b814</anchor>
      <arglist>(GLuint components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3UIVEXT</name>
      <anchor>465c3a19aa524c08ff2d9c2c9e5ff029</anchor>
      <arglist>(GLuint *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3USEXT</name>
      <anchor>eaedf5d38d79cec88c83d5836a19af0e</anchor>
      <arglist>(GLushort components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLOR3USVEXT</name>
      <anchor>99c25bb9b341a56f97898855b401168c</anchor>
      <arglist>(GLushort *components)</arglist>
    </member>
    <member kind="function">
      <name>csGLSECONDARYCOLORPOINTEREXT</name>
      <anchor>99141ede4fee5fa57ec67bf2ea5ba149</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLSTENCILFUNCSEPARATEATI</name>
      <anchor>fae12904ad8721c6bb00f7286e8b20c8</anchor>
      <arglist>(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask)</arglist>
    </member>
    <member kind="function">
      <name>csGLSTENCILOPSEPARATEATI</name>
      <anchor>fb06182bc406e6e015a11aef27d4b7ca</anchor>
      <arglist>(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)</arglist>
    </member>
    <member kind="function">
      <name>csGLSTRINGMARKERGREMEDY</name>
      <anchor>9054e6004a40dea1b4ec7492ee763f1b</anchor>
      <arglist>(GLsizei len, const GLvoid *string)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXIMAGE3DEXT</name>
      <anchor>c21adefcc84124b69aacf8f7dd24a4dd</anchor>
      <arglist>(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXSUBIMAGE1DEXT</name>
      <anchor>c8cdecd22cf2b10bf4af36173dd4ba8e</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXSUBIMAGE2DEXT</name>
      <anchor>9c96d44223d6229616578e941afeea6b</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXSUBIMAGE3DEXT</name>
      <anchor>8c3a84ac3490252d137479f4960298ec</anchor>
      <arglist>(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels)</arglist>
    </member>
    <member kind="function">
      <name>csGLTEXTURECOLORMASKSGIS</name>
      <anchor>c1638bf7a70bdc97a2dab28eb52e7f38</anchor>
      <arglist>(GLboolean r, GLboolean g, GLboolean b, GLboolean a)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX2X3FV</name>
      <anchor>4161e953b9d79bb4c7e11871e27781c3</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX2X4FV</name>
      <anchor>8644ba0d488512268a00bd966b9472d2</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX3X2FV</name>
      <anchor>6cc9ba435b157a1df2a122ec284737a3</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX3X4FV</name>
      <anchor>ca9048131ab0c97aea0227c44979c8c6</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX4X2FV</name>
      <anchor>f289ba22a19bc5523335e1e598ca58e7</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLUNIFORMMATRIX4X3FV</name>
      <anchor>9bfbe86202cebaa0d32ca07a79b83cf4</anchor>
      <arglist>(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXBLENDARB</name>
      <anchor>104564479b0705483d6d90864c8246f8</anchor>
      <arglist>(GLint count)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTBVARB</name>
      <anchor>496eb5d5dbb216f9396d658994a20ff3</anchor>
      <arglist>(GLint size, GLbyte *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTDVARB</name>
      <anchor>10274ba828ca68b5f2386a47536c2249</anchor>
      <arglist>(GLint size, GLdouble *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTFVARB</name>
      <anchor>83aabbe18c6d385c037083946a79796d</anchor>
      <arglist>(GLint size, GLfloat *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTIVARB</name>
      <anchor>5cc1a149a20148d35e64727665a8e536</anchor>
      <arglist>(GLint size, GLint *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTPOINTERARB</name>
      <anchor>735adae91c9725a8d28f5acdb10976c2</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTSVARB</name>
      <anchor>1e3f8f1b42bc8c688c7ea6861e3341cf</anchor>
      <arglist>(GLint size, GLshort *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTUBVARB</name>
      <anchor>5c8f885b8faefcac3748d8944ea68012</anchor>
      <arglist>(GLint size, GLubyte *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTUIVARB</name>
      <anchor>9d52c0b35f5bcd5005010fdfb843540c</anchor>
      <arglist>(GLint size, GLuint *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTUSVARB</name>
      <anchor>c1cf9b4c3da3afa0bef3a39f26461afb</anchor>
      <arglist>(GLint size, GLushort *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLWEIGHTVARB</name>
      <anchor>224b1c99fd2d5d973b6eafb6dc5880a2</anchor>
      <arglist>(GLint size, GLdouble *weights)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXWEIGHTFEXT</name>
      <anchor>f78f34e5a0784a23118d8bb02f23ba19</anchor>
      <arglist>(GLfloat weight)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXWEIGHTFVEXT</name>
      <anchor>4c57d62f866e6dfe2dc787d7db50d046</anchor>
      <arglist>(GLfloat *weight)</arglist>
    </member>
    <member kind="function">
      <name>csGLVERTEXWEIGHTPOINTEREXT</name>
      <anchor>bc3da174aa871ff23da1fe00b04399fd</anchor>
      <arglist>(GLint size, GLenum type, GLsizei stride, GLvoid *pointer)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2DARB</name>
      <anchor>48c87633666f48cdcbde9100bdfadae9</anchor>
      <arglist>(GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2DVARB</name>
      <anchor>f4861d35d68c08b0c275b534202e2b2c</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2FARB</name>
      <anchor>f89c288d120635bc6b4b732973b2a989</anchor>
      <arglist>(GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2FVARB</name>
      <anchor>536c6d63ad159f6165d4d4300faa3caa</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2IARB</name>
      <anchor>f84f692838cba24d7b33bb8454c732d0</anchor>
      <arglist>(GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2IVARB</name>
      <anchor>82bc9bb087bcf16faf3b231eab8219e9</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2SARB</name>
      <anchor>91c54c584e31f4f38c752a43556e17ed</anchor>
      <arglist>(GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2SVARB</name>
      <anchor>016b1b85f176016e50bc721e2e0d8f2b</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3DARB</name>
      <anchor>9823a5768c1b9f477475cf28b28c3cfd</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3DVARB</name>
      <anchor>abaaca10d64c83310ed855ba919369b6</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3FARB</name>
      <anchor>f18e9f3a6bef92d579c438da8e983966</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3FVARB</name>
      <anchor>ba595888ee61cea2016c8cbc004fc265</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3IARB</name>
      <anchor>5d58176e358150948b68ae4a0c988229</anchor>
      <arglist>(GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3IVARB</name>
      <anchor>eea68c04dace70822170e91833ad286f</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3SARB</name>
      <anchor>f2dc1506755bb1c8b9848fefcbc8ee49</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3SVARB</name>
      <anchor>9f47dcc1300a52e28ee5d75548dde1c4</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2DMESA</name>
      <anchor>b1b5166ed0a7170185887984dd95f21a</anchor>
      <arglist>(GLdouble x, GLdouble y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2DVMESA</name>
      <anchor>fae2d76b5262910eb0524fe261b65fbd</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2FMESA</name>
      <anchor>73cebc20b110e43a29d861eb4f19ab3f</anchor>
      <arglist>(GLfloat x, GLfloat y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2FVMESA</name>
      <anchor>c1d0f8a4177594d0cc59a223906578c6</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2IMESA</name>
      <anchor>45ce920d63d74e814e8f005aeb68565c</anchor>
      <arglist>(GLint x, GLint y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2IVMESA</name>
      <anchor>8c18f3b5221c88f362e3739e694a2878</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2SMESA</name>
      <anchor>14cc9c28298df2911c159c40d2e57e3a</anchor>
      <arglist>(GLshort x, GLshort y)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS2SVMESA</name>
      <anchor>4a8f73a0b715cb5c644e1093aa445362</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3DMESA</name>
      <anchor>8b3a48af4bd9bae6305be11478acee9b</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3DVMESA</name>
      <anchor>86a92d1a52493dcbe33a4d0fc85fc01e</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3FMESA</name>
      <anchor>5fda79c2f0d9de86c1faa1e93b299108</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3FVMESA</name>
      <anchor>1632154a094647434cf2dc4324db7a81</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3IMESA</name>
      <anchor>d47ab92ac80591a21defa81aec5248e3</anchor>
      <arglist>(GLint x, GLint y, GLint z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3IVMESA</name>
      <anchor>facace9d65703b32c93d8aee8e345239</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3SMESA</name>
      <anchor>ae2269136e8966fc534876f98f0a8985</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS3SVMESA</name>
      <anchor>2ee3a4725ec9666291f0754447851f17</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4DMESA</name>
      <anchor>ca669dda34adb8dd3cc95b1717fa1186</anchor>
      <arglist>(GLdouble x, GLdouble y, GLdouble z, GLdouble w)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4DVMESA</name>
      <anchor>93c2c8cbda1dfe4e7e5297d31caa2c8d</anchor>
      <arglist>(const GLdouble *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4FMESA</name>
      <anchor>23b88a6cd9d1e6e7e62a359d2529c9e3</anchor>
      <arglist>(GLfloat x, GLfloat y, GLfloat z, GLfloat w)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4FVMESA</name>
      <anchor>4a082ce9b62a72e4ed54a67dc09060af</anchor>
      <arglist>(const GLfloat *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4IMESA</name>
      <anchor>b6da502096037bb4cb8221677a6382e7</anchor>
      <arglist>(GLint x, GLint y, GLint z, GLint w)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4IVMESA</name>
      <anchor>32e2862da96336b2360098414526ec12</anchor>
      <arglist>(const GLint *p)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4SMESA</name>
      <anchor>c2ec1c12f4e6b5c1e888ccaa45e07699</anchor>
      <arglist>(GLshort x, GLshort y, GLshort z, GLshort w)</arglist>
    </member>
    <member kind="function">
      <name>csGLWINDOWPOS4SVMESA</name>
      <anchor>f5fea686bc1bfcf640fb772871f0cfcf</anchor>
      <arglist>(const GLshort *p)</arglist>
    </member>
    <member kind="function">
      <name>csWGLASSOCIATEIMAGEBUFFEREVENTSI3D</name>
      <anchor>7266e2368f11aff9bd8db3807c63c56c</anchor>
      <arglist>(HDC hdc, HANDLE *pEvent, GLvoid *pAddress, DWORD *pSize, UINT count)</arglist>
    </member>
    <member kind="function">
      <name>csWGLCREATEIMAGEBUFFERI3D</name>
      <anchor>f2abeece56c6393064f9b21f3d0616dd</anchor>
      <arglist>(HDC hDC, DWORD dwSize, UINT uFlags)</arglist>
    </member>
    <member kind="function">
      <name>csWGLDESTROYIMAGEBUFFERI3D</name>
      <anchor>b54781f4881ae8362cd40209ce8ece42</anchor>
      <arglist>(HDC hDC, GLvoid *pAddress)</arglist>
    </member>
    <member kind="function">
      <name>csWGLRELEASEIMAGEBUFFEREVENTSI3D</name>
      <anchor>a48f53f9b8f1bcfb69055b05106e9c87</anchor>
      <arglist>(HDC hdc, GLvoid *pAddress, UINT count)</arglist>
    </member>
    <member kind="function">
      <name>csWGLBEGINFRAMETRACKINGI3D</name>
      <anchor>4b11cdf0d6a75317441c68ac0b648a2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLENDFRAMETRACKINGI3D</name>
      <anchor>647204285eec00f5b1aee5508225a0a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETFRAMEUSAGEI3D</name>
      <anchor>35397223e6cba565a894c91f082277ab</anchor>
      <arglist>(GLfloat *pUsage)</arglist>
    </member>
    <member kind="function">
      <name>csWGLQUERYFRAMETRACKINGI3D</name>
      <anchor>e34d69729586c232598f5053972fcf47</anchor>
      <arglist>(DWORD *pFrameCount, DWORD *pMissedFrames, GLfloat *pLastMissedUsage)</arglist>
    </member>
    <member kind="function">
      <name>csWGLBINDTEXIMAGEARB</name>
      <anchor>f8dd302d1ceb18669c7109a19b808fe4</anchor>
      <arglist>(HANDLE hPbuffer, GLint iBuffer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLRELEASETEXIMAGEARB</name>
      <anchor>6f81fc50df62c0542903d74ef87e61c3</anchor>
      <arglist>(HANDLE hPbuffer, GLint iBuffer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLSETPBUFFERATTRIBARB</name>
      <anchor>77aff6879ceebe0fe21252f4b53ed822</anchor>
      <arglist>(HANDLE hPbuffer, const GLint *piAttribList)</arglist>
    </member>
    <member kind="function">
      <name>csWGLCHOOSEPIXELFORMATARB</name>
      <anchor>e4c0e98d4b5d2b9488117300614a25ae</anchor>
      <arglist>(HDC hdc, const GLint *piAttribIList, const GLfloat *pfAttribFList, GLuint nMaxFormats, GLint *piFormats, GLuint *nNumFormats)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETPIXELFORMATATTRIBFVARB</name>
      <anchor>f0798bfc821b1252350ed853c11a58eb</anchor>
      <arglist>(HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, const GLint *piAttributes, GLfloat *pfValues)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETPIXELFORMATATTRIBIVARB</name>
      <anchor>bcfa092f46b82b857e3239f13600df7e</anchor>
      <arglist>(HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, const GLint *piAttributes, GLint *piValues)</arglist>
    </member>
    <member kind="function">
      <name>csWGLCHOOSEPIXELFORMATEXT</name>
      <anchor>aae9d75485fc7a082f142ea4c37851da</anchor>
      <arglist>(HDC hdc, const GLint *piAttribIList, const GLfloat *pfAttribFList, GLuint nMaxFormats, GLint *piFormats, GLuint *nNumFormats)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETPIXELFORMATATTRIBFVEXT</name>
      <anchor>bd5c7e209713d68fe09000d7ae70e5d6</anchor>
      <arglist>(HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, GLint *piAttributes, GLfloat *pfValues)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETPIXELFORMATATTRIBIVEXT</name>
      <anchor>538beb1b7ae6587006eee714aa017d24</anchor>
      <arglist>(HDC hdc, GLint iPixelFormat, GLint iLayerPlane, GLuint nAttributes, GLint *piAttributes, GLint *piValues)</arglist>
    </member>
    <member kind="function">
      <name>csWGLCREATEBUFFERREGIONARB</name>
      <anchor>ef71e03f65e119f19c3f5e786543bc11</anchor>
      <arglist>(HDC hDC, GLint iLayerPlane, GLuint uType)</arglist>
    </member>
    <member kind="function">
      <name>csWGLDELETEBUFFERREGIONARB</name>
      <anchor>4cee7c69824669234c9678329a3a56c9</anchor>
      <arglist>(HANDLE hRegion)</arglist>
    </member>
    <member kind="function">
      <name>csWGLRESTOREBUFFERREGIONARB</name>
      <anchor>47f14256f2a484951abe7634f1a958bd</anchor>
      <arglist>(HANDLE hRegion, GLint x, GLint y, GLint width, GLint height, GLint xSrc, GLint ySrc)</arglist>
    </member>
    <member kind="function">
      <name>csWGLSAVEBUFFERREGIONARB</name>
      <anchor>815c39f78e28ff8335e753361a0f6fd3</anchor>
      <arglist>(HANDLE hRegion, GLint x, GLint y, GLint width, GLint height)</arglist>
    </member>
    <member kind="function">
      <name>csWGLCREATEPBUFFERARB</name>
      <anchor>2695ab90e37dabf269598450b42b0bef</anchor>
      <arglist>(HDC hDC, GLint iPixelFormat, GLint iWidth, GLint iHeight, const GLint *piAttribList)</arglist>
    </member>
    <member kind="function">
      <name>csWGLDESTROYPBUFFERARB</name>
      <anchor>04334c30c108c655801ad0944a8bddf4</anchor>
      <arglist>(HANDLE hPbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETPBUFFERDCARB</name>
      <anchor>7ddba49445d4390967bb054e47f5e6f4</anchor>
      <arglist>(HANDLE hPbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLQUERYPBUFFERARB</name>
      <anchor>35c7c54b9c397218aa4f74d078d0cf4c</anchor>
      <arglist>(HANDLE hPbuffer, GLint iAttribute, GLint *piValue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLRELEASEPBUFFERDCARB</name>
      <anchor>ba4d3602cc7738c1df8d248cc184dc93</anchor>
      <arglist>(HANDLE hPbuffer, HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>csWGLCREATEPBUFFEREXT</name>
      <anchor>bb7ab3acd868d404ac38fe53833e1a86</anchor>
      <arglist>(HDC hDC, GLint iPixelFormat, GLint iWidth, GLint iHeight, const GLint *piAttribList)</arglist>
    </member>
    <member kind="function">
      <name>csWGLDESTROYPBUFFEREXT</name>
      <anchor>60013dbbb7dd8ea917c1deba6eb9264b</anchor>
      <arglist>(HANDLE hPbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETPBUFFERDCEXT</name>
      <anchor>d404b29a488cc780560f49eaaf42b5e8</anchor>
      <arglist>(HANDLE hPbuffer)</arglist>
    </member>
    <member kind="function">
      <name>csWGLQUERYPBUFFEREXT</name>
      <anchor>676c2fd8ce8817cd762eed2972f9e9d8</anchor>
      <arglist>(HANDLE hPbuffer, GLint iAttribute, GLint *piValue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLRELEASEPBUFFERDCEXT</name>
      <anchor>919caf0882e99cbddb3e8b5ad949fcd6</anchor>
      <arglist>(HANDLE hPbuffer, HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>csWGLDISABLEFRAMELOCKI3D</name>
      <anchor>a10bf7f7b059d8257aec85aed988d091</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLENABLEFRAMELOCKI3D</name>
      <anchor>d39377dfb6b7474b4989df347acc7120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLISENABLEDFRAMELOCKI3D</name>
      <anchor>2586277c677dd214e6f73594069fefdb</anchor>
      <arglist>(BOOL *pFlag)</arglist>
    </member>
    <member kind="function">
      <name>csWGLQUERYFRAMELOCKMASTERI3D</name>
      <anchor>49261ff3b7e534e657dad975f9409545</anchor>
      <arglist>(BOOL *pFlag)</arglist>
    </member>
    <member kind="function">
      <name>csWGLDISABLEGENLOCKI3D</name>
      <anchor>f69e57269b1cb26cee44ae59c1a02465</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>csWGLENABLEGENLOCKI3D</name>
      <anchor>c8d758dbf696aeecfc33355e2dfc61ca</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGENLOCKSAMPLERATEI3D</name>
      <anchor>d86db2ba2d469e7bd13f06c24e1cdce0</anchor>
      <arglist>(HDC hDC, GLuint uRate)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGENLOCKSOURCEDELAYI3D</name>
      <anchor>a22f73ad7a1647968a0be1ca9d9b263f</anchor>
      <arglist>(HDC hDC, GLuint uDelay)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGENLOCKSOURCEEDGEI3D</name>
      <anchor>9620b45168d50cf77bd55a4db7c1dc0e</anchor>
      <arglist>(HDC hDC, GLuint uEdge)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGENLOCKSOURCEI3D</name>
      <anchor>6e0c95a0d46398634876dac676d933c2</anchor>
      <arglist>(HDC hDC, GLuint uSource)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETGENLOCKSAMPLERATEI3D</name>
      <anchor>db181fc6f1175f7d0e939333df21dbe1</anchor>
      <arglist>(HDC hDC, GLuint *uRate)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETGENLOCKSOURCEDELAYI3D</name>
      <anchor>33313db8b13ad3f0a289cabd53bf741c</anchor>
      <arglist>(HDC hDC, GLuint *uDelay)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETGENLOCKSOURCEEDGEI3D</name>
      <anchor>29614589ad563c6bd8cf65fab9d585d8</anchor>
      <arglist>(HDC hDC, GLuint *uEdge)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETGENLOCKSOURCEI3D</name>
      <anchor>89a293144961625a2564533c37f4a0e3</anchor>
      <arglist>(HDC hDC, GLuint *uSource)</arglist>
    </member>
    <member kind="function">
      <name>csWGLISENABLEDGENLOCKI3D</name>
      <anchor>7c90eff04380df13f9d4470ce5b2fead</anchor>
      <arglist>(HDC hDC, BOOL *pFlag)</arglist>
    </member>
    <member kind="function">
      <name>csWGLQUERYGENLOCKMAXSOURCEDELAYI3D</name>
      <anchor>4cef4f0b3afb76604ced9ee9c7748df6</anchor>
      <arglist>(HDC hDC, GLuint *uMaxLineDelay, GLuint *uMaxPixelDelay)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETCURRENTREADDCARB</name>
      <anchor>bda35242a90a588b7bb8141c9e8756a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLMAKECONTEXTCURRENTARB</name>
      <anchor>10bf465575b73c94cd3a337290f4eaab</anchor>
      <arglist>(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETCURRENTREADDCEXT</name>
      <anchor>b3e71379a9f74942ea312bf9099093f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLMAKECONTEXTCURRENTEXT</name>
      <anchor>6ef774a2bcd82df22fa714150b8973b5</anchor>
      <arglist>(HDC hDrawDC, HDC hReadDC, HGLRC hglrc)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETDIGITALVIDEOPARAMETERSI3D</name>
      <anchor>97887bdd8a2dd07ded1855571b354d59</anchor>
      <arglist>(HDC hDC, GLint iAttribute, GLint *piValue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLSETDIGITALVIDEOPARAMETERSI3D</name>
      <anchor>fe1b4072fa42dcbdb90b86648af1b1b6</anchor>
      <arglist>(HDC hDC, GLint iAttribute, const GLint *piValue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETEXTENSIONSSTRINGARB</name>
      <anchor>5dd24b64e249bed3fa861cd0456e20f5</anchor>
      <arglist>(HDC hdc)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETEXTENSIONSSTRINGEXT</name>
      <anchor>49d8ddc983332a5981a363e9227be78e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETGAMMATABLEI3D</name>
      <anchor>fda4c83e0cd75e87d9e49ed0af87efbb</anchor>
      <arglist>(HDC hDC, GLint iEntries, GLushort *puRed, GLushort *puGreen, GLushort *puBlue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETGAMMATABLEPARAMETERSI3D</name>
      <anchor>1412c1d2f17bb69ca285f656dd5886c0</anchor>
      <arglist>(HDC hDC, GLint iAttribute, GLint *piValue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLSETGAMMATABLEI3D</name>
      <anchor>72200a64f11559df4381c73fba0e5405</anchor>
      <arglist>(HDC hDC, GLint iEntries, const GLushort *puRed, const GLushort *puGreen, const GLushort *puBlue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLSETGAMMATABLEPARAMETERSI3D</name>
      <anchor>8c538b29efd75e8cde2b75e37a8b0b1a</anchor>
      <arglist>(HDC hDC, GLint iAttribute, const GLint *piValue)</arglist>
    </member>
    <member kind="function">
      <name>csWGLGETSWAPINTERVALEXT</name>
      <anchor>fae82adc98867080d3367093610ee28c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csWGLSWAPINTERVALEXT</name>
      <anchor>796e8484f8590f5254a9da01ddd4fcda</anchor>
      <arglist>(GLint interval)</arglist>
    </member>
    <member kind="function">
      <name>_WIN32</name>
      <anchor>7d7e5874cd6f169187aac7db998625f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csAPIENTRY</name>
      <anchor>78847694856e5829fb953cfd8366d4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EXTMGR_FUNC_INIT</name>
      <anchor>dc383d9304dcded0b4bd1d22fd1eeec5</anchor>
      <arglist>(nameNC, nameUC)</arglist>
    </member>
    <member kind="function">
      <name>EXTMGR_REPORT_INIT_RESULT</name>
      <anchor>edaae9e815a368bf528d028d2e43a4c9</anchor>
      <arglist>(exttype, nameNC)</arglist>
    </member>
    <member kind="function">
      <name>REPORT_MISSING_ENTRIES</name>
      <anchor>8000d7807701ae2c5e76552a3a0a3891</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLchar</name>
      <anchor>477a61d830b818010d4202a221c4b2de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLcharARB</name>
      <anchor>c2f31b59b9462b23a2631eb005e07b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLdouble</name>
      <anchor>4f86c02824a01bb647d89449b9a8eacc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLenum</name>
      <anchor>3c36e4bcd781bb9ed1f381564c8d8dcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLfloat</name>
      <anchor>31aeedaeef29442c9c015ab355c8f5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLhandleARB</name>
      <anchor>ecacf797f2548a1955e5da0d90186f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLint</name>
      <anchor>5ac0f3c4d7fafd42b284b5487a791017</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLsizei</name>
      <anchor>9289d5b99dc1f27f01480360f2e18ae0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLubyte</name>
      <anchor>0595908be03a8cff881a23cdc9170e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLuint</name>
      <anchor>782e952cf00e0d28f426254d7b09d8c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLvoid</name>
      <anchor>1e5eb1ac5e47603cc80ab58338b92393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_BOOL</name>
      <anchor>g3abda1a77d6010307bcd4485ec22229f</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_BOOL_CURRENTLAYER</name>
      <anchor>g27531485761258d92e7444174614b606</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_CLIENT_STATE</name>
      <anchor>g34ca79172025cd61b68097dd73f1b466</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_CLIENT_STATE_LAYER</name>
      <anchor>gd2a858696131d6355c8da70ff8e8696f</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_1</name>
      <anchor>gab4b605dfbab39ceca8bcf5d921e56ae</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_1_LAYER</name>
      <anchor>g49b53c4fe0ea019c805de3e75b6c69d6</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_2</name>
      <anchor>g566bfb73599546a863bc71669f641804</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_2_LAYER</name>
      <anchor>g87c72dbc32bd56601ad19cd5115fcbe6</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_3</name>
      <anchor>g21958c0e14ecfe7c0e4a3e86b28bf72b</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_3_LAYER</name>
      <anchor>g194b07bf9b0069232c0b22d1f84d570e</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_4</name>
      <anchor>gfd75d3b0158a31770058588b2f5cf976</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_4_LAYER</name>
      <anchor>g1fc5f85507cb34d53eb0b154e5af5965</anchor>
      <arglist>(func, name, type1, param1,type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>FORCE_STATE_CHANGE</name>
      <anchor>g964f1a4da3f5835091fa679ebe28c4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_BOOL</name>
      <anchor>g674592fbbee9a9fa9ec7c2cfde19eaf1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_BOOL_CURRENTLAYER</name>
      <anchor>g9af753688676f4bd5094fd9bcc181dec</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_CLIENT_STATE</name>
      <anchor>g70392863936750ae3c2d20afc61b552d</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_CLIENT_STATE_LAYER</name>
      <anchor>g3b0c1bbed420c96ef8978171f453faa0</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_1</name>
      <anchor>g72ac2c23ee68ca253e8f81c1b28e31cb</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_1_LAYER</name>
      <anchor>g063486ac11361a925695033de3945701</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_2</name>
      <anchor>g82f857bc057c94ecfb2ccb74ccfbfa67</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_2_LAYER</name>
      <anchor>gb66861355d66535abe875aa1ffe86136</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_3</name>
      <anchor>g86f01d3239d3de28a63db5ee11a9220d</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_3_LAYER</name>
      <anchor>gba57b65e84e1a456643488c2a91f2f95</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_4</name>
      <anchor>ga0e27a6f4ab1409f15bfeabcdc7b8f63</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_4_LAYER</name>
      <anchor>gd10e37d391eae203fcbc51594a394f42</anchor>
      <arglist>(func, name, type1, param1,type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_GENERIC_FIRST</name>
      <anchor>g5290bb1d367bba5f785cb9744e1e5448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_GENERIC_LAST</name>
      <anchor>g5984c9a74424494bb5ac40574122fe04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_IS_GENERIC</name>
      <anchor>gd70e0c7a583331b3620d7f8163ed70e2</anchor>
      <arglist>(va)</arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_IS_SPECIFIC</name>
      <anchor>gc6370838845f2f5c59081a1e4e3dabeb</anchor>
      <arglist>(va)</arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_SPECIFIC_FIRST</name>
      <anchor>g3f705d9dae284c65d68c3a6bd42d5e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_SPECIFIC_LAST</name>
      <anchor>g7ce2aa06ad352f022a1f4701dca2d593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHTPARAM_ATTENUATION</name>
      <anchor>138140e872f433308b457292170d74b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHTPARAM_DIFFUSE</name>
      <anchor>d9807886217437cecd85a0f0ddee7085</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHTPARAM_POSITION</name>
      <anchor>96604da2b5005980794869fd1d4a0fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHTPARAM_SPECULAR</name>
      <anchor>16c8cff479c9442ea9e0c7b9a9470bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_BEGIN</name>
      <anchor>e251a7a0cd425e703b858b53024edcfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_FAIL1</name>
      <anchor>f82832b14ae98bee3f5f2032fd3679e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_FAIL2</name>
      <anchor>73714961951e848a16e563caba96c98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_FINISH</name>
      <anchor>ebc9e0f66eccded04d00b16624ee8b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_PASS1</name>
      <anchor>d5f21d76142da946f71ee6f5c60f34be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_PASS2</name>
      <anchor>817aabd70731cb5f9332dfd6e96270bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SHADOW_VOLUME_USE</name>
      <anchor>c58e45ce876228e66ec5d82917704a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csOpenPortalFlags</name>
      <anchor>15882d23f9a1274e3480e2aee9d7eb03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_OPENPORTAL_ZFILL</name>
      <anchor>15882d23f9a1274e3480e2aee9d7eb03d04cd916604a8c08737fc6d7adeffbe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_OPENPORTAL_MIRROR</name>
      <anchor>15882d23f9a1274e3480e2aee9d7eb037516a125836c49ac48669dbd376ad6fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_OPENPORTAL_FLOAT</name>
      <anchor>15882d23f9a1274e3480e2aee9d7eb03e51b7914a78d935300de786b35628152</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderMeshType</name>
      <anchor>df2df8d75f18c8ea2351b8e2c8180420</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_TRIANGLES</name>
      <anchor>df2df8d75f18c8ea2351b8e2c818042094b4df90ff18151ccf452f3d4d4f611e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_QUADS</name>
      <anchor>df2df8d75f18c8ea2351b8e2c81804207af9a68303966071a8d7ef158cbd1cfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_TRIANGLESTRIP</name>
      <anchor>df2df8d75f18c8ea2351b8e2c81804204fad3831709890a09dc724e90443bfa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_TRIANGLEFAN</name>
      <anchor>df2df8d75f18c8ea2351b8e2c81804202f963fcdc2a8c89c3c95c551b0377a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_POINTS</name>
      <anchor>df2df8d75f18c8ea2351b8e2c8180420ace39785186b57317280cd79a346aef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_POINT_SPRITES</name>
      <anchor>df2df8d75f18c8ea2351b8e2c818042084a28f3e39ea9d89d488f1309e8fe5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_LINES</name>
      <anchor>df2df8d75f18c8ea2351b8e2c818042059fe9f301c01d26d0824511d303840a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MESHTYPE_LINESTRIP</name>
      <anchor>df2df8d75f18c8ea2351b8e2c818042021ff882fb5102b6b047cde1787341121</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSimpleMeshFlags</name>
      <anchor>ee23f4994ae356cdb3e3de782239f4fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sSimpleMeshScreenspace</name>
      <anchor>ee23f4994ae356cdb3e3de782239f4fd077b8eb55639b0b95a6dc9bad17349ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>G3D_RENDERSTATEOPTION</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_ZBUFFERMODE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8bf5d3bf2ad799639b53a75d90628089f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_DITHERENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8301b85eecbf942cf1bc75ff008d75d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_BILINEARMAPPINGENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8102832aaab26cc8037c5a47f6ae32111</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_TRILINEARMAPPINGENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8be1fad6000b39661f231648f42b61391</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_TRANSPARENCYENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f83e5001804025d4cd486492fed47cecfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_MIPMAPENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8adb11ad10ffa83dc8dd8736fbe838c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_TEXTUREMAPPINGENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f82f8539216e26b1f5460cd61d74204ad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_LIGHTINGENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f89993fe4325760197feb3b39042e8f673</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_INTERLACINGENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8189e5fe3d22b6ebd279f772c6a9d829f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_MMXENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8c276a6c68a89efffec1501e68c330d59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_INTERPOLATIONSTEP</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8527fe3292a32fddf82701cdd0982d146</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_MAXPOLYGONSTODRAW</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f85ea5dc921e83f83a08d3edcdcf97d1e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_GOURAUDENABLE</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f89464ccd49110102667ad1f075f363aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>3DRENDERSTATE_EDGES</name>
      <anchor>a0747e910ca225613629d9e9d2fdd9f8d2c312a32eb7289954cbe7865356aea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_CONSOLEOUT</name>
      <anchor>g87bd363a29d521bd608c948f0a0d7e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_END</name>
      <anchor>gc41ce4979a7a8d0c03398582431d33fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_ENGINE</name>
      <anchor>g89d238e62b58958a7ec2ddbb5c3d5e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_FONTSERVER</name>
      <anchor>g42cf474b4c99d675a3c3a99d19a0e918</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_IMAGELOADER</name>
      <anchor>ge42c369b9dced8035730008c78cce5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_LEVELLOADER</name>
      <anchor>g42ddbf31c65cc88df2d87add9b935802</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_LEVELSAVER</name>
      <anchor>g8e89f0bc7c4636f060a7741b5951d0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_NULL3D</name>
      <anchor>g54c20a9dd1613c1decd649b76b8ed8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_OPENGL3D</name>
      <anchor>gfc00bb30293d30ccf64a253b260a0a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_PLUGIN</name>
      <anchor>ga93e57905eb2720951569ace7a2f1c3b</anchor>
      <arglist>(Name, Interface)</arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_PLUGIN_TAG</name>
      <anchor>g769a2cbda4b879250d764cdb6f7801da</anchor>
      <arglist>(Name, Interface, Tag)</arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_REPORTER</name>
      <anchor>g27f155b85a03d701d070902f6d78e70b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_REPORTERLISTENER</name>
      <anchor>g26e1255d529327b44cdfbd1663aa140d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_SOFTWARE3D</name>
      <anchor>g497d8c02d54a590c8bbe1dce0ecff2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REQUEST_VFS</name>
      <anchor>gaa0a3ada833a582e7384868fe8dfcdc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventHandlerFunc</name>
      <anchor>g2a1f091b48a09f6829e74b5a266d9f3e</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_DEAF</name>
      <anchor>g8c3fb1f03eef665bfd7718155619c0b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_ALWAYSERASE</name>
      <anchor>g1cf639c9da69655f1eb778e27270db9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_FOCUSED</name>
      <anchor>gf49cfe117667935283a34d9e29f40e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_HIDDEN</name>
      <anchor>gd78eee7bdef6f9f4410947cc141af0b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_INVISIBLE</name>
      <anchor>g84c9d57a6df28c928be88d8bf4d95fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_NON_CLIENT</name>
      <anchor>gf17a3328e1815393b7424a30bbf7364a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_TOP_SELECT</name>
      <anchor>gec4906b88dfbd241a85d2b6b1c9f4ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_TRANSPARENT</name>
      <anchor>g2af2106fff1b9cfc988ee92ff222a72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_CMP_WINDOW</name>
      <anchor>g54de4698e664fafb357d41fee0198c0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_ERR_SINK_NO_TRIGGERS</name>
      <anchor>gbb296b9a1fc1ff1aced9b2524491719e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_ERR_SINK_NONE</name>
      <anchor>g3be19db5663129ab01dde6d51e2a8410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_ERR_SINK_TRIGGER_NOT_FOUND</name>
      <anchor>g323d82663edadd8e5f64a76effcee6c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_AlwaysEraseWindows</name>
      <anchor>gb7cf6312664ad6592b76dbf575bfaee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_AlwaysRedrawWindows</name>
      <anchor>g3bce82389ba8e23c7ee40f537adbb991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_KeyboardControl</name>
      <anchor>ga1275faba761f4917de3f597fa12148d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWSF_RaiseOnMouseOver</name>
      <anchor>g7f4e159f4927a22bf0d138a4ac849b07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_DOWN</name>
      <anchor>g4de98bba793051685b2fa99def5a68f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_IN_DOWN</name>
      <anchor>g45e846d051bd2b3b9c9839632f63ab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_IN_LEFT</name>
      <anchor>g99cdd6282d8fc9f4a53b7b160bb1094c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_IN_RIGHT</name>
      <anchor>g5f67e7e20ce8951ace6d75e5ee4e3aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_IN_UP</name>
      <anchor>g8d73638c8bc58d614a26bc686a033b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_LEFT</name>
      <anchor>gd6b154e2c9eaa10ee1dc46f76956f5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_OUT_DOWN</name>
      <anchor>ge9bc384a2b6e5b6902c9788d8c9e2bae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_OUT_LEFT</name>
      <anchor>g3ad62060dab2ac254e43f28672c6cbf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_OUT_RIGHT</name>
      <anchor>g6f91d141c3df8acf3c7092aaf98719a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_OUT_UP</name>
      <anchor>g0dd9f94e052876031c4db0046286eb38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_RIGHT</name>
      <anchor>gc9559a8bb81068f8adacdfa80b50da1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AWS_TRANSITION_SLIDE_UP</name>
      <anchor>g2650162838f937de6b470e9485877efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleBuiltinEffectorVFType</name>
      <anchor>g80565dee652e2b5777d42fccc67711b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_BUILTIN_SPIRAL</name>
      <anchor>gg80565dee652e2b5777d42fccc67711b4283c5d0068ff8c1b2a8299cba8fefe96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_BUILTIN_RADIALPOINT</name>
      <anchor>gg80565dee652e2b5777d42fccc67711b446fce477fc802d54a9a60b1b89cdfb6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleBuiltinEmitterPlacement</name>
      <anchor>g92a7105932f4383bf09437ccaa2a1c85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_BUILTIN_CENTER</name>
      <anchor>gg92a7105932f4383bf09437ccaa2a1c8530ce21ee95a51abb5bc4f69bf477d971</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_BUILTIN_VOLUME</name>
      <anchor>gg92a7105932f4383bf09437ccaa2a1c85fdb7e74cb758a2b7c93772834ea8ebc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_BUILTIN_SURFACE</name>
      <anchor>gg92a7105932f4383bf09437ccaa2a1c85568272545713fb64d14aae6c9205952e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENGINE_CACHE_NOUPDATE</name>
      <anchor>g15e9eee2fc7a9a0b4c19a8d04c1c955a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENGINE_CACHE_READ</name>
      <anchor>g5e2581ec2264328fc7279cf5a1be80c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENGINE_CACHE_WRITE</name>
      <anchor>g6fba4d7e711ee6cac064667a3dbb36f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_CLIPDEST</name>
      <anchor>gfacb80191793249f722c848fbf5bbcd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_CLIPSTRADDLING</name>
      <anchor>g5323aad74965bab3e57203b6d7721ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_COLLDET</name>
      <anchor>ge379b0eb6346a3359c021bb62988f05c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_FLOAT</name>
      <anchor>g93d4a25d9d89f2ab9b5a82c4cb24d5db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_MIRROR</name>
      <anchor>g11463d20e132b537b175172c438cd301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_STATICDEST</name>
      <anchor>g6a16a6eb0b5ac25411faa176e601dfd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_VISCULL</name>
      <anchor>g38d7e4bf3cf370e0c11a8f004c25dcaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_WARP</name>
      <anchor>g16382a380d44a959ac11b3825b1664ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PORTAL_ZFILL</name>
      <anchor>ge7443e0b68ff8e90ac2ae49a79482e44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_LIGHT_ATTENUATION</name>
      <anchor>ga121762f79786581b5b484bf69b4ba4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_LIGHT_COLOR</name>
      <anchor>gc9668c0bb1fc84aa262bc1085e5841f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_LIGHT_DESTROY</name>
      <anchor>gdccbc62e797cb25bfe14ef222f504867</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_LIGHT_MOVE</name>
      <anchor>g10e4bea496f896f60daefa06966db2ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_LIGHT_RADIUS</name>
      <anchor>g920bc40a590b7f2f5947aa1a2191bca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_LIGHT_SECTOR</name>
      <anchor>g8c7a36ed25015ece3b2edd601b788c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_MOVABLE_CHANGED</name>
      <anchor>g3a82d1037a0f138a2b7f05063175549c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_MOVABLE_DESTROY</name>
      <anchor>g35e290c912b7a7190f362d1bdc023578</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_NONE</name>
      <anchor>gf19919dc7b1b6c7a523b6620e83670fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_SECTOR_NEWMESH</name>
      <anchor>gcb0f7061fef1ad8cf84814539c83ac36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WATCH_SECTOR_REMOVEMESH</name>
      <anchor>gc13c5f34ae0d4b97105fa7f1f91e20ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderPrioritySorting</name>
      <anchor>g63143e9ae4dff3e6e077cbfe43df9db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_RENDPRI_SORT_NONE</name>
      <anchor>gg63143e9ae4dff3e6e077cbfe43df9db36d09ee8d05e81a961478455e93cfe419</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_RENDPRI_SORT_BACK2FRONT</name>
      <anchor>gg63143e9ae4dff3e6e077cbfe43df9db3f2ad0e746feeb1aa84a1dc74979f1f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_RENDPRI_SORT_FRONT2BACK</name>
      <anchor>gg63143e9ae4dff3e6e077cbfe43df9db3614200e2289156d46b3ae081a70c5295</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DEFAULT_LIGHT_LEVEL</name>
      <anchor>gf1ec53156d04ea664bc01d3a1cdba234</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHT_ACTIVEHALO</name>
      <anchor>g618a4ace7e4102bf581e00d41dc4541f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_NORMAL_LIGHT_LEVEL</name>
      <anchor>ge3109b162d2aced91b47e8800802d69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csHaloType</name>
      <anchor>g482a040cff77601b9b340bcc38cb3f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>shtCross</name>
      <anchor>gg482a040cff77601b9b340bcc38cb3f7642f5ce2483c630e10c39c91dc1666b12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>shtNova</name>
      <anchor>gg482a040cff77601b9b340bcc38cb3f76dcbcf1c751a00e94401180ac4bdf0c09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>shtFlare</name>
      <anchor>gg482a040cff77601b9b340bcc38cb3f7641543e7b1b5b59d4a37b93963721c89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csLightAttenuationMode</name>
      <anchor>g0040eead4e75eb362c14a866cce0f728</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ATTN_NONE</name>
      <anchor>gg0040eead4e75eb362c14a866cce0f728b39b476b187c7b9040eac807cc41d5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ATTN_LINEAR</name>
      <anchor>gg0040eead4e75eb362c14a866cce0f728a4ebc6433f9d886c020832484ff3c2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ATTN_INVERSE</name>
      <anchor>gg0040eead4e75eb362c14a866cce0f7284e3379a01573692b0927c34f8f394d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ATTN_REALISTIC</name>
      <anchor>gg0040eead4e75eb362c14a866cce0f728c9bdb953d8faad6f0ae99c32a372325e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ATTN_CLQ</name>
      <anchor>gg0040eead4e75eb362c14a866cce0f72842742eb3305f7f388b5a8d6f82efc4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csLightDynamicType</name>
      <anchor>g226054df63a389a3d03a47358dacf665</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_LIGHT_DYNAMICTYPE_STATIC</name>
      <anchor>gg226054df63a389a3d03a47358dacf665f14d1d673772c44312e9d38e2925f120</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_LIGHT_DYNAMICTYPE_PSEUDO</name>
      <anchor>gg226054df63a389a3d03a47358dacf66582e376f7e9602fe9f1c7c96e5bfabb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_LIGHT_DYNAMICTYPE_DYNAMIC</name>
      <anchor>gg226054df63a389a3d03a47358dacf665edf9b287ab7f32dbe0485e0b9a9f2fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csLightType</name>
      <anchor>ge4baf0a9f20299ab4c39397c9bfbe264</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_LIGHT_POINTLIGHT</name>
      <anchor>gge4baf0a9f20299ab4c39397c9bfbe264f7e1a9262208f00851f4076b8b278d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_LIGHT_DIRECTIONAL</name>
      <anchor>gge4baf0a9f20299ab4c39397c9bfbe26429e6aa791578f256f5f33f460f92019e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_LIGHT_SPOTLIGHT</name>
      <anchor>gge4baf0a9f20299ab4c39397c9bfbe2646ad3bf0bda6156f8f112a482cd7dfdd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_CAMERA</name>
      <anchor>g707edf89325bf63f948e740ff3ae841c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_DETAIL</name>
      <anchor>gb1920b5b57dec88cadcf530ce789a848</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_INVISIBLE</name>
      <anchor>g269b4b29e2953b196ff15c97fe1ea37b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_INVISIBLEMESH</name>
      <anchor>g640f3681a716875d98661b8a8dd1394d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_NOCLIP</name>
      <anchor>g71b0c1c932e7b49e5465da3479224395</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_NOHITBEAM</name>
      <anchor>ge4dafd5346026834b4c9a229cc1dc8d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_NOLIGHTING</name>
      <anchor>g4dc1fb513d52e66b5c9b4833c8771ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ENTITY_NOSHADOWS</name>
      <anchor>g827afa4789cbc9ddfebf824510ad710c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHTINGUPDATE_ALWAYSUPDATE</name>
      <anchor>gff41cd726d268a3521cbfcc5a26710e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LIGHTINGUPDATE_SORTRELEVANCE</name>
      <anchor>gb215af68fa119427a3ab2c109c55cf58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DEFAULT_RENDERLOOP_NAME</name>
      <anchor>g569c1d8f97e1d478de101695aafc9af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_BACKWARD</name>
      <anchor>ge141d7ecb401140e12e9cba77811127e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_DOWN</name>
      <anchor>gaa0c695be244da2b476b35f5150ca862</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_FORWARD</name>
      <anchor>g1753309caa42ddc5d4916ef0f5701cb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_LEFT</name>
      <anchor>g1f95cefdaa55a8c1359fee64f018e529</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_RIGHT</name>
      <anchor>g56c9460bb290b82b336cf3af346621b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_ROT_LEFT</name>
      <anchor>gbbdc01a4759083c27d4a1a6fb86c70cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_ROT_RIGHT</name>
      <anchor>g011f4528e3af7e757e9f378ff49e5b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_TILT_DOWN</name>
      <anchor>gd108bede1d950c590475aba541403c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_TILT_LEFT</name>
      <anchor>gdd8c7441b685ee11801b7ffb1b3214c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_TILT_RIGHT</name>
      <anchor>g2bd14468534f8acbe3cdd015198d3f0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_TILT_UP</name>
      <anchor>ge3a5dd1fe832ecffcde656732201a8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VEC_UP</name>
      <anchor>g147c21621d86e0541de3960b15e6dab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CULLER_HINT_BADOCCLUDER</name>
      <anchor>gf9eaf6c105d2c8abc6ed0068e8a64657</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CULLER_HINT_GOODOCCLUDER</name>
      <anchor>g39aedbb767403fb92218c04880bea2a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csFrustumViewObjectFunc</name>
      <anchor>g7e3d6c29ca07c48d012ccf67a62492aa</anchor>
      <arglist>)(iMeshWrapper *mesh, iFrustumView *lview, bool vis)</arglist>
    </member>
    <member kind="function">
      <name>_CSBASEEVENT_MAXARRAYINDEX</name>
      <anchor>g487643362c7d0b7f28b441480bd2495a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_FRAME_EVENT_SHORTCUTS</name>
      <anchor>g3d079fa37a1b0a6d60075c2d7ff1b473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_INPUT_EVENT_SHORTCUTS</name>
      <anchor>ge7c559dd3119047a21de473c2eff7623</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_SYSTEM_EVENT_SHORTCUTS</name>
      <anchor>g65135ddc0fbc0f93e268d6e1130f9525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENT_INVALID</name>
      <anchor>g4179e548ef7784bec7313c2baebcd683</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTLIST_END</name>
      <anchor>g38b0f25e975284001f47297222e4d480</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_HANDLER_INVALID</name>
      <anchor>gea5ee8f1eba9a0173e3a0f343b9d0603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_HANDLERLIST_END</name>
      <anchor>g9aa0e2476106e51c7a44ced844b6f20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_FRAME_EVENT_SHORTCUTS</name>
      <anchor>ge4e3450580c0a8f206e81ebe05ebfabe</anchor>
      <arglist>(object_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_INPUT_EVENT_SHORTCUTS</name>
      <anchor>g1279124beda5c4770fa9f13c6894e24d</anchor>
      <arglist>(object_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_SYSTEM_EVENT_SHORTCUTS</name>
      <anchor>ge1a844893cb98664fc2c11689afaa3f6</anchor>
      <arglist>(object_reg)</arglist>
    </member>
    <member kind="function">
      <name>csHandlerID</name>
      <anchor>gd62f963e20f1180634a9557b392d987d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_EVENT_SHORTCUTS</name>
      <anchor>g9e06efa3802cf2bb855e54669349b77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_DEFAULT_INSTANCE_CONSTRAINTS</name>
      <anchor>g3b8588d425823594019243398b3d4447</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_NAMES</name>
      <anchor>g4f7b2a21cfb5997a2bb258920fafc61f</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_NIL_CONSTRAINTS</name>
      <anchor>gfa413bca2b161c7d43cb38f46ec73a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTHANDLER_NIL_GENERIC_CONSTRAINTS</name>
      <anchor>g8474b7e6ea936afa16000f4e74ac65d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_INITIALIZE_EVENT_SHORTCUTS</name>
      <anchor>g1f17fc1929d4424fd9769850b3e846c5</anchor>
      <arglist>(object_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_INPUT_EVENT</name>
      <anchor>g77fd5f9a7d0da5ab2687eb9ba8f31448</anchor>
      <arglist>(reg, e)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_JOYSTICK_BUTTON_EVENT</name>
      <anchor>g2e99a8dea5aced5fd6deacd338276f70</anchor>
      <arglist>(reg, e, n)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_JOYSTICK_EVENT</name>
      <anchor>gf24052ac30ad56d8819750657bc19466</anchor>
      <arglist>(reg, e)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_JOYSTICK_MOVE_EVENT</name>
      <anchor>g1df2036231b2050bf8b25a93ea0d7ef6</anchor>
      <arglist>(reg, e, n)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_KEYBOARD_EVENT</name>
      <anchor>g23bee8bd59fcfe48a61572b215cd4962</anchor>
      <arglist>(reg, e)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_MOUSE_BUTTON_EVENT</name>
      <anchor>g60c3cfef564152816f5eee98d775ac39</anchor>
      <arglist>(reg, e, n)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_MOUSE_EVENT</name>
      <anchor>g2b5d14734c6ae94cae9a722f017dd2c4</anchor>
      <arglist>(reg, e)</arglist>
    </member>
    <member kind="function">
      <name>CS_IS_MOUSE_MOVE_EVENT</name>
      <anchor>g4bd651d4ebcc3b86fc959a772d7b801b</anchor>
      <arglist>(reg, e, n)</arglist>
    </member>
    <member kind="function">
      <name>CS_MAX_JOYSTICK_AXES</name>
      <anchor>gcd40b30ac675129008f546cd98226628</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MAX_JOYSTICK_BUTTONS</name>
      <anchor>g2085e125db1e3d3c36bb8dfcf519cbf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MAX_JOYSTICK_COUNT</name>
      <anchor>g38fff06a3305b3802f937abd06098b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MAX_MOUSE_AXES</name>
      <anchor>gd3bd79c3f96e1971ac991487041006fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MAX_MOUSE_BUTTONS</name>
      <anchor>gdc0a336bfcb6acde77fd4a544a8b4f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MAX_MOUSE_COUNT</name>
      <anchor>gbfaa646f38679f20303ebe84eca58519</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csevAllEvents</name>
      <anchor>g7539e7012b65a80ee001edf381af93c5</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevCanvasClose</name>
      <anchor>gb128211a9a53aa527fd93a221af44ed1</anchor>
      <arglist>(reg, g2d)</arglist>
    </member>
    <member kind="function">
      <name>csevCanvasExposed</name>
      <anchor>gd623c4bef8d9d69ce0678fa0d2169b1d</anchor>
      <arglist>(reg, g2d)</arglist>
    </member>
    <member kind="function">
      <name>csevCanvasHidden</name>
      <anchor>g9281995a5705a62098960364ea3da212</anchor>
      <arglist>(reg, g2d)</arglist>
    </member>
    <member kind="function">
      <name>csevCanvasResize</name>
      <anchor>gb7d7f41a14eade4cae7ba1345abb476b</anchor>
      <arglist>(reg, g2d)</arglist>
    </member>
    <member kind="function">
      <name>csevCommandLineHelp</name>
      <anchor>g977aed0ba09a2ddfe491e814af149d3f</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevFocusChanged</name>
      <anchor>gfdde83e5cbddefff983a4131142e4426</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevFocusGained</name>
      <anchor>g57ed3ce5b16e1d714c963b61c71ad76f</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevFocusLost</name>
      <anchor>ge47bd7e8dcb5b73aba89b9cf9d44d13b</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevFrame</name>
      <anchor>gb6d197b308f4c78c8690de6a1c252d04</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevInput</name>
      <anchor>gaf911fd154450599e865868db937dbe9</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickButton</name>
      <anchor>g59ecd4ba0fca843a15bd181a2394681e</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickDown</name>
      <anchor>g1da735acde98e4fb6654d87f4bdda7c9</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickEvent</name>
      <anchor>g64570881cf9552061295e49d50063c57</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickMove</name>
      <anchor>gbfc32cacbd94f8962ce21ff86e9fb5b0</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickUp</name>
      <anchor>g05c6817322b8908313dc52304d09c8da</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevKeyboardDown</name>
      <anchor>g6207c49bfbab0ce73319c9bfdc8d52c7</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevKeyboardEvent</name>
      <anchor>g0385e2999e453091f80f2a5c529a79a3</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevKeyboardUp</name>
      <anchor>gfe259b3848491725047a9dc97ae88e81</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseButton</name>
      <anchor>g09ebcf100f26e3217fb5d9e18ef71070</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseClick</name>
      <anchor>gd11a4eefec36ccadc0e89159294cfeab</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseDoubleClick</name>
      <anchor>gb5a5d82a745038123d96b63a24bdf87f</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseDown</name>
      <anchor>ga2180bc37008b73623bad5f3807b463e</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseEvent</name>
      <anchor>g332ef1a3d1a63b791553df1ab720e043</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseMove</name>
      <anchor>g825f363a5858fd454bcb833871980f57</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseUp</name>
      <anchor>g00373027f54de134871e14bf7ba56507</anchor>
      <arglist>(reg, x)</arglist>
    </member>
    <member kind="function">
      <name>csevQuit</name>
      <anchor>g81e4bc87464dd23f0bc15856bc7d1572</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevSystemClose</name>
      <anchor>g2565d47183cdf5e0d72181dee8b79f34</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csevSystemOpen</name>
      <anchor>g5a1a4767025847fc9ddcfc3fb0007f16</anchor>
      <arglist>(reg)</arglist>
    </member>
    <member kind="function">
      <name>csEventID</name>
      <anchor>g51e1762faeeefdadf693499fc93db757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyEventType</name>
      <anchor>ge77b5898945ed86046a25788a491cb4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMouseEventType</name>
      <anchor>g876689e689d4e712a992b821b1ee4f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_csKeyEventType</name>
      <anchor>g4509f7c5550c5c380987029076adabfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyEventTypeUp</name>
      <anchor>gg4509f7c5550c5c380987029076adabfa86b04641d83cd89759fe909fa3bc9468</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sKeyEventTypeDown</name>
      <anchor>gg4509f7c5550c5c380987029076adabfac9870ba1122273204ef3e1d463af103b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_csMouseEventType</name>
      <anchor>gc879068928a72110a0981ea3907c0619</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sMouseEventTypeMove</name>
      <anchor>ggc879068928a72110a0981ea3907c06197087fd363a1d8a8702707cad64aab2b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sMouseEventTypeUp</name>
      <anchor>ggc879068928a72110a0981ea3907c0619d610cfa2eb9206dcae847b30ba530bed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sMouseEventTypeDown</name>
      <anchor>ggc879068928a72110a0981ea3907c0619263db8146c5f86ba87553df21bfb8874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sMouseEventTypeClick</name>
      <anchor>ggc879068928a72110a0981ea3907c06198e8cb78961d8664378b9ed47696868bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sMouseEventTypeDoubleClick</name>
      <anchor>ggc879068928a72110a0981ea3907c06195e15121d616f34ddd96a6f3081fddf6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventAttributeType</name>
      <anchor>ge12006d83c6b873a567c93fbb4670fe1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttrUnknown</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe1b724a3d28f87b1393d0f76d8efb439d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttrInt</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe1ef76fbe8edf3545b08ed274af6a0d1af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttrUInt</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe1c352461ab0721150688d55a0f4a0d66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttrFloat</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe11888f1bbcb1bed125ea1419968477bd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttrDatabuffer</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe1003e9819bd6fac75033c669b393c8208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttrEvent</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe11fc3af31574953caa153c1ece5d71dbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventAttriBase</name>
      <anchor>gge12006d83c6b873a567c93fbb4670fe109479cd1e4e9b9f8adae0674168da45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventError</name>
      <anchor>ge069ae995b63f57fb1732075224dcfee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrNone</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee9c1b73fa7f11036be9168c2dd7628b54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrLossy</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee96b2f249af61bd36e39b606d54f83497</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrNotFound</name>
      <anchor>gge069ae995b63f57fb1732075224dcfeefb70c5a04108a9a922ceb823a72d8be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrMismatchInt</name>
      <anchor>gge069ae995b63f57fb1732075224dcfeeb8401e087145e0016b2aea66304616c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrMismatchUInt</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee14a14bf360f614feae10992fd3848410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrMismatchFloat</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee1257d91de710425f78275d570b00de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrMismatchBuffer</name>
      <anchor>gge069ae995b63f57fb1732075224dcfeecfaac92f875d2a7d7a31ebf250ce8957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrMismatchEvent</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee7779c7ec74d22749d47feb52acb1d5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrMismatchIBase</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee7a8727a0c9e11768bd220ab88fc3b786</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sEventErrUhOhUnknown</name>
      <anchor>gge069ae995b63f57fb1732075224dcfeef044510e671f067cf0f7af7624d84540</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csKeyComposeResult</name>
      <anchor>g9d08c1b538e925c0b83f3fa3ce0e88ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sComposeNoChar</name>
      <anchor>gg9d08c1b538e925c0b83f3fa3ce0e88aefd4b7b4d28ed24fe5a7b600eaeefcf53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sComposeNormalChar</name>
      <anchor>gg9d08c1b538e925c0b83f3fa3ce0e88ae6d674f5de5c19736739da7f3b532f4ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sComposeComposedChar</name>
      <anchor>gg9d08c1b538e925c0b83f3fa3ce0e88aee92583000bf169384c60096b3e5ba106</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sComposeUncomposeable</name>
      <anchor>gg9d08c1b538e925c0b83f3fa3ce0e88ae3300f376397694517edfa2dcdfc4bb0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMouseButton</name>
      <anchor>g7854bad75e3944e68ab354eceebd8ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbNone</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef464211685c925262a0ebd651866cc32f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbLeft</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef4730b4a431bb9dc2dc33626a7a0e3d543</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbRight</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef46f1ff79b4b0abb30cb500df3fe8e29d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbMiddle</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef407f10c93019db86e1b1fefbbb1c71d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbWheelUp</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef4bcf733ef0bf50b4bede2cf403fc73697</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbWheelDown</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef4b6176e868a7e400d76e084c0c688b912</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbExtra1</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef42137838bb94bcc178ac840727e6a3787</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smbExtra2</name>
      <anchor>gg7854bad75e3944e68ab354eceebd8ef480762a53bd2a5231de33e4ddc03a93ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventErrMismatchBuffer</name>
      <anchor>gge069ae995b63f57fb1732075224dcfeecfaac92f875d2a7d7a31ebf250ce8957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventErrMismatchEvent</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee7779c7ec74d22749d47feb52acb1d5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventErrMismatchFloat</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee1257d91de710425f78275d570b00de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventErrMismatchIBase</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee7a8727a0c9e11768bd220ab88fc3b786</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csEventErrMismatchUInt</name>
      <anchor>gge069ae995b63f57fb1732075224dcfee14a14bf360f614feae10992fd3848410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csevCanvasOp</name>
      <anchor>gfa0278a662491fc68c66f7225878333c</anchor>
      <arglist>(iObjectRegistry *object_reg, const iGraphics2D *g2d, const csString &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csevCanvasOp</name>
      <anchor>gb6e53765d448ea46f36cfc2aa5c6d8c6</anchor>
      <arglist>(csRef&lt; iEventNameRegistry &gt; &amp;reg, const iGraphics2D *g2d, const csString &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csevFinalProcess</name>
      <anchor>g26a119e96628f9156eb563fd2d6561f5</anchor>
      <arglist>(iEventNameRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevFinalProcess</name>
      <anchor>g059d7292b19ba5ebb7b2c5ba3fdb0f67</anchor>
      <arglist>(iObjectRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystick</name>
      <anchor>g6fdbf21d5b26a6e6651b7bc53824ef4a</anchor>
      <arglist>(iObjectRegistry *object_reg, uint x)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystick</name>
      <anchor>g0c4ce187aa25d5dad94163d46a5417d8</anchor>
      <arglist>(iEventNameRegistry *name_reg, uint x)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickOp</name>
      <anchor>g82be44b0bb8622b8c5a319b45bdc21f5</anchor>
      <arglist>(iObjectRegistry *object_reg, uint x, const csString &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csevJoystickOp</name>
      <anchor>g3c29fec51982552d0d4baab91958075c</anchor>
      <arglist>(iEventNameRegistry *name_reg, uint x, const csString &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csevMouse</name>
      <anchor>g1e3f76e80230e5513f355b2f54e71d09</anchor>
      <arglist>(iObjectRegistry *object_reg, uint x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouse</name>
      <anchor>g18cbcf1836948ff839a67a749e9aef23</anchor>
      <arglist>(iEventNameRegistry *name_reg, uint x)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseOp</name>
      <anchor>gad0b7bf03105028bffbc28c7624fc7ca</anchor>
      <arglist>(iObjectRegistry *object_reg, uint x, const csString &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csevMouseOp</name>
      <anchor>gf130738dd2b8bb4ae10096305529f723</anchor>
      <arglist>(iEventNameRegistry *name_reg, uint x, const csString &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csevPostProcess</name>
      <anchor>gbc8b827b9aa0d928ab7868e2f07c37ee</anchor>
      <arglist>(iEventNameRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevPostProcess</name>
      <anchor>g8d2570a797520f02ee1dbd449875e1e0</anchor>
      <arglist>(iObjectRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevPreProcess</name>
      <anchor>g7e03af9ad560d64310fa72771ede6bc3</anchor>
      <arglist>(iEventNameRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevPreProcess</name>
      <anchor>g1bdda0c2fc8caf7464d62da58bc91392</anchor>
      <arglist>(iObjectRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevProcess</name>
      <anchor>g783ec4073fba70269afcec81ac52562c</anchor>
      <arglist>(iEventNameRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csevProcess</name>
      <anchor>g977bd4a5cac5fcf27ed0660837e629b3</anchor>
      <arglist>(iObjectRegistry *reg)</arglist>
    </member>
    <member kind="function">
      <name>csQfixed16</name>
      <anchor>gb4d25906568833f055705914635e7dcd</anchor>
      <arglist>(float n)</arglist>
    </member>
    <member kind="function">
      <name>csQfixed24</name>
      <anchor>gd305e638c1b9fa9a324d4c7eec92b597</anchor>
      <arglist>(float n)</arglist>
    </member>
    <member kind="function">
      <name>csQfixed8</name>
      <anchor>g7a73833c6efb3d6e3f53a5d1ecb90b39</anchor>
      <arglist>(float n)</arglist>
    </member>
    <member kind="function">
      <name>csQint</name>
      <anchor>gfd9ba12a8572f805d515beda1d407b3c</anchor>
      <arglist>(T n)</arglist>
    </member>
    <member kind="function">
      <name>csQisqrt</name>
      <anchor>g8643cea20063ae37c50fe336926dd4ee</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <name>csQround</name>
      <anchor>ga7dbcbb25449d601f7e70e83366278d2</anchor>
      <arglist>(T n)</arglist>
    </member>
    <member kind="function">
      <name>csQsqrt</name>
      <anchor>g9859e75fb5b3a67f9082e45fe02d80cd</anchor>
      <arglist>(float x)</arglist>
    </member>
    <member kind="function">
      <name>csFinite</name>
      <anchor>gb84e24b220cd40059738cc8aea20ea18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <name>ABS</name>
      <anchor>g996f7be338ccb40d1a2a5abc1ad61759</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>csSubRect</name>
      <anchor>g0838117dc05d2d4f8ce68a2a5b8964ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTileCol</name>
      <anchor>gb6d30c9dd13c542edf1c21a298f40003</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dSqr</name>
      <anchor>gef61e8f5b3e9a3a2dd86326b90ca4523</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <name>CS_BOUNDINGBOX_MAXVALUE</name>
      <anchor>g5acebae804990b2e4fc030a61c662e48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MAX_OUTPUT_VERTICES</name>
      <anchor>g341887053b96768adb51e5df20878869</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csAAPFCBBox</name>
      <anchor>g3886d58ac9d8b6cbe14139413a2f6cd3</anchor>
      <arglist>(int x, int y, int w, int h, void *arg)</arglist>
    </member>
    <member kind="function">
      <name>csAAPFCBPixel</name>
      <anchor>g4420bb75377bee6d1c23fb2f1f3e88c3</anchor>
      <arglist>(int x, int y, float area, void *arg)</arglist>
    </member>
    <member kind="function">
      <name>csKDTreeVisitFunc</name>
      <anchor>g89e1a8f421704aae373010c9da6b4e64</anchor>
      <arglist>)(csKDTree *treenode, void *userdata, uint32 timestamp, uint32 &amp;frustum_mask)</arglist>
    </member>
    <member kind="function">
      <name>csPoint</name>
      <anchor>ge43c7ebd1c85cc2291a579600b78b31f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@0</name>
      <anchor>g06fc87d81c62e9abb8790b6e5713c55b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_xy</name>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b86d75fcdcc57f10b7e00afa9571b2d56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_xY</name>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55baa41ac3e362d3bab01aadf9aa6e89ed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_Xy</name>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b66981a2c120c408cd6a662687e809536</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_XY</name>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b22189c053382e35184dbc0d0c4056c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CENTER2</name>
      <anchor>gg06fc87d81c62e9abb8790b6e5713c55b26daf5755b88f571d2f8b44b8a4eb1f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@1</name>
      <anchor>gdf764cbdea00d65edcd07bb9953ad2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xy_Xy</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b7b42077b10139d5a537a31773f9d82116</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_Xy_xy</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b7e9cda4d3571c9e32d2aba7e4e36255b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_Xy_XY</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b7d9e23645086f99891c4ca5eccba117a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XY_Xy</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b76e0c54f9e09d052f5da9c4d157720922</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XY_xY</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b7def3cca359637bed9cbd0240ffd2051d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xY_XY</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b70f820cda4b14b108a4a8eea2f04a399a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xY_xy</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b7703caeef06bfab521bdb139104d80154</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xy_xY</name>
      <anchor>ggdf764cbdea00d65edcd07bb9953ad2b7675911addea7e87c3a8c8d7dff2ccb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@13</name>
      <anchor>g05589fbab0657f08285ebdfe93f5ec9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POL_SAME_PLANE</name>
      <anchor>gg05589fbab0657f08285ebdfe93f5ec9ee88d3fbccae84a9d22831150df35b7bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POL_FRONT</name>
      <anchor>gg05589fbab0657f08285ebdfe93f5ec9ea271cb2d4694f05e2df381d1cb98279d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POL_BACK</name>
      <anchor>gg05589fbab0657f08285ebdfe93f5ec9ebd5e6308857d9f8cb82434d7d0086a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POL_SPLIT_NEEDED</name>
      <anchor>gg05589fbab0657f08285ebdfe93f5ec9efbc4ca645c2a7478693b045287029b11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@2</name>
      <anchor>g99fb83031ce9923c84392b4e92f956b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_xyz</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b589d329160331dbc52961462fa640e016</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_xyZ</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b50adf66ef9191dbadc5ff14a6bad51070</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_xYz</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b5ce4d8a92c8104f1f48452cb3d312d47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_xYZ</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b5cf591c4f61dc416d2f12e53caa0fc804</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_Xyz</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b5d13ea13c11becbf554b5ae66e58faa24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_XyZ</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b5764db01cad89323ece3563d24b822a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_XYz</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b52b8f79719b79e9a75f8284feb3cafdf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CORNER_XYZ</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b59249f548cf717ea61e140681e58aeac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_CENTER3</name>
      <anchor>gg99fb83031ce9923c84392b4e92f956b58240f71d83e88f58c9c7da2a583e3c03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@20</name>
      <anchor>gdb49720dc49f7d4e4cf9adbf2948e409</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_AXIS_NONE</name>
      <anchor>ggdb49720dc49f7d4e4cf9adbf2948e40982bccad8e3789fcecb889116579b71ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_AXIS_X</name>
      <anchor>ggdb49720dc49f7d4e4cf9adbf2948e4098e81da4ab0c7c07c39847d17fb3a95b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_AXIS_Y</name>
      <anchor>ggdb49720dc49f7d4e4cf9adbf2948e4099734b1073fe8f5572622f5e39120317d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_AXIS_Z</name>
      <anchor>ggdb49720dc49f7d4e4cf9adbf2948e4092524f76ec772151941164bee31d5d9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_AXIS_W</name>
      <anchor>ggdb49720dc49f7d4e4cf9adbf2948e409b090525794378a5a8ee78c5ad7e220b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@3</name>
      <anchor>gbc6126af1d45847bc59afa0aa3216b04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_SIDE_x</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b04bf5848df27bb69f664cbd291d39420ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_SIDE_X</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b0445dd9cccdf41c83a927d6407db8d896d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_SIDE_y</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b046a332bf491cf4c6d41382d86e048b2af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_SIDE_Y</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b04609482712abd0e66fdc499c79446e436</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_SIDE_z</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b04d7e05664a7c62642086c8208312f7e0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_SIDE_Z</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b047406d4fc7aaf58e925da20fa75e958c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_INSIDE</name>
      <anchor>ggbc6126af1d45847bc59afa0aa3216b043f565d480903f9a9037e5a4f557ac32d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@4</name>
      <anchor>gdc29c2ff13d900c2f185ee95427fb06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_Xyz_xyz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c28c05175d3a2a4c149f796f4c6f64b0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xyz_Xyz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cf1b6f3bca9b6f462f95b3ee037ea45b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xyz_xYz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cab03491e2bc4107e684f35213bcbcd61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xYz_xyz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c66b26777890e8aa3a1548c43b8db5e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xYz_XYz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c0287c5a744c7f5f969f704b7417918e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XYz_xYz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cfd27ca2b7840189a4e65b6574f1dfae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XYz_Xyz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c335c45578982e7a26b9d26f4fb0273fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_Xyz_XYz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c26ef6a1c17df15e763df523ca4d6092a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_Xyz_XyZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c8364a7525248aaa39bf3754f87ab0e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XyZ_Xyz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c7beb6b0163fcf275a4b4f9e898e17ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XyZ_XYZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c1e9f896d12d1a99e0c222045a11d6911</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XYZ_XyZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06ce3504080e396e00052243b9c0dc3c8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XYZ_XYz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cab569a7997e86dd33ba8636830a2d46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XYz_XYZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c52ad8f1f084dbdedfcf455b97b237945</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XYZ_xYZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cfba0050e6b406ec4837ca5ecb876cac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xYZ_XYZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c70555ffeea5abe887d7c2b11d52a3fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xYZ_xYz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c43b1277678de6c48152cfd869f6a52e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xYz_xYZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c98abe1d1ea24fd6e0e79e71997c48029</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xYZ_xyZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c7d2b31db7d0e7f15105194030fed4a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xyZ_xYZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cd023f48dcdce21774666352abed6b56b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xyZ_xyz</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06caea4a1129a5c51aae234283ce02df056</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xyz_xyZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c80fb3e69e2048893619b1d79d1af1f31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_xyZ_XyZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06c6e42bf64feb368b283b43cd588c81007</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BOX_EDGE_XyZ_xyZ</name>
      <anchor>ggdc29c2ff13d900c2f185ee95427fb06cd7607d9544acab7162ea123acc6fb711</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@5</name>
      <anchor>g61dadd085c1777f559549e05962b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_FRUST_OUTSIDE</name>
      <anchor>gg61dadd085c1777f559549e05962b2c9e94cc72a1a3f8f76be34890b8b685f382</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_FRUST_INSIDE</name>
      <anchor>gg61dadd085c1777f559549e05962b2c9e5d55e08138192c764d87aec4cb6fd8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_FRUST_COVERED</name>
      <anchor>gg61dadd085c1777f559549e05962b2c9eda01f0cc2cf09d08a4cc49d8ec31e208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_FRUST_PARTIAL</name>
      <anchor>gg61dadd085c1777f559549e05962b2c9e29a0b767ce5e46c8d3c8150713ed7dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@67</name>
      <anchor>g9e93d8eae633734dfeb29e24a1f3a7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_CLIP_OUTSIDE</name>
      <anchor>gg9e93d8eae633734dfeb29e24a1f3a7c0327d20023b6a973b24df4878ac1ca2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_CLIP_CLIPPED</name>
      <anchor>gg9e93d8eae633734dfeb29e24a1f3a7c05545e595302e89c3de51ec06a09ad73f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_CLIP_INSIDE</name>
      <anchor>gg9e93d8eae633734dfeb29e24a1f3a7c075e75d608a45eea6c9fda90b04aeefbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@68</name>
      <anchor>geb8e1c282570d629a6b603a94a4650d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VERTEX_ORIGINAL</name>
      <anchor>ggeb8e1c282570d629a6b603a94a4650d6b2c5f01a5c75c95a126f9352fecc63db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VERTEX_ONEDGE</name>
      <anchor>ggeb8e1c282570d629a6b603a94a4650d65648edc14e0bc979178d7f7cf4ad76d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VERTEX_INSIDE</name>
      <anchor>ggeb8e1c282570d629a6b603a94a4650d638ad988c5e359fec3a8328c9965a691c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@69</name>
      <anchor>g109bfaad92bd6d348dab484aec11edbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POLYMESH_CLOSED</name>
      <anchor>gg109bfaad92bd6d348dab484aec11edbb8e9aae34250cfee0c5bbdeee9c6737b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POLYMESH_NOTCLOSED</name>
      <anchor>gg109bfaad92bd6d348dab484aec11edbbcf23a303139282162f48575477c27770</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POLYMESH_CONVEX</name>
      <anchor>gg109bfaad92bd6d348dab484aec11edbb40a5b15272940f6cbc9ca9581f3ed3ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POLYMESH_NOTCONVEX</name>
      <anchor>gg109bfaad92bd6d348dab484aec11edbbd3c40a299420fbebed6542e771a7ded4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POLYMESH_DEFORMABLE</name>
      <anchor>gg109bfaad92bd6d348dab484aec11edbb3f90c752cbb5be9e8ef4871380eaab50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_POLYMESH_TRIANGLEMESH</name>
      <anchor>gg109bfaad92bd6d348dab484aec11edbbdc8fef75d8bcac18d711d1bafb503138</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BuildSqrtTable</name>
      <anchor>g8febc92e4d7b5f8cc5fa604a86c15ab5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csAntialiasedPolyFill</name>
      <anchor>g64e24e36c1513196e53d7ec4638fbf87</anchor>
      <arglist>(csVector2 *iVertices, int iVertexCount, void *iArg, csAAPFCBPixel iPutPixel, csAAPFCBBox iDrawBox=0)</arglist>
    </member>
    <member kind="function">
      <name>csClamp</name>
      <anchor>g1c0100d274735df4706c4b903c9ba6f5</anchor>
      <arglist>(const T &amp;a, T max, T min)</arglist>
    </member>
    <member kind="function">
      <name>csFinite</name>
      <anchor>ge589d6b05b27636b5c3d5d2ecc7af508</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>csMax</name>
      <anchor>g79291314e7548d3eb1df274158908235</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>csMin</name>
      <anchor>g16a5d316a30efbd72510b608e3233ea1</anchor>
      <arglist>(const T &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>csSmoothStep</name>
      <anchor>g5aa770bf13eb4b8ee00f34ae9ef64567</anchor>
      <arglist>(const T &amp;a, T max, T min)</arglist>
    </member>
    <member kind="function">
      <name>csSort</name>
      <anchor>g1286eb4497b8d01ea5f8272509b7e99a</anchor>
      <arglist>(T &amp;a, T &amp;b, U &amp;x, U &amp;y)</arglist>
    </member>
    <member kind="function">
      <name>csSort</name>
      <anchor>g3192df8378b422cf7c3e4320a3c838bf</anchor>
      <arglist>(T &amp;a, T &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>csSquare</name>
      <anchor>g7e2758395886579dcca2faba48e67f94</anchor>
      <arglist>(const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <name>FastSqrt</name>
      <anchor>gf2a69a911fd64c590779e6100df325c7</anchor>
      <arglist>(float n)</arglist>
    </member>
    <member kind="function">
      <name>B_COEF</name>
      <anchor>gdb10058e64166c47bae8a5a2fe530d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>B_COEF_SQ</name>
      <anchor>g908a17fc1f44ec18e06974a1013d2a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>G_COEF</name>
      <anchor>g054e602cf24056da9a48adc676358e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>G_COEF_SQ</name>
      <anchor>g04d98bf1813193e592d83eba1712a52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>R_COEF</name>
      <anchor>g7586b393cb9e1dfc0006f4b8ec945239</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>R_COEF_SQ</name>
      <anchor>g3e6bcc20975b271236d5f6f9f9e44d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csCreateXORPatternImage</name>
      <anchor>gf7a643095c2b02895e1ab94acd0a5b4e</anchor>
      <arglist>(int width, int height, int recdepth, float red=1.0f, float green=1.0f, float blue=1.0f)</arglist>
    </member>
    <member kind="function">
      <name>Image</name>
      <anchor>gc6acfe6b38256d69a02bb13fc7f8ac2d</anchor>
      <arglist>(iImage *source, const csRGBpixel &amp;transpColor)</arglist>
    </member>
    <member kind="function">
      <name>CS_IMAGEIO_LOAD</name>
      <anchor>g66030c9ac37bc848e92019338caa1525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMAGEIO_SAVE</name>
      <anchor>gc9142718ea244466ea560c8c6bd501a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ALERT_ERROR</name>
      <anchor>g1ba306f8b720788dc0f5e08c384aa3dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ALERT_NOTE</name>
      <anchor>g83600ddabbff9aeb9db3d9aa72c976c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_ALERT_WARNING</name>
      <anchor>gedd5318cb3d849c4d3cf876f18a2176c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FONT_DEFAULT_GLYPH</name>
      <anchor>g3721ddc874319a718319041805acba34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_ALPHA</name>
      <anchor>g0bb0aa06526b14f17b2ae8e81676f02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_ANY</name>
      <anchor>g5d4465ca5493fe3cbeb3619f0ba11d01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_INVALID</name>
      <anchor>gf3ca8894f5d78e67f5d363a46c6d39e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_MASK</name>
      <anchor>gb8e38ce5133c3cce1c2d88eb21356527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_NONE</name>
      <anchor>g48d0256ca935744d6c5ece0dbe156263</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_PALETTED8</name>
      <anchor>g54dca255a267b8d38b40e1afdc64e208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMGFMT_TRUECOLOR</name>
      <anchor>g791c191ba6818e10601813fe27d9ce6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSFONT_COURIER</name>
      <anchor>g966869f83f23b88b4273ab548afdbd05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSFONT_ITALIC</name>
      <anchor>gc31822ddbd85c9d1e593b73015175859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSFONT_LARGE</name>
      <anchor>ge5edda1607ceec78c642c8375748de0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSFONT_SMALL</name>
      <anchor>gaf49c33450437dbb368b045b394cbef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csImageIOFileFormatDescriptions</name>
      <anchor>g705c2b382b63b31c668ebb4c69fa1951</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csMouseCursorID</name>
      <anchor>g80b85f64d5f129faf7a2cd4c2825147e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@79</name>
      <anchor>g70ad55be767ca0a42c9150d24618e4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_WRITE_BASELINE</name>
      <anchor>gg70ad55be767ca0a42c9150d24618e4ca54886ddf8e7152c7de68ce148eeba005</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_WRITE_NOANTIALIAS</name>
      <anchor>gg70ad55be767ca0a42c9150d24618e4ca70c03137897cfcdd55da3da9584c5e37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_csMouseCursorID</name>
      <anchor>gefea80175c6a53cc40c79799cfd4631b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcNone</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631bdae5189e7e44966636f84a7b3b1d74da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcArrow</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b05941ab457f9042de423aa0bb3108854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcLens</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631bbb9bdb43dcc19b0a04cdba7c91ae8104</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcCross</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b0fb8070c559142a872af1eb854ec3c75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcPen</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b0270300f3797f7f1af52bf4193d0ac32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcMove</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b6916919c2a9bd2690836aa6b9bff4ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcSizeNWSE</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b6d999db007b45825d649b979cde0b2aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcSizeNESW</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b2e0b61709383c853e36c9628891bbea6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcSizeNS</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b64a55e2cc057d10ce63590298f4f83bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcSizeEW</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b0b1b509ec856ec42634e66ca80021591</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcStop</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b2a8f13f1d1aa57be3fa16a80f8f1cc4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>smcWait</name>
      <anchor>ggefea80175c6a53cc40c79799cfd4631b4efd5f71080ba01b71bc66221f4b784b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csImageType</name>
      <anchor>ge62190ffec24a286b2d4b50dcb899469</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>simg2D</name>
      <anchor>gge62190ffec24a286b2d4b50dcb899469bf9c914f4bc9a6d12c118773e1a97740</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>simg3D</name>
      <anchor>gge62190ffec24a286b2d4b50dcb89946991cba43ea68cfe2b81e13df88729d50d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>simgCube</name>
      <anchor>gge62190ffec24a286b2d4b50dcb899469f6af02ca60086548a30cba8999f8d095</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_BUFFER_MAKE_MASKABLE</name>
      <anchor>g53716bef72ba998ca85a10f99b841a62</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_GENERIC_FIRST</name>
      <anchor>g5290bb1d367bba5f785cb9744e1e5448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_GENERIC_LAST</name>
      <anchor>g5984c9a74424494bb5ac40574122fe04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_IS_GENERIC</name>
      <anchor>gd70e0c7a583331b3620d7f8163ed70e2</anchor>
      <arglist>(va)</arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_IS_SPECIFIC</name>
      <anchor>gc6370838845f2f5c59081a1e4e3dabeb</anchor>
      <arglist>(va)</arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_SPECIFIC_FIRST</name>
      <anchor>g3f705d9dae284c65d68c3a6bd42d5e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_SPECIFIC_LAST</name>
      <anchor>g7ce2aa06ad352f022a1f4701dca2d593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CLIP_NEEDED</name>
      <anchor>g568a33e28806ce566e8446420bcb3bd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CLIP_NOT</name>
      <anchor>ge0c49e6b4ff330f8920a64c13acb9c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CLIPPER_NONE</name>
      <anchor>gf8e6612dd833ab4914ab4a7a1608e363</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CLIPPER_OPTIONAL</name>
      <anchor>gb4d7dbe53c5c4fc71ab7871c233bae9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CLIPPER_REQUIRED</name>
      <anchor>gaa52708cea2dcea900681b7643c3aff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CLIPPER_TOPLEVEL</name>
      <anchor>g40e00c647036b433b16268a0cc3149c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_ADD</name>
      <anchor>g59466bfe3d5df98a96bd96c81c90a854</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_ALPHA</name>
      <anchor>g89072101df1b847eb56c7662664fc148</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_COPY</name>
      <anchor>g157a5b79fc02bff999d17b291dac354d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_DESTALPHAADD</name>
      <anchor>g9619d4c92edc9b5873b0f53fe2e02a04</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_FLAT</name>
      <anchor>gb067ef5d5d60de998bf43d15978a5d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_MASK_ALPHA</name>
      <anchor>gc5ac035511e3c8a35a7dc18b55cbf868</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_MASK_MIXMODE</name>
      <anchor>ge7f16e1fb3eff6747db082caec700c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_MESH</name>
      <anchor>gdbbfe64fc8250e928827dc5c4f93d503</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_MULTIPLY</name>
      <anchor>gb90560b5ab7d9bcf32901e0eb5f041d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_MULTIPLY2</name>
      <anchor>g305a050d961b6f0cab41af02763d255b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_PREMULTALPHA</name>
      <anchor>gb116e9a5671f2b3314dfb84f3156363a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_SETALPHA</name>
      <anchor>gc5a2e0c327c6b69ccab0183bd0e2a529</anchor>
      <arglist>(alpha)</arglist>
    </member>
    <member kind="function">
      <name>CS_FX_SETALPHA_INT</name>
      <anchor>gd86331b25169e33b6fcfa9eabd6bc24c</anchor>
      <arglist>(alpha)</arglist>
    </member>
    <member kind="function">
      <name>CS_FX_SRCALPHAADD</name>
      <anchor>g6c38f097325623b97008651fac2d436e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FX_TRANSPARENT</name>
      <anchor>gbdfcef391e5a2c8ee4974995ca4c6454</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MATERIAL_TEXTURE_DIFFUSE</name>
      <anchor>gdeda0074d73bd0bcef9aed23ace12314</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MATERIAL_VARNAME_FLATCOLOR</name>
      <anchor>g663ebe12fbc69f07b34462cdccfa2c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_ALPHATEST_AUTO</name>
      <anchor>g5618a7d398f0500b4ccd81a1d88245d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_ALPHATEST_DISABLE</name>
      <anchor>g2823006b1eec2520e1e39d4d75f2fcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_ALPHATEST_ENABLE</name>
      <anchor>g633cd7c79aa65d6714d3d62129f895ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_ALPHATEST_MASK</name>
      <anchor>gcbc0e919d2b2eb10da60e2e40631602d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_BLEND</name>
      <anchor>gab0163a168de01d26be545e9c3dba638</anchor>
      <arglist>(Src, Dst)</arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_BLENDOP_DST</name>
      <anchor>g44d0c355da9e25c99c000890e6d2c569</anchor>
      <arglist>(mode)</arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_BLENDOP_SRC</name>
      <anchor>gfafe978b680e6b4cf43945f7646366de</anchor>
      <arglist>(mode)</arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_TYPE_AUTO</name>
      <anchor>gcca3666c7b178a88ae163dd8b1729928</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_TYPE_BLENDOP</name>
      <anchor>g318fafd4e8247e9b533e0e1c8104fa61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_TYPE_MASK</name>
      <anchor>g3031097131f3c1669c9cacb590b93ce9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MIXMODE_TYPE_MESH</name>
      <anchor>g48ff680bfd4f154edd1610fd5f1dd3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_2D</name>
      <anchor>g21a2c2a6e098d70e99ab94ec953c180f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_3D</name>
      <anchor>g1007d93d9702d59e43af6012bca0c2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_CLAMP</name>
      <anchor>g01c5b1061d803374676797ff655ef428</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_NOFILTER</name>
      <anchor>g27830a1f98f13acaaa267e5f1b94f2e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_NOMIPMAPS</name>
      <anchor>gfd1f975876f1718dd2b7f6e1b714f96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_NPOTS</name>
      <anchor>gcbd91f874a0d5b44daf143e61ae57d0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_SCALE_DOWN</name>
      <anchor>g887196d09f40664a27eb29ae57993b32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TEXTURE_SCALE_UP</name>
      <anchor>g94d929ab750e4d6240e110604535f547</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSDRAW_2DGRAPHICS</name>
      <anchor>g47b590113bd65530bbf7eaf899a7cccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSDRAW_3DGRAPHICS</name>
      <anchor>g0e278a65bce73be55547a726dacea45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSDRAW_CLEARSCREEN</name>
      <anchor>gcfd8b9e6c472495b63cbe5a48a5a6275</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSDRAW_CLEARZBUFFER</name>
      <anchor>ge0c2e7ed59b255514bf0c08308383a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@80</name>
      <anchor>g4b4213b1f9d54da7c7e36bde32fc7c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_ZERO</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c80f5ce179a35fe83eb4d7bc9412fe53c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_ONE</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c8062585826f145edac424308dd93100b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_SRCCOLOR</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c805f2225042583871689d329f3d551c5b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_SRCCOLOR_INV</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c8039df002786ee50e5a002606e76298b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_DSTCOLOR</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c806d03e7095dabb0cefe33d15164c1d3d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_DSTCOLOR_INV</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c802cbcb29d021d8dedb4ae80c2ec469e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_SRCALPHA</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c80ba5a437af635a0f59c2df4a711b077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_SRCALPHA_INV</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c80402ca8198cd18db1db1c89d580340562</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_DSTALPHA</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c80c77a53103daa13c42b245c309061bb8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_DSTALPHA_INV</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c80c0dce88efddadc4c010208518a4637fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_COUNT</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c8047f785c2424ca7659c468f85674e18f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_MIXMODE_FACT_MASK</name>
      <anchor>gg4b4213b1f9d54da7c7e36bde32fc7c80982f2fa247ecce5a55dfa01fd64dc956</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferComponentType</name>
      <anchor>g2e793d8189bb8566ed81c168875f452b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferLockType</name>
      <anchor>g6415ede5d389a1c56c44ddbc924c8fdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUF_LOCK_READ</name>
      <anchor>gg6415ede5d389a1c56c44ddbc924c8fdc7c3697778fea9d548b1658261e9dff0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUF_LOCK_NORMAL</name>
      <anchor>gg6415ede5d389a1c56c44ddbc924c8fdcbbd9fe06e63ce950e6c2e497cf923247</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferName</name>
      <anchor>g70013f7ff48bca5acf2c00bbb02eb6d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_INDEX</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d61d4d14cca40d7d73682995e3d22bc154</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_POSITION</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6df5a5d67b6a8bdca1600ebbbc6eb3d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_NORMAL</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6e38efaab04c9792a378a2cf7dd2ff7d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_COLOR</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d628fe02aac5a13fe0825ade3463afc9bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_COLOR_UNLIT</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d656cd4292bf21fa603ab283dd5ed0eabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD0</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6de143dd54224fa8cad3e609ba13818a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD1</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d65757ac940985744be53cdb25332d3f1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD2</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d67c89dc351d2dbf831860a646babf0376</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD3</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d60aa692cc85d6a8cd245199a786ee7f0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD_LIGHTMAP</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6514b5e788e074dae98f9ca2e16269bf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC0</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6dae51ca8f98f3971827e177aa78e9345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC1</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6a33bf88df3a2d9e0f781e415654ff38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC2</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6b9affc94776b3cd6dbad4de70771854b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC3</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6c2189f64e731a8c30af1a99157505181</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TANGENT</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6cbabbcd809b60be7c6b711224b36a506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_BINORMAL</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d6362465dcd0e89c922c75795c2a62fb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_COUNT</name>
      <anchor>gg70013f7ff48bca5acf2c00bbb02eb6d66f222fb98c109c0645d819d905f5ba57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferNameMask</name>
      <anchor>gee595b32113dbb3fd91a9aee0193640c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_INDEX_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c7bf4bbb194f315b2853f4583c97919dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_POSITION_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640cdfb81fe24cf97abaf06d6103b24576a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_NORMAL_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c661d7d8931f17ba9fb1a6cf21e61339c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_COLOR_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c760dc0e4997ca2e4d1141e25bdd62bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_COLOR_LIGHTING_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c3e9ebe6ee594e96933b27d31432c07ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD0_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c51ecfccbe0a0b861a459a3510f036826</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD1_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c721ec440fb479a28c055e6b8f820499c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD2_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c6756c8848f8b6f213618f47c0e2ffaed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD3_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c69214192dbea4d4d9d9504f50fe61900</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TEXCOORD_LIGHTMAP_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640cbdd0e8f35e8ba0ff4a789c9bbc708dcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC0_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c03e1601e0504ff8020c1cade7df46137</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC1_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c32a662ec2c384fde629d5ceaa1c895ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC2_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c6acb52bbc510582d994a789c9864f35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_GENERIC3_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c1cc834adbf1827b6ae35ce1a1e99b78c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_TANGENT_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c654bc088755ceb45fea085c01f872f3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_BINORMAL_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640ccccde1e75a788abc7e3cc28197dbf52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUFFER_ALL_MASK</name>
      <anchor>ggee595b32113dbb3fd91a9aee0193640c33e2f06a76d9c479cc6408dcec824236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferType</name>
      <anchor>ge5b18d205d829115e359b43a81a963b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUF_DYNAMIC</name>
      <anchor>gge5b18d205d829115e359b43a81a963b49b03161135422ec511917cf00a5daefb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUF_STATIC</name>
      <anchor>gge5b18d205d829115e359b43a81a963b466d406023eaf1687599a0f32879758e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_BUF_STREAM</name>
      <anchor>gge5b18d205d829115e359b43a81a963b47441bff129697a80f150365aac7e1aba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csVertexAttrib</name>
      <anchor>g3daee560553f3d8fa3894b31cdde006e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_UNUSED</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e026fc3aa470e1e44ba930606ab8b3863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_INVALID</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eb1b455ce0b20c060873059d1887542b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_POSITION</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eab619a477422498b90846f39990e195f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_WEIGHT</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e1ead0cdcb9c3be87bd202c4fe4432f0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_NORMAL</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ef67f740afa9ebaadd60f64de2f085bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_COLOR</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e0ff9ca117d29e284477caad786f3f853</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_PRIMARY_COLOR</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e5a6485e98c14a4bf228699e74e7a48b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_SECONDARY_COLOR</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e958512dff8ec2755b7d237a1ade41cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_FOGCOORD</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e1e369f7d01ce96085fb0edf9d01a82a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e7e4568e58dba4297cf9a3b821a58f629</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD0</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e0d0f41cbd64b186995780ad9e3ed47d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD1</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eef6b4ebfb4995018e69ec67a76a6bb4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD2</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e10fcf346863dfcfe6dbc6a660dd19543</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD3</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e01f3d12e1d39880330c58b0f842ff8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD4</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e370b8c1678a53011c2436668acdd5fe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD5</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e6abe7aff3889a168eb52a8baf718d76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD6</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e760327dc8cce5560113aae0db0c4921e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_TEXCOORD7</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e7552f3c9b1c946238118354e1e9bf3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_0</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ea9bf86e14cb193f29fb5052f419066d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_1</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e168a67b5a657b5df0bb346ba35ee972e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_2</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e7bb4528724921e6482bce7c38e5956b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_3</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e2a9989bc0d1aa920a7f32e7b633ebd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_4</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ec69d8c525e5b229efb3ee07a350ad44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_5</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e3987e42dea1cc0b527e4e97897f4c0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_6</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e812ecc39e5c698565ebc2c3c523087e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_7</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e8185f2e8c5862324360790c0be8ab753</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_8</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ecf05f5abcbaa8cb742d93dca1c3f25f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_9</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ebd611a3a7aefef1a6e8dfe409d88e89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_10</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eca055527ef42fd3e482c03ae696b1761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_11</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eb676dc64e1d2d336a124bf3e2c194b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_12</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ebd296d6c3ae879230f999cbf8da8b236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_13</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e7848f6e6504120d1a1c4fced6d78e9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_VATTRIB_14</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ec63255a8d7842935e9deda1b5126c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csZBufMode</name>
      <anchor>g79fdaed7abd7a72af33d0f0c5dc99055</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_NONE</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc9905567cd6d13a1e237117f19f7ec2b39d18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_FILL</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc9905563a97a0f7626f1d6bc1a957671cc5db5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_TEST</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc99055c148abe1ca758f0f4371f4b03206477a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_USE</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc99055a3ec275ebf4843e1254ebd30019b2802</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_EQUAL</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc9905598140ae58f6601b4ad323a5a93580808</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_INVERT</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc99055c68b085c072e36facd72b574b334c70f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_MESH</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc990557dbbff2560756ee934aae61ae0124aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_ZBUF_MESH2</name>
      <anchor>gg79fdaed7abd7a72af33d0f0c5dc99055dbcfaa0df9ba70a214fd05d014949564</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_1</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e168a67b5a657b5df0bb346ba35ee972e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_10</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eca055527ef42fd3e482c03ae696b1761</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_11</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006eb676dc64e1d2d336a124bf3e2c194b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_12</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ebd296d6c3ae879230f999cbf8da8b236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_13</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e7848f6e6504120d1a1c4fced6d78e9b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_14</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ec63255a8d7842935e9deda1b5126c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_2</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e7bb4528724921e6482bce7c38e5956b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_3</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e2a9989bc0d1aa920a7f32e7b633ebd49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_4</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ec69d8c525e5b229efb3ee07a350ad44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_5</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e3987e42dea1cc0b527e4e97897f4c0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_6</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e812ecc39e5c698565ebc2c3c523087e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_7</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006e8185f2e8c5862324360790c0be8ab753</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_8</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ecf05f5abcbaa8cb742d93dca1c3f25f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VATTRIB_9</name>
      <anchor>gg3daee560553f3d8fa3894b31cdde006ebd611a3a7aefef1a6e8dfe409d88e89b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRenderBufferComponentSizes</name>
      <anchor>g542a5dba96bc9616b5857070afe19ef0</anchor>
      <arglist>[CS_BUFCOMP_TYPECOUNT]</arglist>
    </member>
    <member kind="function">
      <name>CSTEX_UV</name>
      <anchor>gc685f14aab985eb97009fa72c05decc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSTEX_UV_SHIFT</name>
      <anchor>g2f7ddd62d37aa0a9596a3f54309cafa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSTEX_V1</name>
      <anchor>ga244326f8c12dc28f989cf75b5149256</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSTEX_V2</name>
      <anchor>g297065129d45984ad603df5af98fa9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_FACTORY_STATICSHAPE</name>
      <anchor>gafa51ae5c29128cf4da485320de1921a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MESH_STATICPOS</name>
      <anchor>g64baa869dbf664c57df0a7f18438e3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_MESH_STATICSHAPE</name>
      <anchor>gd6efdeef1cb8c44b5e92fb638cc2983d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLY_COLLDET</name>
      <anchor>ga94c4f64d2258575754e840df308754c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLY_LIGHTING</name>
      <anchor>g785e76fb2bbd8af48c4919d315d1d936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLY_VISCULL</name>
      <anchor>ga443a016d9a4c6e1f6c4d2409cabf58f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLYINDEX_LAST</name>
      <anchor>g0b86ff5b7f9397c3a2308047822da46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLYRANGE</name>
      <anchor>g4fa7d91777e87a686154a08faba7d304</anchor>
      <arglist>(s1, s2)</arglist>
    </member>
    <member kind="function">
      <name>CS_POLYRANGE_ALL</name>
      <anchor>g40261d7889d8046cd9ef1869e1a1fca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLYRANGE_LAST</name>
      <anchor>ge88034c04fb44285f1d003617e2580e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_POLYRANGE_SINGLE</name>
      <anchor>ga615294f72135020101807d8b8631311</anchor>
      <arglist>(idx)</arglist>
    </member>
    <member kind="function">
      <name>CS_SPR_LIGHT_GLOBAL</name>
      <anchor>ge10adda0ee9574f923dcc5c5b7ca27bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SPR_LIGHT_LOCAL</name>
      <anchor>g5e9bf3ea329d88cf37a7d9197ecbba6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SPR_LIGHT_TEMPLATE</name>
      <anchor>ga213c7faeb83698ae3b6032bf1a19495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SPR_LOD_GLOBAL</name>
      <anchor>gf47085be65a8b36443681894ee3db6e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SPR_LOD_LOCAL</name>
      <anchor>gb831b3145c63d04641269c0fe53728e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SPR_LOD_TEMPLATE</name>
      <anchor>gaf271f4553867589d1a87364770179d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_THING_MOVE_NEVER</name>
      <anchor>gc5f2b661887fad9b8c86b4a11e4a451e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_THING_MOVE_OCCASIONAL</name>
      <anchor>g657c1d04bda160221a9b0f06c7637757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_THING_NOCOMPRESS</name>
      <anchor>g8406796c090505e26463aed79c333aeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@71</name>
      <anchor>g83e8bc15645f9d99ab91a152bb3dc8ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleIntegrationMode</name>
      <anchor>gfa45b15d64c07a71e82de2dbb1c0e892</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_INTEGRATE_NONE</name>
      <anchor>ggfa45b15d64c07a71e82de2dbb1c0e89222f0c0a4fce949b238a4f76ae04b9d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_INTEGRATE_LINEAR</name>
      <anchor>ggfa45b15d64c07a71e82de2dbb1c0e89207b6043a05579e739e5cd1053707798f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_INTEGRATE_BOTH</name>
      <anchor>ggfa45b15d64c07a71e82de2dbb1c0e8926fef4aaa03adef745ab9d75a31091334</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleRenderOrientation</name>
      <anchor>gdd37c684519925f0e82a570da3694912</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_CAMERAFACE</name>
      <anchor>ggdd37c684519925f0e82a570da3694912c50d98ee12e8a990ca28d67ac9a979fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_CAMERAFACE_APPROX</name>
      <anchor>ggdd37c684519925f0e82a570da369491261112e0630c10dd3d5c2d252e60c9a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ORIENT_COMMON</name>
      <anchor>ggdd37c684519925f0e82a570da3694912750bb134bcdffeebafe10b32a429eb58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ORIENT_COMMON_APPROX</name>
      <anchor>ggdd37c684519925f0e82a570da3694912847f8c9fd2c0ac69ae19092c20fb982a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ORIENT_VELOCITY</name>
      <anchor>ggdd37c684519925f0e82a570da3694912348efce74687d89c51f08fe7acbf96d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ORIENT_SELF</name>
      <anchor>ggdd37c684519925f0e82a570da36949123f53390d25c732ba4f3c73733930e28a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ORIENT_SELF_FORWARD</name>
      <anchor>ggdd37c684519925f0e82a570da3694912a379b3c0dd330ccccb622567aed00dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleRotationMode</name>
      <anchor>ge09c0831393d0e3ccfc586fef7ea514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ROTATE_NONE</name>
      <anchor>gge09c0831393d0e3ccfc586fef7ea514aa11d7853760505d392e8b4cf7835b649</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ROTATE_TEXCOORD</name>
      <anchor>gge09c0831393d0e3ccfc586fef7ea514aa9f3116f9cd38dc16b3271e2c75f3e85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_ROTATE_VERTICES</name>
      <anchor>gge09c0831393d0e3ccfc586fef7ea514ab561b972ddfd8b3aab9999e2d8d1399c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleSortMode</name>
      <anchor>ge93e1c39097957ad64b31c2d8b8b6f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_SORT_NONE</name>
      <anchor>gge93e1c39097957ad64b31c2d8b8b6f43e4adc7f55ed3dfb7fcdd811135d12521</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_SORT_DISTANCE</name>
      <anchor>gge93e1c39097957ad64b31c2d8b8b6f438178728be3332499eb4a995aeb6b791d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_SORT_DOT</name>
      <anchor>gge93e1c39097957ad64b31c2d8b8b6f43a670ec9563bf890d234ac6de3c38686c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csParticleTransformMode</name>
      <anchor>g78ed97d2d4aec88a977525121f77879a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_LOCAL_MODE</name>
      <anchor>gg78ed97d2d4aec88a977525121f77879a44cac81be5f6ee2480660fa05c7d42dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_LOCAL_EMITTER</name>
      <anchor>gg78ed97d2d4aec88a977525121f77879ad34c9b7bf74d06b980c6a61b280cbbde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_PARTICLE_WORLD_MODE</name>
      <anchor>gg78ed97d2d4aec88a977525121f77879a437cadbef24d3c98038745fd2d2780c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_BOOL</name>
      <anchor>g3abda1a77d6010307bcd4485ec22229f</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_BOOL_CURRENTLAYER</name>
      <anchor>g27531485761258d92e7444174614b606</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_CLIENT_STATE</name>
      <anchor>g34ca79172025cd61b68097dd73f1b466</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_CLIENT_STATE_LAYER</name>
      <anchor>gd2a858696131d6355c8da70ff8e8696f</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_1</name>
      <anchor>gab4b605dfbab39ceca8bcf5d921e56ae</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_1_LAYER</name>
      <anchor>g49b53c4fe0ea019c805de3e75b6c69d6</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_2</name>
      <anchor>g566bfb73599546a863bc71669f641804</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_2_LAYER</name>
      <anchor>g87c72dbc32bd56601ad19cd5115fcbe6</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_3</name>
      <anchor>g21958c0e14ecfe7c0e4a3e86b28bf72b</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_3_LAYER</name>
      <anchor>g194b07bf9b0069232c0b22d1f84d570e</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_4</name>
      <anchor>gfd75d3b0158a31770058588b2f5cf976</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>DECLARE_CACHED_PARAMETER_4_LAYER</name>
      <anchor>g1fc5f85507cb34d53eb0b154e5af5965</anchor>
      <arglist>(func, name, type1, param1,type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>FORCE_STATE_CHANGE</name>
      <anchor>g964f1a4da3f5835091fa679ebe28c4de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLYPH_INDEX_LOWER_COUNT</name>
      <anchor>gcde26a5809ed6f8dde22397552e2b786</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLYPH_INDEX_LOWER_MASK</name>
      <anchor>gad3dab6535c3b4475f55ae381a613644</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GLYPH_INDEX_UPPER_SHIFT</name>
      <anchor>gd8bff11d9fbd4837ebf95d81e3a7ed49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_BOOL</name>
      <anchor>g674592fbbee9a9fa9ec7c2cfde19eaf1</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_BOOL_CURRENTLAYER</name>
      <anchor>g9af753688676f4bd5094fd9bcc181dec</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_CLIENT_STATE</name>
      <anchor>g70392863936750ae3c2d20afc61b552d</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_CLIENT_STATE_LAYER</name>
      <anchor>g3b0c1bbed420c96ef8978171f453faa0</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_1</name>
      <anchor>g72ac2c23ee68ca253e8f81c1b28e31cb</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_1_LAYER</name>
      <anchor>g063486ac11361a925695033de3945701</anchor>
      <arglist>(func, name, type1, param1)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_2</name>
      <anchor>g82f857bc057c94ecfb2ccb74ccfbfa67</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_2_LAYER</name>
      <anchor>gb66861355d66535abe875aa1ffe86136</anchor>
      <arglist>(func, name, type1, param1, type2, param2)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_3</name>
      <anchor>g86f01d3239d3de28a63db5ee11a9220d</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_3_LAYER</name>
      <anchor>gba57b65e84e1a456643488c2a91f2f95</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_4</name>
      <anchor>ga0e27a6f4ab1409f15bfeabcdc7b8f63</anchor>
      <arglist>(func, name, type1, param1, type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>IMPLEMENT_CACHED_PARAMETER_4_LAYER</name>
      <anchor>gd10e37d391eae203fcbc51594a394f42</anchor>
      <arglist>(func, name, type1, param1,type2, param2, type3, param3, type4, param4)</arglist>
    </member>
    <member kind="function">
      <name>RELEVANT_WRITE_FLAGS</name>
      <anchor>g3b6f4f6eec9948663b3507ca45fc71ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>THREADED_LOADING</name>
      <anchor>g2052922789b45ef9cbecb3960ab75416</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_MAX_LAYER</name>
      <anchor>g6835d89c51d75dc83e4c467dc446ec53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SOFT3D_BUFFERFLAG</name>
      <anchor>ge1a5f36df6a6e5a678ff1f73c28891a3</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_SOFT3D_VA_BUFINDEX</name>
      <anchor>gea881519dfb83d6df09f77d8d7cf8ed6</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>csLoaderDataType</name>
      <anchor>g54322e5b0a32278ba666a82a86e4ab45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dtInvalid</name>
      <anchor>gg54322e5b0a32278ba666a82a86e4ab45db147c7dceffdb114a1b19d3ec52f2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dtR8G8B8</name>
      <anchor>gg54322e5b0a32278ba666a82a86e4ab4590e263d82f16830745a91146e07d8756</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dtRGBpixel</name>
      <anchor>gg54322e5b0a32278ba666a82a86e4ab4574b950e602017f13876c2401ed9db219</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dtIndexed</name>
      <anchor>gg54322e5b0a32278ba666a82a86e4ab456c805b8feb86fd203606832b22272f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>makeGLMatrix</name>
      <anchor>g4ebb32ed3cb54c814923e4b6c1fa9e58</anchor>
      <arglist>(const csMatrix3 &amp;m, float matrix[16], bool rowMajor=false)</arglist>
    </member>
    <member kind="function">
      <name>makeGLMatrix</name>
      <anchor>g092bd65b19184dfa3a3d4d72223ea9e1</anchor>
      <arglist>(const csReversibleTransform &amp;t, float matrix[16], bool rowMajor=false)</arglist>
    </member>
    <member kind="function">
      <name>SplitAlpha</name>
      <anchor>g40ff3488d7cc871d2646a3039cab5929</anchor>
      <arglist>(const int color, Tpixel &amp;colorPart, uint8 &amp;alphaPart)</arglist>
    </member>
    <member kind="function">
      <name>ScanCodeToChar</name>
      <anchor>g7d8b25fff5ba32219ec954205a4acf10</anchor>
      <arglist>[128]</arglist>
    </member>
    <member kind="function">
      <name>CS_TYPENAME</name>
      <anchor>gb3fb7f6a541c017fbcd04fcbf75288ae</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>SCF_CREATE_INSTANCE</name>
      <anchor>g5b0b8a41841a8901731fdd009b8727eb</anchor>
      <arglist>(ClassID, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IN_IMPLEMENTATION_H</name>
      <anchor>g32823b8dc2fa987f1e945fa97b793875</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_INIT_TRACKER_ALIASES</name>
      <anchor>g7da6359c3ea79d8ab254f78d0b29af71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_QUERY_INTERFACE</name>
      <anchor>g4866d026c88c980b43d36906766c5db6</anchor>
      <arglist>(Object, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_QUERY_INTERFACE_SAFE</name>
      <anchor>gac32ddfef9f398f67f794f52f2700f22</anchor>
      <arglist>(Object, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_STATIC_CLASS_CONTEXT</name>
      <anchor>gc00c0ec6f04407808f2f346093b0371e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_LOAD_PLUGIN</name>
      <anchor>gcdb1b8ee47910e5b7ea462c354d4ac98</anchor>
      <arglist>(Object, ClassID, Interface)</arglist>
    </member>
    <member kind="function">
      <name>CS_LOAD_PLUGIN_ALWAYS</name>
      <anchor>g1de42472494732840be02de385f7999a</anchor>
      <arglist>(Object, ClassID)</arglist>
    </member>
    <member kind="function">
      <name>CS_QUERY_PLUGIN_CLASS</name>
      <anchor>g453f1f8878aafb523944c206beb05873</anchor>
      <arglist>(Object, ClassID, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_CONSTRUCT_EMBEDDED_IBASE</name>
      <anchor>g8b371049a76e7d2c8a2fab1cb1f189eb</anchor>
      <arglist>(Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_CONSTRUCT_IBASE</name>
      <anchor>g1a458452568fb70762717a993d85bb38</anchor>
      <arglist>(Parent)</arglist>
    </member>
    <member kind="function">
      <name>SCF_CONSTRUCT_VERSION</name>
      <anchor>g5bdabeb185cb2a676ce5e223aab4ecd2</anchor>
      <arglist>(Major, Minor, Micro)</arglist>
    </member>
    <member kind="function">
      <name>SCF_DECLARE_EMBEDDED_IBASE</name>
      <anchor>g1c5273660c64350850cb55a4a04f7aae</anchor>
      <arglist>(OuterClass)</arglist>
    </member>
    <member kind="function">
      <name>SCF_DECLARE_IBASE</name>
      <anchor>g3a58a1f2306d454390e234d6361ddffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_DECLARE_IBASE_EXT</name>
      <anchor>g28edb7c87e3f5e9558539e156dee8259</anchor>
      <arglist>(ParentClass)</arglist>
    </member>
    <member kind="function">
      <name>SCF_DEFINE_FACTORY_FUNC_REGISTRATION</name>
      <anchor>g2c6ba99ad6c27369aaf352a41a012223</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_DESTRUCT_EMBEDDED_IBASE</name>
      <anchor>gf43af0ec1c503ba57f60766aa3c88e5c</anchor>
      <arglist>(Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_DESTRUCT_IBASE</name>
      <anchor>g877921891b0406c28d11a7e378be36f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE</name>
      <anchor>gd8ce85493f112b4cb7608dccddcbfab9</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_DECREF</name>
      <anchor>gbd1ed82014e91ff4e6b0f3d86716e256</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_END</name>
      <anchor>ga3cc3f0a892c0f3296fa15b8e297d92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_GETREFCOUNT</name>
      <anchor>g80f42c8c1fafd205917d3b3b7b831ec6</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_INCREF</name>
      <anchor>gc94d6b350ecfcac7ed08aaaadf04fb56</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_QUERY</name>
      <anchor>g8dd36ea504eab347795fa91c98225269</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_QUERY_END</name>
      <anchor>g636b87ffdf233dfb1241c5cb690dd18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_EMBEDDED_IBASE_REFOWNER</name>
      <anchor>ge4a9107b28eabdd14ce0172fe1820781</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_FACTORY</name>
      <anchor>g373349b6fc91662b31ffaf102ef908c2</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_FACTORY_CREATE</name>
      <anchor>g2ff16a54724c1f00d7985bd971453418</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_FACTORY_FINIS</name>
      <anchor>gb0ba5d1d55dc991a49fb67cbfb24166b</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_FACTORY_INIT</name>
      <anchor>gb2d4f983b73223294969161c65872274</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE</name>
      <anchor>gbcda0c42b7c3a7b12ecdb407bb0ba3d8</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_DECREF</name>
      <anchor>g176199e7058f9f662e4ad178e3e2c9a9</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_END</name>
      <anchor>g17899d525bbb5d9bdba293c5f028eb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT</name>
      <anchor>g15417d8a30b7f466a2eb186889aab0a1</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_DECREF</name>
      <anchor>g7c67d5dd0c42e9014b94135ae2ab58e7</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_END</name>
      <anchor>gb35b13fd96454cd6ff8b70d05be20010</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_GETREFCOUNT</name>
      <anchor>g2370479942b59428b84236b1e6bad32f</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_INCREF</name>
      <anchor>g8439bf789cd1e09faae47d3c591f6910</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_QUERY</name>
      <anchor>g34c31f88ff4057701027fe3e2520b3fd</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_QUERY_END</name>
      <anchor>g70f51e8bc495a9f00382f5be26ffac6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_EXT_REFOWNER</name>
      <anchor>gc364123d75a3bfd0efd48db3ae5cee77</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_GETREFCOUNT</name>
      <anchor>g9e7383896428a0a12c4e4a46362b4e9e</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_INCREF</name>
      <anchor>g8a1213fd6984424826788aaee0a3b398</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_QUERY</name>
      <anchor>gce4cdb30da337f6913d4509343077557</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_QUERY_END</name>
      <anchor>g87b3a81a37585388f074c48328ab8738</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_REFOWNER</name>
      <anchor>ga14ac21f00cf6a9b7ef2f5743a81f2cf</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENT_IBASE_REMOVE_REF_OWNERS</name>
      <anchor>gf6af2f711113e622becbcb69cbdd1fbb</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENTS_EMBEDDED_INTERFACE</name>
      <anchor>g6d31bde1cff22be19c402a540410c6de</anchor>
      <arglist>(Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENTS_INTERFACE</name>
      <anchor>g4933dd6e0823013c37b62e6b99550cd5</anchor>
      <arglist>(Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IMPLEMENTS_INTERFACE_COMMON</name>
      <anchor>gb71260911e51a3c0885241d009fb55f8</anchor>
      <arglist>(Interface, Object)</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>g711056cbf220f268640935926c404ba5</anchor>
      <arglist>(Name, Major, Minor, Micro)</arglist>
    </member>
    <member kind="function">
      <name>SCF_PRINT_CALL_ADDRESS</name>
      <anchor>g08f654e1f5dad17bf5c067fd599fd4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_REGISTER_FACTORY_FUNC</name>
      <anchor>g2ff469be5c227919eb41b976f42dd737</anchor>
      <arglist>(Class)</arglist>
    </member>
    <member kind="function">
      <name>SCF_REGISTER_STATIC_CLASS</name>
      <anchor>g5c0e60d325c4df9731159efbcb607f28</anchor>
      <arglist>(Class, Ident, Desc, Dep)</arglist>
    </member>
    <member kind="function">
      <name>SCF_REGISTER_STATIC_LIBRARY</name>
      <anchor>gaf414ebd09d2ece8f0adfbc065aecc8d</anchor>
      <arglist>(Module, MetaInfo)</arglist>
    </member>
    <member kind="function">
      <name>SCF_TRACE</name>
      <anchor>ga06c1028fa2d312a312a06636efa56a0</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>SCF_USE_STATIC_PLUGIN</name>
      <anchor>g4e44cfe80f9a64fdac1e5b29049291ce</anchor>
      <arglist>(Module)</arglist>
    </member>
    <member kind="function">
      <name>SCF_VERSION</name>
      <anchor>g654bebfc58b1e4e2c9ef9c6334139c73</anchor>
      <arglist>(Name, Major, Minor, Micro)</arglist>
    </member>
    <member kind="function">
      <name>scfFactoryFunc</name>
      <anchor>g3eaf92a892d397c3ad8d35fa0f58b1ba</anchor>
      <arglist>(iBase *)</arglist>
    </member>
    <member kind="function">
      <name>scfInterfaceID</name>
      <anchor>ge3095ac94f71a5ff42374271c90222cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>scfInterfaceVersion</name>
      <anchor>ga7cc38364be77246ba6f80b3c98b8c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@56</name>
      <anchor>gc9420823bfeba78fce625fc105e3b01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CF_VERBOSE_NONE</name>
      <anchor>ggc9420823bfeba78fce625fc105e3b01d103bd7d223adbf6f6320c245ac38d6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CF_VERBOSE_PLUGIN_SCAN</name>
      <anchor>ggc9420823bfeba78fce625fc105e3b01d1618478cd455be73b5425af2658c054f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CF_VERBOSE_PLUGIN_LOAD</name>
      <anchor>ggc9420823bfeba78fce625fc105e3b01df68a22da73642042e6355dcffdef8a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CF_VERBOSE_PLUGIN_REGISTER</name>
      <anchor>ggc9420823bfeba78fce625fc105e3b01deb61d605202afa31732b04143d022e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CF_VERBOSE_CLASS_REGISTER</name>
      <anchor>ggc9420823bfeba78fce625fc105e3b01d1adcd0e4d15d2bec680094f5154aa4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CF_VERBOSE_ALL</name>
      <anchor>ggc9420823bfeba78fce625fc105e3b01d5b39fff166e4e12caed2e5cb5ff67ea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csLoadPlugin</name>
      <anchor>gf4a34e36cd27e680cfcf002cca9729c7</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *ClassID)</arglist>
    </member>
    <member kind="function">
      <name>csLoadPlugin</name>
      <anchor>gb779ffb37d64ca82d74d416d188d0707</anchor>
      <arglist>(iPluginManager *mgr, const char *ClassID)</arglist>
    </member>
    <member kind="function">
      <name>csLoadPluginAlways</name>
      <anchor>g080cc89b6f142d13e81bd3b1e5da3cae</anchor>
      <arglist>(iPluginManager *mgr, const char *ClassID)</arglist>
    </member>
    <member kind="function">
      <name>csLoadPluginCheck</name>
      <anchor>g94cc7866d797878559c05cabf702e3fb</anchor>
      <arglist>(iObjectRegistry *object_reg, const char *ClassID, bool report=true)</arglist>
    </member>
    <member kind="function">
      <name>csLoadPluginCheck</name>
      <anchor>g44411dc666c117c9eb38e7c43140a3a0</anchor>
      <arglist>(iPluginManager *mgr, const char *ClassID)</arglist>
    </member>
    <member kind="function">
      <name>csQueryPluginClass</name>
      <anchor>g4c6e52d0906212c2ca5b49fb507afb05</anchor>
      <arglist>(iPluginManager *mgr, const char *ClassID)</arglist>
    </member>
    <member kind="function">
      <name>csQueryRegistryOrLoad</name>
      <anchor>g4c52fd4507c44be72dcff8fa1ec8d307</anchor>
      <arglist>(iObjectRegistry *Reg, const char *classID, bool report=true)</arglist>
    </member>
    <member kind="function">
      <name>scfCompatibleVersion</name>
      <anchor>gb72a7c621912c032409c2147c65a5598</anchor>
      <arglist>(scfInterfaceVersion iVersion, scfInterfaceVersion iItfVersion)</arglist>
    </member>
    <member kind="function">
      <name>scfCreateInstance</name>
      <anchor>ge034563962e9f68c4310476b40f45884</anchor>
      <arglist>(char const *const ClassID)</arglist>
    </member>
    <member kind="function">
      <name>scfInitialize</name>
      <anchor>gedb60456c96a18d8b92fd0a2f896747c</anchor>
      <arglist>(int argc, const char *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>scfInitialize</name>
      <anchor>ge2da054d4d141e63e22aac6a78e7211a</anchor>
      <arglist>(csPathsList const *pluginPaths, unsigned int verbose=SCF_VERBOSE_NONE)</arglist>
    </member>
    <member kind="function">
      <name>scfQueryInterface</name>
      <anchor>g2e8cf383ca5045f2b0c05374ff0107c3</anchor>
      <arglist>(ClassPtr object)</arglist>
    </member>
    <member kind="function">
      <name>scfQueryInterfaceSafe</name>
      <anchor>g00cb2faae8bcba56ca1f5cd3a887aa14</anchor>
      <arglist>(ClassPtr object)</arglist>
    </member>
    <member kind="function">
      <name>scfRegisterStaticClass</name>
      <anchor>g229540542f2e13fbda9702b00fe5d04a</anchor>
      <arglist>(scfFactoryFunc, const char *iClassID, const char *Description, const char *Dependencies=0)</arglist>
    </member>
    <member kind="function">
      <name>scfRegisterStaticClasses</name>
      <anchor>g0ad0a0030e5910037392ab6e4984f8ff</anchor>
      <arglist>(char const *xml)</arglist>
    </member>
    <member kind="function">
      <name>scfRegisterStaticFactoryFunc</name>
      <anchor>gdf22686621a246ba1de548575f3fc029</anchor>
      <arglist>(scfFactoryFunc, const char *FactClass)</arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_DATA_UNKNOWN_SIZE</name>
      <anchor>gf71c4fd6249d7b489d926a61beed9cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_DISTANCE_INFINITE</name>
      <anchor>g166882a13c2046e4baf3633479d7c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_DISTANCE_INFINITE</name>
      <anchor>g166882a13c2046e4baf3633479d7c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_PLAYING</name>
      <anchor>g752cd34a8060cbf8e156bb6733470a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_STOPPED</name>
      <anchor>gca656338c994f44004a2133324d0442a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_DONTLOOP</name>
      <anchor>g3ec72a39bc01c6674b3d10bcf4ab2cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_LOOP</name>
      <anchor>g600ef21e35b75759590e6b5da1a29e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_PAUSED</name>
      <anchor>g87fd29283c05296e9848f2a0ab15bf98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_UNPAUSED</name>
      <anchor>g73fbf8bc2594975618d454114ead7dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSSNDSYS_SAMPLE_BIG_ENDIAN</name>
      <anchor>g815726dc75e493d0e6fa549f61fb1c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSSNDSYS_SAMPLE_ENDIAN_MASK</name>
      <anchor>ga6c7477df4000fbdbc3babaae7c1d7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSSNDSYS_SAMPLE_LITTLE_ENDIAN</name>
      <anchor>g6b792e4e1ef7251e5ed55efeedae435b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSoundSample</name>
      <anchor>gc8eb30abac5547e09b41e96e87100ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_UNKNOWN_LENGTH</name>
      <anchor>gea9e554208f88a0736a09e6854d808da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@73</name>
      <anchor>ga618c4d8c29ef4efe6f10c741fb1f47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SND3D_DISABLE</name>
      <anchor>gga618c4d8c29ef4efe6f10c741fb1f47a4401fef783851d77029e6a74e4d6faee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SND3D_RELATIVE</name>
      <anchor>gga618c4d8c29ef4efe6f10c741fb1f47a21804053f393ecd9b1ad79d9132179a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SND3D_ABSOLUTE</name>
      <anchor>gga618c4d8c29ef4efe6f10c741fb1f47ab9f7a0ab979ba1e2456205bb8087f65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSysFilterLocation</name>
      <anchor>g02040177da92d61fbeac3125aef7ddcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_INTPTR_T_DEFINED</name>
      <anchor>g3ce96ec9d1fcd8dfccadb47145718f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_PTRDIFF_T_DEFINED</name>
      <anchor>g54bd20b818e5c78e53e6e56acf5fe946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_UINTPTR_T_DEFINED</name>
      <anchor>g106239fcf6108905a1beb6837f7343c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WCHAR_T_DEFINED</name>
      <anchor>gdf17d03cf50828d37c13b2eef1f8efd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WCTYPE_T_DEFINED</name>
      <anchor>gde04325ad47236b5625376dc4afe00e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>_WINT_T</name>
      <anchor>g551670863eb3c1db08e4b28b7fc30cc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WCHAR_T_SIZE</name>
      <anchor>gbce5c52bd8d62397d8050ea135e7ef73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wchar_t</name>
      <anchor>g43124e776b499fd41c598b2f6d210242</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wint_t</name>
      <anchor>gfd307bf4f6f216075c93f524a7d4c739</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csLibraryHandle</name>
      <anchor>ga025e6332743710b40f0fdbe0c90e80e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csExpandPath</name>
      <anchor>g28a74023caee3364f9a5595b0b2da4e9</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <name>csFindSystemRoots</name>
      <anchor>g4cd5c27ae8eaeb5aa2248278e8f08412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGetAppDir</name>
      <anchor>g54de2486e8bda87b5950a8243b774bb0</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>csGetAppPath</name>
      <anchor>g9f7acd23fb780e1f486156037123e119</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>csGetResourceDir</name>
      <anchor>gfcc8478ac659f3ad6cd3202357f645a3</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>CS_UC_MAX_WCHAR_T_ENCODED</name>
      <anchor>gd35001a319ee965133bc2ddcda05ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csQroundSure</name>
      <anchor>g20ad6ed7b2fc5754d8696f8d4eeebb90</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CONST_INT64</name>
      <anchor>g2d97fd45fc37ec694b840a2c38f22188</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CONST_UINT64</name>
      <anchor>gaa7f143e27bbb68e56567f228e102f53</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_BITMASKTOSTR_MASK_TABLE_BEGIN</name>
      <anchor>gcbf3ef54a14f50ee7059ec06d6722414</anchor>
      <arglist>(tableName)</arglist>
    </member>
    <member kind="function">
      <name>CS_BITMASKTOSTR_MASK_TABLE_DEFINE</name>
      <anchor>ga0af915aa23efc9def481a19a2d0c086</anchor>
      <arglist>(def)</arglist>
    </member>
    <member kind="function">
      <name>CS_BITMASKTOSTR_MASK_TABLE_END</name>
      <anchor>g8ee2d0d0fa1b357776dba072dec42f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CHANGEABLE_NEVER</name>
      <anchor>gae8a3014baff809714bc2bc26813c0d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CHANGEABLE_NEWROOT</name>
      <anchor>g4ad560ac8bbb66e1ec9d071773a3de08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_CHANGEABLE_YES</name>
      <anchor>g8a23a87f097d54b2fd65377bfcbe4357</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DBGHELP_BENCHMARK</name>
      <anchor>gb947e222fa11aa06a0939357a6afa288</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DBGHELP_GFXDUMP</name>
      <anchor>ga37681913a5cf1a42c4d0fcda4854907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DBGHELP_STATETEST</name>
      <anchor>g1b51643f1313d00e27898aa64c57b9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DBGHELP_TXTDUMP</name>
      <anchor>g8d1ef1bb1e14f29cfeea992cbcdbc476</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_DBGHELP_UNITTEST</name>
      <anchor>gca559d327ade26b0b01a4b81971425da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GET_CHILD_OBJECT</name>
      <anchor>g885afb1c7f016eb0766e70faff8eacf3</anchor>
      <arglist>(object, Interface)</arglist>
    </member>
    <member kind="function">
      <name>CS_GET_FIRST_NAMED_CHILD_OBJECT</name>
      <anchor>gd674b1594ed79febb9a9617763f9701b</anchor>
      <arglist>(object, Interface, name)</arglist>
    </member>
    <member kind="function">
      <name>CS_GET_NAMED_CHILD_OBJECT</name>
      <anchor>g4fe348e850a5569c13651c6b35883bd9</anchor>
      <arglist>(object, Interface, name)</arglist>
    </member>
    <member kind="function">
      <name>CS_INIT_TOKEN_TABLE_NAME</name>
      <anchor>g997d7681d14447f53b90d413ddd24763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_INIT_TOKEN_TABLE_NAME_DEFAULT</name>
      <anchor>gde6cf86db0aca82244ca4a269ff4f34e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REPORTER_SEVERITY_BUG</name>
      <anchor>gdb0a6883d55ac2873aef939bf424dad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REPORTER_SEVERITY_DEBUG</name>
      <anchor>g0ab05b34fd0c9290cd510dc54813f285</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REPORTER_SEVERITY_ERROR</name>
      <anchor>g7142097efdeefb5e81c449a58a31ed5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REPORTER_SEVERITY_NOTIFY</name>
      <anchor>g68c1fcf8a1856750f3934a36b43b1c32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_REPORTER_SEVERITY_WARNING</name>
      <anchor>g971723053e6ec0e10a215b4a79d6236c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_PASTE</name>
      <anchor>g7e911f2c2d1e7ab00c006b89946849f7</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_PASTE1</name>
      <anchor>g6a9d9631d2d1ef3c41cf390eee7f48c7</anchor>
      <arglist>(X, Y)</arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN</name>
      <anchor>g340f3d6933db2951eaf1eebe704a81c8</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN</name>
      <anchor>g340f3d6933db2951eaf1eebe704a81c8</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN_FINAL</name>
      <anchor>g0f9fa2abfaa7c80c98fa47a4694f93d0</anchor>
      <arglist>(X)</arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN_LAST</name>
      <anchor>g766e6c4bb4775a5ed1eb2cce10a3a968</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN_LAST_DEFAULT</name>
      <anchor>gde9f10d4f1887ff30f41f7d5f93d750a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN_PREFIX</name>
      <anchor>g0f2ffdc7e3f54d850a1bed0e78235d62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN_PREFIX_DEFAULT</name>
      <anchor>gaecc28f8e85d5e6865a691f862409d24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_BOM</name>
      <anchor>g798426465e5f6990fab5a9db764668b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_CHAR_HIGH_SURROGATE_FIRST</name>
      <anchor>g7a22f5b867ae1a13638739a242ccd588</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_CHAR_HIGH_SURROGATE_LAST</name>
      <anchor>ge3e2a4d60f4893dfd1293f3439bc234b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_CHAR_LOW_SURROGATE_FIRST</name>
      <anchor>g37ddcd2eb58d721be6531cc04691eafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_CHAR_LOW_SURROGATE_LAST</name>
      <anchor>g6a8bcc7859ba164607d0623e6075038f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_CHAR_REPLACER</name>
      <anchor>gf3c9a65d5c394bfd305e620ef99351bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_INVALID</name>
      <anchor>gbe176209ca326b10e4474bcbae2f55da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_IS_HIGH_SURROGATE</name>
      <anchor>gc8cdcb503070d89ec9b289a26925743e</anchor>
      <arglist>(C)</arglist>
    </member>
    <member kind="function">
      <name>CS_UC_IS_LOW_SURROGATE</name>
      <anchor>gd381d5d932e71207fc276acbfaa972f5</anchor>
      <arglist>(C)</arglist>
    </member>
    <member kind="function">
      <name>CS_UC_IS_NONCHARACTER</name>
      <anchor>gaa6e26882081c80c2723dec47e5afdb3</anchor>
      <arglist>(C)</arglist>
    </member>
    <member kind="function">
      <name>CS_UC_IS_SURROGATE</name>
      <anchor>g506d88b895df510ebcffba6d5acab4ac</anchor>
      <arglist>(C)</arglist>
    </member>
    <member kind="function">
      <name>CS_UC_LAST_CHAR</name>
      <anchor>g5e76da15993612b523f18deee6e40186</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_MAX_MAPPED</name>
      <anchor>gc628cf133962dc01ae5085ab25031834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_MAX_UTF16_ENCODED</name>
      <anchor>g054b00c409694434d6f9623a8ecd8326</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_MAX_UTF32_ENCODED</name>
      <anchor>gabfc86cd4c0627a3a08cbb7eb97575de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_UC_MAX_UTF8_ENCODED</name>
      <anchor>g2284bf3a9015a6efbdbc213a33ec1333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csReport</name>
      <anchor>ge15d6dabcdc88364d5424f41161b05d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csReportV</name>
      <anchor>gacfec457201d7df7e2ee2bf1e99e0a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csStringID</name>
      <anchor>gbe4f44c93bfeee85c507a999dccf21dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTicks</name>
      <anchor>g28e82998c4c2d1197a1d412bba7da793</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int16</name>
      <anchor>g4355d16fcf9f644c9ac84293f0b1801f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int32</name>
      <anchor>g56f1a81c92849566ae864511088eb7e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int64</name>
      <anchor>gecfc3c54bd29ad5964e1c1c3ccbf89df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>int8</name>
      <anchor>ge47c588f3ab8c61121c1c7ab7edc47cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>intmax_t</name>
      <anchor>gdf15ccab34376d145000ad55d01099a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>intptr_t</name>
      <anchor>g0fbe4a4f8dd857ee04923a901f27465f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>longlong</name>
      <anchor>g574e57efdc7bcebd6e3b5e043fdeb28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ptrdiff_t</name>
      <anchor>gfbe679a40a36da5983ebc5b39754c065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint</name>
      <anchor>g91ad9478d81a7aaf2593e8d9c3d06a14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint16</name>
      <anchor>g05f6b0ae8f6a6e135b0e290c25fe0e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint32</name>
      <anchor>g1134b580f8da4de94ca6b1de4d37975e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint64</name>
      <anchor>g058a7c8f752204f23318dc1dcab45b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uint8</name>
      <anchor>gdde6aaee8457bee49c2a92621fe22b79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uintmax_t</name>
      <anchor>ged66caaa0c923c24a5c3d3117ff8492d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uintptr_t</name>
      <anchor>g728e973c799f206f0151c8a3bd1e5699</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ulonglong</name>
      <anchor>g8c42bcc74c4498c45586ad15fab3b829</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utf16_char</name>
      <anchor>g02506e0f0963f4590ed154373a24f43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utf32_char</name>
      <anchor>g47e911f87ff568b2779f26cf226f5070</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>utf8_char</name>
      <anchor>g60f3213e4468d7d223f3a27ad792ad38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@38</name>
      <anchor>g77867ab4129f63159b37bca3b652a798</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@50</name>
      <anchor>gfb730582952b7ceec73d7dc9bf7bef39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sUcMapSimple</name>
      <anchor>ggfb730582952b7ceec73d7dc9bf7bef39502727b715dbfce568251bcf397ca4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csDocumentNodeType</name>
      <anchor>gb42cea72c57ecad9c3d599a08bce4475</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_NODE_DOCUMENT</name>
      <anchor>ggb42cea72c57ecad9c3d599a08bce447587aa64598ca24086ef7aa248c3b2a022</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_NODE_ELEMENT</name>
      <anchor>ggb42cea72c57ecad9c3d599a08bce4475212c9193091765b634952bebe349b2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_NODE_COMMENT</name>
      <anchor>ggb42cea72c57ecad9c3d599a08bce44752de9af618a539fff83a7a818685ee33a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_NODE_UNKNOWN</name>
      <anchor>ggb42cea72c57ecad9c3d599a08bce44752173bc6ac8c0671e1191583e896a0176</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_NODE_TEXT</name>
      <anchor>ggb42cea72c57ecad9c3d599a08bce4475acda242ee76ec9e6e6181ddbb6b57223</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_NODE_DECLARATION</name>
      <anchor>ggb42cea72c57ecad9c3d599a08bce4475500867fdafb6f33dbe60701f8336ce2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csVariantType</name>
      <anchor>g91624a433f78618fba6823a5d79bdb52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SVAR_LONG</name>
      <anchor>gg91624a433f78618fba6823a5d79bdb522214fd7cbaeede53271fb01107889556</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SVAR_BOOL</name>
      <anchor>gg91624a433f78618fba6823a5d79bdb52f17bc3eb7bd1d4e1fc0613efbfa10517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SVAR_CMD</name>
      <anchor>gg91624a433f78618fba6823a5d79bdb52d54f393a047982f3d1cf4d1d619d17a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SVAR_FLOAT</name>
      <anchor>gg91624a433f78618fba6823a5d79bdb52889201a771dfd2a1496b23e69a94c18f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SVAR_STRING</name>
      <anchor>gg91624a433f78618fba6823a5d79bdb528ac63ce74118d6c3336dacf0e766cdb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cs_asprintf</name>
      <anchor>g2d6c708d2eea7c786ef7202fc229781a</anchor>
      <arglist>(char **, const char *,...)</arglist>
    </member>
    <member kind="function">
      <name>CS_INIT_TOKEN_TABLE_NAME</name>
      <anchor>gefa1013fce216adfcd909ad4d32e8a29</anchor>
      <arglist>(csStringHash &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>cs_snprintf</name>
      <anchor>gb1da56117bc82aa18efd07d4de43cb17</anchor>
      <arglist>(char *buf, size_t bufSize, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <name>cs_vasprintf</name>
      <anchor>ga924cc770fb62fec76678526da0316b3</anchor>
      <arglist>(char **, const char *, va_list)</arglist>
    </member>
    <member kind="function">
      <name>cs_vsnprintf</name>
      <anchor>gddf1aa5871d44c7b5ec4bd5858663dbf</anchor>
      <arglist>(char *, size_t, const char *, va_list)</arglist>
    </member>
    <member kind="function">
      <name>csBigEndianFloat</name>
      <anchor>gf680d7444590a6ea2623798037305552</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>csBigEndianLong</name>
      <anchor>gb270767a025badfcf32261aacc73e2d8</anchor>
      <arglist>(uint32 l)</arglist>
    </member>
    <member kind="function">
      <name>csBigEndianLongLong</name>
      <anchor>gade6c961034bbe3f85be420f7da0d9ff</anchor>
      <arglist>(uint64 l)</arglist>
    </member>
    <member kind="function">
      <name>csBigEndianShort</name>
      <anchor>gd5102f4d2e57bbc3413662f667a5a4a2</anchor>
      <arglist>(uint16 s)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>g2b2bda7133089eebc2a7b30d533233e6</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>g52170489b35fe7e3da1b6c9f76732b9b</anchor>
      <arglist>(uint16 s)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>g121c970b18c9dd804c45e301800d96b3</anchor>
      <arglist>(int16 s)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>gc214d76ed1ea89da67a93fa5a86a520b</anchor>
      <arglist>(int32 l)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>g842b455edb2ca23375a8ba1153831321</anchor>
      <arglist>(uint32 l)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>gddf613c81478e01633d18e76ff8c7cd5</anchor>
      <arglist>(int64 l)</arglist>
    </member>
    <member kind="function">
      <name>csConvertEndian</name>
      <anchor>g81852865713c690884f9977164342a88</anchor>
      <arglist>(uint64 l)</arglist>
    </member>
    <member kind="function">
      <name>csDefaultRunLoop</name>
      <anchor>g290c1c10f33ff2286589240d721a6052</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>csDoubleToLongLong</name>
      <anchor>gc75c4514d8024792608a175e77e66470</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <name>csExpandName</name>
      <anchor>ga437c89b1107aa2ead839931b5f72ddd</anchor>
      <arglist>(const char *iName)</arglist>
    </member>
    <member kind="function">
      <name>csFindNearestPowerOf2</name>
      <anchor>gd8b0571c6a3a7aa454834e2e86c8b698</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>csFindReplace</name>
      <anchor>g9ce902a7ac8b206d5f2b9d7bae0c0d83</anchor>
      <arglist>(char *dest, const char *src, const char *search, const char *replace, int max)</arglist>
    </member>
    <member kind="function">
      <name>csFloatToLong</name>
      <anchor>g96baed464a5b3a7116ce97fcd2526966</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>csFloatToShort</name>
      <anchor>g3a5f5b5a5c1588012069c8f7c4bef51e</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>csFPrintf</name>
      <anchor>g804599d04ec7382182a08932ca871fca</anchor>
      <arglist>(FILE *file, const char *str,...)</arglist>
    </member>
    <member kind="function">
      <name>csFPrintfV</name>
      <anchor>g95818e6cc643379eef923cee9256afe4</anchor>
      <arglist>(FILE *file, const char *str, va_list arg)</arglist>
    </member>
    <member kind="function">
      <name>csGetConfigPath</name>
      <anchor>gb1a9d1c01edfc771474edbac5844f6dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGetLibrarySymbol</name>
      <anchor>gad261ec36b67643afd7ddb4fb62e81cf</anchor>
      <arglist>(csLibraryHandle Handle, char const *iName)</arglist>
    </member>
    <member kind="function">
      <name>csGetLittleEndianFloat16</name>
      <anchor>gdc7bae97cfb0d6582c06bf7de35242cc</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>csGetLittleEndianFloat32</name>
      <anchor>g353e31a6aa44a9828c712c4145cbb9f2</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>csGetLittleEndianLong</name>
      <anchor>g14da0e52f23274e8dcb3f61677426deb</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>csGetLittleEndianShort</name>
      <anchor>g139eff1ec32072cd3c1df7d1e9e948eb</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>csGetLoadLibraryVerbose</name>
      <anchor>g9315ee9a0550b6ed16d66316d053b578</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGetMicroTicks</name>
      <anchor>gdbdc1c0f010b84953b0e22b836c2a147</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGetPlatformConfig</name>
      <anchor>g846dc7396074c6bdb9724cf76771e0c9</anchor>
      <arglist>(const char *key)</arglist>
    </member>
    <member kind="function">
      <name>csGetPlatformConfigPath</name>
      <anchor>g77d6d2d5fddf84db1cb372001def22f7</anchor>
      <arglist>(const char *key, bool local=false)</arglist>
    </member>
    <member kind="function">
      <name>csGetPluginMetadata</name>
      <anchor>gdb07229e2ae057ba5a93400a7acb6caf</anchor>
      <arglist>(const char *fullPath, csRef&lt; iDocument &gt; &amp;metadata)</arglist>
    </member>
    <member kind="function">
      <name>csGetPluginPaths</name>
      <anchor>g482601bfb7bfc86236451f271234a4aa</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>csGetTicks</name>
      <anchor>g817ff3046c3529fcc30a04d488edd958</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGetUsername</name>
      <anchor>gc9024a1727e45e4ea74abd988fc6855e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGlobMatches</name>
      <anchor>gfc99af7265cc5d08f7624eae45c44d9e</anchor>
      <arglist>(const char *fName, const char *fMask)</arglist>
    </member>
    <member kind="function">
      <name>csIsPowerOf2</name>
      <anchor>ge8a40eaedde5b85a277a538a7f2ada26</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>csLittleEndianFloat</name>
      <anchor>gda64dc9d2f2a52388ceca20bcc2be3c4</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>csLittleEndianLong</name>
      <anchor>gdc370fb327cb9ba7f92bd4473024e6e9</anchor>
      <arglist>(uint32 l)</arglist>
    </member>
    <member kind="function">
      <name>csLittleEndianLongLong</name>
      <anchor>gebbbffb55c8fb8db3355e26438a860ae</anchor>
      <arglist>(uint64 l)</arglist>
    </member>
    <member kind="function">
      <name>csLittleEndianShort</name>
      <anchor>ge25b917e480c10f0ffc3869cb12616d6</anchor>
      <arglist>(uint16 s)</arglist>
    </member>
    <member kind="function">
      <name>csLoadLibrary</name>
      <anchor>g0c5d43b27b4e7b4e5e8b517aa7ab18a0</anchor>
      <arglist>(char const *iName)</arglist>
    </member>
    <member kind="function">
      <name>csLog2</name>
      <anchor>g9be5150360de26810e5001d496bbfc3c</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <name>csLongLongToDouble</name>
      <anchor>g58ef9816cc9b61576b38954372f3e02a</anchor>
      <arglist>(int64 i)</arglist>
    </member>
    <member kind="function">
      <name>csLongToFloat</name>
      <anchor>g4f3643cfc0df0821156b600627a13375</anchor>
      <arglist>(int32 l)</arglist>
    </member>
    <member kind="function">
      <name>csPathsIdentical</name>
      <anchor>g3ea95f2c3722f8314fff33d821a3012f</anchor>
      <arglist>(const char *path1, const char *path2)</arglist>
    </member>
    <member kind="function">
      <name>csPlatformShutdown</name>
      <anchor>g95cfdb2fec0ddcf9220c1be57dcd451b</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>csPlatformStartup</name>
      <anchor>g8261ee8f769a5f97cb320d26d1f3e075</anchor>
      <arglist>(iObjectRegistry *)</arglist>
    </member>
    <member kind="function">
      <name>csPrintf</name>
      <anchor>gd4b0fa911161355ff8284407897d2537</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <name>csPrintfErr</name>
      <anchor>g9bd60492f7f494e915605a6cbc42a54b</anchor>
      <arglist>(const char *str,...)</arglist>
    </member>
    <member kind="function">
      <name>csPrintfErrV</name>
      <anchor>geac3ecd4675183680ce2878cfd8f93c9</anchor>
      <arglist>(const char *str, va_list arg)</arglist>
    </member>
    <member kind="function">
      <name>csPrintfV</name>
      <anchor>gbe7d07ccb07f558f4a15faf123682da6</anchor>
      <arglist>(const char *str, va_list arg)</arglist>
    </member>
    <member kind="function">
      <name>csPrintLibraryError</name>
      <anchor>g9b4e78d3f84fb63f5a0cd5469b8989c6</anchor>
      <arglist>(char const *iModule)</arglist>
    </member>
    <member kind="function">
      <name>csReplaceAll</name>
      <anchor>gce48c6c345114d83048c3f6b3623584e</anchor>
      <arglist>(char *dest, const char *src, const char *search, const char *replace, int max)</arglist>
    </member>
    <member kind="function">
      <name>csScanPluginDir</name>
      <anchor>g2316da6973e6cbf61f81365c877e9a4e</anchor>
      <arglist>(const char *dir, csRef&lt; iStringArray &gt; &amp;plugins, bool recursive=true)</arglist>
    </member>
    <member kind="function">
      <name>csScanPluginDirs</name>
      <anchor>g071eb59a8d1179c4401271562575827f</anchor>
      <arglist>(csPathsList *dirs, csRef&lt; iStringArray &gt; &amp;plugins)</arglist>
    </member>
    <member kind="function">
      <name>csSetLoadLibraryVerbose</name>
      <anchor>g33633af9e153dcbf5c723a347aff8f65</anchor>
      <arglist>(bool)</arglist>
    </member>
    <member kind="function">
      <name>csShortToFloat</name>
      <anchor>gb87f1a6ea54f6388e88a83ece13b7902</anchor>
      <arglist>(short s)</arglist>
    </member>
    <member kind="function">
      <name>csSleep</name>
      <anchor>ga16268e464a6ab3f446347a873ea8c6c</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <name>csSplitPath</name>
      <anchor>ge0a6483b3739029bdf5ba7de15ef8e1c</anchor>
      <arglist>(const char *iPathName, char *oPath, size_t iPathSize, char *oName, size_t iNameSize)</arglist>
    </member>
    <member kind="function">
      <name>csStrCaseCmp</name>
      <anchor>gd3b337b96b8bafe9b27b4cf683d85fdb</anchor>
      <arglist>(char const *str1, char const *str2)</arglist>
    </member>
    <member kind="function">
      <name>csStrNCaseCmp</name>
      <anchor>g4661a6ce9f5b3c79f468611c69256a0b</anchor>
      <arglist>(char const *str1, char const *str2, size_t n)</arglist>
    </member>
    <member kind="function">
      <name>csStrNew</name>
      <anchor>g00c9036151cf0777ff9d95f6cf8684d7</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function">
      <name>csStrNew</name>
      <anchor>gc3a6e34ea28a22fdeda8802c872ce2d0</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <name>csStrNewW</name>
      <anchor>g85aedc4b9b1eac350ee5062d2ca17ad9</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <name>csStrNewW</name>
      <anchor>g2ace23f21519843f0649595f9bb05793</anchor>
      <arglist>(const wchar_t *s)</arglist>
    </member>
    <member kind="function">
      <name>csUnloadLibrary</name>
      <anchor>g540d71420067f59ecf9b8903a29e26cd</anchor>
      <arglist>(csLibraryHandle Handle)</arglist>
    </member>
    <member kind="function">
      <name>Report</name>
      <anchor>gfafd40981020e10aab24694b52229e74</anchor>
      <arglist>(iObjectRegistry *reg, int severity, char const *msgId, char const *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportBug</name>
      <anchor>ge885c8e8a7f209ac94e3c84182d94256</anchor>
      <arglist>(const char *msgId, const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportDebug</name>
      <anchor>gcf49b887e43029be87ae19fa4636bb9e</anchor>
      <arglist>(const char *msgId, const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportError</name>
      <anchor>g64c3e8fa49ffa59a8c718aa3ed0e41d8</anchor>
      <arglist>(const char *msgId, const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportNotify</name>
      <anchor>ga1f4821fb3e9c01dcd8249365f95c925</anchor>
      <arglist>(const char *msgId, const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>ReportV</name>
      <anchor>gdf0efa8c955d5207c1a7caf5cf740342</anchor>
      <arglist>(iObjectRegistry *reg, int severity, char const *msgId, char const *description, va_list args)</arglist>
    </member>
    <member kind="function">
      <name>ReportWarning</name>
      <anchor>g62a94a4871469e1d7074336fe0a0ba2d</anchor>
      <arglist>(const char *msgId, const char *description,...)</arglist>
    </member>
    <member kind="function">
      <name>csInvalidStringID</name>
      <anchor>g441e9321397d7398ee7f4da14ba477c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>gc3fc6b4bf9435dc4c11fdedfa57dc7a8</anchor>
      <arglist>(void *, csMemoryPool *)</arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>gf2e4d137c0e7a5801e32f584af502ad1</anchor>
      <arglist>(void *, csMemoryPool &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator new</name>
      <anchor>gf396c9305522b353fd6712180d2ae30d</anchor>
      <arglist>(size_t n, csMemoryPool *p)</arglist>
    </member>
    <member kind="function">
      <name>scfArray</name>
      <anchor>g66a9edf87e5dc48cc0bda5c87ac28c9e</anchor>
      <arglist>(iBase *scfParent)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IARRAYCHANGEALL_INTERFACE</name>
      <anchor>g4ea191f7c63ce4d230d82d181b801f61</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IARRAYCHANGEELEMENTS_INTERFACE</name>
      <anchor>gf7ee52958a7049fdb03aa09515593a06</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IARRAYREADONLY_INTERFACE</name>
      <anchor>ga2a21a3662510de90ca7dad0bf002734</anchor>
      <arglist>(Name)</arglist>
    </member>
    <member kind="function">
      <name>csHashCompute</name>
      <anchor>g440290362fd5eacc043fbf55698cfa81</anchor>
      <arglist>(char const *, size_t length)</arglist>
    </member>
    <member kind="function">
      <name>csHashCompute</name>
      <anchor>gb805c6e597fbb1d73233fecf4c050a6e</anchor>
      <arglist>(char const *)</arglist>
    </member>
    <member kind="function">
      <name>operator new</name>
      <anchor>gbc7922c9bd871e9c87c6ece97aaca88d</anchor>
      <arglist>(size_t n, csMemoryPool &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>scfArray</name>
      <anchor>g590fba9b1b63e741b036779f80f41de9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csArrayItemNotFound</name>
      <anchor>g7477ed9887527029069ab5d5c79e2f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ASSIGN_FILETIME</name>
      <anchor>g57d3a33621fb4710ab64f2bcfb18d30c</anchor>
      <arglist>(ft, tm)</arglist>
    </member>
    <member kind="function">
      <name>VFS_FILE_APPEND</name>
      <anchor>g4c74af62f4c9462116ac6890a5cc8c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_FILE_MODE</name>
      <anchor>g8e6b141a580423e1d638b6964c8ebfdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_FILE_READ</name>
      <anchor>gba6832b0add5ef2fd23abddbc8288822</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_FILE_UNCOMPRESSED</name>
      <anchor>gcaa8a2fbb1274d54b6d4646a667c1a75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_FILE_WRITE</name>
      <anchor>g69dd3ad75290635fff3f282398b15647</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_MAX_PATH_LEN</name>
      <anchor>gf70c17caf04101784a2ae3f16c38b7c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_PATH_DIVIDER</name>
      <anchor>g1aacdb5b87745d0bb6183c80fed81a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_PATH_SEPARATOR</name>
      <anchor>g2968b7fe281a48fe2d905ca0bce2dad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_STATUS_ACCESSDENIED</name>
      <anchor>gf655ca2c3b3f4c242b7e719f83d73e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_STATUS_IOERROR</name>
      <anchor>gbbc89b124421b6525f9332c38767337f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_STATUS_NOSPACE</name>
      <anchor>gca3e703c9d51b2f00aac916ce33d840e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_STATUS_OK</name>
      <anchor>g27ec68419e79b3faa5a2eacdaceebe47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_STATUS_OTHER</name>
      <anchor>g22a0f09acfe1aa0f8420f86e6007ca9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VFS_STATUS_RESOURCES</name>
      <anchor>g10ed068e274e218f03f3faca92bfa078</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iaws.h</name>
    <filename>iaws_8h.html</filename>
    <member kind="function">
      <name>CS_IDENT_STRING</name>
      <anchor>a9b22e7a4ffbbe1a427eb9d705471fcc</anchor>
      <arglist>(Ident)</arglist>
    </member>
    <member kind="function">
      <name>CS_IDENT_STRING_EXPLICIT</name>
      <anchor>e537223d77ea1ab53318b0beb6c22bba</anchor>
      <arglist>(Ident, Str)</arglist>
    </member>
    <member kind="function">
      <name>CS_IDENT_STRING_LIST</name>
      <anchor>e43e1de1fc248efff2949a42c87df573</anchor>
      <arglist>(ListName)</arglist>
    </member>
    <member kind="function">
      <name>CS_IDENT_STRING_LIST_END</name>
      <anchor>7284e05bee2646be47976076beefb661</anchor>
      <arglist>(ListName)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iengine.h</name>
    <filename>iengine_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>igeom.h</name>
    <filename>igeom_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>igraphic.h</name>
    <filename>igraphic_8h.html</filename>
    <member kind="function">
      <name>CS_IMAGEIO_LOAD</name>
      <anchor>g66030c9ac37bc848e92019338caa1525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_IMAGEIO_SAVE</name>
      <anchor>gc9142718ea244466ea560c8c6bd501a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@70</name>
      <anchor>550cb4231d535863c55643bbd2d3c6ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SAVER_FILE_WORLD</name>
      <anchor>550cb4231d535863c55643bbd2d3c6ba83e2005fe6301861439ac56abb9ddf85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SAVER_FILE_LIBRARY</name>
      <anchor>550cb4231d535863c55643bbd2d3c6ba04aa157fdde5f7ec507f082ac947c643</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SAVER_FILE_MESHFACT</name>
      <anchor>550cb4231d535863c55643bbd2d3c6bac2eabfdace938604cf1b14127064cc3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>S_SAVER_FILE_PARAMS</name>
      <anchor>550cb4231d535863c55643bbd2d3c6ba7b201792a220f5f30d589b62e7ad26f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>imap.h</name>
    <filename>imap_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>imesh.h</name>
    <filename>imesh_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>inetwork.h</name>
    <filename>inetwork_8h.html</filename>
  </compound>
  <compound kind="class">
    <name>OSXDelegate2D</name>
    <filename>interfaceOSXDelegate2D.html</filename>
    <member kind="function">
      <name>pausedTitle</name>
      <anchor>c05e0ae754a4f5905cea8f3f5cd494aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>style</name>
      <anchor>3d97115e8ab9faf50bbcb99b3175e29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>title</name>
      <anchor>d065388b1dae1964e3b1f067b9d5b02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>trackingMouse</name>
      <anchor>a4c924c11b4d6cb89dcc8d3eddc4d730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>closeWindow</name>
      <anchor>6044931245685d2dcb558a0f84d42b36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dealloc</name>
      <anchor>914ba091910df7cb3a8dea0fb8de4877</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dispatchEvent:forView:</name>
      <anchor>e8b17bba8ab92acc90bb0488ac4da1e4</anchor>
      <arglist>(NSEvent *ev,[forView] NSView *view)</arglist>
    </member>
    <member kind="function">
      <name>focusChanged:shouldPause:</name>
      <anchor>dfd609736215918d03e4ab6778bde446</anchor>
      <arglist>(BOOL focused,[shouldPause] BOOL pause)</arglist>
    </member>
    <member kind="function">
      <name>initWithDriver:</name>
      <anchor>3fb4904608d8c6a6548e909894a9baa0</anchor>
      <arglist>(OSXDriver2D drv)</arglist>
    </member>
    <member kind="function">
      <name>mouseEntered:</name>
      <anchor>9b73ea00ac57ec4340b685aed8ce1348</anchor>
      <arglist>(NSEvent *ev)</arglist>
    </member>
    <member kind="function">
      <name>openWindow:width:height:depth:fullscreen:onDisplay:onScreen:</name>
      <anchor>e89797db94b4b45c29620aeeb7ba7f00</anchor>
      <arglist>(const char *winTitle,[width] int w,[height] int h,[depth] int d,[fullscreen] BOOL fs,[onDisplay] CGDirectDisplayID display,[onScreen] unsigned int screen)</arglist>
    </member>
    <member kind="function">
      <name>setMouseCursor:</name>
      <anchor>9395df29628ac75edff433bd23e62fc9</anchor>
      <arglist>(csMouseCursorID cursor)</arglist>
    </member>
    <member kind="function">
      <name>setTitle:</name>
      <anchor>2d29b3f615ebb15e0f0d2f34f0ff86c6</anchor>
      <arglist>(char *newTitle)</arglist>
    </member>
    <member kind="function">
      <name>startTrackingMouse</name>
      <anchor>2db80ef63d51c746cd2edfb5b0f2a4fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>driver</name>
      <anchor>bc4a036f0feeba0e3ade5314b2fb0efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hideMouse</name>
      <anchor>fe9d0188b753a0a08b6e12deaa34fdc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isPaused</name>
      <anchor>e4f19e52280980616f3a8dab2c610ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lastEventType</name>
      <anchor>d28969ed37a6ca172aeaf334fd4d212e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>trackingMouseTag</name>
      <anchor>fe2cc349584bff81ce95f17e39efd861</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>window</name>
      <anchor>f697dda07835587306b9b2ba949ece60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSXView</name>
    <filename>interfaceOSXView.html</filename>
    <member kind="function">
      <name>acceptsFirstResponder</name>
      <anchor>9bd8ab90c331e8680b1dbaeb0bed0cb1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>dealloc</name>
      <anchor>8e7d21696be4496efa47eca5e52a50cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>initWithFrame:</name>
      <anchor>e0dcdabd83f8b603c1cbf9fc1baf36c5</anchor>
      <arglist>(NSRect frame)</arglist>
    </member>
    <member kind="function">
      <name>keyDown:</name>
      <anchor>7a11764cca86a7dfe1b8bd9de626c024</anchor>
      <arglist>(NSEvent *ev)</arglist>
    </member>
    <member kind="function">
      <name>setDelegate:</name>
      <anchor>0c93b12673444a3f7b7020376c3a0682</anchor>
      <arglist>(OSXDelegate2D *inDelegate)</arglist>
    </member>
    <member kind="function">
      <name>delegate</name>
      <anchor>ab0aec0b9ac13b867ac31dc4ef8f9938</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OSXWindow</name>
    <filename>interfaceOSXWindow.html</filename>
    <member kind="function">
      <name>canBecomeKeyWindow</name>
      <anchor>54d8e83cd32fe9fc14e5f96c4820957c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csInverseColormap</name>
      <anchor>99836a24c4badc2aab116648dc3ffd58</anchor>
      <arglist>(int colors, csRGBpixel *colormap, int rbits, int gbits, int bbits, uint8 *&amp;rgbmap, uint32 *dist_buf=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>isndsys.h</name>
    <filename>isndsys_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>itexture.h</name>
    <filename>itexture_8h.html</filename>
    <member kind="function">
      <name>CS_HANDLER_INVALID</name>
      <anchor>gea5ee8f1eba9a0173e3a0f343b9d0603</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_HANDLERLIST_END</name>
      <anchor>g9aa0e2476106e51c7a44ced844b6f20b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csHandlerID</name>
      <anchor>gd62f963e20f1180634a9557b392d987d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENT_INVALID</name>
      <anchor>g4179e548ef7784bec7313c2baebcd683</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_EVENTLIST_END</name>
      <anchor>g38b0f25e975284001f47297222e4d480</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_QUERY_REGISTRY</name>
      <anchor>2a09063f1dabdde133a6269016f6a3da</anchor>
      <arglist>(Reg, Interface)</arglist>
    </member>
    <member kind="function">
      <name>CS_QUERY_REGISTRY_TAG</name>
      <anchor>5ddc56f0b566d5bb87785a16c20e8e8c</anchor>
      <arglist>(Reg, Tag)</arglist>
    </member>
    <member kind="function">
      <name>CS_QUERY_REGISTRY_TAG_INTERFACE</name>
      <anchor>0a7ddafa5cfb0114eac78445ebbe6c74</anchor>
      <arglist>(Reg, Tag, Interface)</arglist>
    </member>
    <member kind="function">
      <name>csQueryRegistry</name>
      <anchor>ee5a756951eeb09857882b549a563261</anchor>
      <arglist>(iObjectRegistry *Reg)</arglist>
    </member>
    <member kind="function">
      <name>csQueryRegistryTag</name>
      <anchor>3c9f411e74add910423f848756ad9daf</anchor>
      <arglist>(iObjectRegistry *Reg, const char *Tag)</arglist>
    </member>
    <member kind="function">
      <name>csQueryRegistryTagInterface</name>
      <anchor>67a78cae0a3099ef84dd96f6f5cd5d45</anchor>
      <arglist>(iObjectRegistry *Reg, const char *Tag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iutil.h</name>
    <filename>iutil_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ivaria.h</name>
    <filename>ivaria_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>ivideo.h</name>
    <filename>ivideo_8h.html</filename>
    <member kind="function">
      <name>DISALLOW_DISTRIBUTE_TIME</name>
      <anchor>0ff010fcb8095ad419f33facf7884c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ABS</name>
      <anchor>g996f7be338ccb40d1a2a5abc1ad61759</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>dSqr</name>
      <anchor>gef61e8f5b3e9a3a2dd86326b90ca4523</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <name>csFinite</name>
      <anchor>gb84e24b220cd40059738cc8aea20ea18</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>gc3fc6b4bf9435dc4c11fdedfa57dc7a8</anchor>
      <arglist>(void *, csMemoryPool *)</arglist>
    </member>
    <member kind="function">
      <name>operator delete</name>
      <anchor>gf2e4d137c0e7a5801e32f584af502ad1</anchor>
      <arglist>(void *, csMemoryPool &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator new</name>
      <anchor>gf396c9305522b353fd6712180d2ae30d</anchor>
      <arglist>(size_t n, csMemoryPool *p)</arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_SIMPLE_MESH_FACTORY</name>
      <anchor>4060e38b068039855583b4bb11ba0bac</anchor>
      <arglist>(name, meshclass)</arglist>
    </member>
    <member kind="function">
      <name>CS_DECLARE_SIMPLE_MESH_PLUGIN</name>
      <anchor>fbf7aa119e9660c3f99b713e4d577b91</anchor>
      <arglist>(name, factclass)</arglist>
    </member>
    <member kind="function">
      <name>csPlatformMemoryMapping</name>
      <anchor>9cbd3821643d9e21fb6ad9ac234e9c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>NonCopyable</name>
      <anchor>ccf35a0d32b04cc6915f02360a0f70ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ForEach</name>
      <anchor>245f309276200b8c70ce1ee3bddff457</anchor>
      <arglist>(T it, Fn &amp;Func, P &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>ForEach</name>
      <anchor>50ddfda2b9b4d9ed73cc1131dfacdbd0</anchor>
      <arglist>(T *start, T *end, Fn &amp;Func)</arglist>
    </member>
    <member kind="function">
      <name>ForEach</name>
      <anchor>758542d851630e3c385594b388044098</anchor>
      <arglist>(T it, Fn &amp;Func)</arglist>
    </member>
    <member kind="function">
      <name>RegisterWeakListener</name>
      <anchor>2d55e184219c75f56d60f02a67fc42ae</anchor>
      <arglist>(iEventQueue *q, iEventHandler *listener, csRef&lt; iEventHandler &gt; &amp;handler)</arglist>
    </member>
    <member kind="function">
      <name>RemoveWeakListener</name>
      <anchor>82f6e5ca930984b58b34962fd8bab92e</anchor>
      <arglist>(iEventQueue *q, csRef&lt; iEventHandler &gt; &amp;handler)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>68d61355d1c8c8d00c9ed83c963a2dce</anchor>
      <arglist>(T &amp;a, T &amp;b)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::FilterDocumentNodeIterator</name>
      <anchor>ccabad23e89a91278acd052dc88087ab</anchor>
      <arglist>(csRef&lt; iDocumentNodeIterator &gt; parent, T filter)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::RemoveDuplicateChildren</name>
      <anchor>f7cd0cb76dcf977fa657df954eb2684b</anchor>
      <arglist>(iDocumentNode *rootNode, csRef&lt; iDocumentNodeIterator &gt; childIt, T eq)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::RemoveDuplicateChildren</name>
      <anchor>c9ea30e500f8e219c44fd7d1432841b6</anchor>
      <arglist>(iDocumentNode *rootNode, T eq)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AlignedFree</name>
      <anchor>24e1a01a11f8cd839a625bfe10c4b984</anchor>
      <arglist>(void *ptr)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AlignedMalloc</name>
      <anchor>c840bbf3f092cb8d7cacb3b886930444</anchor>
      <arglist>(size_t size, size_t align)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AlignedRealloc</name>
      <anchor>80bd77b1f5274e7cda7c95f26fff0d10</anchor>
      <arglist>(void *ptr, size_t size, size_t align)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::BuffersMask</name>
      <anchor>3b8d057a47c98a410d605bebe49f4177</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::TexturesMask</name>
      <anchor>0dbb7d03fcabcf39439e6a69d7b13089</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Lerp</name>
      <anchor>3e8faba68b10819a14d92e839f0cdcee</anchor>
      <arglist>(const T &amp;a, const T &amp;b, float f)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::maxBuffers</name>
      <anchor>c3cae92639297bf4079b8721c43dcb61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::QueueErrorType</name>
      <anchor>e0f22d90228350dcd6fbc5acd8589e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UEUE_SUCCESS</name>
      <anchor>e0f22d90228350dcd6fbc5acd8589e7ca10a73804e7448d15ef55cc3d55e9514</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UEUE_ERR_CLOSED</name>
      <anchor>e0f22d90228350dcd6fbc5acd8589e7c6adb0e394b00c5de53430ebdfcf0cf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UEUE_ERR_NOMEM</name>
      <anchor>e0f22d90228350dcd6fbc5acd8589e7c0f5e1aa6f8683385538b03d739e08d30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UEUE_ERR_DUPE</name>
      <anchor>e0f22d90228350dcd6fbc5acd8589e7c424c7aba9dc598fd03fdf1280fcadf47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Mutex</name>
      <anchor>a77233dd556d212f73dba0999f0cb596</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::RecursiveMutex</name>
      <anchor>adf3126962fadbc6a7ed6fff9f318ba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::ThreadPriority</name>
      <anchor>785461563cc5ad5580177ae429bbb239</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HREAD_PRIO_LOW</name>
      <anchor>785461563cc5ad5580177ae429bbb2398186b75ecc38a7b0c8aaf34a9809bd24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HREAD_PRIO_NORMAL</name>
      <anchor>785461563cc5ad5580177ae429bbb239c39edebc95da17ce08b6a8c1234177ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>HREAD_PRIO_HIGH</name>
      <anchor>785461563cc5ad5580177ae429bbb239c2ad92a96167409696c9ad05c77c5706</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::queue_user_apc_callback_function</name>
      <anchor>210d9e0e090f273de874dd47bac91609</anchor>
      <arglist>(ulong_ptr)</arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::ulong_ptr</name>
      <anchor>9d41520eb29a3738739203db43425fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::int</name>
      <anchor>aac6ece5a6f092928a88a48c5e2bb29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::int</name>
      <anchor>1cd8696cadd16a7d377658879ff61f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::long</name>
      <anchor>18231064b8c814b0654722b134beac07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::long</name>
      <anchor>e693e8542ec2b5071fdd8fcea17827ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::long</name>
      <anchor>dc612b224da551f15cb76b5aa0bfec0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::long</name>
      <anchor>4103466ced611d0b32157d250d3dc13b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::long</name>
      <anchor>e693e8542ec2b5071fdd8fcea17827ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::long</name>
      <anchor>e693e8542ec2b5071fdd8fcea17827ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Threading::Implementation::ulong_ptr</name>
      <anchor>3025f9e09aadfb7437c5c3b2d5b12860</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeTraits::Implementation::IsReferenceHelper1</name>
      <anchor>b65655a7933d347195888daeb43f5d3c</anchor>
      <arglist>(Wrap&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <name>TypeTraits::Implementation::YesType</name>
      <anchor>56ccdcb0c22245996eebe888821ee3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ODEJointType</name>
      <anchor>52d0c1686dbdd5a9c94c49e83dc8ab40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>OSXEvent</name>
      <anchor>0e19cac7a064f0c6b71af3e578ad6b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>OSXView</name>
      <anchor>cbffd352010d87958a89b6ac1d193414</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_PROFDUMP</name>
      <anchor>7f8561fca69150cbd00b3665b1053b7b</anchor>
      <arglist>(obj_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_PROFRESET</name>
      <anchor>7ccd3c18d5a2b3532b8553803c713420</anchor>
      <arglist>(obj_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_PROFSTART</name>
      <anchor>2f3100999443b4f49bc9c107a769984c</anchor>
      <arglist>(tok, obj_reg)</arglist>
    </member>
    <member kind="function">
      <name>CS_PROFSTOP</name>
      <anchor>ee9a6acd598e9a9f5d4c931266ba894c</anchor>
      <arglist>(tok)</arglist>
    </member>
    <member kind="function">
      <name>CDS_FULLSCREEN</name>
      <anchor>57e2e4402b0a1ec39bf04a8247063a5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_GLOBAL</name>
      <anchor>de8846782015cb6a2aee0b87a0b82984</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_NORESET</name>
      <anchor>7e0b8f1e66de208259ed1784ccef3d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_RESET</name>
      <anchor>9c07881b0c48d014cade8965398080aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_SET_PRIMARY</name>
      <anchor>5156a865a8192d9f136acfca50036f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_SETRECT</name>
      <anchor>f3540e64ce741c56c964967dfb3928ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_TEST</name>
      <anchor>04d6b61331543caad9839620dd022f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CDS_UPDATEREGISTRY</name>
      <anchor>6c35f8c01549d86d0eab1bdfdc2f8c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_BADFLAGS</name>
      <anchor>75823c94613003587c7aaea9993b4d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_BADMODE</name>
      <anchor>41f01115a1c9e5a9c4cb7b7036ce94e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_BADPARAM</name>
      <anchor>635f4ecdd7b4347012c9af40defb6f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_FAILED</name>
      <anchor>7d1151aae0ff8abb5d3246d477e553a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_NOTUPDATED</name>
      <anchor>0685ead135f34eb3a88f1774e97a0ced</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_RESTART</name>
      <anchor>da48a14686ed7278c839d799cca06841</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DISP_CHANGE_SUCCESSFUL</name>
      <anchor>4b2c69179d7ea4990f67c4c0d0112673</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ENUM_CURRENT_SETTINGS</name>
      <anchor>8ba7b9e2327176230b6c91f8d838fccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GetWindowLongPtrA</name>
      <anchor>624ab00730f9598a87688bbd229dd254</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GetWindowLongPtrW</name>
      <anchor>157339de59b35ca43c4462e691d778a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GWLP_USERDATA</name>
      <anchor>7a8345f53627cc6f8c402e81fd914e34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GWLP_WNDPROC</name>
      <anchor>5cfd85b4b1dec00a993d28e8d1f35fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SetWindowLongPtrA</name>
      <anchor>0ca7428fdbbd9e6d95764470c7724a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SetWindowLongPtrW</name>
      <anchor>dee5b16114c1386f9ed8c10550aab5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_VOIDED_PTR</name>
      <anchor>45b37ca780f4701367809623ae3fe166</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSREF_TRACK_ASSIGN</name>
      <anchor>c9478d92b8645db45159d312f52eabab</anchor>
      <arglist>(obj, tag)</arglist>
    </member>
    <member kind="function">
      <name>CSREF_TRACK_DECREF</name>
      <anchor>7babef506acf099957e9746d1c4406e9</anchor>
      <arglist>(obj, tag)</arglist>
    </member>
    <member kind="function">
      <name>CSREF_TRACK_INCREF</name>
      <anchor>c1b26ce0f250cfb834725b152da8bd78</anchor>
      <arglist>(obj, tag)</arglist>
    </member>
    <member kind="function">
      <name>CSREFARR_TRACK_DECREF</name>
      <anchor>dc294013152a4535b8b50e7037b7db1c</anchor>
      <arglist>(obj, tag)</arglist>
    </member>
    <member kind="function">
      <name>CSREFARR_TRACK_INCREF</name>
      <anchor>c385815c5f51bd292cced2f3ceb388e8</anchor>
      <arglist>(obj, tag)</arglist>
    </member>
    <member kind="function">
      <name>CS_CSUTIL_REFTRACK_EXPORT</name>
      <anchor>d72fd291bde2c07e3e564e33b4194a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRefTrackerAccess</name>
      <anchor>92f598fe448b2a7f3e44a2a95a3da391</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRegExpMatchError</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxNoError</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f23218b27ac9cb13d1314dd2fe5d7fdf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxNoMatch</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f7ced38ce226cf9947ba369eb53058d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxBadBraces</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13fc4fcb5be2054406bc68c80efd0d1b36c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxBadPattern</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f868c78ca88806aea0c4077de232bf035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxBadRepetition</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f43413ebc3c5ce3b9caefd70fcd9c5ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrCollate</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13fefb5755d7da42e1092b4534228169965</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrCharType</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f07822db12dd009219b1f65b26abb621a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrEscape</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f96f87ca6761f38a3d8fbd0c1f95232f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrSubReg</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f1533648b3060849f6e798388566f70af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrBrackets</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f58360089a02e3adb7ddca92d9f20a3f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrParentheses</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13fd0f7a753221185b6da3b4cdd37e7b4ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrBraces</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f60a78fac958ffbd5edfdaa684a396565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrRange</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13f582ed2fa4a40538d978ce9b76f1b8d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrSpace</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13ff39cfb12b33fa439b3aa8bfbda6cfa02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxErrUnknown</name>
      <anchor>89f80052ddcd1fa25c12f5d0578ed13faae87077933d20e4abb1711fde7cd9ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRegExpMatchFlags</name>
      <anchor>d938c33b723e05f5d5a73ec768a317e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxIgnoreCase</name>
      <anchor>d938c33b723e05f5d5a73ec768a317e40cc39899830cc8740438b2b1272c1b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxNewLine</name>
      <anchor>d938c33b723e05f5d5a73ec768a317e41820d801b9422fd3cb1bcbabdf3a2fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxNotBOL</name>
      <anchor>d938c33b723e05f5d5a73ec768a317e4ba8707b3b4913da6f22442eae454b271</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>srxNotEOL</name>
      <anchor>d938c33b723e05f5d5a73ec768a317e492d05c63cb9e7b473f21804a381e3bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_BUFFER_MAKE_MASKABLE</name>
      <anchor>g53716bef72ba998ca85a10f99b841a62</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>csScanStr</name>
      <anchor>916609590209db279cb91205c644b70d</anchor>
      <arglist>(const char *in, const char *format,...)</arglist>
    </member>
    <member kind="function">
      <name>CS_TYPENAME</name>
      <anchor>gb3fb7f6a541c017fbcd04fcbf75288ae</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>SCF_CREATE_INSTANCE</name>
      <anchor>g5b0b8a41841a8901731fdd009b8727eb</anchor>
      <arglist>(ClassID, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_INIT_TRACKER_ALIASES</name>
      <anchor>g7da6359c3ea79d8ab254f78d0b29af71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SCF_QUERY_INTERFACE</name>
      <anchor>g4866d026c88c980b43d36906766c5db6</anchor>
      <arglist>(Object, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_QUERY_INTERFACE_SAFE</name>
      <anchor>gac32ddfef9f398f67f794f52f2700f22</anchor>
      <arglist>(Object, Interface)</arglist>
    </member>
    <member kind="function">
      <name>SCF_STATIC_CLASS_CONTEXT</name>
      <anchor>gc00c0ec6f04407808f2f346093b0371e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TYPENAME</name>
      <anchor>b3fb7f6a541c017fbcd04fcbf75288ae</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>SCF_IN_IMPLEMENTATION_H</name>
      <anchor>g32823b8dc2fa987f1e945fa97b793875</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGetShaderVariableFromStack</name>
      <anchor>61a5008c359481a0bd68bd3ea8b28ea5</anchor>
      <arglist>(const iShaderVarStack *stack, const csStringID &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>csShaderVarStack</name>
      <anchor>16342d39b5945f4bccde3d5747f85838</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csShaderTagPresence</name>
      <anchor>569185ecc5e0b5c32cc4e092ff9ec3ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>agNeutral</name>
      <anchor>569185ecc5e0b5c32cc4e092ff9ec3cabda08f3e70f89653c3f2c7d35ee339fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>agForbidden</name>
      <anchor>569185ecc5e0b5c32cc4e092ff9ec3ca9eedc259d33b0549fe002d64f274189c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>agRequired</name>
      <anchor>569185ecc5e0b5c32cc4e092ff9ec3caafe7c1db92fcfd36e5071221283dd9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csGetShaderVariableFromStack</name>
      <anchor>28da1d8ecc3441f3fac0aaa694a87d48</anchor>
      <arglist>(const csShaderVarStack &amp;stack, const csStringID &amp;name)</arglist>
    </member>
    <member kind="function">
      <name>CS_INIT_TOKEN_TABLE_NAME</name>
      <anchor>997d7681d14447f53b90d413ddd24763</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_ITEM_FILE</name>
      <anchor>abd196eceaea31690f53f17621fd101f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_TOKEN_LIST_TOKEN</name>
      <anchor>9541699c44bf57b577cb08459670f72e</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_DATA_UNKNOWN_SIZE</name>
      <anchor>gf71c4fd6249d7b489d926a61beed9cd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_DISTANCE_INFINITE</name>
      <anchor>g166882a13c2046e4baf3633479d7c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_PLAYING</name>
      <anchor>g752cd34a8060cbf8e156bb6733470a47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_STOPPED</name>
      <anchor>gca656338c994f44004a2133324d0442a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_SOURCE_DISTANCE_INFINITE</name>
      <anchor>g166882a13c2046e4baf3633479d7c229</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_DONTLOOP</name>
      <anchor>g3ec72a39bc01c6674b3d10bcf4ab2cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_LOOP</name>
      <anchor>g600ef21e35b75759590e6b5da1a29e71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_PAUSED</name>
      <anchor>g87fd29283c05296e9848f2a0ab15bf98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_UNPAUSED</name>
      <anchor>g73fbf8bc2594975618d454114ead7dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_SNDSYS_STREAM_UNKNOWN_LENGTH</name>
      <anchor>gea9e554208f88a0736a09e6854d808da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSSNDSYS_SAMPLE_BIG_ENDIAN</name>
      <anchor>g815726dc75e493d0e6fa549f61fb1c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSSNDSYS_SAMPLE_ENDIAN_MASK</name>
      <anchor>ga6c7477df4000fbdbc3babaae7c1d7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CSSNDSYS_SAMPLE_LITTLE_ENDIAN</name>
      <anchor>g6b792e4e1ef7251e5ed55efeedae435b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csSoundSample</name>
      <anchor>gc8eb30abac5547e09b41e96e87100ff7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>_csKeyModifiers</name>
    <filename>struct__csKeyModifiers.html</filename>
    <member kind="function">
      <name>modifiers</name>
      <anchor>41ed4c2a59343849150ffe2e0e503dac</anchor>
      <arglist>[csKeyModifierTypeLast]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ADDRESS64</name>
    <filename>structADDRESS64.html</filename>
    <member kind="function">
      <name>Mode</name>
      <anchor>f46abbc5aecb577b65788133e6e15914</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Offset</name>
      <anchor>0b328b632bd089848637daf1eeb58778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Segment</name>
      <anchor>b6d42120a1234a5d5e5fa164b5fe49ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CrystalSpace::COMPILE_ASSERT_FAILURE</name>
    <filename>structCrystalSpace_1_1COMPILE__ASSERT__FAILURE.html</filename>
  </compound>
  <compound kind="class">
    <name> true </name>
    <filename>structCrystalSpace_1_1COMPILE__ASSERT__FAILURE_3_01true_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>CrystalSpace::CompileAssertTest</name>
    <filename>structCrystalSpace_1_1CompileAssertTest.html</filename>
  </compound>
  <compound kind="class">
    <name>CS::AllocPlatform</name>
    <filename>structCS_1_1AllocPlatform.html</filename>
  </compound>
  <compound kind="class">
    <name>CS::ConditionAnd</name>
    <filename>structCS_1_1ConditionAnd.html</filename>
    <member kind="function">
      <name>ConditionAnd::ConditionAnd</name>
      <anchor>e89fabc6574ecb6ed90ad798db305592</anchor>
      <arglist>(T1 op1, T2 op2)</arglist>
    </member>
    <member kind="function">
      <name>ConditionAnd::operator()</name>
      <anchor>5e27bbe6640f2146826752af511e9b00</anchor>
      <arglist>(T obj)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::DocumentHelper::NodeAttributeCompare</name>
    <filename>structCS_1_1DocumentHelper_1_1NodeAttributeCompare.html</filename>
    <member kind="function">
      <name>DocumentHelper::NodeAttributeCompare::NodeAttributeCompare</name>
      <anchor>5444954cd7b402ccbdcc6f86b3769800</anchor>
      <arglist>(const char *attributeName)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::NodeAttributeCompare::operator()</name>
      <anchor>19441712eccf77626e56a3774cbf8a67</anchor>
      <arglist>(iDocumentNode *node1, iDocumentNode *node2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::DocumentHelper::NodeAttributeRegexpTest</name>
    <filename>structCS_1_1DocumentHelper_1_1NodeAttributeRegexpTest.html</filename>
    <member kind="function">
      <name>DocumentHelper::NodeAttributeRegexpTest::NodeAttributeRegexpTest</name>
      <anchor>0c58abdb7aa2dc79bf0700b53ce6c465</anchor>
      <arglist>(const char *attribute, const char *regexp)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::NodeAttributeRegexpTest::operator()</name>
      <anchor>90b76feab88e121a2d7ac803de3b07cb</anchor>
      <arglist>(iDocumentNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::DocumentHelper::NodeAttributeValueTest</name>
    <filename>structCS_1_1DocumentHelper_1_1NodeAttributeValueTest.html</filename>
    <member kind="function">
      <name>DocumentHelper::NodeAttributeValueTest::NodeAttributeValueTest</name>
      <anchor>757652fd37c8c7fed0cc0a17e27d3394</anchor>
      <arglist>(const char *attribute, const char *value)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::NodeAttributeValueTest::operator()</name>
      <anchor>5a0e2501c384ae8b72dae890f7dd63b0</anchor>
      <arglist>(iDocumentNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::DocumentHelper::NodeNameCompare</name>
    <filename>structCS_1_1DocumentHelper_1_1NodeNameCompare.html</filename>
    <member kind="function">
      <name>DocumentHelper::NodeNameCompare::operator()</name>
      <anchor>498ce8b734603ebf7521b38e84e29f77</anchor>
      <arglist>(iDocumentNode *node1, iDocumentNode *node2) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::DocumentHelper::NodeValueTest</name>
    <filename>structCS_1_1DocumentHelper_1_1NodeValueTest.html</filename>
    <member kind="function">
      <name>DocumentHelper::NodeValueTest::NodeValueTest</name>
      <anchor>9c6c9158f5074b69fadaf7e730e22d7f</anchor>
      <arglist>(const char *value)</arglist>
    </member>
    <member kind="function">
      <name>DocumentHelper::NodeValueTest::operator()</name>
      <anchor>125564246e240907ddecf4b29786c2fe</anchor>
      <arglist>(iDocumentNode *node)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::AllocatorPointerWrapper</name>
    <filename>structCS_1_1Memory_1_1AllocatorPointerWrapper.html</filename>
    <member kind="function">
      <name>Memory::AllocatorPointerWrapper::AllocatorPointerWrapper</name>
      <anchor>15e3a200d635ef663a0858351ca188b0</anchor>
      <arglist>(const Allocator &amp;alloc, T *p)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorPointerWrapper::AllocatorPointerWrapper</name>
      <anchor>a7c9ce443629475d2e9a1c8dba2b6a89</anchor>
      <arglist>(T *p)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorPointerWrapper::AllocatorPointerWrapper</name>
      <anchor>8a05f8c06315a8c97aef116eeac36e1b</anchor>
      <arglist>(const Allocator &amp;alloc)</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorPointerWrapper::AllocatorPointerWrapper</name>
      <anchor>aee8e659cce35cba8f31cc003a642a3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Memory::AllocatorPointerWrapper::p</name>
      <anchor>e3861de7c5f1a38d76881b2b47b51fa2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::Memory::HeapAccessPointer</name>
    <filename>structCS_1_1Memory_1_1HeapAccessPointer.html</filename>
    <member kind="function">
      <name>Memory::HeapAccessPointer::Alloc</name>
      <anchor>fb89a74e1c20c25cc350ce668eb4cf0b</anchor>
      <arglist>(const size_t n)</arglist>
    </member>
    <member kind="function">
      <name>Memory::HeapAccessPointer::Free</name>
      <anchor>5b3f123db1ca55657c631785534f4fbd</anchor>
      <arglist>(void *p)</arglist>
    </member>
    <member kind="function">
      <name>Memory::HeapAccessPointer::GetHeap</name>
      <anchor>4a203616c5c841736cfe7553f5cfeaa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Memory::HeapAccessPointer::Realloc</name>
      <anchor>6929f9b07d6fc4fe47afd560fc38931c</anchor>
      <arglist>(void *p, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <name>Memory::HeapAccessPointer::heap</name>
      <anchor>5c2ca5e396e3d9c30cf2dbad9831cc4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::iDefaultScanlineRenderer</name>
    <base>iBase</base>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1iDefaultScanlineRenderer.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::iDefaultScanlineRenderer::SetColorSum</name>
      <anchor>b2f2e65f312dc656f2487d2b21ddbfda</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iDefaultScanlineRenderer::SetFlatColor</name>
      <anchor>6a009cdec5863dc643d757a208719b67</anchor>
      <arglist>(const csVector4 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iDefaultScanlineRenderer::SetShift</name>
      <anchor>3f2c5f264a15e374974d78c2aa40ead5</anchor>
      <arglist>(int rgbShift, int alphaShift)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::iDefaultShader</name>
    <base>iBase</base>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1iDefaultShader.html</filename>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::InterpolateEdgePersp</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1InterpolateEdgePersp.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::Advance</name>
      <anchor>55dd9b1a118c5029609f5668615c2324</anchor>
      <arglist>(const size_t floatNum)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::Setup</name>
      <anchor>0b6b561bd36933a1eb8a28c02e051ef8</anchor>
      <arglist>(const csVector3 *vertices, const float *floats, const size_t floatNum, size_t sv, size_t fv, int sy)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::dIzdy</name>
      <anchor>ad2481f87be4f405c972bc6814a1440e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::dxdy</name>
      <anchor>89304eac4608f9506d01e3abf7d50806</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::Floats</name>
      <anchor>9c97fbb4122446c6264237b350d0df20</anchor>
      <arglist>[maxBuffers *4]</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::Iz</name>
      <anchor>7e18709523456ee4687a41f702925cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::x</name>
      <anchor>686b19614db9e445108e77c6f56c7d87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::InterpolateEdgePersp::PerFloat</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1InterpolateEdgePersp_1_1PerFloat.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::PerFloat::c</name>
      <anchor>50b158edd860bd2b835fae69addbaea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::PerFloat::dIcdy</name>
      <anchor>bde29414558f17979596935bb787105f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateEdgePersp::PerFloat::Ic</name>
      <anchor>15a564ca50a15c7948193f9486441e84</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::InterpolateScanlinePersp</name>
    <base>CS::PluginCommon::SoftShader::InterpolateScanlinePerspCommon</base>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1InterpolateScanlinePersp.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::Advance</name>
      <anchor>75d3043b42a258540bcd722a60d0b985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::GetFloat</name>
      <anchor>def4c59558ade40d7c308163b66fd148</anchor>
      <arglist>(size_t i) const </arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::Setup</name>
      <anchor>eb0bbf570b7bf0ae184f805e3e06fb08</anchor>
      <arglist>(const InterpolateEdgePersp &amp;L, const InterpolateEdgePersp &amp;R, uint len, int ipolStep, int ipolShift)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::floats</name>
      <anchor>92df22c3f5683d4131ad86a2468eae01</anchor>
      <arglist>[maxFloats]</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::floats_f</name>
      <anchor>fc6e9bf57fd4c8630705a1cc25f1c74a</anchor>
      <arglist>[maxFloats]</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::InterpolShift</name>
      <anchor>5adcc55cea2dc1f6904dc96230142ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::InterpolStep</name>
      <anchor>ef36e9a2fafad9d1f3f48ee684471888</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::invLastSpan</name>
      <anchor>01f2746ba09bd68e7e0135490392667e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::ipx</name>
      <anchor>cacc134a27af1f2d2bdacffe805f750d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp::spans</name>
      <anchor>4b7393603e03f93453689fbf283d2bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::Advance</name>
      <anchor>14a3bdc8c8dcd752fa3b0934346b144d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::GetFloat</name>
      <anchor>4caaa351a92174d37943bb4d70422284</anchor>
      <arglist>(size_t) const </arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::Setup</name>
      <anchor>55973ce06f315a1d66cd9a7699be59ea</anchor>
      <arglist>(const InterpolateEdgePersp &amp;L, const InterpolateEdgePersp &amp;R, uint len, int ipolStep, int ipolShift)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::InterpolShift</name>
      <anchor>c4801ed908928ae0f0986cf9a0b6ce09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::InterpolStep</name>
      <anchor>5599ca04e1cb2004b327341632f5330e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::ipx</name>
      <anchor>ca4641af062c452d60ca6fc66f841b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePersp&lt; 0 &gt;::spans</name>
      <anchor>561e3eac4974a1fbbfdbf0e4311a4225</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::InterpolateScanlinePerspCommon</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1InterpolateScanlinePerspCommon.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePerspCommon::dIzdx</name>
      <anchor>fdd54bc0db7b728c7bb559702f53b78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePerspCommon::dIzdx_f</name>
      <anchor>91eecad692d82c2cedea66c1fe6f38c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePerspCommon::dIzdx_fLast</name>
      <anchor>fa32c2ef7f7cccfc540f731d518d9863</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePerspCommon::Iz</name>
      <anchor>593711e616e5bfb05c8d833826957aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::InterpolateScanlinePerspCommon::Iz_f</name>
      <anchor>c39e0667fc9718c64e55ff17b7142d2c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::iScanlineRenderer</name>
    <base>iBase</base>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1iScanlineRenderer.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::ScanlineProc</name>
      <anchor>3cc0c1b3536c6e412eaa2e195ef5acd8</anchor>
      <arglist>(iScanlineRenderer *_This, InterpolateEdgePersp &amp;L, InterpolateEdgePersp &amp;R, int ipolStep, int ipolShift, uint32 *dest, uint len, uint32 *zbuff)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::SetupMesh</name>
      <anchor>ccf083b66c7463a22828d3792273560e</anchor>
      <arglist>(TexturesMask availableTextures, BuffersMask availableBuffers, const csRenderMeshModes &amp;modes, bool needColors, RenderInfoMesh &amp;renderInfoMesh)=0</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::SetupTriangle</name>
      <anchor>f77cf6cabd51db9b312b4e373604123e</anchor>
      <arglist>(SoftwareTexture **textures, const RenderInfoMesh &amp;renderInfoMesh, RenderInfoTriangle &amp;renderInfoTri)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::iScanlineRenderer::RenderInfoMesh</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1iScanlineRenderer_1_1RenderInfoMesh.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::RenderInfoMesh::bufferComps</name>
      <anchor>4a1397d71557be84630997c327da9b23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::RenderInfoMesh::desiredBuffers</name>
      <anchor>27371a931dc4998cfd7f833f64519437</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::RenderInfoMesh::renderer</name>
      <anchor>87ab5c4271fbbc8eb1da7178dcd45a1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::iScanlineRenderer::RenderInfoTriangle</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1iScanlineRenderer_1_1RenderInfoTriangle.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::RenderInfoTriangle::denormBuffers</name>
      <anchor>438b4c4285a0ffc6d543bbee867ccd4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::RenderInfoTriangle::denormFactors</name>
      <anchor>f52bc862f00d11c48f45aa0e4fd47a7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::iScanlineRenderer::RenderInfoTriangle::proc</name>
      <anchor>d90be312b10e8311c208684af696d3c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::iSoftShaderRenderInterface</name>
    <base>iBase</base>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1iSoftShaderRenderInterface.html</filename>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::Pixel</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1Pixel.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::operator *=</name>
      <anchor>5ab65470349e4b92565637eb9f303203</anchor>
      <arglist>(const uint8 x)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::operator+</name>
      <anchor>20620288752e49b5125dc04b4d6ac761</anchor>
      <arglist>(const Pixel other)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::operator+=</name>
      <anchor>f2564d23c9e87dd7849fcb6e29335879</anchor>
      <arglist>(const Pixel other)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::operator~</name>
      <anchor>c79035989bf8ee3cc213d04d201cfaf1</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::Pixel</name>
      <anchor>3b2dde384d170a617052524dab5dbeba</anchor>
      <arglist>(uint32 ui)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::Pixel</name>
      <anchor>d7440289791732c53eb0e825efe1e0cb</anchor>
      <arglist>(uint8 r, uint8 g, uint8 b, uint8 a)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::Pixel</name>
      <anchor>92f7e6f19830a1bee62b2e983cdec2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::operator *</name>
      <anchor>185e4bec29dc840821fba93657f0b7a9</anchor>
      <arglist>(const Pixel p, const uint8 x)</arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::operator *</name>
      <anchor>528a5997b99f065a999ab71fa695062b</anchor>
      <arglist>(const Pixel p1, const Pixel p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::Pixel::tag_c</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1Pixel_1_1tag__c.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::tag_c::a</name>
      <anchor>f9b596c1839a7a6398aa4440251e7c66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::tag_c::b</name>
      <anchor>5be2d400d2e9373469cc15357a1a102f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::tag_c::g</name>
      <anchor>fad8fad4d0875e3e680527952e1bfd21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::Pixel::tag_c::r</name>
      <anchor>3d4f6ef97bc34af49cc8a13d72075e79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::ScanlineComp</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1ScanlineComp.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::ScanlineComp::c</name>
      <anchor>1757576f4bfeb432fa93da8cd2b08c5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::ScanlineComp::dcdx</name>
      <anchor>1ea1b6c7e30fb9a5dec58d6858295d1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::ScanlineCompDivZ</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1ScanlineCompDivZ.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::ScanlineCompDivZ::dIcdx</name>
      <anchor>a5952693003844d6947c9ea711550985</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::ScanlineCompDivZ::dIcdxLast</name>
      <anchor>5db78dbd396f4f989c7b81c87710467c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::ScanlineCompDivZ::Ic</name>
      <anchor>8708fffb374cc8c6b41a396fb5296ab6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::PluginCommon::SoftShader::SoftwareTexture</name>
    <filename>structCS_1_1PluginCommon_1_1SoftShader_1_1SoftwareTexture.html</filename>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::and_h</name>
      <anchor>8e31705d582f2e9e43f11f79775e32b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::h</name>
      <anchor>16ad63e5281955e8c0ea847cf6ebfacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::shf_h</name>
      <anchor>bd14056b071ce83ceeb34e5d8e15475d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::and_w</name>
      <anchor>da1e087e3cfabbe561c0ba85d8a7964b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::bitmap</name>
      <anchor>4dc70c67df6280ce367200fb86fe589b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::shf_w</name>
      <anchor>acc9e20e1f3b618d15e4f0f92a13681f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginCommon::SoftShader::SoftwareTexture::w</name>
      <anchor>79349e546d487e655d5a4192cca93dcd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::ShaderVarName</name>
    <filename>structCS_1_1ShaderVarName.html</filename>
    <member kind="function">
      <name>ShaderVarName::operator csStringID</name>
      <anchor>781b561172cde22f84083eb75e8addcc</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>ShaderVarName::ShaderVarName</name>
      <anchor>23d3def870ccc8372eafbd0cbd17c9f4</anchor>
      <arglist>(iStringSet *strings, const char *name)</arglist>
    </member>
    <member kind="function">
      <name>ShaderVarName::ShaderVarName</name>
      <anchor>06c239a7819b4446d986eb5c9cf9245f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ShaderVarName::name</name>
      <anchor>e6b82f60384e0d19d27167a782d7330a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::SndSys::SndSysBasicStream::StreamNotificationEvent</name>
    <filename>structCS_1_1SndSys_1_1SndSysBasicStream_1_1StreamNotificationEvent.html</filename>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::StreamNotificationEvent::m_Frame</name>
      <anchor>9ae0b7f1631e5006d5dc7298d45e5d6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SndSys::SndSysBasicStream::StreamNotificationEvent::m_Type</name>
      <anchor>1734ec15f87ae5485d786734c3667d5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TriangleT</name>
    <filename>structCS_1_1TriangleT.html</filename>
    <member kind="function">
      <name>TriangleT::TriangleT</name>
      <anchor>210d4b0ae103c773e60e9de68cbe78bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>TriangleT::TriangleT</name>
      <anchor>22453d36ce1e6d7d774a486ac487287d</anchor>
      <arglist>(const T &amp;_a, const T &amp;_b, const T &amp;_c)</arglist>
    </member>
    <member kind="function">
      <name>TriangleT::TriangleT</name>
      <anchor>b6b27594608e78f3f0b82c2fb21dea56</anchor>
      <arglist>(const TriangleT &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>TriangleT::operator=</name>
      <anchor>d3032824ef7e008205c3576135eae958</anchor>
      <arglist>(const TriangleT &amp;t)</arglist>
    </member>
    <member kind="function">
      <name>TriangleT::operator[]</name>
      <anchor>5d40370e0e23f530fdb1a5d265e60501</anchor>
      <arglist>(size_t n)</arglist>
    </member>
    <member kind="function">
      <name>TriangleT::operator[]</name>
      <anchor>b58770454f1607f6ee2ffe9459cc2bd9</anchor>
      <arglist>(size_t n) const </arglist>
    </member>
    <member kind="function">
      <name>TriangleT::Set</name>
      <anchor>c0f37e5df82382b29b240193943851a7</anchor>
      <arglist>(const T &amp;_a, const T &amp;_b, const T &amp;_c)</arglist>
    </member>
    <member kind="function">
      <name>TriangleT::a</name>
      <anchor>1aa32e15205b1a4387364e502fcaa5d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TriangleT::b</name>
      <anchor>88196f79568eb32163bcc22f81048105</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TriangleT::c</name>
      <anchor>a91e4ad17acaed80761f7762b3f6e747</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TriangleT::components</name>
      <anchor>197cde89f285ccb200bb0b247fbb09bf</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::Implementation::IsReferenceImpl</name>
    <filename>structCS_1_1TypeTraits_1_1Implementation_1_1IsReferenceImpl.html</filename>
    <member kind="function">
      <name>TypeTraits::Implementation::IsReferenceImpl::value</name>
      <anchor>6e03a7d1b13505e86ba732afe5eb950e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::Implementation::IsSameImpl</name>
    <filename>structCS_1_1TypeTraits_1_1Implementation_1_1IsSameImpl.html</filename>
    <member kind="function">
      <name>TypeTraits::Implementation::IsSameImpl::t</name>
      <anchor>be25f4b36e6e0cbfa97fec8c4d06a7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeTraits::Implementation::IsSameImpl::u</name>
      <anchor>f5e9e87a5cfa02879c790553acf4cd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeTraits::Implementation::IsSameImpl::value</name>
      <anchor>2d67901945465d7c842f58202423efc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::Implementation::NoType</name>
    <filename>structCS_1_1TypeTraits_1_1Implementation_1_1NoType.html</filename>
    <member kind="function">
      <name>TypeTraits::Implementation::NoType::padding</name>
      <anchor>c5aee75679543fb74b8d7c89da67ff25</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::Implementation::TraitAnd</name>
    <filename>structCS_1_1TypeTraits_1_1Implementation_1_1TraitAnd.html</filename>
    <member kind="function">
      <name>TypeTraits::Implementation::TraitAnd::value</name>
      <anchor>fe3fc8711884d49374cc33fdb3cae467</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name> true, true, true, true, true, true, true </name>
    <filename>structCS_1_1TypeTraits_1_1Implementation_1_1TraitAnd_3_01true_00_01true_00_01true_00_01true_00_01true_00_01true_00_01true_01_4.html</filename>
    <member kind="function">
      <name>TypeTraits::Implementation::TraitAnd&lt; true, true, true, true, true, true, true &gt;::value</name>
      <anchor>2f0914d36ff88bb41d4158e87c60f252</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::Implementation::Wrap</name>
    <filename>structCS_1_1TypeTraits_1_1Implementation_1_1Wrap.html</filename>
    <member kind="function">
      <name>TypeTraits::Implementation::Wrap::Wrap</name>
      <anchor>adf0278288d1a4932f63ab3e56c9e41b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::IsReference</name>
    <filename>structCS_1_1TypeTraits_1_1IsReference.html</filename>
    <member kind="function">
      <name>TypeTraits::IsReference::value</name>
      <anchor>f0f1fd0de252ca582272fe0aef80b2b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CS::TypeTraits::IsSame</name>
    <filename>structCS_1_1TypeTraits_1_1IsSame.html</filename>
    <member kind="function">
      <name>TypeTraits::IsSame::value</name>
      <anchor>e4021227f7a9c459e762c42e3fd91b65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAlphaMode</name>
    <filename>structcsAlphaMode.html</filename>
    <member kind="function">
      <name>AlphaType</name>
      <anchor>b3d92a9f20c74d102be12658acbbbe49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lphaNone</name>
      <anchor>b3d92a9f20c74d102be12658acbbbe4959f8357f7b161b54cd7a2157cf84222f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lphaBinary</name>
      <anchor>b3d92a9f20c74d102be12658acbbbe49db03463485f17c707606c07e70064b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lphaSmooth</name>
      <anchor>b3d92a9f20c74d102be12658acbbbe49880a09262f687b5a986a37c1821de495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>alphaType</name>
      <anchor>9234727bfd958687b1271031702ca66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>autoAlphaMode</name>
      <anchor>61e0a26dfe81e7fc3cded15ff735be0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>autoModeTexture</name>
      <anchor>14adf8db00f3dd9f1650e672fba21c92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAnsiParser::CommandParams</name>
    <filename>structcsAnsiParser_1_1CommandParams.html</filename>
    <member kind="function">
      <name>CommandParams::attrVal</name>
      <anchor>8014d206187e4b019aa22aa5c411e41a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CommandParams::colorVal</name>
      <anchor>78afcfad1ad41ef21786e7812ae33850</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CommandParams::cursorVal</name>
      <anchor>a5be475afa9a08877fef99d175dc13c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csAnsiParser::CursorParams</name>
    <filename>structcsAnsiParser_1_1CursorParams.html</filename>
    <member kind="function">
      <name>CursorParams::x</name>
      <anchor>9d268cd94cdfc6982b758011acdf23d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CursorParams::y</name>
      <anchor>22be0c7ed7d45b7e00f3500190a77550</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csArrayCapacityDefault</name>
    <base>csArrayCapacityLinear&lt; csArrayThresholdVariable &gt;</base>
    <filename>structcsArrayCapacityDefault.html</filename>
    <member kind="function">
      <name>csArrayCapacityDefault</name>
      <anchor>abff770732715325f4eaaa7820667410</anchor>
      <arglist>(const size_t x)</arglist>
    </member>
    <member kind="function">
      <name>csArrayCapacityDefault</name>
      <anchor>be7e8db20ad5fa630c24507bb986b9fa</anchor>
      <arglist>(const csArrayThresholdVariable &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <name>csArrayCapacityDefault</name>
      <anchor>75f46f72b3f45adc872901cf2e8c9695</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBigEndian</name>
    <filename>structcsBigEndian.html</filename>
    <member kind="function">
      <name>Convert</name>
      <anchor>992dfa74eca30fe3c94edf1aa2afb559</anchor>
      <arglist>(int64 l)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>a75f1f7a91f448afe262f033d42ed2b1</anchor>
      <arglist>(uint64 l)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>b5ed04d68519cf6ea81365c17bbcc021</anchor>
      <arglist>(int32 l)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>a6d57e13167f0c29c58b28d2d87cf80d</anchor>
      <arglist>(uint32 l)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>41fc57233ffeece64c62fb4be7c1b934</anchor>
      <arglist>(int16 s)</arglist>
    </member>
    <member kind="function">
      <name>Int16</name>
      <anchor>cd0043b2336f16ac2ede13aa1a1d08bc</anchor>
      <arglist>(int16 x)</arglist>
    </member>
    <member kind="function">
      <name>Int32</name>
      <anchor>4675550524e8be4c7270fe6936294517</anchor>
      <arglist>(int32 x)</arglist>
    </member>
    <member kind="function">
      <name>Int64</name>
      <anchor>51e0474ffbe5f33a38ad970f5e9529e4</anchor>
      <arglist>(int64 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt16</name>
      <anchor>d9487c9434d18f390317bd505711ed0c</anchor>
      <arglist>(uint16 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt32</name>
      <anchor>fc23854c7240eac3b726eecced934e8f</anchor>
      <arglist>(uint32 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt64</name>
      <anchor>96c93373e7584c18fb94a057c434900f</anchor>
      <arglist>(uint64 x)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>31f915351c5c0c9a2b4d97bf07740538</anchor>
      <arglist>(uint16 s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBitmapMetrics</name>
    <filename>structcsBitmapMetrics.html</filename>
    <member kind="function">
      <name>height</name>
      <anchor>04f8a98cd4bb13e503dc04d2a2a74870</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>decd5c98d4de92f88d8b37460cb2bacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>top</name>
      <anchor>60c8d7a93ceeb76dd1b7385a681cd227</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>width</name>
      <anchor>0476b883a91814827a3a74b9478e46c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBitmaskToString::MaskNames</name>
    <filename>structcsBitmaskToString_1_1MaskNames.html</filename>
    <member kind="function">
      <name>MaskNames::bits</name>
      <anchor>4b150ee2643ad4d07f8a4724a0ae42b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MaskNames::name</name>
      <anchor>524877b351db2d6f33cb7a0de3ee1554</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBox3::bEdge</name>
    <filename>structcsBox3_1_1bEdge.html</filename>
    <member kind="function">
      <name>bEdge::fl</name>
      <anchor>8c7ffb43361eddf33ee3c8006c546a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bEdge::fr</name>
      <anchor>76936eee3dbcaa3e00b318e0c7878d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bEdge::v1</name>
      <anchor>afcdb017fc37fe5d440da616e9a389c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>bEdge::v2</name>
      <anchor>d116802ebee10bb0d637c120824faaec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csBox3::Outline</name>
    <filename>structcsBox3_1_1Outline.html</filename>
    <member kind="function">
      <name>Outline::num</name>
      <anchor>3dcc67dfe8a4fc839a90fd6a120fbea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Outline::num_sides</name>
      <anchor>a28132ee233a01a73b3ea2e7330d8e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Outline::sides</name>
      <anchor>4770a13cd1556ef47a80d4db89822897</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function">
      <name>Outline::vertices</name>
      <anchor>3af2769526ce3541890ec4b9e533359b</anchor>
      <arglist>[8]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csClipInfo</name>
    <filename>structcsClipInfo.html</filename>
    <member kind="function">
      <name>csClipInfo</name>
      <anchor>c6df29bf2ae566f9e66ebc20777b24dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>54d75370a3b0fff7531db094e9c2fb64</anchor>
      <arglist>(int indent)</arglist>
    </member>
    <member kind="function">
      <name>~csClipInfo</name>
      <anchor>7dc595931ba65a04389636267b62d6b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>8ee07ab026404466d8e4771a0834d270</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ci1</name>
      <anchor>08c9b1675c379be0105aa622e16393a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ci2</name>
      <anchor>801b6fb0fb8763a46e2cab58086186cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>i1</name>
      <anchor>0331caac2fd7c9d1e1b66629234d3393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>i2</name>
      <anchor>4c5f7bfd46089df9b716cf673b0ad1da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>idx</name>
      <anchor>dfa938852c03654d0dd0d325441a5931</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>r</name>
      <anchor>0ac16074521d122743c8c396842c8c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Copy</name>
      <anchor>553df9452e46699ce6e1c4e6f86d87da</anchor>
      <arglist>(csClipInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Move</name>
      <anchor>67553540381000245b21f4ea4328933f</anchor>
      <arglist>(csClipInfo &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCLQAttenuation</name>
    <filename>structcsCLQAttenuation.html</filename>
    <member kind="function">
      <name>csCLQAttenuation</name>
      <anchor>58d825fb574688279d1b62517cd8884a</anchor>
      <arglist>(const csLightProperties &amp;light)</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>cdfdc36d97116ca9a97d190360df2fb7</anchor>
      <arglist>(float distance, float &amp;dp) const </arglist>
    </member>
    <member kind="function">
      <name>attnVec</name>
      <anchor>c753967c7ebddaed97208bd57e73226c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCollisionPair</name>
    <filename>structcsCollisionPair.html</filename>
    <member kind="function">
      <name>a2</name>
      <anchor>a8331af1c313e1f4e96f59baf6dd482b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>b2</name>
      <anchor>1cfb84ba1cbc8915b659c77ede57e1e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>c2</name>
      <anchor>a2e2655797cd1d4d3ce166aba2e8f49c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>a1</name>
      <anchor>b3b3f25eea4a9acf256d6e39a65035f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>b1</name>
      <anchor>79a8583df43a3e68033967fd41e65a1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>c1</name>
      <anchor>40e32356cc24af3ff53fbf484a181952</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommandEventData</name>
    <filename>structcsCommandEventData.html</filename>
    <member kind="function">
      <name>Code</name>
      <anchor>e8f9c961366d4b2426e56c5b59c53b71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Info</name>
      <anchor>05b51e2ed396156ca77bab1f78234408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCommandLineOption</name>
    <filename>structcsCommandLineOption.html</filename>
    <member kind="function">
      <name>csCommandLineOption</name>
      <anchor>f36078bcf129b524612c8e13dbe2903a</anchor>
      <arglist>(char *iName, char *iValue)</arglist>
    </member>
    <member kind="function">
      <name>~csCommandLineOption</name>
      <anchor>c7c3c4061a2d675e7465bfc71da12a9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Name</name>
      <anchor>467fe7aac571741f43d9dade2646aad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>ff0ab45361ce92d85a33b381deb7c9db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCompressVertex</name>
    <filename>structcsCompressVertex.html</filename>
    <member kind="function">
      <name>new_idx</name>
      <anchor>026bc21c2f871c939fa09f054ab616ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orig_idx</name>
      <anchor>301dd85964c8ade4f58ed4198d3feb98</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>used</name>
      <anchor>e3e383ff1c56f2f8990a4a7cf455fca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>60ee98506e0a757c8e80bc585dd13f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>d978314d284814884136022e71924711</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>0a1b12debf30b760d49cd6f9dcd496a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCompressVertexInfo</name>
    <filename>structcsCompressVertexInfo.html</filename>
    <member kind="function">
      <name>a</name>
      <anchor>f11d514f82d8f4f4c2236b9d49fc9f33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>b</name>
      <anchor>f2cdc7727c6f16fd37e50b41a2d5213e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>g</name>
      <anchor>c5693519dd6d8bef68acab6195a9be46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>new_idx</name>
      <anchor>91a46b52eaf062375cb8599cd72ba584</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nx</name>
      <anchor>11a2c4012130a702dc26621616df3079</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ny</name>
      <anchor>585d3703c9e1ca25049bdeba944fdf6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>nz</name>
      <anchor>04c579deb8fdf5b6fe82f09576a31dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orig_idx</name>
      <anchor>bd2966bb83107aa5c1a5c1ab0a777018</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>r</name>
      <anchor>3d67ebf0fb4b341731a3abcf5877ec7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>u</name>
      <anchor>e9dae82ddc5cb456376f1acb29f97887</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>used</name>
      <anchor>1ced616c8aeab1187be7a76df69287d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>v</name>
      <anchor>a300e8daaf840179e6fdc4c185742ddb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>d62e7f69657a16912e81fc05ec78b3c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>a59b5f4c74b1ccf6142d42aaa972e957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z</name>
      <anchor>748d6c37633c8e658a68e07a709635b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCoreRenderMesh</name>
    <filename>structcsCoreRenderMesh.html</filename>
    <member kind="function">
      <name>csCoreRenderMesh</name>
      <anchor>bf3ce4bcd61b83f618294ec043399190</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csCoreRenderMesh</name>
      <anchor>470e5056f7cc5343b11e4e1689133233</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>indexend</name>
      <anchor>299ff12f55436838afdae35f62f9de3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clip_plane</name>
      <anchor>3c35f6d5e8d5da5a832374ddd03714d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clip_portal</name>
      <anchor>afa7c7b1d36da72e6bf573f82452fbb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clip_z_plane</name>
      <anchor>e2e0fc17635f046dff994b06122906d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>db_mesh_name</name>
      <anchor>ffb991132d48d8d860a372989ea385b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>do_mirror</name>
      <anchor>91b1e6a5c386d7dde3ac02f3bab9a8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indexstart</name>
      <anchor>240ba4344d046f8af60869d1acc3fef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>material</name>
      <anchor>e9b1eeff54033825df54436192070703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>meshtype</name>
      <anchor>17a9a2deb7ff1dde7350968b4e61a5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object2world</name>
      <anchor>82a54b280a1146694a458c0b4ac16fa7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csCtoW</name>
    <filename>structcsCtoW.html</filename>
    <member kind="function">
      <name>csCtoW</name>
      <anchor>2fb293aba8d59eee4d76339fc3219146</anchor>
      <arglist>(const char *s)</arglist>
    </member>
    <member kind="function">
      <name>~csCtoW</name>
      <anchor>8e3df064500c6d3cbe0a246c399eb005</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator const wchar_t *</name>
      <anchor>59691abbc218e8ef54f60296c26c851a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventCord::PluginData</name>
    <filename>structcsEventCord_1_1PluginData.html</filename>
    <member kind="function">
      <name>PluginData::next</name>
      <anchor>b9889440fa5c954d4343b6029e5fe63f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginData::plugin</name>
      <anchor>70986a5af686074cbae961023fcaa03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PluginData::priority</name>
      <anchor>f5555869d8571beb0ea8a0a35b3df3e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csEventQueue::iTypedFrameEventDispatcher</name>
    <base>iEventHandler</base>
    <filename>structcsEventQueue_1_1iTypedFrameEventDispatcher.html</filename>
    <member kind="function">
      <name>iTypedFrameEventDispatcher::iTypedFrameEventDispatcher</name>
      <anchor>8043cea711c6fe0e6cf52747e1080f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iTypedFrameEventDispatcher::~iTypedFrameEventDispatcher</name>
      <anchor>37c3cdd006072492b3cda1c6aa289718</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>iTypedFrameEventDispatcher::parent</name>
      <anchor>c157b4a4db25cca99f8ce65eadc8d942</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iTypedFrameEventDispatcher::sendEvent</name>
      <anchor>006c379fab448740ef84ef62a19d3c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>iTypedFrameEventDispatcher::HandleEvent</name>
      <anchor>437d9e499da5d56cae005fe99a24ed47</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFileTime</name>
    <filename>structcsFileTime.html</filename>
    <member kind="function">
      <name>day</name>
      <anchor>454fa941fcc07ff0327e8d713e62b7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hour</name>
      <anchor>0e1c8d78a8873ede957df145eda34b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>min</name>
      <anchor>69ce47337dd466231d2ef1d05aff1757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mon</name>
      <anchor>0c432bfa0df7135e47f21a69dfae2f71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sec</name>
      <anchor>88d15c0b946e0c2fbb4e8dab4733de39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>year</name>
      <anchor>bc3e92298ecdb4035649bbc080802227</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixedSizeAllocator::BlockKey</name>
    <filename>structcsFixedSizeAllocator_1_1BlockKey.html</filename>
    <member kind="function">
      <name>BlockKey::BlockKey</name>
      <anchor>b694157735400d65c7fae3ded018f04c</anchor>
      <arglist>(uint8 const *p, size_t n)</arglist>
    </member>
    <member kind="function">
      <name>BlockKey::addr</name>
      <anchor>7cd45c6e32ab1ab336e79ccd54f2f7eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BlockKey::blocksize</name>
      <anchor>effc38fdc01939d9fcfc5d5947119e03</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixedSizeAllocator::BlocksWrapper</name>
    <filename>structcsFixedSizeAllocator_1_1BlocksWrapper.html</filename>
    <member kind="function">
      <name>BlocksWrapper::b</name>
      <anchor>69533886727c8bdffe21762859578f0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFixedSizeAllocator::FreeNode</name>
    <filename>structcsFixedSizeAllocator_1_1FreeNode.html</filename>
    <member kind="function">
      <name>FreeNode::next</name>
      <anchor>483be44e73a585af04368fc7ac4e7a8f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFog</name>
    <filename>structcsFog.html</filename>
    <member kind="function">
      <name>csFog</name>
      <anchor>727065e1236f8caa55b1ea5ccd049136</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>58776b24a00dc414fb1f5e04cf654865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>density</name>
      <anchor>e05ada46a47e64ca812ba52a656d15d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>1bc8a0f83ef3037923000c5e805d639a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mode</name>
      <anchor>ada72c78e3565f07377609a80143c36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>56e2f86349873d3ba89a6576b2e0dfd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache::FontDeleteNotify</name>
    <base>scfImplementation1</base>
    <filename>structcsFontCache_1_1FontDeleteNotify.html</filename>
    <member kind="function">
      <name>FontDeleteNotify::cache</name>
      <anchor>0a846ba11d9cbaf02d2ee46e77c14ead</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache::GlyphCacheData</name>
    <filename>structcsFontCache_1_1GlyphCacheData.html</filename>
    <member kind="function">
      <name>GlyphCacheData::flags</name>
      <anchor>505668c86e50f412c33b99a25a63bc72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlyphCacheData::font</name>
      <anchor>ea4f514740abadf5b31c87e5f4cc5fc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlyphCacheData::glyph</name>
      <anchor>d5749295f1ec73ded5f9f92656c7c63c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlyphCacheData::glyphMetrics</name>
      <anchor>8590499841ca8f452c9fd23515e6123a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlyphCacheData::hasGlyph</name>
      <anchor>110992ec2310e52196321b8deffb76ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache::KnownFont</name>
    <filename>structcsFontCache_1_1KnownFont.html</filename>
    <member kind="function">
      <name>KnownFont::font</name>
      <anchor>a0c5947948c36439f6584cbd1c6ec7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KnownFont::planeGlyphs</name>
      <anchor>9c58748273b46d61bc30f6918493a233</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KnownFont::fontSize</name>
      <anchor>915f21a738b3a7119bde25aaaf068788</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache::LRUEntry</name>
    <filename>structcsFontCache_1_1LRUEntry.html</filename>
    <member kind="function">
      <name>LRUEntry::cacheData</name>
      <anchor>0ec7a30406b0ba576089b07534e8c915</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LRUEntry::next</name>
      <anchor>6cf0f6ce135703c2643251a3092e83c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LRUEntry::prev</name>
      <anchor>7f14649f5a2138347b069517841d031e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csFontCache::PlaneGlyphs</name>
    <filename>structcsFontCache_1_1PlaneGlyphs.html</filename>
    <member kind="function">
      <name>PlaneGlyphs::PlaneGlyphs</name>
      <anchor>d51d13bbfe733bd0bac815085867f7e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PlaneGlyphs::usedGlyphs</name>
      <anchor>06c164a9ba69d4d318e7f51d1f2370ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PlaneGlyphs::entries</name>
      <anchor>2381f50b4665017458d361cfc722a02e</anchor>
      <arglist>[GLYPH_INDEX_LOWER_COUNT]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGetFromAddress</name>
    <filename>structcsGetFromAddress.html</filename>
    <member kind="function">
      <name>Int16</name>
      <anchor>3913ef9207884a60887239e73daff350</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>Int32</name>
      <anchor>c289fe064f86b1bdfad6c27d424ddbbf</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>Int64</name>
      <anchor>037280e564ae8c65b662a200d42e39eb</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>UInt32</name>
      <anchor>353df23df049930d02e8f47240457dc4</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>UInt64</name>
      <anchor>824479434debb9435e7f03c241fcf1bf</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
    <member kind="function">
      <name>UInt16</name>
      <anchor>7e7fa9e395de01fbc42135e3d29dd73b</anchor>
      <arglist>(const void *buff)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLExtensionFlags</name>
    <filename>structcsGLExtensionFlags.html</filename>
    <member kind="function">
      <name>tested_CS_GL_3DFX_texture_compression_FXT1</name>
      <anchor>cea0341092d5368546c2db85e53a81b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_APPLE_client_storage</name>
      <anchor>9fcf3249e39e45cd337e2f278d388a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_APPLE_element_array</name>
      <anchor>4d6d752f733b1fbb2c7c33a520532f8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_APPLE_fence</name>
      <anchor>5e95cbce06b960c1b01826ddaa168b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_APPLE_vertex_array_object</name>
      <anchor>39142585ef02d2414062d8ca4a05c032</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_APPLE_vertex_array_range</name>
      <anchor>d94549b76a4faf0c7bfdc2cf7c93bb51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_depth_texture</name>
      <anchor>2682ec8c3bc473b74a6f2d2ee36281d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_draw_buffers</name>
      <anchor>34afc248eb1cc1c706e1a1e20f77fb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_fragment_program</name>
      <anchor>825915efcfc709dcb5162975d90653e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_fragment_shader</name>
      <anchor>96647386edb079566e6d286764a4163c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_imaging</name>
      <anchor>b0bd1310653631d92ced9ab3afd301af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_matrix_palette</name>
      <anchor>be26fe8845314ebf9a143bbd9115aacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_multisample</name>
      <anchor>28b07dd501570b973f327861fdf2c1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_multitexture</name>
      <anchor>bf301848f737f624d9a62203a1e0955d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_occlusion_query</name>
      <anchor>b771ae3404b73db3275e70ba08de4a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_pixel_buffer_object</name>
      <anchor>64c17400d19d34ed25da140bbbcea988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_point_parameters</name>
      <anchor>382ac4d1239ce5c259123e1582285371</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_point_sprite</name>
      <anchor>af8f8a9e855082812d0b97650bd0f8e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_shader_objects</name>
      <anchor>810e553d382dea4ddc6e61562d5d588a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_shading_language_100</name>
      <anchor>4892864fc881d71b1f4f20304429c581</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_shadow</name>
      <anchor>77507db31437a47bb68fde28d14fc587</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_shadow_ambient</name>
      <anchor>0af0a10198cfd69bf12e39e9d5b48cf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_border_clamp</name>
      <anchor>f8ccf8245046dd664adbfbdd43590913</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_compression</name>
      <anchor>9aba508126265a8c8dfbbc35a7b08ab9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_cube_map</name>
      <anchor>fcd475d2711c1513031d86562e5330ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_env_add</name>
      <anchor>42679b8f5238b03ef728b93f2d157283</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_env_combine</name>
      <anchor>74cc5892bac0e1fe10583fff8b0a2b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_env_crossbar</name>
      <anchor>690df082c60459864c9f044b5f40f01d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_env_dot3</name>
      <anchor>50e49c65de0a43dbc74cd507cdde31d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_mirrored_repeat</name>
      <anchor>2a68f4202b93c19e9090f625e64ea2e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_non_power_of_two</name>
      <anchor>3b51a64be119266b370ca0dcd42eacb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_texture_rectangle</name>
      <anchor>9a8069b504e4725b76201a71d9ce83cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_transpose_matrix</name>
      <anchor>be949dc91a7e4d6b1261691251ea5d87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_vertex_blend</name>
      <anchor>853773dc7243d3bbfd067d9b5316cad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_vertex_buffer_object</name>
      <anchor>fc40d9fcaf86a097a28a885ca3550165</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_vertex_program</name>
      <anchor>e0b166344dda78c5368dc7c7a05ab38a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_vertex_shader</name>
      <anchor>aca21b324d71c527b9a91af7751b8307</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ARB_window_pos</name>
      <anchor>32e5403e4a9b7fbfbde6c16bc1450a58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_element_array</name>
      <anchor>4ae22c9a2aa41d8d13f815b8d083ae46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_envmap_bumpmap</name>
      <anchor>99dfe113365303ba4ac3dd8e68c3818f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_fragment_shader</name>
      <anchor>516df2d4bb286c693bc25442751d0f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_pn_triangles</name>
      <anchor>c40f42dcc73400f305942b8f4ec11929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_separate_stencil</name>
      <anchor>3f6f3c86caf06b10e84c80f5f0a5b941</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_text_fragment_shader</name>
      <anchor>ded705ff9c194fc67068df7e3ef14610</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_texture_mirror_once</name>
      <anchor>588e62fa1a59e0b1f6ab6b323fd36c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_vertex_array_object</name>
      <anchor>c57c068b863aadf2d758c7abcb40aa86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_vertex_attrib_array_object</name>
      <anchor>11813ef64ed5e0283a55a3d22bd1056a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_ATI_vertex_streams</name>
      <anchor>45f5e44f43ae75913876b75ac78db401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_422_pixels</name>
      <anchor>4c4d969be6b99568ab9d2a9e0151f93a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_abgr</name>
      <anchor>00b2c7c58c7c95ce97b149b7cb6e1461</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_bgra</name>
      <anchor>4fe767d027d8f738b32622bd68db5bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_blend_color</name>
      <anchor>87543004399594abcc6a25d7afb4a923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_blend_equation_separate</name>
      <anchor>36310f3e5a812229e01bdb8c2bc11b50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_blend_func_separate</name>
      <anchor>43c14c785600254bef7d322c649ad050</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_blend_logic_op</name>
      <anchor>c3045e2935a6d67d6755547e171ac5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_blend_minmax</name>
      <anchor>9dc6551c3c331f3688dbd09a6cde66d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_blend_subtract</name>
      <anchor>06caccae3884d78a8abee8e1114a872c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_clip_volume_hint</name>
      <anchor>bb9d5593318d868cdf8f66d5cbb2bb4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_color_subtable</name>
      <anchor>125ce7c737ed8f5e09ea758d026aa2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_compiled_vertex_array</name>
      <anchor>6ab0f21be780b1273645331084bb5fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_convolution</name>
      <anchor>86436c4a230209ca75fe6f0383ebeb62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_fog_coord</name>
      <anchor>d93e62fd6bf5819e1e57e36a1204b0d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_framebuffer_object</name>
      <anchor>91ca82affd4383f991719762d8b20d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_histogram</name>
      <anchor>134af34bdb437e2ddff913b5cd857a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_multi_draw_arrays</name>
      <anchor>05c349bf4aa73a08378284efc61c7fb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_packed_depth_stencil</name>
      <anchor>af6ebe7fb11831f6e04c12648628520a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_packed_pixels</name>
      <anchor>cd5d7af9cafae00edc1a55c7cdb11c59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_paletted_texture</name>
      <anchor>9bdde2b60fdab9c4a9e362a95b674c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_pixel_buffer_object</name>
      <anchor>c641b7e614099f245735f7b11af28faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_point_parameters</name>
      <anchor>66f35e1f73a7d75a3f782d437103095c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_polygon_offset</name>
      <anchor>169a5c587ad14ccb0417924982c8e47b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_secondary_color</name>
      <anchor>b20dfba447e315eb858db7b4d22df832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_separate_specular_color</name>
      <anchor>49582c1760d350a494760ce487a5a84d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_shadow_funcs</name>
      <anchor>389f39376b8f76af97bb1d0b19bdeba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_shared_texture_palette</name>
      <anchor>0f8c50f53542ace58f75eb8065d75020</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_stencil_two_side</name>
      <anchor>f38d2cb412ae1e0b6f8bbce2012c440a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_stencil_wrap</name>
      <anchor>4695d24b5b58ab6de143522ad263bc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_subtexture</name>
      <anchor>fbcd4d296e74f8e17e1b49292bc38d23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture3D</name>
      <anchor>23ff46b575a152e4f82d650e1234ff2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_compression_s3tc</name>
      <anchor>f1187ebd6a6b8cda8a98c0a36a8c786a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_env_add</name>
      <anchor>bfe8c14f8c0407d86ef921b188a5b596</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_env_combine</name>
      <anchor>a3286b5ee4f1666d6d77816c8b661452</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_env_dot3</name>
      <anchor>48faf24e0ebba9cff2ae8d12174a57d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_filter_anisotropic</name>
      <anchor>2f9797c4cb84ccae1a228375ec0e376b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_lod_bias</name>
      <anchor>1028e73fca036f76fd640e378f594519</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_object</name>
      <anchor>da57abb564f3fe6a7283b02c5f411f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_rectangle</name>
      <anchor>2a5550cf62602fb8506cab8bcb7ea0cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_texture_sRGB</name>
      <anchor>6f9d71cc1a3c08a051f425a9fc45c654</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_vertex_array</name>
      <anchor>7888abdaabf24ece8e79983aa02caeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_vertex_shader</name>
      <anchor>c2bcb3793e4808cadfc372a8df3943b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_EXT_vertex_weighting</name>
      <anchor>62222e4a3e9606bd36017b6854dab47a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_GREMEDY_string_marker</name>
      <anchor>204740fbe23694c5bb8baf4d330e2875</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_HP_occlusion_test</name>
      <anchor>7da1621597edf1e69a4cfa3549ba56d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_IBM_cull_vertex</name>
      <anchor>5ea9c9f8359868e30753104b6230a800</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_IBM_multimode_draw_arrays</name>
      <anchor>80f71c5022489c8aa45285f9be296e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_IBM_raster_pos_clip</name>
      <anchor>d528e70886d1edb83c0ec53ffc0fb38d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_IBM_texture_mirrored_repeat</name>
      <anchor>7baea2406f3514308889bb65cd163b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_IBM_vertex_array_lists</name>
      <anchor>b82c6687c17a92cb7fd021a981d83b1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_MESA_resize_buffers</name>
      <anchor>2e864670b0ac3d8884fa7b6ec74fa8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_MESA_window_pos</name>
      <anchor>c38398c32d83580958578525dd9eed5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_blend_square</name>
      <anchor>6f52f875a0a80ef001a03b2a50c0347f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_copy_depth_to_color</name>
      <anchor>66bfb258f85b5e58ec6583a9d735ae8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_depth_clamp</name>
      <anchor>699675bbab873a73ffeedfd6a16eb60c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_element_array</name>
      <anchor>10593ad02a661ed1625ce120144cadb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_evaluators</name>
      <anchor>1e5388ae51103514167db3f6748f3bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_fence</name>
      <anchor>ca7c05e4fc7ac57bcef490a1d00f392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_float_buffer</name>
      <anchor>79762624158285aea1a04e99116d1dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_fog_distance</name>
      <anchor>2340f8bf47e0361a1c778a1af6a4bd10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_fragment_program</name>
      <anchor>5bed0d088fcc825f9e533c9a96f546df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_light_max_exponent</name>
      <anchor>7ce514a55f8993c9de4a18371037cc3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_multisample_filter_hint</name>
      <anchor>5a077d1893d4706e0e7b11f5559e500c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_occlusion_query</name>
      <anchor>a52a311837a15c346fa7b175966013be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_packed_depth_stencil</name>
      <anchor>74e52e30eccd3e01fca6b9891a31874e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_point_sprite</name>
      <anchor>c19e60e8f7a860dc9a1611fb0927796b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_primitive_restart</name>
      <anchor>fc46e2107171ef6c51c69a2cec69f523</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_register_combiners</name>
      <anchor>abe1ca0cfa38dc3938b9186f9fcdc267</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_register_combiners2</name>
      <anchor>26045a223f3854bf3ee9d8a37b5bed68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texgen_emboss</name>
      <anchor>3751419efe90d89ca23259eb519edcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texgen_reflection</name>
      <anchor>c80ef7016d4b911b49b82a49c19d7116</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texture_compression_vtc</name>
      <anchor>18533b03b6eb928a85b81a069c57342d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texture_env_combine4</name>
      <anchor>148d1c301f4c939a8f1af5ff00755227</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texture_rectangle</name>
      <anchor>3b18224cab7c72847bcd78263a55452f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texture_shader</name>
      <anchor>30ecf2f62c3ea696190ce53eef5cabe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texture_shader2</name>
      <anchor>4084ba19be46f7d792de470de7d9988e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_texture_shader3</name>
      <anchor>c2cfa81fdb423e72a2a60cac6bb9d76a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_vertex_array_range</name>
      <anchor>98dc91b9efb27d6379ea591e483b71b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_vertex_array_range2</name>
      <anchor>4b6ec80b354bac1fae26162793206234</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_vertex_program</name>
      <anchor>ddbd9ca280188a4da02416065a460542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_vertex_program1_1</name>
      <anchor>7ecd897f2963b3b4e637f49dfd19ac66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_NV_vertex_program2</name>
      <anchor>292aaf7e09618bdc0ddf5e69e19faf08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_OML_interlace</name>
      <anchor>1bcc2ba91a3b9d67ab2449dfaa05c79e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_OML_resample</name>
      <anchor>6aea6c0304a34b54392452e9355b7e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_OML_subsample</name>
      <anchor>92f15706c841f0869f731e871aa7e2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGI_color_matrix</name>
      <anchor>e586e5b007edcbe42c85ab6af84b1fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGI_color_table</name>
      <anchor>90e167d5d2ede4bcfb3f18add92bdda0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGI_texture_color_table</name>
      <anchor>808919ce5343c34763922b64ce52ec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_depth_texture</name>
      <anchor>98f5d9d0714a05dea40989ca66d4501f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_generate_mipmap</name>
      <anchor>7f559edae2f9bb1100927807b3dc13f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_multisample</name>
      <anchor>a0abba8f493d0b39b2c0cb61b1de421f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_pixel_texture</name>
      <anchor>67fc59b73069c47bd53eb4d31ba0433d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_texture_border_clamp</name>
      <anchor>558edf66a2d1165568070956bb23a16e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_texture_color_mask</name>
      <anchor>24b8af745b7e4710ffedfe4b1afb4e06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_texture_edge_clamp</name>
      <anchor>14e5c0e2136a1a55f6db2245c9c07f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIS_texture_lod</name>
      <anchor>2c794beafc581daf866e413108a1cdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIX_fog_offset</name>
      <anchor>3cd5eb5608ce5df2d06d37eecf55ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIX_interlace</name>
      <anchor>22901d35d5c37d118bd0734517a67f96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SGIX_shadow_ambient</name>
      <anchor>37b9ed849bfcf08f99aab9762aeb4b7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_SUN_vertex</name>
      <anchor>75dd9ef12628c4ada1d92fdfa9a240bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_version_1_2</name>
      <anchor>50fc10b67d471d4869e0f2aa99cc3f85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_version_1_3</name>
      <anchor>0c5792374690f3ca7f48dbedb608977b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_version_1_4</name>
      <anchor>c8a9ee82a00f3a46f0b4ce842f544679</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_version_1_5</name>
      <anchor>74559ba43af72d967717fc7431c826cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_version_2_0</name>
      <anchor>23fe3445dbaffb7860a86a901f8117d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_GL_version_2_1</name>
      <anchor>e2b2d38a0981a7ba7d98ce84e4bed13a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_ARB_buffer_region</name>
      <anchor>a5899eb08c0e1839eb835ddc10b61525</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_ARB_extensions_string</name>
      <anchor>28946eae5ad3e75599a5aebeddb5d10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_ARB_make_current_read</name>
      <anchor>f343967d0f69f3532391058965399407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_ARB_pbuffer</name>
      <anchor>2ae1c8cc37da525b64617b16f3c35a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_ARB_pixel_format</name>
      <anchor>3689ea5cd8e4d8fd75b0737bf4136b20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_ARB_render_texture</name>
      <anchor>4bdcdbefdcfd6ddd65c09e214d4c3544</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_EXT_extensions_string</name>
      <anchor>b4c3248f75d5b150067ad6f3245f3f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_EXT_make_current_read</name>
      <anchor>cfdc404f18adde354c3ae9822bb0cb7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_EXT_pbuffer</name>
      <anchor>ee99e45e3e756856944c04eec207b2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_EXT_pixel_format</name>
      <anchor>06f1b91e1511a9a39711d01942850340</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_EXT_swap_control</name>
      <anchor>2f53ff90e66fcbae5191d417f25bd95b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_I3D_digital_video_control</name>
      <anchor>357c23ab4274ada3f3decc50a24461e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_I3D_gamma</name>
      <anchor>d3640ca7c46c425e99d4f56f55a5107a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_I3D_genlock</name>
      <anchor>817a780328024ecead1590bea3c44e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_I3D_image_buffer</name>
      <anchor>a940a91e107ad4d681574d803961bff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_I3D_swap_frame_lock</name>
      <anchor>e1ac803f186d8a784c23d4f4f31dc1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>tested_CS_WGL_I3D_swap_frame_usage</name>
      <anchor>34e193f392622476d959e54c50b61c80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_3DFX_texture_compression_FXT1</name>
      <anchor>ce92f2b16274de2887a25813947fbe25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_APPLE_client_storage</name>
      <anchor>b918828cee623f556c5d30081da492bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_APPLE_element_array</name>
      <anchor>777f9916861b833f06633dae2b478fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_APPLE_fence</name>
      <anchor>236bc054f5e118b37d10b76e1c19ae45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_APPLE_vertex_array_object</name>
      <anchor>b8ee0ad9956b39b437631202aef3d2ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_APPLE_vertex_array_range</name>
      <anchor>b27e72311adc37affb17d29da83f3254</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_depth_texture</name>
      <anchor>0f8a82c583e1131607d2d4b335c97b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_draw_buffers</name>
      <anchor>0182648bf9278b8ba593339cd8dc173e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_fragment_program</name>
      <anchor>78fb610e59769e5aec4856d0194ea751</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_fragment_shader</name>
      <anchor>ae808ec30e630ddfaf776feca67e7fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_imaging</name>
      <anchor>3790a11a2d4762a672572247635c87c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_matrix_palette</name>
      <anchor>cf0e03d5d51a1a00b1c6221cd56df04f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_multisample</name>
      <anchor>aa6747cff124fc55a51881672ffd742f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_multitexture</name>
      <anchor>ca30ed9590518e81280623abcdd56c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_occlusion_query</name>
      <anchor>dca7133637ded42380b1c2263585f87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_pixel_buffer_object</name>
      <anchor>6f5f87515cdcb11d8bec4f4913841cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_point_parameters</name>
      <anchor>cabd0ce0b8329d72838cab04865f42dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_point_sprite</name>
      <anchor>c3b84d3746764e19be581aae005dacba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_shader_objects</name>
      <anchor>ba6cba570f149f904433a4b87938ec52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_shading_language_100</name>
      <anchor>f84b3f0060db67fae32e0f59f76ce68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_shadow</name>
      <anchor>4fec9ac379a2ec1e070a96416b286f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_shadow_ambient</name>
      <anchor>383650822890723073273ceca712f7c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_border_clamp</name>
      <anchor>869d03ee68507f838f4b356a8263570e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_compression</name>
      <anchor>2e87b308979a6c3b8657a18d014ecd2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_cube_map</name>
      <anchor>025888382fef6f7b42ffe6add367f2e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_env_add</name>
      <anchor>ea391e31cc102b9db513f5a9702f920f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_env_combine</name>
      <anchor>335f5e064b22420be1d19bf3b9cdd15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_env_crossbar</name>
      <anchor>95de616b6d640d802765124100e856be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_env_dot3</name>
      <anchor>fef2428005f289218bd0bda0551a05b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_mirrored_repeat</name>
      <anchor>80a63558a4d53995f52baf8474962612</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_non_power_of_two</name>
      <anchor>e29da6e68c8fcfe1c1c8c7f3bf1773d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_texture_rectangle</name>
      <anchor>d9837cd5dab742b724ec0295415c6cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_transpose_matrix</name>
      <anchor>11031efc8b1b4b2b3090fc495e6073ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_vertex_blend</name>
      <anchor>6a6d092367d957b148f77a47d8d8ff25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_vertex_buffer_object</name>
      <anchor>cb49711bf88e5706e99dc969c648ecdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_vertex_program</name>
      <anchor>f7d6f105f045ef308fc4c669b9e5a5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_vertex_shader</name>
      <anchor>4917b9deae952e652c89b225091eb638</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ARB_window_pos</name>
      <anchor>43b62e0197da4e945f549db0004f04f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_element_array</name>
      <anchor>c484dc8207366a262f9811c75e98ea4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_envmap_bumpmap</name>
      <anchor>9fdf3136392eb77b7cf52cf90eea864d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_fragment_shader</name>
      <anchor>d90cd62414d8dcba4c492fac27a6cdf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_pn_triangles</name>
      <anchor>392e1af11dbf361ae8d32958c2254ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_separate_stencil</name>
      <anchor>30717d5c89dd3281f3b09940a8cfba66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_text_fragment_shader</name>
      <anchor>1764723b87c1ab9d5beaf368d00180c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_texture_mirror_once</name>
      <anchor>a13a2c6723a02872fe69e3c36f24495e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_vertex_array_object</name>
      <anchor>79fd3c119bfbef55d730e5a75ed3d680</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_vertex_attrib_array_object</name>
      <anchor>394c8f612f33897fb918a8e7e75a1024</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_ATI_vertex_streams</name>
      <anchor>b8b0b8c469b42f95184004f573790a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_422_pixels</name>
      <anchor>db4d9da048708c2490c00ca4d019674b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_abgr</name>
      <anchor>9e09a78e5274e519a9797a9cd5d4057e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_bgra</name>
      <anchor>dad61c156a175c72ab30afcb032960d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_blend_color</name>
      <anchor>35fadd150cacec10286d1136ec8e4199</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_blend_equation_separate</name>
      <anchor>2e7495ec3634ea8461e91a2139e93518</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_blend_func_separate</name>
      <anchor>362643869abfbda07adebfa19991f794</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_blend_logic_op</name>
      <anchor>7fa92eed628dc5d24e287171f99560aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_blend_minmax</name>
      <anchor>192dd11bb68fad68ba85e129a4671fec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_blend_subtract</name>
      <anchor>386dbc4ab97c6e1a2dad3186d63a3399</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_clip_volume_hint</name>
      <anchor>3cf5779b084c555ce4db304e8ed13359</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_color_subtable</name>
      <anchor>cd28512cb303f189f55e73fd59903471</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_compiled_vertex_array</name>
      <anchor>7a5689f5918d119b39b46f7003642e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_convolution</name>
      <anchor>8896be0423e8e8df6ed30f6668edaa0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_fog_coord</name>
      <anchor>8f5db47bf92d6eac6b56646c31b5a506</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_framebuffer_object</name>
      <anchor>62a36553b42a4322988b2ebbe294b77e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_histogram</name>
      <anchor>faf46687a6a38302632455e6430d2122</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_multi_draw_arrays</name>
      <anchor>b18e2f3295627457f8c5eb6258b7d843</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_packed_depth_stencil</name>
      <anchor>5555def2c732b6be25360ee24b36a0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_packed_pixels</name>
      <anchor>556e0dec4d13e2bb7441b65bdcdec411</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_paletted_texture</name>
      <anchor>887ad889af2c4310402a3284e18727dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_pixel_buffer_object</name>
      <anchor>a21f3815194fa4bb45e610290a57ab3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_point_parameters</name>
      <anchor>bbc2a6f3ce7f6bdb6339227e634db76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_polygon_offset</name>
      <anchor>4d6315f1599bf86a36b9a78a76a3dd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_secondary_color</name>
      <anchor>6ed1dcbf8c073edbe9d32874c0f7af02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_separate_specular_color</name>
      <anchor>5787244d492d4d8f7229d4797f669402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_shadow_funcs</name>
      <anchor>11925c9adb5fd6af988dbb7cf7a84c14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_shared_texture_palette</name>
      <anchor>894f74af92d2d1695e7bbce3c67b3473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_stencil_two_side</name>
      <anchor>946fb3cbbb3695be4fe3444fe2bee24e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_stencil_wrap</name>
      <anchor>5d1b202a58bebd252f0efe744826d058</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_subtexture</name>
      <anchor>e524a76765ef17447a651d7cbc7e5889</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture3D</name>
      <anchor>f2b432c74de36e838fd086a034544c7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_compression_s3tc</name>
      <anchor>ede877bd5cfe46ee1333ee42a34e5f80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_env_add</name>
      <anchor>7d3b8d036ac438a9d4da66d4abd31700</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_env_combine</name>
      <anchor>17dd459e8ada9c1b00ab0054553f64d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_env_dot3</name>
      <anchor>9408b2eefc24c9430b273b1ce887d292</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_filter_anisotropic</name>
      <anchor>ac9c16a132c2c85184b2157f0aaa91d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_lod_bias</name>
      <anchor>37ea95c17e90e7c14b62f851b077c9ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_object</name>
      <anchor>41154f880a42f7014edcb0d4f8786064</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_rectangle</name>
      <anchor>4ba67a66ef50871b9f53e6bfabd535db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_texture_sRGB</name>
      <anchor>60a62fa43ab970ccaf79094043cf2f28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_vertex_array</name>
      <anchor>8b0b3f633a3b1a5cebf7a2984f271412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_vertex_shader</name>
      <anchor>7ca1c4262db2ef781fd0792401afeac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_EXT_vertex_weighting</name>
      <anchor>3323aa6eee0b13402fd3560ecd885c4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_GREMEDY_string_marker</name>
      <anchor>d6ec68a81882688306f6a8783d261983</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_HP_occlusion_test</name>
      <anchor>3326735ff089fffffeee97f320e89c5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_IBM_cull_vertex</name>
      <anchor>8106de98749ee8187d9d539582af7c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_IBM_multimode_draw_arrays</name>
      <anchor>207cee67b20eb40552be019e1fce557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_IBM_raster_pos_clip</name>
      <anchor>86a19b574f187e85c252fbb72fdda4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_IBM_texture_mirrored_repeat</name>
      <anchor>d8e803f3f6075f92dcd676ee4340dcf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_IBM_vertex_array_lists</name>
      <anchor>20411ecfb0477653f468621f9138b19f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_MESA_resize_buffers</name>
      <anchor>7fbb9d06c292833c01b18c3fd9c9227a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_MESA_window_pos</name>
      <anchor>aa8198c163b999c90acdbea01a12307d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_blend_square</name>
      <anchor>277ae8059c7cd444942779f879bc456f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_copy_depth_to_color</name>
      <anchor>ba4241933017b5a376e5e895279476d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_depth_clamp</name>
      <anchor>3ff919f29d089a8bc5da36a2a7e44b08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_element_array</name>
      <anchor>266f023569622782dc0484ff014fba0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_evaluators</name>
      <anchor>0ceed394591f3f3bda510fd684abba72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_fence</name>
      <anchor>97eee07ff9b18f39873d04f4e1ee21ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_float_buffer</name>
      <anchor>cd5841a282fd679fe65ca2d0e266800a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_fog_distance</name>
      <anchor>041f56b92f766b3e00f9d2169adfd2fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_fragment_program</name>
      <anchor>5d697045fd9e256818bce2f8d551979c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_light_max_exponent</name>
      <anchor>566b65861df489002118a92fa07bd507</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_multisample_filter_hint</name>
      <anchor>37e500f005f2108941c3a0ff18714120</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_occlusion_query</name>
      <anchor>c02fce9a30ca085f761d1fbd28da9367</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_packed_depth_stencil</name>
      <anchor>ef8077b3d22484ed97a0f06dc0b22311</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_point_sprite</name>
      <anchor>fadaf2815c71a8acd64b76bf65088ddc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_primitive_restart</name>
      <anchor>e989802c4057501c9da3e1866e58006a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_register_combiners</name>
      <anchor>6a839e5136006f4c4e966294da18295a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_register_combiners2</name>
      <anchor>d1bf6015ec52abadca012f4adf3a4396</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texgen_emboss</name>
      <anchor>a2f830d1cab7a89aab79602e4624bd9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texgen_reflection</name>
      <anchor>5ed7e62e9a53de00138f2060d6588eab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texture_compression_vtc</name>
      <anchor>55a236e842e9a86848e8c9e73ca42d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texture_env_combine4</name>
      <anchor>029b70cd2606936de9106effa81c5110</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texture_rectangle</name>
      <anchor>ee36b041e71a4cda0954c548a932a494</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texture_shader</name>
      <anchor>1837c3e2844ee516cc667bbbf0217483</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texture_shader2</name>
      <anchor>50142343e4b26d5a385f076a91d933e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_texture_shader3</name>
      <anchor>ec4af5e6a2b538ca9030fd240b06cecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_vertex_array_range</name>
      <anchor>14db9d2d763213820dd6043b58cf092c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_vertex_array_range2</name>
      <anchor>08cc850fac2664d005117f62a9ed920c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_vertex_program</name>
      <anchor>b77118b22c46704e8a2cff842d25a2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_vertex_program1_1</name>
      <anchor>601ed3cc282a15e8b40fef2464484a3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_NV_vertex_program2</name>
      <anchor>d7e71a4fe3addc99ef0d7fc490cfd40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_OML_interlace</name>
      <anchor>ebd5a93ed2efa4a3e1243843ea0f9dfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_OML_resample</name>
      <anchor>53dc53a3363530b484e579bf12d41b5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_OML_subsample</name>
      <anchor>dc5fd8de4d218949b01f7cddd0802437</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGI_color_matrix</name>
      <anchor>f541feb228e8c6943be26d237c028335</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGI_color_table</name>
      <anchor>ef56a4b6ab8f1dca37a14fb55f9340ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGI_texture_color_table</name>
      <anchor>cc5f5a6e57b44d07328eff8caf4c448b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_depth_texture</name>
      <anchor>af6c473b33ba1cd50aee8f0e58967ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_generate_mipmap</name>
      <anchor>e0f761d37abbdbe5cc7ca53e40b65d67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_multisample</name>
      <anchor>32ffc8769a6a4cd7fd006018296a847d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_pixel_texture</name>
      <anchor>cf6dc99d5ac2e2b421271062c5f4626b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_texture_border_clamp</name>
      <anchor>621322c51188fb2a9ee1f86044d04864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_texture_color_mask</name>
      <anchor>1b14773d50b19ed5743cccdcf3a8f73d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_texture_edge_clamp</name>
      <anchor>9f5da0c2212dff4fb519b1afa85bbd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIS_texture_lod</name>
      <anchor>7a00529109facefd32cfd53ff958dcc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIX_fog_offset</name>
      <anchor>401ce36167888ff3474d751817944847</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIX_interlace</name>
      <anchor>1a3e35bc4f056cd37ada859246deda1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SGIX_shadow_ambient</name>
      <anchor>98b9b27adc5dd6b94106196b104306d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_SUN_vertex</name>
      <anchor>0e9fb472e50061375a59a471295cca3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_version_1_2</name>
      <anchor>33e0891ab5b1879d50ff96ecc63664c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_version_1_3</name>
      <anchor>7fbf53142a2dbaca19eaf452491653ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_version_1_4</name>
      <anchor>bdf411c8d884a7184933c9176a7be48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_version_1_5</name>
      <anchor>20192d3d2d6f4466fe214ea4ed5cf799</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_version_2_0</name>
      <anchor>3b0b9acee3d1ffa852dd6def73f9ddd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_GL_version_2_1</name>
      <anchor>d7bea705cd599c407a79e5a73c91b74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_ARB_buffer_region</name>
      <anchor>45e378698a39d3a18310ee09fd4bf366</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_ARB_extensions_string</name>
      <anchor>413cd10d8e36e93d44259aa471a6fb21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_ARB_make_current_read</name>
      <anchor>7386d1ab5ce4dc7edc677ddd5959024c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_ARB_pbuffer</name>
      <anchor>c9785d948ba2093dd1973427e75b150e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_ARB_pixel_format</name>
      <anchor>52452d9ad948e5089a3cb9506de21cc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_ARB_render_texture</name>
      <anchor>31b79e982d0e494f3bdae3ff9d5b3a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_EXT_extensions_string</name>
      <anchor>39aab5fc7a0c53260fb85da64158805b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_EXT_make_current_read</name>
      <anchor>1a36e9dda514cbb747c7a70756bd1b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_EXT_pbuffer</name>
      <anchor>af9c29849b7f8824a066d09db1af612b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_EXT_pixel_format</name>
      <anchor>4897f0f51cae5425c96229f7f58663d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_EXT_swap_control</name>
      <anchor>3a0f00884cbb396f84ebee062ccc4f36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_I3D_digital_video_control</name>
      <anchor>3b410fb6704581c8190f7ccedc7b3d6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_I3D_gamma</name>
      <anchor>a575bc446eccd630f64ecf90bdd58485</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_I3D_genlock</name>
      <anchor>48dbac79742fd5d63ebd86b7004a91e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_I3D_image_buffer</name>
      <anchor>98980fd9781560725ab236bd0db30074</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_I3D_swap_frame_lock</name>
      <anchor>6a913dc0b4a7ddcf79047369be35f02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CS_WGL_I3D_swap_frame_usage</name>
      <anchor>e4abb62322eb4134f4615496d9b74fee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLExtensionFunctions</name>
    <filename>structcsGLExtensionFunctions.html</filename>
    <member kind="function">
      <name>glActiveStencilFaceEXT</name>
      <anchor>3f1ffd1bc163e51cf43311e81b166aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glActiveTexture</name>
      <anchor>0d16b277eae5c62ebd6b65df1d4f2fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glClientActiveTexture</name>
      <anchor>dfaccc0cbbff8b8ae6848b58fdd8ac45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexImage1D</name>
      <anchor>1276c2827e42527f731989d47bd1f957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexImage2D</name>
      <anchor>e1a439c75bce3d310d432ff2fa3faa46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexImage3D</name>
      <anchor>ddee915e7531c4583897df4aca392867</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexSubImage1D</name>
      <anchor>2b4ffc0a08ffcabed7fcad9b7f3aa89c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexSubImage2D</name>
      <anchor>b923936e81508f7e9d1e3bce32255c87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexSubImage3D</name>
      <anchor>fe01431fded802159c9af00ae7e14361</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCompressedTexImage</name>
      <anchor>6db459851f255458e7323ff267e90d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLoadTransposeMatrixd</name>
      <anchor>f0091721c20532cc1af70e396812e96e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLoadTransposeMatrixf</name>
      <anchor>d90931f4255e783c0c7ffd00615fba12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1d</name>
      <anchor>7db15671d6e259ff07d0f74f8cb60555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1dv</name>
      <anchor>23a076307887737dd13eca9e64a87a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1f</name>
      <anchor>3d67c67f971af7af5843cffef87fbe6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1fv</name>
      <anchor>a68e602f0a5065375b8beb07779e3f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1i</name>
      <anchor>a156013b050b9239ba8851f691fcc542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1iv</name>
      <anchor>de190b9212a4168e5df9ae6db2aecf90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1s</name>
      <anchor>cfe81f117ed42175912de21cff6093e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1sv</name>
      <anchor>b0fc915725f84d1825d0b72d07a534cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2d</name>
      <anchor>0d10bdddf684994bd134c1a31fe38af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2dv</name>
      <anchor>71cc7a6fdec60ebc50b6afcafd9aaddf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2f</name>
      <anchor>859436634557e913fdb879ea9f00f8d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2fv</name>
      <anchor>b2597b2ddff694295f3d9850ee44b486</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2i</name>
      <anchor>8d4c4bf3d23807f1e2eb36757c2abb1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2iv</name>
      <anchor>b6a49c296570fb7ac466e628314b6e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2s</name>
      <anchor>7b6e3bc22dde2ee051f6df991729cf83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2sv</name>
      <anchor>df3e39003bbb344406458bd131cf2756</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3d</name>
      <anchor>54a641e2e51f2584a1a87af5ab3e2e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3dv</name>
      <anchor>792e02515fc3f7b1aba837aeaa7222c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3f</name>
      <anchor>0d7c27135deac617e044aaf34aa7c5eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3fv</name>
      <anchor>638eba977cb5a95ffeb9b7039a70d448</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3i</name>
      <anchor>1e96071c651e50ae10960cc30d4256b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3iv</name>
      <anchor>595c7da673218b45a2463f927dd7937e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3s</name>
      <anchor>39072bd83414f5f2399e95d0f1139ccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3sv</name>
      <anchor>f1d02e1c86264306b620c94170b56333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4d</name>
      <anchor>3d7ed7ad4cf4a1247f849fe08da67526</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4dv</name>
      <anchor>fb700f0b23b959a80a0832da4db04236</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4f</name>
      <anchor>f62bf59153e0b1de9b31f46bffe5c287</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4fv</name>
      <anchor>766a18df6f45779fcb65e173492cfdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4i</name>
      <anchor>beabc4c6dcb1c6902e1337e26d664d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4iv</name>
      <anchor>a6ac6d95995db742ac36f7d745c2587f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4s</name>
      <anchor>f28cc56b70ce5ec8891a4a094a23583e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4sv</name>
      <anchor>3e26b4dca797cc951b142945ca359e70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultTransposeMatrixd</name>
      <anchor>0ce29e8af9ed5390ed0d907954d73e2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultTransposeMatrixf</name>
      <anchor>03446ed3f9c44c5a1072cae2ddba34b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSampleCoverage</name>
      <anchor>a22759acb51f7395373c8774a92bd136</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glActiveTextureARB</name>
      <anchor>132db2a1ac9ce5c55288a1ad1cc960b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glClientActiveTextureARB</name>
      <anchor>2301d3d1b8ca9b31da58d22954e0921d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1dARB</name>
      <anchor>64414e456f8f1bafcc0af93dbd657aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1dvARB</name>
      <anchor>6beac6fd3fd6b34e6dae0fd3879a1793</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1fARB</name>
      <anchor>84ce2c8cf57a42def6e9410876c94767</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1fvARB</name>
      <anchor>2f09715e83118b0be8b9d93a0f8655fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1iARB</name>
      <anchor>39045b9013d1b5677b625b9911650336</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1ivARB</name>
      <anchor>348133d4a103404b739b483dd7623b03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1sARB</name>
      <anchor>6d003c3fde02a25fb17ccc91320b1444</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord1svARB</name>
      <anchor>138f68cb19acd9a4753009baa74c01c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2dARB</name>
      <anchor>9111dd821ace77b4fb59f3a98c32793b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2dvARB</name>
      <anchor>d6dea49c103a00b013206f5b9c1a2c33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2fARB</name>
      <anchor>5f339967c858182f7229d82fc041e0b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2fvARB</name>
      <anchor>8c4160b0afe7c2d2d2a03e6fc98ea39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2iARB</name>
      <anchor>defeef21f19d8609b9e5a19c98b3e1a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2ivARB</name>
      <anchor>a999aea29221096e349e9948fe5ccb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2sARB</name>
      <anchor>6f92b223aced814826fea77bc615a466</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord2svARB</name>
      <anchor>fbc7c705cd076ad260aee1a44d55fbf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3dARB</name>
      <anchor>2290ff1f0db6628ebf8f90992b5dfbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3dvARB</name>
      <anchor>556f33163c3d997c6820a2783e7a34e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3fARB</name>
      <anchor>ee93798fb9c45571c32f8dbd2844e78b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3fvARB</name>
      <anchor>003e4b3a9820b0ec46c9f379de2a4f9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3iARB</name>
      <anchor>4fdd3529a50224aa1ad978f058c3c922</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3ivARB</name>
      <anchor>b88b88bfccafee549d07efeafe29fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3sARB</name>
      <anchor>d9b087193389a5a67668f027f033c978</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord3svARB</name>
      <anchor>4e484df5fc35a78bbb716e18ac36f0f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4dARB</name>
      <anchor>69ed94dcd4fb50e34000aca7dae3609a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4dvARB</name>
      <anchor>0e9539cbe1ea8aae0c2fbc5331a88300</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4fARB</name>
      <anchor>7dfb17ea997f9d4dbf9bc5d899d6e18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4fvARB</name>
      <anchor>18d5618c9f0e2c610b5c96248a65fae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4iARB</name>
      <anchor>56130d90184cdaff42e6313d02091f84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4ivARB</name>
      <anchor>0bc7f15a4cd741233654ec2c5630e775</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4sARB</name>
      <anchor>ff8210c99f89a8b496b391182cfc73ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiTexCoord4svARB</name>
      <anchor>5bd3f9685af8c3e16a9b09134877e5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAlphaFragmentOp1ATI</name>
      <anchor>8fb9a3e741e3473142c335de49e0fa52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAlphaFragmentOp2ATI</name>
      <anchor>e2ea4e7ff1d1cc0e37fac5a087433eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAlphaFragmentOp3ATI</name>
      <anchor>0d00c76f1afec81c0427e170d91d7889</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBeginFragmentShaderATI</name>
      <anchor>9dd27db5a32ea5ec0c4146df819e6220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindFragmentShaderATI</name>
      <anchor>2670919c38e8f1621da3710295c01346</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorFragmentOp1ATI</name>
      <anchor>2558486d0f36fe2bc21595a79d08c828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorFragmentOp2ATI</name>
      <anchor>e894472791b8aeb7f45c4f3245237ebd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorFragmentOp3ATI</name>
      <anchor>20ce19be5be69bf2384667eb93c61a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteFragmentShaderATI</name>
      <anchor>b1e9a60074d84a4065a44b3bfd7a62e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEndFragmentShaderATI</name>
      <anchor>c68f19791ec1110aec43611cbf96db6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenFragmentShadersATI</name>
      <anchor>81f9e4d15f7be5916e7da16fb4928c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPassTexCoordATI</name>
      <anchor>002cd4c54261da1fdd9b9bd1356667d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSampleMapATI</name>
      <anchor>9d9d97577af59054650e75b20e331835</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSetFragmentShaderConstantATI</name>
      <anchor>337958f139e25321b5da05817c0aafe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAreProgramsResidentNV</name>
      <anchor>b3923b85a93dc08b773cab6fcd5746da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindProgramNV</name>
      <anchor>d1a9364f7479035db4e0d9d88f499a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteProgramsNV</name>
      <anchor>dca62affda54f7f74f7161b5ed5d0496</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glExecuteProgramNV</name>
      <anchor>f80ac5de2814d95a26505ca284a9bff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenProgramsNV</name>
      <anchor>13a8aa6d7fc010898b23e7d1602f4c0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramivNV</name>
      <anchor>08a4b574b8005968fb1f9ee7f5befa60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramParameterdvNV</name>
      <anchor>4c85211de703b7dc68b4562819288f16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramParameterfvNV</name>
      <anchor>ef8d193fb6405785b705b08d2b5d16c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramStringNV</name>
      <anchor>3575d41bb6b2ce5571dc60f617aafdb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetTrackMatrixivNV</name>
      <anchor>2763d4a204408575c7a398144d998ba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribdvNV</name>
      <anchor>605bc8d6f60f90105513403c3380e062</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribfvNV</name>
      <anchor>b6fd68fcc181afb89ed3fd495ed68ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribivNV</name>
      <anchor>5f76f5cc1e4d869d0e68c0f27ec09dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribPointervNV</name>
      <anchor>a73345f10ac3303ebb032d9250b2c383</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsProgramNV</name>
      <anchor>efe4ee9902b6479ef1359556bbac9d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLoadProgramNV</name>
      <anchor>5deb156ec65348f6b54b030e0a3539d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramParameter4fNV</name>
      <anchor>b13b9bf7622157fe9d14e13049deea28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramParameter4fvNV</name>
      <anchor>44326b9935a368493f0a89ec44eab9db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramParameters4dvNV</name>
      <anchor>3496b3819a65b3ff9cb02374a218656a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramParameters4fvNV</name>
      <anchor>aa80f4436aa82d339371629373b62215</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glRequestResidentProgramsNV</name>
      <anchor>fd93e2c3c9f291142c1bbdb8bee32c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTrackMatrixNV</name>
      <anchor>8060ba13d848a6c63a5becf9968a8a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1dNV</name>
      <anchor>4023753aefcc8dbc9970e4b1cf2b8284</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1dvNV</name>
      <anchor>20f8ac344d7c6f3df3b530e55c8d5593</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1fNV</name>
      <anchor>df44a6857245ceb53006cd02cf7f2556</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1fvNV</name>
      <anchor>b79b5f80c7bf8d5132dc510190af8a5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1sNV</name>
      <anchor>97abfd554533f4d906a25514b8918f8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1svNV</name>
      <anchor>dd10a536af0bcb3b21df4fcc157326d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2dNV</name>
      <anchor>6a6245ef5b06bb362b6829dfd1579ade</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2dvNV</name>
      <anchor>365afe9c0cc67577177279aa58518065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2fNV</name>
      <anchor>ae1948efccc50ba1a0297ce2ec54848b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2fvNV</name>
      <anchor>54df2673922b91ee60358527b2041279</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2sNV</name>
      <anchor>8cbc6cebb29532b19b3e53a55eb63e36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2svNV</name>
      <anchor>b5f8e520f63d6e41a81b8dff02c1465c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3dNV</name>
      <anchor>f52d1deb16631d42f1f9aa13aa8d71e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3dvNV</name>
      <anchor>1d85047dfab663c834861f104f632585</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3fNV</name>
      <anchor>1714d26bcf13ec5be72871a6ededa833</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3fvNV</name>
      <anchor>c123763bbdd065f6783f9ef118904b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3sNV</name>
      <anchor>b03017eb357f322cb89a19c472548fc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3svNV</name>
      <anchor>b44b3e9747ab3d9c35d5f95e2157ca29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4dNV</name>
      <anchor>0f559ff3acf7e1deb0f0b3a7ca0435cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4dvNV</name>
      <anchor>d374c3c8e83f3e201cfbc3dedd108961</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4fNV</name>
      <anchor>3de9f35ea461b8f3a048a6083e65706b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4fvNV</name>
      <anchor>919eb3a4b7887e4431b5abd82d8059c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4sNV</name>
      <anchor>efaaad7b6a8cf382ae15024700a0e015</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4svNV</name>
      <anchor>d9f22d279e6db55e26875f4e6ab1aa8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4ubNV</name>
      <anchor>4dc29bb8cc37e96d9e433f87e47c26ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4ubvNV</name>
      <anchor>636c8fab5e3f0235378c92b175663c06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribPointerNV</name>
      <anchor>a3856491edc13ee441187630ebaaeef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs1dvNV</name>
      <anchor>d85a7891176a09d642ceeb4948b8d4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs1fvNV</name>
      <anchor>e758fbb948af1e497857f8d470bcff7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs1svNV</name>
      <anchor>3e10c03baf7fe842b817526551312210</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs2dvNV</name>
      <anchor>aa60d23de9624fa75d76f0f94fe26f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs2fvNV</name>
      <anchor>ed371de1c34dc4da47cf9fd9e181ca37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs2svNV</name>
      <anchor>56d80ab68ba07a10a1a723a1581f6e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs3dvNV</name>
      <anchor>97f9c903e361d196371350d5c7150a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs3fvNV</name>
      <anchor>31ed74ca3b559cf4e7eeace89acbeccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs3svNV</name>
      <anchor>11342b38a6647dba161d921ce066b4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs4dvNV</name>
      <anchor>6f7667d8017ca5cad2198b730804b02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs4fvNV</name>
      <anchor>2a2d22256b7fd8e732ec92f142826074</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs4svNV</name>
      <anchor>610db95b517feb49f0b51bfdab8d12b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribs4ubvNV</name>
      <anchor>42310441dcd7cbef3e2df3dd1903cae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAreTexturesResidentEXT</name>
      <anchor>83d1e5cb1893231aca36fc4baab20d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindTextureEXT</name>
      <anchor>6ef8aed288928b2b44fe86762b5b21eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteTexturesEXT</name>
      <anchor>55bb8b93222705ba57bcfe7b928b309d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenTexturesEXT</name>
      <anchor>07a47885f0c873cd9fdb04dc3169f232</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsTextureEXT</name>
      <anchor>108363a8b602a7152834f5ab6a0d4181</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPrioritizeTexturesEXT</name>
      <anchor>db02c654a1ee675901e9f4ec75a7e9b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glArrayElementEXT</name>
      <anchor>e04517e9b64825f19d43ead9ff82e511</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorPointerEXT</name>
      <anchor>d5cd8018857ce8cf5f3a74526c18d289</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawArraysEXT</name>
      <anchor>dbe27de7d19f1b1bda87f50a76fd3727</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEdgeFlagPointerEXT</name>
      <anchor>10be35552b857b4b829c168c8ab6936d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetPointervEXT</name>
      <anchor>7559b83e7ae21f96a214d4266d32a758</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIndexPointerEXT</name>
      <anchor>90ef4a0c8ee0598117c0dde58b6c3f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalPointerEXT</name>
      <anchor>7ff4143fd42af6543951e64ba17e8be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoordPointerEXT</name>
      <anchor>f807cac7417e810f944ea35ad255c574</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexPointerEXT</name>
      <anchor>72a6b59fa0a62f00cbe51f00112dfd91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glArrayObjectATI</name>
      <anchor>cc32a6683c95303a1007ca5c24461954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFreeObjectBufferATI</name>
      <anchor>a85c2eac05451edce55ea56e9fbcbbbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetArrayObjectfvATI</name>
      <anchor>10a78eba595f9bbd08f4ecb16c41d667</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetArrayObjectivATI</name>
      <anchor>18a08f3ebc37809fa67a134a1fc05b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetObjectBufferfvATI</name>
      <anchor>ac00d0446b68e011ae40a3e127218a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetObjectBufferivATI</name>
      <anchor>fcd9cc33170db777921c04493bad964a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVariantArrayObjectfvATI</name>
      <anchor>a99bbda6514aee5df1f9fb7f8ccb0426</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVariantArrayObjectivATI</name>
      <anchor>ebf5dd018cce57bc40ba1fbbfdcae18e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsObjectBufferATI</name>
      <anchor>c00e10f63c66a5eeee3ec7550ef2ad92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNewObjectBufferATI</name>
      <anchor>a3c802b5d64b9dd9404635a5ab97b1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUpdateObjectBufferATI</name>
      <anchor>a3c229acbdb87266e76a8bc91ae0a9d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantArrayObjectATI</name>
      <anchor>b779d45503ef40599140b35510388454</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAttachObjectARB</name>
      <anchor>98daeb703bab81f6b5d5c4d3af308f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompileShaderARB</name>
      <anchor>b6d05bda3be61c59412466cdc9135a53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCreateProgramObjectARB</name>
      <anchor>72778f08d22b158ef9413823788ca2ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCreateShaderObjectARB</name>
      <anchor>afafa885173c7585d6debe2e6b7543ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteObjectARB</name>
      <anchor>286dca9fd0dfc812f5fef1ea450d968e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDetachObjectARB</name>
      <anchor>4bae403bb1e655942e34053bf59ca572</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetActiveUniformARB</name>
      <anchor>4459feb4201f8168fc297825cc03e7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetAttachedObjectsARB</name>
      <anchor>f89ec995a0ab2225954dd640a2a1d014</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHandleARB</name>
      <anchor>961d1ec1de1af19a30d1bc2a9218e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetInfoLogARB</name>
      <anchor>61ee3c51c57bd6d702984c7607e50e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetObjectParameterfvARB</name>
      <anchor>1425eeaa8a744a96c3baf03efee29832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetObjectParameterivARB</name>
      <anchor>0feed7fa29261152360abddfe50fadc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetShaderSourceARB</name>
      <anchor>62ef3d518115c0f6f833a701e474560a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetUniformfvARB</name>
      <anchor>d234020f228f1ff5615e9bbb60139836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetUniformivARB</name>
      <anchor>fb2cef858ac6166526bfd12da019fc1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetUniformLocationARB</name>
      <anchor>0e08d4ac522ffe6e12bb1f42bfab8bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLinkProgramARB</name>
      <anchor>749fcc46ee39f6fb3ba58b3af4ec96f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glShaderSourceARB</name>
      <anchor>feda8b81832b09822e83cc1e3bcff084</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1fARB</name>
      <anchor>d00d0930986de288985e43cf746c6f0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1fvARB</name>
      <anchor>abb66dd4af57e8b63b2e9f1460b912f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1iARB</name>
      <anchor>62fb50a187a1193e080a97dc4014c970</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1ivARB</name>
      <anchor>cf446c99f48d7b7c314870f613469fa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2fARB</name>
      <anchor>6a73e0f358945f265488f51be685dc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2fvARB</name>
      <anchor>1e09ed0946cd5c38a693ee5879e50f05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2iARB</name>
      <anchor>7f15158ae3447a7797814f7391178a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2ivARB</name>
      <anchor>534efe43883a1d19c32783157a19b575</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3fARB</name>
      <anchor>54e51f69b71a4ed1df204f7ba30bfd0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3fvARB</name>
      <anchor>aaf6310f177e62553a8ed6fc7628cfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3iARB</name>
      <anchor>c0b6f241ba21b14f8a98b84f2c30ed7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3ivARB</name>
      <anchor>4b42ddc71a7475d4f9b67e954d2ea02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4fARB</name>
      <anchor>1ff9d805a2d2febe06b182a22b811833</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4fvARB</name>
      <anchor>7272dcdc6f8b9b119b79f2700f2f6473</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4iARB</name>
      <anchor>677ef5e44ac2a109a417e0bbed4b3ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4ivARB</name>
      <anchor>0591ea5800eaf2c1302270f9bc6bfc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix2fvARB</name>
      <anchor>4eefc9f3d509cd08600b896eb27e4e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix3fvARB</name>
      <anchor>5d68f8e74f5b31769c499c588aad1157</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix4fvARB</name>
      <anchor>f2431de3f7fa61ae942b3c50959078ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUseProgramObjectARB</name>
      <anchor>c7aecf91e54261e739d3e71bc1533749</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glValidateProgramARB</name>
      <anchor>ac5f0bea2c18262d46c2da04410e40f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glAttachShader</name>
      <anchor>ca4b8ab035152f490fc24a15f443c4f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindAttribLocation</name>
      <anchor>acfb0be6cbead50d0f127d2ca82a596b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendEquationSeparate</name>
      <anchor>618d03f7236ffecbf54635dae10405bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompileShader</name>
      <anchor>9d8fd79a048597b5ab36b3cad9a544e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCreateProgramObject</name>
      <anchor>d42e02fe64bf27262fef1c40ce12af54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCreateShader</name>
      <anchor>6af51898648ec88b949649f68326e87c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteProgram</name>
      <anchor>f569b75004d4044bb0caeb75e96cca7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteShader</name>
      <anchor>9b3ec2348edcede0c529d449d05ea3d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDetachShader</name>
      <anchor>8f5b1926020f9f8130ed21ff5a8a4d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDisableVertexAttribArray</name>
      <anchor>1006b15bdb2b63faeb545225a8d3edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEnableVertexAttribArray</name>
      <anchor>2a45fbb15c6b52f00431023607d7d020</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetActiveAttrib</name>
      <anchor>49d1119231040acdc2764e5a7a912585</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetActiveUniform</name>
      <anchor>5fa7a43bc7ba3a477dba4b5262f9bd9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetAttachedObjects</name>
      <anchor>dbf5fc1d64f60ec4af09d0ff6e4bedf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetAttribLocation</name>
      <anchor>0c0ef2749e407dd1feae9e21f4690fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHandle</name>
      <anchor>f6dd33211e967636cc136168a18d158c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetInfoLog</name>
      <anchor>14795083a13090ae9ac7d66b90c62e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetObjectParameterfv</name>
      <anchor>be5027c193fc9fb4f8609b0f3cb0be42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetObjectParameteriv</name>
      <anchor>12a32f814e6008989e055639e0d76514</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetShaderSource</name>
      <anchor>fe9d3d4652a8335d65e19cc443073e63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetUniformfv</name>
      <anchor>6bf0b94e482810d2499c27a206960b9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetUniformiv</name>
      <anchor>4891895f0bce3171a803bfb2685ee834</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetUniformLocation</name>
      <anchor>84052ba21fa69066e261bfa988d9fbd7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribPointerv</name>
      <anchor>4379befc874720638d80d44c2ce40218</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLinkProgram</name>
      <anchor>956da85d0aaaa2f255d6cbfb803d406a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glShaderSource</name>
      <anchor>207778e774f081413e3a27736d0efc3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glStencilFuncSeparate</name>
      <anchor>383460150a8e6b802e2e59806496b5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glStencilOpSeparate</name>
      <anchor>8994685b11e76f6abdd02866420754b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1f</name>
      <anchor>7a935dbcacb6e0140ffdd5c2d7d84600</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1fv</name>
      <anchor>ed4e37426f55320afeda8325ab4e1590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1i</name>
      <anchor>918f257caacaa838e1c4db8e69169d4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform1iv</name>
      <anchor>859b73bf4cf76c512732a64664934a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2f</name>
      <anchor>c8f238e5e7791de334fd4dea6ea91335</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2fv</name>
      <anchor>642eaade0c9504939c817fd35e25772b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2i</name>
      <anchor>d01ef50f15ca146e3d9888acd570d6ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform2iv</name>
      <anchor>dbd2d8ad3b47940ab8afac44a08ce669</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3f</name>
      <anchor>319c4f57c8435004aaabd59af65e72f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3fv</name>
      <anchor>280295dc8828205c5566b89a4ef160af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3i</name>
      <anchor>820138dbadd68e2df25a40299a5a4b66</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform3iv</name>
      <anchor>682faea65c2fa3e82a79c2568dcf9a40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4f</name>
      <anchor>b4608a1fa5c7495162e86ff7ed07f338</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4fv</name>
      <anchor>857f49168f261d477275e88475d0c345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4i</name>
      <anchor>bb1f9a2f587a0e1bd43d89e383441aa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniform4iv</name>
      <anchor>289969aba5001f01b75d2d1b78454b55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix2fv</name>
      <anchor>a7079f9df599ffe2a612a60d79b3b028</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix3fv</name>
      <anchor>42b32e2e91ca5ec9c10dc1644f2901c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix4fv</name>
      <anchor>ea9eb61ae4aab840c1032f68596e1f3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUseProgram</name>
      <anchor>a060467598d3cdc94c3c02e353baa6b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glValidateProgram</name>
      <anchor>e98223e3fdf0d90cab538504960371f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1d</name>
      <anchor>1b9b2b825c47d8e70b9e2ec155319329</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1dv</name>
      <anchor>c55f9bdf4461aa723ce9aa43b3549da2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1f</name>
      <anchor>42e3bac1e80a8c0627ed3b8c23b89fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1fv</name>
      <anchor>d2e70c3328fbdf3eb84cb6c790b470f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1s</name>
      <anchor>23f67c3eed302f33a4d5df19894f705c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1sv</name>
      <anchor>bb829ea71637ea3e6f830c6f9688d599</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2d</name>
      <anchor>2d4b94f0260dd44d06d86890cb53e4bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2dv</name>
      <anchor>1be546d3571407f84acabdd1beec28ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2f</name>
      <anchor>227895440c2ac26d463e31ba2bc96376</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2fv</name>
      <anchor>43ed1f18a730039f54f7739e4d009e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2s</name>
      <anchor>37cbbc039bbbab0c56b5638536efbc18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2sv</name>
      <anchor>b7fb8395f8282359978f2ac5933b9049</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3d</name>
      <anchor>a18e574cae81d0cfc5a5655f07f28216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3dv</name>
      <anchor>963c4aef7f7f647a99f59e8aa2c45b58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3f</name>
      <anchor>a3580f171225ed1b133bbaf883d0dc49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3fv</name>
      <anchor>10af72bfccc03eed9c8bc181d8ef6cc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3s</name>
      <anchor>22bfaa3e89d21ff545373a2832443cf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3sv</name>
      <anchor>e69441959ce72d2227c8228f7bc11ac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4bv</name>
      <anchor>653037c1e1cc969f9dcbccc8e413eaf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4d</name>
      <anchor>7bccefda20d304dbbcea7a04fd68e778</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4dv</name>
      <anchor>3be25423192637a8598d4777fc25444d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4f</name>
      <anchor>6b254b16478bd96876af191e2a71750d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4fv</name>
      <anchor>e254a4d4cd0a54eb0e530abe86f822a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4iv</name>
      <anchor>388d96acb1ee7b110c7c4e07ed251874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Nbv</name>
      <anchor>01914f9a6aac3366049f2f38b4940efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Niv</name>
      <anchor>a3c5e2dec91b13303bc7a8d5a7229d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Nsv</name>
      <anchor>ddbd21a0df0b101e15b6a295c9e1de32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Nub</name>
      <anchor>a0aa68c464caa3fb1c2b7874e098ba3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Nubv</name>
      <anchor>f41a355ad65361967670eae15b2ce065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Nuiv</name>
      <anchor>aad3acca426bac4e6b661ff939d0993a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4Nusv</name>
      <anchor>6ae2b45ac09f90d236bc26c65090cf5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4s</name>
      <anchor>85e98637eeb5c02d05f6eb2ad7f053e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4sv</name>
      <anchor>d8b0d5f200ff727c5dba73f1c8bb8dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4ubv</name>
      <anchor>38867889e76011f5a57c29f4bc383808</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4uiv</name>
      <anchor>b0512dbd52855f1b8658ecb2d7d27954</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4usv</name>
      <anchor>37e95b3c348bf8bb17e188e38a4524d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribPointer</name>
      <anchor>12fd9c693e09aab703fc91f21acb0029</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBeginOcclusionQueryNV</name>
      <anchor>54ae7deeb48d7fb167c33618de87c7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteOcclusionQueriesNV</name>
      <anchor>2a9b837e00b605b78c0f0a98e6e30757</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEndOcclusionQueryNV</name>
      <anchor>00970909dd5631930f82dfca6866e19d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenOcclusionQueriesNV</name>
      <anchor>72e0128829f45f47872dae1b1bded8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetOcclusionQueryivNV</name>
      <anchor>6db620f28ee4eba480c072cb340ad884</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetOcclusionQueryuivNV</name>
      <anchor>de95aa20c40245246db53ec4b7248f8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsOcclusionQueryNV</name>
      <anchor>61bcba2547b563806e30a8477ccf968b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBeginQuery</name>
      <anchor>63e47a188c33e0149954766e3431adc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindBuffer</name>
      <anchor>d2f139531c5c43f3baca4d8d27eab347</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBufferData</name>
      <anchor>fd35205a858ec8248108c37f84f979bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBufferSubData</name>
      <anchor>44f8776dce46da56bd2c6826d37cdfca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteBuffers</name>
      <anchor>8410ee935021ffe7434110c9e93ed00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteQueries</name>
      <anchor>c98416355827199fb068539ff23acf14</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEndQuery</name>
      <anchor>13f0216e6c66e65d0cac67e5841899b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenBuffers</name>
      <anchor>042e4a0fb149e155189932a365065d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenQueries</name>
      <anchor>5f6682963c3fc2548aa55de7c2c57bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetBufferParameteriv</name>
      <anchor>2b8a58f41422217e2c27658d953301c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetBufferPointerv</name>
      <anchor>ecb85bd9868150745e613df510bf7922</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetBufferSubData</name>
      <anchor>7dcde2e2996485105ff88a5593ce8069</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetQueryiv</name>
      <anchor>e6169d19cf83da71d51fe16098939b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetQueryObjectiv</name>
      <anchor>db9bf1368915f5e4b0f7823b81ab6a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetQueryObjectuiv</name>
      <anchor>4fa8779ba994bc943db8bde81e0e997e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsBuffer</name>
      <anchor>1daf54fffccdb43b69496596f39b65e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsQuery</name>
      <anchor>30a2707dbadccaa0403a9330cd4bacc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMapBuffer</name>
      <anchor>f2ed42c9e3f720dad0762ec25291bd97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUnmapBuffer</name>
      <anchor>4c95dced69255a38b891174709a8ba37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBeginQueryARB</name>
      <anchor>32e11c94695f96398d35ff33a392b7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteQueriesARB</name>
      <anchor>fee1f86b153c25ff4345b4267b71ac05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEndQueryARB</name>
      <anchor>3b750522345aa58c7c389174e834546d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenQueriesARB</name>
      <anchor>b5687a97d6db7ebf8762d2912d23f7a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetQueryivARB</name>
      <anchor>741437a739121571e5b372ed21c1cda5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetQueryObjectivARB</name>
      <anchor>40bb6893b87ca9383dbd814b902802f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetQueryObjectuivARB</name>
      <anchor>b853ef241416efd0bdfb8a61c98df7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsQueryARB</name>
      <anchor>5359348393071f79735f1e609f5128aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBeginVertexShaderEXT</name>
      <anchor>e178271c67d99b81a89c0cf3a0e7f6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindLightParameterEXT</name>
      <anchor>19d4d7bca0aaebdaa1bcda1487ac6404</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindMaterialParameterEXT</name>
      <anchor>c9304cdb72b57c31701537df1ada0820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindParameterEXT</name>
      <anchor>8370d8120016a9a8f5edb9380f786f10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindTexGenParameterEXT</name>
      <anchor>5f1194a661f1dfff0b1b2a4d74b83353</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindTextureUnitParameterEXT</name>
      <anchor>c5f97725dab055f1e67db792d59107ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindVertexShaderEXT</name>
      <anchor>c3f876bdd3dda61a0cdb897a72bb6584</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteVertexShaderEXT</name>
      <anchor>519593858ebf92949825ffe262803647</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDisableVariantClientStateEXT</name>
      <anchor>30344ea5d4da230dbb6cd0e4f81e73e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEnableVariantClientStateEXT</name>
      <anchor>10c390786aa8253c1fc01a37e0cb5068</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEndVertexShaderEXT</name>
      <anchor>a24bca7452a65d91a107c90ff605218d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glExtractComponentEXT</name>
      <anchor>1de703424b2e3a8db5456ab55a6d9040</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenSymbolsEXT</name>
      <anchor>1efe4e14ad3e07e870c71010c72defa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenVertexShadersEXT</name>
      <anchor>1663df5aea8cf7c734b8ae8dfe4dadf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetInvariantBooleanvEXT</name>
      <anchor>35ebd1196e14ee50ae7d65b33bb9aeec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetInvariantFloatvEXT</name>
      <anchor>aeecc742b0c16c26b7f1f553ab4ebc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetInvariantIntegervEXT</name>
      <anchor>696e7c555f9aa52adfcbfaa55b03cb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetLocalConstantBooleanvEXT</name>
      <anchor>073e82c8dfb439938168a42fdd30a7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetLocalConstantFloatvEXT</name>
      <anchor>ca7d70278591ce1e5da56c8db3f9d780</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetLocalConstantIntegervEXT</name>
      <anchor>73688d09f5059a07d229dfcae567be20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVariantBooleanvEXT</name>
      <anchor>8b6347863c2f8878c2538871bd80ca83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVariantFloatvEXT</name>
      <anchor>7b45eaf05218ccc84e8c446b847c895a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVariantIntegervEXT</name>
      <anchor>614799a4e561bf8d23efc6d8cdd95f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVariantPointervEXT</name>
      <anchor>64e2b502b70166456f98553257cf1902</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glInsertComponentEXT</name>
      <anchor>302c34080ee285a9a4a42d81f69e42e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsVariantEnabledEXT</name>
      <anchor>a001c82eefc636c2a4fcf3654b8213d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSetInvariantEXT</name>
      <anchor>d656fe4f5deae465ce0ff1a279b639eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSetLocalConstantEXT</name>
      <anchor>3f31cf7d43f58fcbf3c687f937088fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glShaderOp1EXT</name>
      <anchor>472895396aeb7d80deae7ed84b744ba2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glShaderOp2EXT</name>
      <anchor>47126c86df1013bfeeaa994e5dc0b42b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glShaderOp3EXT</name>
      <anchor>d2929769de2f996a3df4a9858999bc95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSwizzleEXT</name>
      <anchor>18cc5757c2d93496ab574e1a5d63a7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantbvEXT</name>
      <anchor>765f884228c21a99c2b4c68a04c155da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantdvEXT</name>
      <anchor>7dabc09511db7acd531215fc344c670a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantfvEXT</name>
      <anchor>39f1c6c9e84a73efe5c8b2ffc867c02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantivEXT</name>
      <anchor>c4f670a782f6ce85e7a88ef4fd98bee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantPointerEXT</name>
      <anchor>ed6947538494d342830ac733a1179ecd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantsvEXT</name>
      <anchor>f3fdae5dc3d7190c65a3bc42cec9d118</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantubvEXT</name>
      <anchor>7362cbe89b13d0b2dfe0667cb8d56907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantuivEXT</name>
      <anchor>6dd6be7cb09722f157a7fddac84192eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVariantusvEXT</name>
      <anchor>8dea615496ccccb0884f9392a9fbb449</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWriteMaskEXT</name>
      <anchor>380f97a90a353d754c6da208735ce583</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindAttribLocationARB</name>
      <anchor>3c73bbe61d282df1e237dbd0d545dac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetActiveAttribARB</name>
      <anchor>07b02048a10d130eea0291b4fe6ef68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetAttribLocationARB</name>
      <anchor>de926558924b0f3a75a1831f9656b5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindBufferARB</name>
      <anchor>3b223c72a4b0b56f33025e40ba833657</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBufferDataARB</name>
      <anchor>30960b9dde234dc22ab95cc044515efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBufferSubDataARB</name>
      <anchor>eddc3c4f8af9478aee2615510dedd29f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteBuffersARB</name>
      <anchor>18ab57af5bb16c44faa9152a8a1627ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenBuffersARB</name>
      <anchor>85c4232357c2dceb3f9de9c583971d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetBufferParameterivARB</name>
      <anchor>2e9822edd40860a1b50a0a7e666d11f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetBufferPointervARB</name>
      <anchor>6f725e96828e4536454bb999c7bd84e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetBufferSubDataARB</name>
      <anchor>515d14adf4fa283999d6738d1574d6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsBufferARB</name>
      <anchor>c7ef372e26cf77287abdff424a73969e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMapBufferARB</name>
      <anchor>53d7321b77e5cc11c3275141d2c8a986</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUnmapBufferARB</name>
      <anchor>9abfef909bb79fc8fbfa2037827dfbac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindFramebufferEXT</name>
      <anchor>c00615589b61b6a7c1e08b59cd8b2ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindRenderbufferEXT</name>
      <anchor>37420a32de54b28d7648da3a382c7996</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCheckFramebufferStatusEXT</name>
      <anchor>b48dfd2f6fa43d6311722edb78f56cce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteFramebuffersEXT</name>
      <anchor>d2cfc769fb985e08eb69307ed0c328eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteRenderbuffersEXT</name>
      <anchor>537dc67d40747ae099984abecf508415</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFramebufferRenderbufferEXT</name>
      <anchor>04bd9442518dc9400277a76825ece899</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFramebufferTexture1DEXT</name>
      <anchor>78cab0303be876899684e5c901546f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFramebufferTexture2DEXT</name>
      <anchor>9388bc139224a42ef9030b59be964b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFramebufferTexture3DEXT</name>
      <anchor>d7eaa5fb4cc36b225dc15acba0eb323c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenerateMipmapEXT</name>
      <anchor>4fbb0a2ceafc798250e1f4293dba1106</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenFramebuffersEXT</name>
      <anchor>e89bb749f19c9db60622a3bea3695fbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenRenderbuffersEXT</name>
      <anchor>08395138e045b82c4610185755873792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetFramebufferAttachmentParameterivEXT</name>
      <anchor>e5fb669b08c84730c26d875717c76356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetRenderbufferParameterivEXT</name>
      <anchor>04c16fa6e5215c26e201a8971e107080</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsFramebufferEXT</name>
      <anchor>aa3b9ee5535231cf499f61e53b009042</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsRenderbufferEXT</name>
      <anchor>c7c2880279f2cae6b64f8b7fbaa5d570</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glRenderbufferStorageEXT</name>
      <anchor>dce84ed53a44d49da4434053522a6c9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindProgramARB</name>
      <anchor>e53e33f2513a2f5802bb9b3d0f536a0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteProgramsARB</name>
      <anchor>14e056158956310b18a4cfbe7afefcc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDisableVertexAttribArrayARB</name>
      <anchor>6b82aed7d4804d9f5431018481d19b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEnableVertexAttribArrayARB</name>
      <anchor>f67cbc1eacea562f641352b3e83c8381</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenProgramsARB</name>
      <anchor>6554ac888ea307a748aa5227b6e901ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramEnvParameterdvARB</name>
      <anchor>e2ce1d35b32683318cb2d27b68726afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramEnvParameterfvARB</name>
      <anchor>a1121d1e8e7b9e2961c9e6b39d92181b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramivARB</name>
      <anchor>d651d8c268e423575589776df735bf8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramLocalParameterdvARB</name>
      <anchor>35c49ae34052d4b91528df7d04e868ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramLocalParameterfvARB</name>
      <anchor>4dfaa19dae1b42d84ae025a8b0c2da59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramStringARB</name>
      <anchor>9dbdae72ad03c9789bc1402a0be29143</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribdvARB</name>
      <anchor>8525766612209491521963487d53eef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribfvARB</name>
      <anchor>16bccfe7c2042647792f593d9849935c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribivARB</name>
      <anchor>8cc7397661ca96e0b2060a8e1ce28d93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribPointervARB</name>
      <anchor>35ddad271366eefda0c4cdfed1d5271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsProgramARB</name>
      <anchor>0e475e303f2bfc7d3ebfe5c7b325f614</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramEnvParameter4dARB</name>
      <anchor>16be8bf89a6ed81a77fc36e58cdc6d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramEnvParameter4dvARB</name>
      <anchor>ed2ea49aed39800bdf6db4c376652573</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramEnvParameter4fARB</name>
      <anchor>056209b5d582610c3720924595e73079</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramEnvParameter4fvARB</name>
      <anchor>0c30e3677276d6695f5325b1fc371393</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramLocalParameter4dARB</name>
      <anchor>c713690f0e4eee7d301f6d687662fa61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramLocalParameter4dvARB</name>
      <anchor>56c15ce98d6d428cf34f980a41ec5fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramLocalParameter4fARB</name>
      <anchor>0787756e638e5c46412cd9a10fd4a6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramLocalParameter4fvARB</name>
      <anchor>6943dc820476fecc590035d1f07d005d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramStringARB</name>
      <anchor>94b10f76ec7144064e7d1739989f64f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1dARB</name>
      <anchor>0c4bb156551c7e6459007c0e2930d5e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1dvARB</name>
      <anchor>5520068c8804b04f718e6914ac23c400</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1fARB</name>
      <anchor>b3f9820173d690396929264e8392f661</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1fvARB</name>
      <anchor>71e7ab6c95d18f8790cfc7d8e33f15f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1sARB</name>
      <anchor>8634295a60bbc613b1feb57ffd27a8bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib1svARB</name>
      <anchor>023914e84908998868e879e1b7f54a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2dARB</name>
      <anchor>36e29f5d04497ec2654ef17f14456b4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2dvARB</name>
      <anchor>5b9f4b372613db39698fcd7066e5d008</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2fARB</name>
      <anchor>2598f9cc2cadc7ab1d58a03da49d0440</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2fvARB</name>
      <anchor>92f4bc1d0ace635e120ed4a9e1f90143</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2sARB</name>
      <anchor>7b7c1350e3dd620602246177a43dfa0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib2svARB</name>
      <anchor>bf9db1ad4316f20e19ec3073fdc27e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3dARB</name>
      <anchor>ef02da46d0bb1a33c6ced1ea8452445a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3dvARB</name>
      <anchor>dd1a150d1d38e62973c8337689af8abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3fARB</name>
      <anchor>8a97ad02bb49eda24df155e36c1bbbbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3fvARB</name>
      <anchor>f3e3093895d86b499b016625adc514b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3sARB</name>
      <anchor>fea8c5afcadfe9df1def9f43eb074f38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib3svARB</name>
      <anchor>055412be78510a5810ded05b843a6045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4bvARB</name>
      <anchor>95fb4efcee4faeb5f20baf1a02589a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4dARB</name>
      <anchor>e719c56e451e48d9900d320e8c953db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4dvARB</name>
      <anchor>ae0efd4cb8209a2bbbee8200c5517187</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4fARB</name>
      <anchor>4ac67f808ecf4cbaa4ab459b5fd3c8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4fvARB</name>
      <anchor>901133ca88316594505111bf781241a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4ivARB</name>
      <anchor>c46a6dcf100a0a49f2a93f463ad4a09b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NbvARB</name>
      <anchor>e1da4818f1e8e09a402bcb7595ab069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NivARB</name>
      <anchor>97d36467b180e3451990d0411be41b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NsvARB</name>
      <anchor>5d175428f2867cf33e655fd55683832f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NubARB</name>
      <anchor>2cbc0bf5bca02044d75f3c426b70d0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NubvARB</name>
      <anchor>105e13c8b6c12052c329eb40a606d516</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NuivARB</name>
      <anchor>c8c693caaf2509d88f3922719e254964</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4NusvARB</name>
      <anchor>1b2c55c10a294ad8eb982d0e5bd64af4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4sARB</name>
      <anchor>c2019af8115f8bc6e4272cd1013e2afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4svARB</name>
      <anchor>276407fd50c6acd5405860a4d295396d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4ubvARB</name>
      <anchor>63f5268a74ef7c062b530af212ade7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4uivARB</name>
      <anchor>5fab895c846e1023671d631beb27bb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttrib4usvARB</name>
      <anchor>e6c2226f7df91e704cd9da25da48e345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribPointerARB</name>
      <anchor>3480cac4b77ae0f59c71bac63771c1cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBindVertexArrayAPPLE</name>
      <anchor>5a2285d3274cff23fa7986f16cbc278a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteVertexArraysAPPLE</name>
      <anchor>8a2a3dda8bf2b9ee68cce577319576b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenVertexArraysAPPLE</name>
      <anchor>f72c81fbdc057beee36d323fddca6afa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsVertexArrayAPPLE</name>
      <anchor>b69083300cb5fa5609dbc0cae7ddb79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendColor</name>
      <anchor>8f3b633ce48618704744b1854f079b96</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendEquation</name>
      <anchor>95c67ba0b5ade08f684dc9e2878b8e86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorSubTable</name>
      <anchor>7938359f1f400fdc9b8010c4e0b7b6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTable</name>
      <anchor>ea548503a251daad10a8c2e83836fe39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTableParameterfv</name>
      <anchor>44c4d47cfd248d8311c54370f120e8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTableParameteriv</name>
      <anchor>7599175407704c99e53255f41eabd9f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionFilter1D</name>
      <anchor>dbbc9480c29395783b5616a9a52b23c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionFilter2D</name>
      <anchor>b9f51343a829433c46a0fd1b0c2f9c97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameterf</name>
      <anchor>2d219dbde42eaf398f7be017de56de67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameterfv</name>
      <anchor>a9a064ada1a63cf85d68b5830f654ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameteri</name>
      <anchor>5eefd60b6f6ed00e9a71fab2933097e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameteriv</name>
      <anchor>d18e020a83871061a0f4b1b11578659c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyColorSubTable</name>
      <anchor>63b66ccfe13a6c046448a2720443adda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyColorTable</name>
      <anchor>6c85c4f7e32d3ca9ab19d4b56bc86766</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyConvolutionFilter1D</name>
      <anchor>314f5561f94e3e202d9aed1ae6ccae16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyConvolutionFilter2D</name>
      <anchor>7155d0bc6e457f82cdceb0feede8cafc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTable</name>
      <anchor>62a8f20173d9a21b7f5ca69017614873</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableParameterfv</name>
      <anchor>6112ce50b7d1ffc9627a206d0553b6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableParameteriv</name>
      <anchor>a53716a91623cc5c0d1f74fced4d79fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetConvolutionFilter</name>
      <anchor>1edd2f30ce44732566a54a3f5b33c013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetConvolutionParameterfv</name>
      <anchor>0dd6c200b7231854cd95bb26c2967800</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetConvolutionParameteriv</name>
      <anchor>77d371033da7cd55b3a8493e90209988</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHistogram</name>
      <anchor>cca545c50e871a78fce409522383a44c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHistogramParameterfv</name>
      <anchor>1d1f80380e937b4cf8e3ebb889555dbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHistogramParameteriv</name>
      <anchor>a62a8b0cd4223a0b0601d6fe5d119201</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMinmax</name>
      <anchor>056e9ccc1c3dc76687e18acd14008549</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMinmaxParameterfv</name>
      <anchor>1b40a89057f2580d371b362930418e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMinmaxParameteriv</name>
      <anchor>8c4d5efc792bdb0c6da89aa357f13073</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetSeparableFilter</name>
      <anchor>489057425583dc3e7d1ee52ee0cc292d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glHistogram</name>
      <anchor>5ebf3dea450122098f63683dd05eb4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMinmax</name>
      <anchor>d0cebda996302a16a9f8271dcbde634d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glResetHistogram</name>
      <anchor>3629b26bc932b5d4015b4f61bcfd1beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glResetMinmax</name>
      <anchor>912ad2856a14f2a3984c36ba2bce0da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSeparableFilter2D</name>
      <anchor>9343fe58d5cf0db8ed636278adb2359f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendColorEXT</name>
      <anchor>190610cf8cb9f73fe1477bea09daa983</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendEquationEXT</name>
      <anchor>880cbc436dd86a0f5aaedbb69f09dc58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendEquationSeparateEXT</name>
      <anchor>1dffe58e747efc47ec2c64442a1fc096</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendFuncSeparate</name>
      <anchor>1ad204b2804352b6fc2070eff4092b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordd</name>
      <anchor>365a9d06176e11cf239a1e066e044ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoorddv</name>
      <anchor>91003717ce28f74ae1982157fa9a8a71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordf</name>
      <anchor>d7fb9652d42446af8f7cc6b9d5262355</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordfv</name>
      <anchor>0d8fb0eaed62975661ce9570b4644825</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordPointer</name>
      <anchor>d10621bfc9fa1c1b329c47d65974096f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawArrays</name>
      <anchor>d18b388cab195fc24c66348c21fb8470</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawElements</name>
      <anchor>3995b6710f414ff2379649eb94bc1cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterf</name>
      <anchor>3d0ac5c98652e16e92830c1111753a4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterfv</name>
      <anchor>840ae923d1a024b65b69b6b9ff5160aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3b</name>
      <anchor>422062aed11a006b5a36ffb0dcbccd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3bv</name>
      <anchor>6246373752739a711ff864ad38264514</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3d</name>
      <anchor>c26d6bf09ae7855f9e0d770d76b2a1f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3dv</name>
      <anchor>6bba05c95d9469c0db192b5e55ed9f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3f</name>
      <anchor>aefe96251da662be8f5af3401436cd11</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3fv</name>
      <anchor>d0e26f224f114464112e39072d90940f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3i</name>
      <anchor>c1fbe11f461c699d9787c143f13448eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3iv</name>
      <anchor>d72e00cc22c96437533737addda15303</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3s</name>
      <anchor>8dfe2175eef367e6553be409eb633b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3sv</name>
      <anchor>29d28f67957b52183ae136fd4a1130dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3ub</name>
      <anchor>84e1facab0a9ace8e3160c0437136880</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3ubv</name>
      <anchor>97fecf6183efe6748388cd9a35122cfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3ui</name>
      <anchor>8944ea819d1f52a1aac892242558febf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3uiv</name>
      <anchor>18e601e67bcadde0fcae3d2c9bc7b206</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3us</name>
      <anchor>411e47720137ba7ff7787514fc3f544a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3usv</name>
      <anchor>646ec1b86340e874ba48881d15de2323</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColorPointer</name>
      <anchor>166a5637baee60e7899ac657577680c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2d</name>
      <anchor>d0504bb489c1754e8801d57de87615bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2dv</name>
      <anchor>789f41b66f0bd3ff515091d75cbb5629</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2f</name>
      <anchor>3cd3766ddc71009e32c79dbdfec3b71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2fv</name>
      <anchor>1561d2014473802dea8a1ee11bef6a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2i</name>
      <anchor>690d615f23f86d23c0d68e8ed0df572f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2iv</name>
      <anchor>f15d2e97b5ed78c78100ff331874fd6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2s</name>
      <anchor>26c35c9e9f9cf246194903a55e1bf4d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2sv</name>
      <anchor>7f0aec36c74473439071360af4143bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3d</name>
      <anchor>335fae3e9bace375f186c4247c32399d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3dv</name>
      <anchor>b78b0c6e8d9944272b14305c46ed8cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3f</name>
      <anchor>96f2df61c0d62178c6429b1b8213bc05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3fv</name>
      <anchor>3c86160745c2e8e7136a5736dd2dec48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3i</name>
      <anchor>dcfbccb3c2a18324f7a8889aadbfba6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3iv</name>
      <anchor>09df8a80118b4fead487fb45affbd879</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3s</name>
      <anchor>7bfcbf93f84149ff8d9263af1f703301</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3sv</name>
      <anchor>1f0e217c0faf3b52337e41e448cb4014</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glBlendFuncSeparateEXT</name>
      <anchor>ec24e88df7f249f0986f3424ae240ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glClientActiveVertexStream</name>
      <anchor>ae2f0d424a538dd85e1bcd75da4336b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3b</name>
      <anchor>ea63923c2ac5d8b7824cf4602f44af1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3bv</name>
      <anchor>b97a8755d6947226e97958e09aefdf6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3d</name>
      <anchor>d6df741a720850f22cb7817486d9e6ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3dv</name>
      <anchor>dac054154d4d87640206be2023981dc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3f</name>
      <anchor>33d5f771e81e744cb211b90f8d7abf02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3fv</name>
      <anchor>0367bf6771ea644095005e14e3202ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3i</name>
      <anchor>6fd68ec0099cf02d3717828323cf3401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3iv</name>
      <anchor>98c0332f32becb50d32ee6b9a64056d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3s</name>
      <anchor>0add03194d5a9f4440ccab74ee002c23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalStream3sv</name>
      <anchor>17dd015046fa7de7e2e7c61d900d3e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexBlendEnvf</name>
      <anchor>1f2bd674dced0dc1dcafab75ce5efb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexBlendEnvi</name>
      <anchor>1b5e41339710515ada4cca56b7d67939</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1d</name>
      <anchor>2fbe896c021ec6365d9b54eec6223da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1dv</name>
      <anchor>f4fac4df206321cdf67ac70fc88a8b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1f</name>
      <anchor>cc823bc4fa8bd2c682c8e380b20588a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1fv</name>
      <anchor>1b0cb7e264ccb5def7befc898950ce88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1i</name>
      <anchor>ba15a609c2cf90517f96395923cc39f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1iv</name>
      <anchor>c6f37af6be32352d492d15241806684f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1s</name>
      <anchor>cf821463fbd0dc76fc2eb29858c964b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream1sv</name>
      <anchor>42ab03791b7d3d6daf14b105b4db6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2d</name>
      <anchor>6592070f77f7b938abf67e6427a9675f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2dv</name>
      <anchor>e1c2430f31c8ab6a8c4eed41d89f43aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2f</name>
      <anchor>8cdc6813b432760fc3f8acd9e43557cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2fv</name>
      <anchor>d46ed0ed82dc0ea7e8259f22c59e2347</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2i</name>
      <anchor>62d8d01fc8dd8df07b0c32b157f67b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2iv</name>
      <anchor>967ec0a7fe3c0c9fee4c501e1c620e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2s</name>
      <anchor>3095b8eb927c23d71c7b1a1ee4aa5ef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream2sv</name>
      <anchor>6ebebb122f389bcf78546e41c1f79b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3d</name>
      <anchor>5cd9cc016071648f41b8d2ccc676315e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3dv</name>
      <anchor>673fa8c7bf3a79bdc1be547a863cea15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3f</name>
      <anchor>2c39a199567ddaf4dc0ff5a47532d3e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3fv</name>
      <anchor>1221526f7c193941ab5b6dbe85e168b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3i</name>
      <anchor>f69de9d65846ed78c8afe7d6f35ed5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3iv</name>
      <anchor>a9b86df188f30538e277999bc9338c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3s</name>
      <anchor>75ae525cdf5a5f7d762add6105b7cb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream3sv</name>
      <anchor>475b3e3efe9cefc668acb34a72fbf790</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4d</name>
      <anchor>21402b6d2c463b044e58165f8b1432f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4dv</name>
      <anchor>af492190fc996c92b962577b3cf717fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4f</name>
      <anchor>11656ccb19aa36e21f4d1c626877ad6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4fv</name>
      <anchor>8a0994cb44fcb7b1c7c4d62130a993a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4i</name>
      <anchor>0305f072f9ee6e55c9c0d9ae843ca3af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4iv</name>
      <anchor>a419ebb40ba33e8c28de4234aff6f3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4s</name>
      <anchor>fb05c8e74a587229e87e6798a0605c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexStream4sv</name>
      <anchor>c2d3991dbc446c7cdc01b6ba8ed16db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor3fVertex3fSUN</name>
      <anchor>fc63f2c2db807cf82f4adbb03a6c405e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor3fVertex3fvSUN</name>
      <anchor>1d7d3d964c88729464a40f1cc047ef17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor4fNormal3fVertex3fSUN</name>
      <anchor>85364b0fbb0e032802235852dd784522</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor4fNormal3fVertex3fvSUN</name>
      <anchor>e8a3dd2434b4f53ae77ccdf0dedc9d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor4ubVertex2fSUN</name>
      <anchor>a1dd14237928e36e0e82d9f6e0c2d4f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor4ubVertex2fvSUN</name>
      <anchor>0de35b7a04f7a55e050054b490f0a3ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor4ubVertex3fSUN</name>
      <anchor>de265b10b6a42fc94a62628e51d4239c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColor4ubVertex3fvSUN</name>
      <anchor>bd24176559ed976634709748dd716668</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormal3fVertex3fSUN</name>
      <anchor>196eada8f6cba0d6ff1d1bc64033a241</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormal3fVertex3fvSUN</name>
      <anchor>cac285cbe3b12aad50b0eb6c79b779ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiColor3fVertex3fSUN</name>
      <anchor>ff0042594278acdc7bc89941246165d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiColor3fVertex3fvSUN</name>
      <anchor>ba3d942c1dc873b2db7c7f3e6f72d5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiColor4fNormal3fVertex3fSUN</name>
      <anchor>28233246864b7d8e9c0cf43f64cf5241</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiColor4fNormal3fVertex3fvSUN</name>
      <anchor>82dc2b2c62c92dc9a8aa4940a2f53cac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiColor4ubVertex3fSUN</name>
      <anchor>cb2140216110e9810bcf82a3015cb16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiColor4ubVertex3fvSUN</name>
      <anchor>8f2a7eaf3a1f8add999ec486c8f6b2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiNormal3fVertex3fSUN</name>
      <anchor>8e6c8215d08a4708ead3a0ade2e0bbb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiNormal3fVertex3fvSUN</name>
      <anchor>05369792d3dc8860f71a480301306add</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN</name>
      <anchor>2ea6de157ba932493e19d368ac0fe9e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN</name>
      <anchor>d4c533019a8ccc01746acc760830550f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN</name>
      <anchor>8de29188d59c94f090db8442675d4b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN</name>
      <anchor>2cf81649b216c95ff066e4b60952bd88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiTexCoord2fVertex3fSUN</name>
      <anchor>6bffd137b1f9a6d05914aed5d4c8b718</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiTexCoord2fVertex3fvSUN</name>
      <anchor>67ebe302fcd2dc4f491c7fccafcbe22a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiVertex3fSUN</name>
      <anchor>cf2e5cc7f751baa372318ec52c2e3a07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glReplacementCodeuiVertex3fvSUN</name>
      <anchor>7b083663fa28a4535eb9f9a7dc7b508f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fColor3fVertex3fSUN</name>
      <anchor>ba8866cf1e15ebb8a96eb93cc24b9058</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fColor3fVertex3fvSUN</name>
      <anchor>3701b6960a2512c1956b6b9f8a25da6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fColor4fNormal3fVertex3fSUN</name>
      <anchor>ffafd5b115844fd18ee889593642d091</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fColor4fNormal3fVertex3fvSUN</name>
      <anchor>8758a720dfdb9b5a3665cf25f9fa1b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fColor4ubVertex3fSUN</name>
      <anchor>673875952de68b3254ab791abbd7c004</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fColor4ubVertex3fvSUN</name>
      <anchor>9a688ecd4599645dab38c411dd0c7cda</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fNormal3fVertex3fSUN</name>
      <anchor>e87d0bdf1bb57d40c305bd07927da7dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fNormal3fVertex3fvSUN</name>
      <anchor>c88650aed6202ef27cec4cd30c9bc43e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fVertex3fSUN</name>
      <anchor>50f6418c755f589356bc3a667bfe9df6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord2fVertex3fvSUN</name>
      <anchor>b03aa729c3991bb28ee4fb55ae97f52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord4fColor4fNormal3fVertex4fSUN</name>
      <anchor>819f3089278b208645657f42364e8df5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord4fColor4fNormal3fVertex4fvSUN</name>
      <anchor>652403afe5ac954b1462e1f04b302eae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord4fVertex4fSUN</name>
      <anchor>949f795c74b4f321d251e87647274f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoord4fVertex4fvSUN</name>
      <anchor>8bb7adf02e521149b6a570f7d4f9db5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorPointerListIBM</name>
      <anchor>fd6a2af3fc61e6962faf611304fb8de2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEdgeFlagPointerListIBM</name>
      <anchor>2e33cc46fd95f56cc6f55cea1f26a1be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordPointerListIBM</name>
      <anchor>576fb87cc6df67dccbf48609cb64bc31</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glNormalPointerListIBM</name>
      <anchor>e38b27c9bad252b18f12bd55217d1df3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColorPointerListIBM</name>
      <anchor>6aeb6eb2155542416b0356e7deec6410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexCoordPointerListIBM</name>
      <anchor>bfc30c7bdf24734ad3c938053b0e1670</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexPointerListIBM</name>
      <anchor>d77b35ccc5fdea6400836569e07e83ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorSubTableEXT</name>
      <anchor>feec2aeb463aab0a27a4f2840f31d8b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyColorSubTableEXT</name>
      <anchor>f3b7afc8c1e21583069775cb4484cb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTableEXT</name>
      <anchor>f10a65f13319651cdcf92b82c586c64f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableEXT</name>
      <anchor>bf88e132a253f62487c56ca2425693ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableParameterfvEXT</name>
      <anchor>f61a7ff21ef2ef19ff6523862bff2a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableParameterivEXT</name>
      <anchor>58eee9e81c7e39b70f7ba17f413c45a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTableParameterfvSGI</name>
      <anchor>ce9670ca7a99d61bdd7759d0a367e153</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTableParameterivSGI</name>
      <anchor>0dd30b47a1c27ca788b185a2596a341d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glColorTableSGI</name>
      <anchor>832fb1bfdb06c5b7661a2232b6953f44</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyColorTableSGI</name>
      <anchor>ae4ae3159a20a7b791375afbeb76db00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableParameterfvSGI</name>
      <anchor>c2258c561a48ab37f91239ac92fe028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableParameterivSGI</name>
      <anchor>132ef0c91b69982e5fb199c9b0f5598e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetColorTableSGI</name>
      <anchor>a25bed74b57d0c42f085a66afcb2a557</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerInputNV</name>
      <anchor>6fb2b68b0438af267478c659f6f57cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerOutputNV</name>
      <anchor>7f10d4fbb5d65a6a97f0e3da7e40c8aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerParameterfNV</name>
      <anchor>aa7f01deebbfb060e98b01fc41a09be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerParameterfvNV</name>
      <anchor>c1dac65850038d9a19fafabef7115e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerParameteriNV</name>
      <anchor>a7afe78fe7f2ca35017b39089079d26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerParameterivNV</name>
      <anchor>d4f6ef7e43d342c177367f46a95a838e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFinalCombinerInputNV</name>
      <anchor>284687b21cc32ec45d806399f5054995</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCombinerInputParameterfvNV</name>
      <anchor>de8c142f7ed8d54d2cc2af0bd16ad824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCombinerInputParameterivNV</name>
      <anchor>08e59de59ddcf0d4079fcc046cee0f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCombinerOutputParameterfvNV</name>
      <anchor>a67062aaf7e3e6c7c9e7a109062aa479</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCombinerOutputParameterivNV</name>
      <anchor>d0d2ec219110b5ff8a5c040bc40219b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetFinalCombinerInputParameterfvNV</name>
      <anchor>4cea7665f5906fe7cba252baba5c7adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetFinalCombinerInputParameterivNV</name>
      <anchor>1a093d78b26214e46b4971b61e48bcb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCombinerStageParameterfvNV</name>
      <anchor>1eb5dedca0b7592697db18cf93484158</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCombinerStageParameterfvNV</name>
      <anchor>befb6dab111ab638a52084438a7acfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexImage1DARB</name>
      <anchor>9cb8bafbeda5115165f3b982aa47658a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexImage2DARB</name>
      <anchor>77642de9a234d6f81a253a85a9d1bb12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexImage3DARB</name>
      <anchor>79b6f8dbeb4d6f86faaef69319ac8e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexSubImage1DARB</name>
      <anchor>e99dbc8ba9960b0af7838fda306da353</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexSubImage2DARB</name>
      <anchor>1e37ba18c521508636b46ee1c418a510</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCompressedTexSubImage3DARB</name>
      <anchor>84aefa2ecd9494368000917db3005e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetCompressedTexImageARB</name>
      <anchor>c96998362713c705ecafcd7c08390528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionFilter1DEXT</name>
      <anchor>7e5fd95a99b8b2eadaa01aa33bfd19b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionFilter2DEXT</name>
      <anchor>05e5538e92807171a164c65a8e7047a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameterfEXT</name>
      <anchor>19f7c39a2f990ddadd3dd3775872546a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameterfvEXT</name>
      <anchor>4da0cc69bc55c3b8eead2d055c85dc9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameteriEXT</name>
      <anchor>a8ce6fba7c26714d238aaf06358c7e42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glConvolutionParameterivEXT</name>
      <anchor>ee960a5fbe21a68f15b1c6f2fad1135b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyConvolutionFilter1DEXT</name>
      <anchor>9ddde1949ecbe7da6e6d272588afc817</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyConvolutionFilter2DEXT</name>
      <anchor>60167fa8a803513665bdfcfd7ee2c47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetConvolutionFilterEXT</name>
      <anchor>2e7f3631bbe405f35ab392a0077021ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetConvolutionParameterfvEXT</name>
      <anchor>aeab6c6ba5514e90b6f458b967b57405</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetConvolutionParameterivEXT</name>
      <anchor>a6378dccac546365914e9db8e0d7022d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetSeparableFilterEXT</name>
      <anchor>d71d920a58222590db8081bcdeb561e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSeparableFilter2DEXT</name>
      <anchor>95dd84b329782b562e495cc9fb113589</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCopyTexSubImage3D</name>
      <anchor>04a2f4d138f28f717d8f02d76c205347</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawRangeElements</name>
      <anchor>53338b333af6756ac551f30946d656af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexImage3D</name>
      <anchor>8f2b72191f159fb654645d9b829b785f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexSubImage3D</name>
      <anchor>04dc717b4b53d89fcc1927727f3db7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glCurrentPaletteMatrixARB</name>
      <anchor>94de521b1086b5a5947184fc13789434</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMatrixIndexPointerARB</name>
      <anchor>597660db427e92fce4c1227d63ca3bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMatrixIndexubvARB</name>
      <anchor>7ca9fa9eb333dea876118330aa1d1ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMatrixIndexuivARB</name>
      <anchor>f67aa822c92a7633df5da67d65d15412</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMatrixIndexusvARB</name>
      <anchor>b84d4bcd38a0b893d68ac9c7774dc67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteFencesAPPLE</name>
      <anchor>8cb06b3c72eaac71adec4f6aa9d48e69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFinishFenceAPPLE</name>
      <anchor>94bfda9c88a84a4699f2ec3747212eca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFinishObjectAPPLE</name>
      <anchor>02ff96ec23870cee28887f9ab617f2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenFencesAPPLE</name>
      <anchor>5bd3502a7be67eaf6eedd28f8b36d9d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsFenceAPPLE</name>
      <anchor>547d5878a5a5ba8045efe34021eb19b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSetFenceAPPLE</name>
      <anchor>759b1b30e3843f2049faefef6e959a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTestFenceAPPLE</name>
      <anchor>96d920f673a6d68438123bbbcbd7961a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTestObjectAPPLE</name>
      <anchor>74e992c2d06a94c5b68a5b4389eb84dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDeleteFencesNV</name>
      <anchor>ed08e15437a006ebe6d81c6cefadfb85</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFinishFenceNV</name>
      <anchor>48bd2966b3038956de56e03467929df4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGenFencesNV</name>
      <anchor>77090744b8a166bc54fe4d24c914967c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetFenceivNV</name>
      <anchor>53a44d9342a3e25f4deca919a5ae22c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glIsFenceNV</name>
      <anchor>ea0fcd96e0c6bc3def6fb1670c8828d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSetFenceNV</name>
      <anchor>e171558946d15ac02624d3faa10ea3c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTestFenceNV</name>
      <anchor>dce5237a185446c570205f3a9feec591</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawElementArrayAPPLE</name>
      <anchor>80916cf8b090a23ed7ba06856d62c754</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawRangeElementArrayAPPLE</name>
      <anchor>d020f9e688e8c36f8370e3006fa7b712</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glElementPointerAPPLE</name>
      <anchor>12b4c01e0c310f582e9333aee7fdf0be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawElementArrayAPPLE</name>
      <anchor>4de8ff89002acea79b95b08b7625d74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawRangeElementArrayAPPLE</name>
      <anchor>1159abc645fdb1c4c5fce9adc4bcc431</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawElementArrayATI</name>
      <anchor>aa44bb44ba99e2716a7b2f5fc34d1148</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawRangeElementArrayATI</name>
      <anchor>8264c45c52a902e1fd1addfff4f61f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glElementPointerATI</name>
      <anchor>734436ce505a6129dae7040b9eaa47d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawElementArrayNV</name>
      <anchor>ec1eb5c1f418388a3a12798a79fb430f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glDrawRangeElementArrayNV</name>
      <anchor>75f7cead50591fd9b46613d734aa2ceb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glElementPointerNV</name>
      <anchor>7bc41f13a6d5e585f3639f3b3a9de240</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawElementArrayNV</name>
      <anchor>1f2f44c72a9aeb4e665454530c98d891</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawRangeElementArrayNV</name>
      <anchor>bebcb9bf1333b4278d7c7b0afe89d6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glEvalMapsNV</name>
      <anchor>801441d848bad39713fb066748b4a6e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMapAttribParameterfvNV</name>
      <anchor>b2b06155a9264725bdcde704cb219260</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMapAttribParameterivNV</name>
      <anchor>05ee60194bc4d89dd8b9888b5b88a8f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMapControlPointsNV</name>
      <anchor>1259e695bc77d841569c370ecd5fe6f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMapParameterfvNV</name>
      <anchor>871658b2661c0464a1d96cd77e0fe9dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMapParameterivNV</name>
      <anchor>f1a9b3d9c5040a227ce74c824ae8cd0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMapControlPointsNV</name>
      <anchor>474a45f4a39c42c66509c843f4a8266d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMapParameterfvNV</name>
      <anchor>4816309f95ef19a8d80234c68a8ac888</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMapParameterivNV</name>
      <anchor>adb799ea1a48fd357d7466169b88c76e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFlushVertexArrayRangeAPPLE</name>
      <anchor>8e4fa522b99fc19ea1457884c88490e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexArrayParameteriAPPLE</name>
      <anchor>b9b7e703650535085646327f9d35dd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexArrayRangeAPPLE</name>
      <anchor>0a033a62bd9ec17c887ac08958977543</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFlushVertexArrayRangeNV</name>
      <anchor>77b570d9a934afd499b29fb5cbb30991</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexArrayRangeNV</name>
      <anchor>b0dd7825fde3473603431ec004272731</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglAllocateMemoryNV</name>
      <anchor>05fea16e28c9ce2fdf997e153387b663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglFreeMemoryNV</name>
      <anchor>2120e40ba86a79432cb1b4d6190088c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoorddEXT</name>
      <anchor>2af785520a1c85ff2d006631a48b0401</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoorddvEXT</name>
      <anchor>ea8778f0971f3f9b5e9ea08572010f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordfEXT</name>
      <anchor>34b7cad2aa4c21375d9ac8e30d6a96e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordfvEXT</name>
      <anchor>58d8fb0942840ab361a86b0846a494db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glFogCoordPointerEXT</name>
      <anchor>278729e512d0b4602cf22d08b29f571a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHistogramEXT</name>
      <anchor>30e3140833f12d5134617e602e89f1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHistogramParameterfvEXT</name>
      <anchor>ebcd926865d5074d3d388367d706de08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetHistogramParameterivEXT</name>
      <anchor>b2b473bcb33a73c10c770dd154120d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMinmaxEXT</name>
      <anchor>06081744f002696616e36c178e8ac36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMinmaxParameterfvEXT</name>
      <anchor>92c9f6227822bc0c924439787557c49e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetMinmaxParameterivEXT</name>
      <anchor>446918e4716b7ad6d027ae913f5e7325</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glHistogramEXT</name>
      <anchor>ed5cba4e8bab8a5d3bb737532e300298</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMinmaxEXT</name>
      <anchor>4c43f2b3134fb1d11b5185f96d7f12b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glResetHistogramEXT</name>
      <anchor>29c146064751214050c8665cd3238a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glResetMinmaxEXT</name>
      <anchor>539e8589c9081c149d750eb5a97898fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetPixelTexGenParameterfvSGIS</name>
      <anchor>ee5cb62c9055f649d31ad785e744b619</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetPixelTexGenParameterivSGIS</name>
      <anchor>662e037152086446867535ee60318ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPixelTexGenParameterfSGIS</name>
      <anchor>a2a6c6bb339b823e142f0845144a3702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPixelTexGenParameteriSGIS</name>
      <anchor>c1cc5f4ebd115c2eece2fd329e5e518f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramNamedParameterdvNV</name>
      <anchor>f01ad533b40b080307ae9f2b10761e07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetProgramNamedParameterfvNV</name>
      <anchor>610e67b6be0845bdf0f5ffe26682dc5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramNamedParameter4dNV</name>
      <anchor>8b83706504040e7e1a5c03af5a15d2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glProgramNamedParameter4fNV</name>
      <anchor>981ef6b580e236f2379ed28d14450f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetTexBumpParameterfvATI</name>
      <anchor>4f1e5b40363bd916d990841e1a78d420</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetTexBumpParameterivATI</name>
      <anchor>b32cd45998023771257151ce2f420fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexBumpParameterfvATI</name>
      <anchor>264756c68e071bfe12620aac5e9608a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexBumpParameterivATI</name>
      <anchor>9b2a2156aa15a8fd438d6022e0757633</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribArrayObjectfvATI</name>
      <anchor>d5711863af9376bb5730058dc0d65d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glGetVertexAttribArrayObjectivATI</name>
      <anchor>1d0c77b823bf658f3bf1e9c56851fcf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexAttribArrayObjectATI</name>
      <anchor>ba9d05841e2a9505460be3b6036ba6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLoadTransposeMatrixdARB</name>
      <anchor>f63c3481d45c3c314a2e5c0079874ecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLoadTransposeMatrixfARB</name>
      <anchor>1fa34b7751c972d2fd88135609c9ae24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultTransposeMatrixdARB</name>
      <anchor>a7b7ed266121e79d166873c9b3818535</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultTransposeMatrixfARB</name>
      <anchor>c5e2e7bf287c0ce8826c88e70ed7227b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glLockArraysEXT</name>
      <anchor>6f009a2eb2ea8f4498fc7040c05f7c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUnlockArraysEXT</name>
      <anchor>6a8b49d5d25c7b016f118e5a095b8805</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawArraysEXT</name>
      <anchor>9cd2c582047caf9d02c98c779a86f5f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiDrawElementsEXT</name>
      <anchor>fc9ef3ea49c25927e6a14f531317b7ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiModeDrawArraysIBM</name>
      <anchor>83bdd97ac0d9b71feb220daaa36719af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glMultiModeDrawElementsIBM</name>
      <anchor>2e749aa5e4ca21fb79d224e3d326a4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPNTrianglesfATI</name>
      <anchor>dd52f81199067fb9a67d4ebacf16d2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPNTrianglesiATI</name>
      <anchor>8ab3175bf561b751c737b0a8aec12809</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterfARB</name>
      <anchor>d1cbc125185d03aaef411d3256408327</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterfvARB</name>
      <anchor>1b7565b84571528243352fbb3cc59f03</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterfEXT</name>
      <anchor>a7770dede494f3e89d31f35c37fc8938</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterfvEXT</name>
      <anchor>5394fcb8a6a55a0c39d9f7f372a8f39d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameteriNV</name>
      <anchor>404fde74eae33e00b6867103995d27e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPointParameterivNV</name>
      <anchor>cd824c34cbe76df3bba75fba731df3de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPolygonOffsetEXT</name>
      <anchor>865d84888e78ae61187db6a51f99ab58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPrimitiveRestartIndexNV</name>
      <anchor>2da0a88e6ac4105bafffe03bdda54045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glPrimitiveRestartNV</name>
      <anchor>03a928746e6fa203d9865d089ed0e101</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glResizeBuffersMESA</name>
      <anchor>9bad5be782058763c5fe1ebb88360c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSampleCoverageARB</name>
      <anchor>ffdf138b050488ae22fdc21d147996a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSampleMaskSGIS</name>
      <anchor>cad7c38b560e90f16021a6a62278aefd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSamplePatternSGIS</name>
      <anchor>dd2fee87c12d0b8a66e0f6e4ec659464</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3bEXT</name>
      <anchor>a4b0ae841d26469e5c8b5840f41b6d15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3bvEXT</name>
      <anchor>dc4fb8f1e515e0e3912372c6e24c302d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3dEXT</name>
      <anchor>cbe075a6a115bd8376e542c2051a03da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3dvEXT</name>
      <anchor>98a594515425fd6db337e310ac213898</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3fEXT</name>
      <anchor>029416ac0ae3f617b52cb58feb230beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3fvEXT</name>
      <anchor>6566df61f65cf05180fbedd7781a1017</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3iEXT</name>
      <anchor>29c3c3cf66d32909caba65d923166d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3ivEXT</name>
      <anchor>e91c7497ba904292141ed667f7bcd981</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3sEXT</name>
      <anchor>4b4593cea4c7f14ca2d7532bb7c4612f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3svEXT</name>
      <anchor>87dd74ebd77963072602bc461a62990b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3ubEXT</name>
      <anchor>70ca26d1cbddc1f6d7dc6a10b8fefaed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3ubvEXT</name>
      <anchor>f3f8bd6d1bd9c6372ccceb9756f594cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3uiEXT</name>
      <anchor>f5beb80fb1f6fdd1630fa3600c2d0ff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3uivEXT</name>
      <anchor>de5f98790d0ad4243f157b33d1324d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3usEXT</name>
      <anchor>d5e2822eb015310ebd535e6ad00f7ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColor3usvEXT</name>
      <anchor>7eb23641ad5ae5159e0c0bb4ebe889cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glSecondaryColorPointerEXT</name>
      <anchor>ac3cb1486a109381c9c03b69f67e302c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glStencilFuncSeparateATI</name>
      <anchor>7a4ed6553be7aacfa194dbe1486d5220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glStencilOpSeparateATI</name>
      <anchor>152548b2fa957dfa96260f4fd7a55703</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glStringMarkerGREMEDY</name>
      <anchor>da6d1af3a84fbd00c14a1d05a5c925c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexImage3DEXT</name>
      <anchor>1162bcaf81744a6a1ccc40567d264d60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexSubImage1DEXT</name>
      <anchor>f55606e7aef281343fd8d5162f195d54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexSubImage2DEXT</name>
      <anchor>a47c41d6476ce822e9bd5198bff39499</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTexSubImage3DEXT</name>
      <anchor>d4835449201ce527bbf94ae41560f8a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glTextureColorMaskSGIS</name>
      <anchor>59232cdec7c3447a7f0fa4073c4231d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix2x3fv</name>
      <anchor>f4f5f0bce058f33723f6b4ec438b0a0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix2x4fv</name>
      <anchor>260f967b0434cae2f6313f8926d0e445</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix3x2fv</name>
      <anchor>b75e4043e47d90e7add91ab0a1388932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix3x4fv</name>
      <anchor>a068edc60fe4600beb3de8b259733101</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix4x2fv</name>
      <anchor>02cc0de0057afd2bc6dd1c522c5aa781</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glUniformMatrix4x3fv</name>
      <anchor>13cdb49abd1446689ca743a1611f9f0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexBlendARB</name>
      <anchor>4b4be41b85a02b43a0708f732bc5d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightbvARB</name>
      <anchor>77e9d18c3456df29492fb611472e300f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightdvARB</name>
      <anchor>5fb46ef615e97eeba694b644a9d69788</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightfvARB</name>
      <anchor>2c9c17b4a282c663af8c2a6829d1081f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightivARB</name>
      <anchor>633801f693bc45076c289b3bc8818657</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightPointerARB</name>
      <anchor>2b9efec5264ca9402ae8bc88a9d97cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightsvARB</name>
      <anchor>6f1a738262aaff7fbeed3404102a2b36</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightubvARB</name>
      <anchor>5e5b352a3a27dc9aa7a0f8cadb39df9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightuivARB</name>
      <anchor>2f994e788325b6c1940377948277dada</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightusvARB</name>
      <anchor>90292ab2fd07dca8edd6f5207ded5b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWeightvARB</name>
      <anchor>7f19bd11049b94d48121cb0a8710f872</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexWeightfEXT</name>
      <anchor>5013da838401c3e3f2cdacc45e74025b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexWeightfvEXT</name>
      <anchor>a53611b4d7c57bc9151826478b9fe2ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glVertexWeightPointerEXT</name>
      <anchor>b4fa1567b596233cf49abbf779a19fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2dARB</name>
      <anchor>5a9d5e548aeca1831323452c91e81727</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2dvARB</name>
      <anchor>626779ecd44e4915fe124a536cdd18c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2fARB</name>
      <anchor>809089622da544fc52c94cef47cdf936</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2fvARB</name>
      <anchor>8942b296a233ad4515a4a4247af06816</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2iARB</name>
      <anchor>627a48d463a591ddd1e2a43083e5fe0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2ivARB</name>
      <anchor>d658406877185ee5ce927fd808401982</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2sARB</name>
      <anchor>cf532296ffaad9f8f84988f64abc4f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2svARB</name>
      <anchor>8cc3c94e76b31b9fa6d2ffcc491b291e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3dARB</name>
      <anchor>71c1f6431cf73f6181c0ff861ee6332a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3dvARB</name>
      <anchor>768bb90e7cc5f462d3de5c212d6fb356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3fARB</name>
      <anchor>b4a9e5257ad19a3858c1ee853225b025</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3fvARB</name>
      <anchor>8cf8776ce724beeebbd5be046dd8143c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3iARB</name>
      <anchor>c9177d0132956d95151b588eb9001dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3ivARB</name>
      <anchor>9033d5d70dcb0f491d1401f3d3ec6aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3sARB</name>
      <anchor>b39b94db21ed2aa6baf006c69c94f7fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3svARB</name>
      <anchor>be07e3cf7a2244f96a263a129e40baaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2dMESA</name>
      <anchor>20ec9bbd2143a40f772349d08497b6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2dvMESA</name>
      <anchor>faac92da745dfa92b734073b567ca629</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2fMESA</name>
      <anchor>9c6318347daf4cb81037b3f3880a85e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2fvMESA</name>
      <anchor>3815d23c49117ad88ad5631b84368ada</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2iMESA</name>
      <anchor>95384ba96f6cec788002468a3f60c59d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2ivMESA</name>
      <anchor>7df5fe1d300d451d8fb779837c75aa72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2sMESA</name>
      <anchor>54b5456df4ea1d746c4cd105b82ff8dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos2svMESA</name>
      <anchor>441ee149fa8d627fca1164d8eef39718</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3dMESA</name>
      <anchor>6d922c069710061774c551e86684745e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3dvMESA</name>
      <anchor>6502b3550a0034655d1229b458750917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3fMESA</name>
      <anchor>a5e4ca96a9feb64ee9bf0036d284eda7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3fvMESA</name>
      <anchor>17c073c8fdbd7aa6246a22c802a0de8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3iMESA</name>
      <anchor>bdf2a2727d2f4b6082b24dd275acc0ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3ivMESA</name>
      <anchor>ba42b109621fd13b027ecfb95a2a8b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3sMESA</name>
      <anchor>1923a6f626db529bcffe5ea15bec7c12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos3svMESA</name>
      <anchor>83ca3dd6a942be05caf930bb696a5c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4dMESA</name>
      <anchor>9a5170bf7c8a61e7ec3c5ae3e621bcbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4dvMESA</name>
      <anchor>28f0d2ce53ce9d7a6382dd99c5ff7c5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4fMESA</name>
      <anchor>4a9b8bd8dc463f8839aa7a5c7a474036</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4fvMESA</name>
      <anchor>4781738fc63c8511668338f819b05fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4iMESA</name>
      <anchor>a6e2b7a56e038f8a85fbcd34803fb56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4ivMESA</name>
      <anchor>6d9925b23052833f5878501782a35044</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4sMESA</name>
      <anchor>d4bbbc5cccd4b1a9ec0e944ebbe7d849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>glWindowPos4svMESA</name>
      <anchor>7fb4e9558e615ea3194b13695f76639f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglAssociateImageBufferEventsI3D</name>
      <anchor>df4b5886ed93a2d084efcaf1e705edea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglCreateImageBufferI3D</name>
      <anchor>9b61ac94d8f113528140ed7ca82c833c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglDestroyImageBufferI3D</name>
      <anchor>fe68459b2f2b0e11fb349d1859028b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglReleaseImageBufferEventsI3D</name>
      <anchor>0626bd0cffde6da125d0e0cb884c751f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglBeginFrameTrackingI3D</name>
      <anchor>d83eff31e1a838e3e6051cafb140349d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglEndFrameTrackingI3D</name>
      <anchor>d0ef5e12feaff2dbdcfdc5db427e9e97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetFrameUsageI3D</name>
      <anchor>4073ef94ed937b757ec8167f8807ad5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglQueryFrameTrackingI3D</name>
      <anchor>3bb015f9fdb33c6df9632085c70b9907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglBindTexImageARB</name>
      <anchor>e59e12f934507a95999ceba794a22719</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglReleaseTexImageARB</name>
      <anchor>b9c1281980142ce7f35acde7097c84ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglSetPbufferAttribARB</name>
      <anchor>90f5c8951da011974373264d33d0cb43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglChoosePixelFormatARB</name>
      <anchor>564114bc2f7323cf630e9e0d88414996</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetPixelFormatAttribfvARB</name>
      <anchor>5605df980b27e744c4a0e47bbc817151</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetPixelFormatAttribivARB</name>
      <anchor>21d8658f9901109ee4848704a4267c76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglChoosePixelFormatEXT</name>
      <anchor>41d30fa97416bcf1c9eba9ae61660f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetPixelFormatAttribfvEXT</name>
      <anchor>b96875477474eafe84f775b9d22dd07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetPixelFormatAttribivEXT</name>
      <anchor>07b57fc077135e19dd64349e22a8af30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglCreateBufferRegionARB</name>
      <anchor>bdb18c3363e1ffff8232f93f60832c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglDeleteBufferRegionARB</name>
      <anchor>8233a7a3cca0e86a7c7b08faeb782495</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglRestoreBufferRegionARB</name>
      <anchor>e7ac491b020d65fb8c09238b2b236fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglSaveBufferRegionARB</name>
      <anchor>79be1b7bf72b14a3ffe97ba2a582edb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglCreatePbufferARB</name>
      <anchor>33ca79b4feeafafd444d5a0c8bcb4079</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglDestroyPbufferARB</name>
      <anchor>f878c2c53b6f3700e582471a6d6020d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetPbufferDCARB</name>
      <anchor>05f9f08dd05353e58801fa384d71e06e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglQueryPbufferARB</name>
      <anchor>94a7ea9d6bc908bba2f7a7817b5d3ca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglReleasePbufferDCARB</name>
      <anchor>5e20a72033c2231be15b5e1969f40e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglCreatePbufferEXT</name>
      <anchor>ff7231c4d3ab2a6f8121463eaeb9c2d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglDestroyPbufferEXT</name>
      <anchor>5654e9ccfaa1afed212d31cc0ea7cd1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetPbufferDCEXT</name>
      <anchor>7f86a97577ff1921fa460a89351fc327</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglQueryPbufferEXT</name>
      <anchor>eeb50626e1d439c984b3889e378c2ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglReleasePbufferDCEXT</name>
      <anchor>049c8f4f77325d6005b4a1bf381d810e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglDisableFrameLockI3D</name>
      <anchor>11348a61c55f705d3a0767991d1724d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglEnableFrameLockI3D</name>
      <anchor>45bc0271759ce859ca849d9b23f9b21f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglIsEnabledFrameLockI3D</name>
      <anchor>1097962bbf4949fbfea5a0d9756c27fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglQueryFrameLockMasterI3D</name>
      <anchor>e53a0c4b57d9872750ab1a1a081272be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglDisableGenlockI3D</name>
      <anchor>7a1204e044c82ffd883f23db9c42bff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglEnableGenlockI3D</name>
      <anchor>1e032cd0a417c93533cfb44c630bf82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGenlockSampleRateI3D</name>
      <anchor>af79ac82e9708f6d222ee7b602c7a859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGenlockSourceDelayI3D</name>
      <anchor>6449e79963f6077544881f810a9999cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGenlockSourceEdgeI3D</name>
      <anchor>d4dc515c1ad980c96aff4d0d231fa18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGenlockSourceI3D</name>
      <anchor>0c10081d9c473ee98f35c6c849b70265</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetGenlockSampleRateI3D</name>
      <anchor>11229ac59f0ddfc10774e388f1b2d320</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetGenlockSourceDelayI3D</name>
      <anchor>b1df32ec8650a06424c79d1f962fcbec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetGenlockSourceEdgeI3D</name>
      <anchor>8e32f3820c462a4a0bf9b587de3e8849</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetGenlockSourceI3D</name>
      <anchor>c3443eb062fba13e676e5f7f5af5ee50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglIsEnabledGenlockI3D</name>
      <anchor>e7c1f9c3a4b437a0ffafa7982799cd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglQueryGenlockMaxSourceDelayI3D</name>
      <anchor>c566f408f48fa1de07d10fccb674b1aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetCurrentReadDCARB</name>
      <anchor>5444493d725cf91595fbeb7eba0fc04d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglMakeContextCurrentARB</name>
      <anchor>ff44fc457a5cfca5127165af547d5052</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetCurrentReadDCEXT</name>
      <anchor>6c80d5acfce1415ebc4d42b6b2c77e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglMakeContextCurrentEXT</name>
      <anchor>06da10e3a798baa8f718a5d8bece823b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetDigitalVideoParametersI3D</name>
      <anchor>64bf04ed4dd4825f460f1796f254ceff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglSetDigitalVideoParametersI3D</name>
      <anchor>6b6e9f5030a17794d66bf3080caed3d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetExtensionsStringARB</name>
      <anchor>920d39a75f4bfc973bd70f8a9d4a0b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetExtensionsStringEXT</name>
      <anchor>6bf0bad66864382aa684ab9221e88345</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetGammaTableI3D</name>
      <anchor>238b8fd985408ea2fe29af4cfbd16140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetGammaTableParametersI3D</name>
      <anchor>890092c6901275400ce8e24c701bd1dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglSetGammaTableI3D</name>
      <anchor>23775f7f79a68d63d984b32321851da4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglSetGammaTableParametersI3D</name>
      <anchor>82c909fff695baec9375b8968ebabd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglGetSwapIntervalEXT</name>
      <anchor>4b2dddf300c308b1f4abc965b5e7b140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>wglSwapIntervalEXT</name>
      <anchor>907c86a80d49ac515a5089fcf03e3d8a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGLExtensionManager</name>
    <base>csGLExtensionFunctions</base>
    <base>csGLExtensionFlags</base>
    <filename>structcsGLExtensionManager.html</filename>
    <member kind="function">
      <name>Close</name>
      <anchor>b80c14c86ba7bad4e40adec5b7df3770</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGLExtensionManager</name>
      <anchor>03be45de0b240ea0dcefb9d280dc4fb2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_version_1_2</name>
      <anchor>0a98ae67f8a581652bfc2928400ef5e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_version_1_3</name>
      <anchor>2a74c3a3db809ff4e9a8da627dfd412b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_version_1_4</name>
      <anchor>bebbca41c3b305d267dc3e537e919c18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_version_1_5</name>
      <anchor>27bc2a42bba7873cdf0cd979d585f6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_version_2_0</name>
      <anchor>1f2ed6949fb0fd482e2cec6e54e3ed45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_version_2_1</name>
      <anchor>1d77755631a5bf9839aeb22ca8485cbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>578083d632305f4cf0d8b26781d34fde</anchor>
      <arglist>(iObjectRegistry *object_reg, iGraphics2D *g2d)</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>80a83c8ae1aa975c537e8d939c9cc5a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>29ede8e8bd5b1baba6129338d2fa3e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_3DFX_texture_compression_FXT1</name>
      <anchor>357ae8a64a459e03c252879c522d52be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_APPLE_client_storage</name>
      <anchor>f4a97bf1a7b3b13ab41c028246bd9ae5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_APPLE_element_array</name>
      <anchor>02664a703fe9278ab99f01b5668630d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_APPLE_fence</name>
      <anchor>31d062fe0d683e00279d3b93f16f741a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_APPLE_vertex_array_object</name>
      <anchor>d593cc7eb474e023fef9da8e12588ff4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_APPLE_vertex_array_range</name>
      <anchor>22bcb5ecc0500058c988c259b8a82d0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_depth_texture</name>
      <anchor>753c472bc5cacf338ec7569482006793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_draw_buffers</name>
      <anchor>fa2e66e462c3d883c8771df612932838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_fragment_program</name>
      <anchor>d4a6ad7ca98413e525bb7525598d97af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_fragment_shader</name>
      <anchor>e6351175973e703ead71e7d5c65953b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_imaging</name>
      <anchor>69992232549a1f37c735bacbf97aefd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_matrix_palette</name>
      <anchor>6b7f1685f3a116c4a082786e7bf32f72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_multisample</name>
      <anchor>174fe5a7cf17de4ec1fb7307ca27f82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_multitexture</name>
      <anchor>c9ccd66807693a46a1b68cfea8b7fc06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_occlusion_query</name>
      <anchor>e90b1f2289d7d67c0e2f481fec886ff8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_pixel_buffer_object</name>
      <anchor>3e0ed06319e3007d65c82ee146348f1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_point_parameters</name>
      <anchor>2856ef328a08f9646b5aaf90527cf8a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_point_sprite</name>
      <anchor>ec16b0af5b11f02914e5d501fe2922cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_shader_objects</name>
      <anchor>53a57f1757539b0247cff4af8295d096</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_shading_language_100</name>
      <anchor>e77fef8ff09472927e831d9d45028731</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_shadow</name>
      <anchor>ba7efb9aff2c99e19a40ce8b03a6aa4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_shadow_ambient</name>
      <anchor>86b6f53eca7b56d8cdcd81073aea22d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_border_clamp</name>
      <anchor>03fa01c7d5b832bb5c825cf4a6cf7843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_compression</name>
      <anchor>42cde8b29e23508f257d0972e905d882</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_cube_map</name>
      <anchor>4b12f149e1a13eb2b7a1676ff9c22b77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_env_add</name>
      <anchor>ceb79e40a0aaa31f77ee4bf290b469b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_env_combine</name>
      <anchor>33d7dd1193f8ac1607c0a2a552f46ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_env_crossbar</name>
      <anchor>6f872e7044f930f1bd0ae3e6f3ebc692</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_env_dot3</name>
      <anchor>1d1150086427d68625656c33fc901485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_mirrored_repeat</name>
      <anchor>7ac3e8e65677cd930453a325ebc7f9a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_non_power_of_two</name>
      <anchor>90a9c8dc6a92fe6d0d4d3a57f14a2c58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_texture_rectangle</name>
      <anchor>99b67acd0f64c61a7e4b8b80ff4621b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_transpose_matrix</name>
      <anchor>be17630ef59a516d1b4e98cbda49a3c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_vertex_blend</name>
      <anchor>7f02b059ce1c0ab95c7cad4630f5f87c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_vertex_buffer_object</name>
      <anchor>20931120906051ba831b8e35c1b4112d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_vertex_program</name>
      <anchor>4fb41bdb65d8e109d7b1951c2fac189f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_vertex_shader</name>
      <anchor>98bba3cca73155ece7572b026637ef96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ARB_window_pos</name>
      <anchor>f8cee210aefd617e8966247778480d4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_element_array</name>
      <anchor>c5f5e96bce56a29c2dafa83a7ac7344b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_envmap_bumpmap</name>
      <anchor>680974a5c13261dd6fbca5ee1194fe9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_fragment_shader</name>
      <anchor>b081ade878eee93dbf895cfe9916ddd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_pn_triangles</name>
      <anchor>296c413c8ebbe757e8070499d265f080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_separate_stencil</name>
      <anchor>3008ac67a97997e6608227597062fa18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_text_fragment_shader</name>
      <anchor>ef8aad649bbf693dd81d9693400adddc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_texture_mirror_once</name>
      <anchor>2e5c9d09a248e560f0f6d6e31ed74670</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_vertex_array_object</name>
      <anchor>c3841c737a648a51661e4c738c0f1805</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_vertex_attrib_array_object</name>
      <anchor>d1cac1f465dca2c1799aee1295ac025e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_ATI_vertex_streams</name>
      <anchor>875f87a3268a9cb3d331a20f6f8125ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_422_pixels</name>
      <anchor>9ed77d010551b1fb45cebbfda88f0a40</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_abgr</name>
      <anchor>b1668e2ae271bfec665da91fa721d469</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_bgra</name>
      <anchor>ca13e6d17a2a90e7aa06dfd259adb82f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_blend_color</name>
      <anchor>69ea5dae0dfebf63524635043dd52455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_blend_equation_separate</name>
      <anchor>a3a288db85382d547a569eda7bbc87c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_blend_func_separate</name>
      <anchor>d5fa9a55b5bb25f70d7314a2d7a072e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_blend_logic_op</name>
      <anchor>9303285cee0e8f29f1d18a5196dae362</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_blend_minmax</name>
      <anchor>ae507eddacf5140da44a3e3b93c16b5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_blend_subtract</name>
      <anchor>dc4217727daaa8941b87a52f4b12582c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_clip_volume_hint</name>
      <anchor>ef598969bd4ae2c7e2eea4095c808f50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_color_subtable</name>
      <anchor>6e47d3ffa9e6e905139e6d607e181b5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_compiled_vertex_array</name>
      <anchor>aa78d4eecf784607bbe078732b9110c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_convolution</name>
      <anchor>1f3b6eaae9c544ac697ee022cd8b14f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_fog_coord</name>
      <anchor>cc7ece2ca755eb8c998173b4f4dd9efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_framebuffer_object</name>
      <anchor>f8a4021b367344594e3ca8fca05adfab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_histogram</name>
      <anchor>54549614d99929d57901b00434b21db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_multi_draw_arrays</name>
      <anchor>4e34b532e9e7874bbeaad831ec564960</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_packed_depth_stencil</name>
      <anchor>3a4112b55a9b51b4280beaeb3638f36d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_packed_pixels</name>
      <anchor>f48728172997f62fad47d5c47678deb7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_paletted_texture</name>
      <anchor>239dc96fa0471ef93e30211aa04de3a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_pixel_buffer_object</name>
      <anchor>ec143b6872b6b815384336a6bb18256c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_point_parameters</name>
      <anchor>88e11b66e51545246574b52c3cfad828</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_polygon_offset</name>
      <anchor>89a6c9f2e0a8b152836ef030b62d28cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_secondary_color</name>
      <anchor>893d0e95f43cab10aa069f6a9d14f23a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_separate_specular_color</name>
      <anchor>c82f37856e9d1eed8d6b5fd6f5530619</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_shadow_funcs</name>
      <anchor>030efc3e601d01ebca0901a3f5a97a9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_shared_texture_palette</name>
      <anchor>650366d9b6bff38a11815469cb4beb2e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_stencil_two_side</name>
      <anchor>d703accce6ebd47c57bfcb48670a7de4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_stencil_wrap</name>
      <anchor>8373e6cc04fe5d9422e9366b7953082f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_subtexture</name>
      <anchor>e32372a9f379a9ce42c23c0ed676e5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture3D</name>
      <anchor>a6c3082452bf394c6b78efc459cf4b88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_compression_s3tc</name>
      <anchor>126c9035d07e87ed81e5fdc610c5b26d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_env_add</name>
      <anchor>afa16ced278136d74e8e4a9697e46944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_env_combine</name>
      <anchor>0f70801355aba8ea23a3e3fbf56efe6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_env_dot3</name>
      <anchor>09d9e474d9f05e5bee8bfd7178956cc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_filter_anisotropic</name>
      <anchor>dd8f764783716717002eeb1d96897413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_lod_bias</name>
      <anchor>21e40a72655811b472dce5c9a0f08523</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_object</name>
      <anchor>180973f4ceb5e2278e8f1c1c3f4f6b37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_rectangle</name>
      <anchor>a84ece46413c0f3fc88d83b871158ee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_texture_sRGB</name>
      <anchor>08b934bc8f44fb2d6d6020020d811852</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_vertex_array</name>
      <anchor>c42ac40e4ced3d4b0579f9774fbcba91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_vertex_shader</name>
      <anchor>33246fd1fb72d9e722a16910ab4f980b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_EXT_vertex_weighting</name>
      <anchor>33ba5edab66e728c25385700b6c5a4f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_GREMEDY_string_marker</name>
      <anchor>2dba249e45b33f7af211d95008b9e238</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_HP_occlusion_test</name>
      <anchor>c39887530553a1b94b27270f3913c9aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_IBM_cull_vertex</name>
      <anchor>fd7178ddc3ee1372ae431c9cddb09714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_IBM_multimode_draw_arrays</name>
      <anchor>1c12f8e25c74442b4aaba4110d1f1f1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_IBM_raster_pos_clip</name>
      <anchor>81f9319b427bf02bf8030a48dde77f71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_IBM_texture_mirrored_repeat</name>
      <anchor>575384ba71e08cc5e6e1efdeab9c2bac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_IBM_vertex_array_lists</name>
      <anchor>397cbbfd3dd201ba7bb98b60e9b36c78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_MESA_resize_buffers</name>
      <anchor>a4e7bf35acf61f635d4708eb02566cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_MESA_window_pos</name>
      <anchor>26de26b49cfb9f4309fdceca3b989527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_blend_square</name>
      <anchor>0c5b24c09af23b1db2ed166311008086</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_copy_depth_to_color</name>
      <anchor>576b6e9856899747ab30cff9c20bfb63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_depth_clamp</name>
      <anchor>37cafc3f1306c3d8db3ea42f8a3843a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_element_array</name>
      <anchor>056d892a932ebac35ee4bbd379fa80cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_evaluators</name>
      <anchor>a7296fd555fce0a30bcdad2bce212864</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_fence</name>
      <anchor>6c1e5b1fe90460ee751053e2019e9dd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_float_buffer</name>
      <anchor>3824cce212d82275773d9516784a7555</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_fog_distance</name>
      <anchor>8de50095db38dea7540b3ed90b7cd5ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_fragment_program</name>
      <anchor>86e77e95e915828d497028a16f386181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_light_max_exponent</name>
      <anchor>1aab48d441a7856860b8eeef4cf34c02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_multisample_filter_hint</name>
      <anchor>1f7f0a915f5c7e35aa54b2e761ead9e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_occlusion_query</name>
      <anchor>127a4fbc24aee470a68a41d17a832d9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_packed_depth_stencil</name>
      <anchor>56f8652050c68ae507d60185ce9e2e69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_point_sprite</name>
      <anchor>b963af546b3bab18c0e7a36508b681a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_primitive_restart</name>
      <anchor>fcb5e6a72261e0640a122f846acb7bb9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_register_combiners</name>
      <anchor>09d6064fac5b15dee635a0ea86121d0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_register_combiners2</name>
      <anchor>d3cbf9b37c678780c96eeac0772fe977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texgen_emboss</name>
      <anchor>c75ad0547f31084cd402840ffeab61d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texgen_reflection</name>
      <anchor>815032765139200d13ebac05a29c3b44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texture_compression_vtc</name>
      <anchor>3cb3060e464e481a9382e47a28e1072c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texture_env_combine4</name>
      <anchor>c5b65c14ccca0face69453d141d08017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texture_rectangle</name>
      <anchor>949a09542e5e94d618f50744a7fa51d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texture_shader</name>
      <anchor>706883dc5f84701e2f0967fdf683e0d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texture_shader2</name>
      <anchor>f18e52c6fd8c8c0c54522325067c3f9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_texture_shader3</name>
      <anchor>bd86181a3689a2488360929239644a37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_vertex_array_range</name>
      <anchor>66995a1eab572c1eb4dc7ad25f0547b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_vertex_array_range2</name>
      <anchor>59975bc12409dfa4ba69eeece8091e85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_vertex_program</name>
      <anchor>a749ebb78506f803bb46d155c1ed2c7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_vertex_program1_1</name>
      <anchor>eeec559b027bd0eaae589bedcd0af538</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_NV_vertex_program2</name>
      <anchor>22a85652d3a7171c2839b7451ad4a208</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_OML_interlace</name>
      <anchor>79c56ec7e2a4989d815ede78b75bd1ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_OML_resample</name>
      <anchor>f5ce8d529cb316e650668b0c607a0aff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_OML_subsample</name>
      <anchor>aab15ddba44f7845637831c5413749f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGI_color_matrix</name>
      <anchor>d0b11f3b90e12882b66f2824e81c014e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGI_color_table</name>
      <anchor>8161c1a41f490bd90e6c73aad41b3596</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGI_texture_color_table</name>
      <anchor>41933367c14708ccbbecf79517afd91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_depth_texture</name>
      <anchor>8e0b9218e2db4dc70bc78d634a7bd074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_generate_mipmap</name>
      <anchor>87d573cd5846aaf1b0a468d390a19cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_multisample</name>
      <anchor>108183995897897bf309ecf45963b5d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_pixel_texture</name>
      <anchor>6c72974e64625bc1e62c3cfa1f040490</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_texture_border_clamp</name>
      <anchor>6fb18a1b47b78dfb2f8edefb8de69681</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_texture_color_mask</name>
      <anchor>51d528aa04fee0e3c6e1ca23acb589e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_texture_edge_clamp</name>
      <anchor>89322bf257c1de75edbe4e159237096b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIS_texture_lod</name>
      <anchor>eaf5c72af778b850a797fab05e0c6ac3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIX_fog_offset</name>
      <anchor>31cbeede3d3e793a8028f9aad3c71d89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIX_interlace</name>
      <anchor>16a3b5199be762583734f1b3347ebf2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SGIX_shadow_ambient</name>
      <anchor>78ac6db2913933fdf2ee80629214ff59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitGL_SUN_vertex</name>
      <anchor>138ec3f509c95d9057edf1557061d0b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_ARB_buffer_region</name>
      <anchor>1e02e6dc16ff9fb435a533d56a1de465</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_ARB_extensions_string</name>
      <anchor>cd0dc1a86befffdc94f538e8084d4bd8</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_ARB_make_current_read</name>
      <anchor>3816903da061095e596684838c5a44c7</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_ARB_pbuffer</name>
      <anchor>025ddd9c1a74fc1d28933e43c05396c2</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_ARB_pixel_format</name>
      <anchor>304593abcaca5f104ce478d841f4b87a</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_ARB_render_texture</name>
      <anchor>94f162b267223a6c962883c3f24ecec6</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_EXT_extensions_string</name>
      <anchor>a3b6b3716c9471bcdc0c592172c3d4bf</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_EXT_make_current_read</name>
      <anchor>de8eca426a8fa4e8ca9e5a1913b26d3c</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_EXT_pbuffer</name>
      <anchor>4cb13caa8b633734813a60850e7efc7c</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_EXT_pixel_format</name>
      <anchor>f48460c4ce4fb08ee2ab80d2067e2fad</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_EXT_swap_control</name>
      <anchor>3c4c7d563aa68bdf117a926a3542a4f1</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_I3D_digital_video_control</name>
      <anchor>8c2a180a23fc7e11dc967ed7eb4958e1</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_I3D_gamma</name>
      <anchor>b7cc5628904e3af70e99e4af265b1d21</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_I3D_genlock</name>
      <anchor>0c04b184d2be6dfd6fa5abaf4c6d3637</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_I3D_image_buffer</name>
      <anchor>bcdf33ad248847b38be00be35adf7292</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_I3D_swap_frame_lock</name>
      <anchor>8df78270de5dff0cf5ebae9e2b8c6073</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
    <member kind="function">
      <name>InitWGL_I3D_swap_frame_usage</name>
      <anchor>7f228e34bfa3d898320e4db83dcccea6</anchor>
      <arglist>(HDC hDC)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGlyphMetrics</name>
    <filename>structcsGlyphMetrics.html</filename>
    <member kind="function">
      <name>advance</name>
      <anchor>1262dc16a7cfb279477286f15fd1d18c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGradient::scfGradientShadesArray</name>
    <base>scfArrayWrapConst&lt; iGradientShades</base>
    <base> csArray&lt; csGradientShade &gt; &gt;</base>
    <filename>structcsGradient_1_1scfGradientShadesArray.html</filename>
    <member kind="function">
      <name>scfGradientShadesArray::scfGradientShadesArray</name>
      <anchor>932573b5539894470253cef14c4d02f0</anchor>
      <arglist>(csGradient *parent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGradientShade</name>
    <filename>structcsGradientShade.html</filename>
    <member kind="function">
      <name>operator==</name>
      <anchor>371257bf17c940daec6786fe33400097</anchor>
      <arglist>(const csGradientShade &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>csGradientShade</name>
      <anchor>9768bed3a3ff9e6dac6adc786db4bfa9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGradientShade</name>
      <anchor>498db8ddf0114cde3115344f7542172b</anchor>
      <arglist>(const csColor4 &amp;left_color, const csColor4 &amp;right_color, float pos)</arglist>
    </member>
    <member kind="function">
      <name>csGradientShade</name>
      <anchor>b29cea5e93bd5f808de7fed42c15139a</anchor>
      <arglist>(const csColor &amp;left_color, const csColor &amp;right_color, float pos)</arglist>
    </member>
    <member kind="function">
      <name>csGradientShade</name>
      <anchor>88605f861c013cc905b0a51c848a0c21</anchor>
      <arglist>(const csColor4 &amp;color, float pos)</arglist>
    </member>
    <member kind="function">
      <name>csGradientShade</name>
      <anchor>fbcff23d50612ed7a22bf4e37195a657</anchor>
      <arglist>(const csColor &amp;color, float pos)</arglist>
    </member>
    <member kind="function">
      <name>left</name>
      <anchor>dafe66d649abd0dcd930a175a3db2957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>6bbd701eeeb985c384699a270574bb92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>right</name>
      <anchor>138d3eb1b980c92688f21b3b16a39588</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csGraphics3DCaps</name>
    <filename>structcsGraphics3DCaps.html</filename>
    <member kind="function">
      <name>maxTexWidth</name>
      <anchor>0614c3f7451737414196410932d544ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>minTexWidth</name>
      <anchor>901a90d16702b2a5f7a71b1034276284</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DestinationAlpha</name>
      <anchor>07fdee3f95daed41393b228a654a73cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>maxTexHeight</name>
      <anchor>e36da6a2e504d8fa898bcdbbd791f91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>minTexHeight</name>
      <anchor>c9e61f71f6f76c67ae583fab0791aa55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StencilShadows</name>
      <anchor>af943c23f3a08ca33a23f8d3b4c4726b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SupportsPointSprites</name>
      <anchor>0ccfbe730e4e9cf0b9824478594fe5b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHash::Element</name>
    <filename>structcsHash_1_1Element.html</filename>
    <member kind="function">
      <name>Element::Element</name>
      <anchor>25b6a89f538fcb9be80efc92a8999d47</anchor>
      <arglist>(const Element &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>Element::Element</name>
      <anchor>65ff10d56c2e9df5ccc52252cfc72334</anchor>
      <arglist>(const K &amp;key0, const T &amp;value0)</arglist>
    </member>
    <member kind="function">
      <name>Element::key</name>
      <anchor>1f89f99ccf2a468f1cdc37c5d79ddb33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Element::value</name>
      <anchor>67b6d4b4e8ca9bf07bd85b30297ea766</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csHitBeamResult</name>
    <filename>structcsHitBeamResult.html</filename>
    <member kind="function">
      <name>facehit</name>
      <anchor>5788e3ed7e5e19f5b9fb9aaa94f7503c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>hit</name>
      <anchor>330c6d9463688941e787ed02532a4227</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isect</name>
      <anchor>08fecfc060ce8bd85a8460543fc520ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>material</name>
      <anchor>6c21e89b7987ca77ec18cfe60096bcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>polygon_idx</name>
      <anchor>8e98abb2b27f2edf4e861be8bcca3b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>r</name>
      <anchor>ee3b9a6e18a75c078e87f533d127b739</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csIdentStrings::csIdentString</name>
    <filename>structcsIdentStrings_1_1csIdentString.html</filename>
    <member kind="function">
      <name>csIdentString::ident</name>
      <anchor>39ce7a337244daf4199d43a43d991c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csIdentString::str</name>
      <anchor>ed51bdae632bd1f5799c53ba6928e5ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csIEEEfloat</name>
    <filename>structcsIEEEfloat.html</filename>
    <member kind="function">
      <name>FromNative</name>
      <anchor>e615e309e067f654da6a4120dd7ba63e</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>ToNative</name>
      <anchor>15918104acd45923850fa88c4363d8a4</anchor>
      <arglist>(uint32 f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageArea</name>
    <filename>structcsImageArea.html</filename>
    <member kind="function">
      <name>csImageArea</name>
      <anchor>13d33e7fb9adf636d7d2d43b89d6d995</anchor>
      <arglist>(int sx, int sy, int sw, int sh)</arglist>
    </member>
    <member kind="function">
      <name>data</name>
      <anchor>f6a44988312637b6cb0ba0b0b53d0012</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>h</name>
      <anchor>c4de34ee41b332139cbf7a00e9f6d2c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>w</name>
      <anchor>fa83b47e733e5a65555b24d4bf1f3828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>6e335096aa12af0c4b8d6de64dafe246</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>50f21f6d8b25c086420c38585b5f7861</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csImageIOFileFormatDescription</name>
    <filename>structcsImageIOFileFormatDescription.html</filename>
    <member kind="function">
      <name>cap</name>
      <anchor>8d845055eac736f628d2f4aac924e8ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mime</name>
      <anchor>c57bb6497786a28eb7abd0d01e72562e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>subtype</name>
      <anchor>d40621da5b35370588b8af6938d3b66e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInstance</name>
    <filename>structcsInstance.html</filename>
    <member kind="function">
      <name>id</name>
      <anchor>8433126538351648395f2e24a5a6816b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>values</name>
      <anchor>86639889adf439af8edc510d038a36fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInterleavedSubBufferOptions</name>
    <filename>structcsInterleavedSubBufferOptions.html</filename>
    <member kind="function">
      <name>componentCount</name>
      <anchor>63c3186de75b73e0272898f6a94072ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>componentType</name>
      <anchor>199cbcdbd7a9316180c5ed7e9f2daca0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csIntersectingTriangle</name>
    <filename>structcsIntersectingTriangle.html</filename>
    <member kind="function">
      <name>a</name>
      <anchor>004704a28ce034055d2bca849526be16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>b</name>
      <anchor>19996f87bb7ae42982193051be117893</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>c</name>
      <anchor>8088b0249a2b870c4459b3e97be55239</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csInverseAttenuation</name>
    <filename>structcsInverseAttenuation.html</filename>
    <member kind="function">
      <name>csInverseAttenuation</name>
      <anchor>89d785e753d881ee23ad49c0afce07de</anchor>
      <arglist>(const csLightProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>bdd820d39a4c22b647efd0650a05840f</anchor>
      <arglist>(float distance, float &amp;dp) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csJoystickEventData</name>
    <filename>structcsJoystickEventData.html</filename>
    <member kind="function">
      <name>axes</name>
      <anchor>4ebf939b3ef5f8a74a4840096bf5cb82</anchor>
      <arglist>[CS_MAX_JOYSTICK_AXES]</arglist>
    </member>
    <member kind="function">
      <name>axesChanged</name>
      <anchor>2963051ef8fcbe3c159ed60b5bf83063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>3a6d75d2de28e57f69f808492c7972ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Modifiers</name>
      <anchor>5530d73b74ce20ead4a5f633c56798f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numAxes</name>
      <anchor>952539ac1e16337ee00ab292de1a1baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>number</name>
      <anchor>3a221e8e8c246509e2d35517ec589ca4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csKeyEventData</name>
    <filename>structcsKeyEventData.html</filename>
    <member kind="function">
      <name>autoRepeat</name>
      <anchor>8dade2f09bd3936cbbf04585c011ba0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>charType</name>
      <anchor>28dad62f7303af77dc5959df314f67f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>codeCooked</name>
      <anchor>61de8887b72f63f6d9b55ff99f3b270f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>codeRaw</name>
      <anchor>d978b95ecadef76cf176760b3a8d3baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>eventType</name>
      <anchor>d0c846fb51ab40e8f4e233a20a1a385b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>modifiers</name>
      <anchor>d00b7f700cab859b8b4f6d29691cd850</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csLightProperties</name>
    <filename>structcsLightProperties.html</filename>
    <member kind="function">
      <name>csLightProperties</name>
      <anchor>b84b5a097dc0620e03bec7194d1d0990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csLightProperties</name>
      <anchor>5ff989bfe1c7eefa122ca7c70813472c</anchor>
      <arglist>(size_t lightNum, csLightShaderVarCache &amp;svcache, const iShaderVarStack *Stacks)</arglist>
    </member>
    <member kind="function">
      <name>attenuationConsts</name>
      <anchor>92b6b817b39986a435909f663e6cb0c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>attenuationMode</name>
      <anchor>059fff1f2cb5b9b50936d6e90bf3a646</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>b2130f8509d6ea50c2b9eb64f7d340c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dirObject</name>
      <anchor>e768acfd67befdb3fe2c5d2b911033fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>posObject</name>
      <anchor>e43d67e69c7492634a4f82427decb97d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>specular</name>
      <anchor>c24e9622435a640e48e012d20b9ddc05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>spotFalloffInner</name>
      <anchor>e845dd083248858d825a97ee7fccf70d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>spotFalloffOuter</name>
      <anchor>adce8ecf9f7134416f1a89a8f93e6e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>544f97bd9287abc998da9b0fe2742da8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csLinearAttenuation</name>
    <filename>structcsLinearAttenuation.html</filename>
    <member kind="function">
      <name>csLinearAttenuation</name>
      <anchor>abbc32657791567bc918de80940b36f8</anchor>
      <arglist>(const csLightProperties &amp;light)</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>5f1bef94236f94931b9b7490db80db03</anchor>
      <arglist>(float distance, float &amp;dp) const </arglist>
    </member>
    <member kind="function">
      <name>invrad</name>
      <anchor>83381d452a2ad120c2634e8f3b8581d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csLineOperation</name>
    <filename>structcsLineOperation.html</filename>
    <member kind="function">
      <name>dx</name>
      <anchor>ed0ca49f48d05f4589e9a12665d59f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>op</name>
      <anchor>f0be70aec82bab3827f51865bf403c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x1</name>
      <anchor>eab582df930cf295b905b13a908684a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x2</name>
      <anchor>36e054bf67951d2c45e99c95765be04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y1</name>
      <anchor>d5776d2c94f9f275f6e1dcf5fcc03035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y2</name>
      <anchor>0e43c08e03df580a51f94f1ca023b805</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csList::csListElement</name>
    <filename>structcsList_1_1csListElement.html</filename>
    <member kind="function">
      <name>csListElement::csListElement</name>
      <anchor>d7f99db72ae65c349532fbd5d44e49b7</anchor>
      <arglist>(const T &amp;d, csListElement *newnext, csListElement *newprev)</arglist>
    </member>
    <member kind="function">
      <name>csListElement::data</name>
      <anchor>aca74448c7de3df16a81e878d8bce7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csListElement::next</name>
      <anchor>1dc7cf55a7a341e3d6ebd9d6f3dd8661</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csListElement::prev</name>
      <anchor>de3dcc09f29c50ae66cf55d31fa9fa75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csLittleEndian</name>
    <filename>structcsLittleEndian.html</filename>
    <member kind="function">
      <name>Convert</name>
      <anchor>059d0cd2a986112eafd577e3dc06db2a</anchor>
      <arglist>(int64 x)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>4092a7821148efadbfff7b7d2dbc45c3</anchor>
      <arglist>(uint64 x)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>94451642538ab090d92a4ef4d693ddda</anchor>
      <arglist>(int32 x)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>cbb33fdde6c68d21f14231cf11baf68b</anchor>
      <arglist>(uint32 x)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>cd30d68db556bf52495884babbe01f3c</anchor>
      <arglist>(int16 x)</arglist>
    </member>
    <member kind="function">
      <name>Int16</name>
      <anchor>18cdf1d565583c8f3c7e33002f136b3c</anchor>
      <arglist>(int16 x)</arglist>
    </member>
    <member kind="function">
      <name>Int32</name>
      <anchor>adb68f8a0b08214ffcf0d40462c1da3d</anchor>
      <arglist>(int32 x)</arglist>
    </member>
    <member kind="function">
      <name>Int64</name>
      <anchor>d4125a2804e85e55ec1c08809e7a3d87</anchor>
      <arglist>(int64 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt16</name>
      <anchor>f520545c2d09ccdccc45410b801a8ad6</anchor>
      <arglist>(uint16 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt32</name>
      <anchor>28230d0f40f815eb9200e8b50026e0d2</anchor>
      <arglist>(uint32 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt64</name>
      <anchor>1830fa7c52e45177c1ea300a19e939f2</anchor>
      <arglist>(uint64 x)</arglist>
    </member>
    <member kind="function">
      <name>Convert</name>
      <anchor>7084fe5e31f02387645f805bafcc16f4</anchor>
      <arglist>(uint16 x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMD5::Digest</name>
    <filename>structcsMD5_1_1Digest.html</filename>
    <member kind="function">
      <name>Digest::HEXString</name>
      <anchor>9fee51db16128e70df920439c9ad9c9e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Digest::HexString</name>
      <anchor>1a222c3e51945167135b19a5d70d4585</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Digest::data</name>
      <anchor>8897cd0c04dd363afcd46d5cc34ca465</anchor>
      <arglist>[DigestLen]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMD5::md5_state_t</name>
    <filename>structcsMD5_1_1md5__state__t.html</filename>
    <member kind="function">
      <name>md5_state_t::abcd</name>
      <anchor>87bfa1ee106c9230593af968c5664744</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>md5_state_t::buf</name>
      <anchor>3bd74b07d8651c4df72e8fd079f393fd</anchor>
      <arglist>[64]</arglist>
    </member>
    <member kind="function">
      <name>md5_state_t::count</name>
      <anchor>533b5b008615ead801e19510bc5425a8</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMeshedPolygon</name>
    <filename>structcsMeshedPolygon.html</filename>
    <member kind="function">
      <name>num_vertices</name>
      <anchor>c271ea3a066500e1b87395a72e4ad66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vertices</name>
      <anchor>1909dc3dd45c262eb32ce50737949783</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csMouseEventData</name>
    <filename>structcsMouseEventData.html</filename>
    <member kind="function">
      <name>axes</name>
      <anchor>8b69d78ec9a97cb699716bfe95cd8fd3</anchor>
      <arglist>[CS_MAX_MOUSE_AXES]</arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>735ab13d229dd1aec3d3a90e1ece132e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Modifiers</name>
      <anchor>b11831323ae26ad955ddcb5743884642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numAxes</name>
      <anchor>b93c2d133c4f8457c225a2c4e628e065</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>x</name>
      <anchor>ab97c11206ef8f0b8c892ee61568446e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>6ea19d243c7d724d558786cb838f82aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csNoAttenuation</name>
    <filename>structcsNoAttenuation.html</filename>
    <member kind="function">
      <name>csNoAttenuation</name>
      <anchor>98437373d5c083c106f02b832e300855</anchor>
      <arglist>(const csLightProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>3a3d83e49babf0ac69442ce9172f4054</anchor>
      <arglist>(float, float &amp;) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csOptionDescription</name>
    <filename>structcsOptionDescription.html</filename>
    <member kind="function">
      <name>description</name>
      <anchor>c2707be8d678a22bced964de823d0f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>id</name>
      <anchor>1fcfa6e84f9824d42fc33de2f23828e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>c3240e41e8d1b9d50a39e4d46968da37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>type</name>
      <anchor>faca340d0a15c527c960e3c1cb9b6ff6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPackRGB</name>
    <filename>structcsPackRGB.html</filename>
    <member kind="function">
      <name>IsRGBcolorSane</name>
      <anchor>d2741ae9835a7a2eb36a89c90bbd3846</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>DiscardPackedRGB</name>
      <anchor>a5cbbed21c6aacccf874559ed4af9877</anchor>
      <arglist>(const uint8 *rgb)</arglist>
    </member>
    <member kind="function">
      <name>DiscardUnpackedRGBcolor</name>
      <anchor>d8790ac2a34c868bb5d8d50fda3d35bd</anchor>
      <arglist>(const csRGBcolor *pixels)</arglist>
    </member>
    <member kind="function">
      <name>PackRGBcolorToRGB</name>
      <anchor>1b6ad0e26a27ebbdb3f810b137e99308</anchor>
      <arglist>(const csRGBcolor *pixels, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>PackRGBcolorToRGBBuffer</name>
      <anchor>57e62f82330017bc1eb3200bb52d386c</anchor>
      <arglist>(uint8 *buf, const csRGBcolor *pixels, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>PackRGBpixelToRGB</name>
      <anchor>3c19ff8acd15fb3e00f119748791b6d7</anchor>
      <arglist>(const csRGBpixel *pixels, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>UnpackRGBtoRGBcolor</name>
      <anchor>e0f91dcf89035f7cef5c9abcca3cd165</anchor>
      <arglist>(const uint8 *rgb, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>UnpackRGBtoRGBcolor</name>
      <anchor>c19932ae41194983155851f63ec96568</anchor>
      <arglist>(csRGBcolor *buf, const uint8 *rgb, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>UnpackRGBtoRGBpixelBuffer</name>
      <anchor>7ac47b0f0768f275214252503173dc29</anchor>
      <arglist>(csRGBpixel *buf, uint8 *rgb, size_t numPixels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPackRGBA</name>
    <filename>structcsPackRGBA.html</filename>
    <member kind="function">
      <name>IsRGBpixelSane</name>
      <anchor>62854c36bc0216b7940f0ebc05b2f29e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CopyUnpackRGBAtoRGBpixel</name>
      <anchor>0189ba0a3a5b2fb85607819763fc8826</anchor>
      <arglist>(const uint8 *rgba, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>csDiscardUnpackedRGBpixel</name>
      <anchor>6ec28dea83a51cf0110d42b0c3a90819</anchor>
      <arglist>(const csRGBpixel *pixels)</arglist>
    </member>
    <member kind="function">
      <name>DiscardPackedRGBA</name>
      <anchor>54f3208478bf3deebb9f8fb24396bf56</anchor>
      <arglist>(const uint8 *rgba)</arglist>
    </member>
    <member kind="function">
      <name>PackRGBpixelToRGBA</name>
      <anchor>863fff1c72b14ef30acec38a10b1ef1f</anchor>
      <arglist>(const csRGBpixel *pixels, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>PackRGBpixelToRGBA</name>
      <anchor>b05fec3ce90e599904ccc0b3d5ace2fe</anchor>
      <arglist>(uint8 *buf, const csRGBpixel *pixels, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>UnpackRGBAtoRGBcolor</name>
      <anchor>d4dc4aa0cac40f91514f4050d38d6c89</anchor>
      <arglist>(const uint8 *rgba, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>UnpackRGBAtoRGBpixel</name>
      <anchor>f9ddcd721603e3d73f897f4881730f2e</anchor>
      <arglist>(const uint8 *rgba, size_t numPixels)</arglist>
    </member>
    <member kind="function">
      <name>UnpackRGBAtoRGBpixel</name>
      <anchor>296eac605c5ce1dc740e04806c29195d</anchor>
      <arglist>(csRGBpixel *buf, const uint8 *rgba, size_t numPixels)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParticle</name>
    <filename>structcsParticle.html</filename>
    <member kind="function">
      <name>pad</name>
      <anchor>71dcc1fd07b8da798334750edc09f1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>angularVelocity</name>
      <anchor>09fb92c8cd84d9813b774968501877a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>linearVelocity</name>
      <anchor>bc8fc01a0ab0cc9ca2f94fb45a093cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mass</name>
      <anchor>6846a1d3f7f96b75d13481dbf72f8ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>orientation</name>
      <anchor>48cfc7b180d17e7c2a8363515253d553</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>position</name>
      <anchor>8d87056ace2bed10d81dfb6725b3fab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>timeToLive</name>
      <anchor>672ebbd8bea2df1f3b652fd5d51de885</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParticleAux</name>
    <filename>structcsParticleAux.html</filename>
    <member kind="function">
      <name>pad</name>
      <anchor>c5eb675344ae39bd39a5438477238e6a</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>c666e875c5527b715fd8e939c66baf3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>particleSize</name>
      <anchor>e349b13cb0d972c2ff1b7459d0b0f8d2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParticleBuffer</name>
    <filename>structcsParticleBuffer.html</filename>
    <member kind="function">
      <name>particleAuxData</name>
      <anchor>b5f0a2aa8319ee5fcb70651cca478106</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>particleCount</name>
      <anchor>3572ab91f1f4f3f00960b6bbf7cea6e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>particleData</name>
      <anchor>44a5dc01c7dbb176b0ad867c0d9d29e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csParticleSystem::PerFrameData</name>
    <filename>structcsParticleSystem_1_1PerFrameData.html</filename>
    <member kind="function">
      <name>PerFrameData::bufferHolder</name>
      <anchor>3f5c40b4ad94622c65e4d9b78e15c819</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PerFrameData::color_buffer</name>
      <anchor>1b7102fab69d7f95a5e4b7fd79ba201c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PerFrameData::texel_buffer</name>
      <anchor>8a3a0c2439373c7bee584804a382ec27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PerFrameData::vertex_buffer</name>
      <anchor>bd1ed7fb60c1c44ab371103a76874e43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPathsList::Entry</name>
    <filename>structcsPathsList_1_1Entry.html</filename>
    <member kind="function">
      <name>Entry::Entry</name>
      <anchor>abd30f9842003f6bb2dc2583589225a6</anchor>
      <arglist>(const Entry &amp;src)</arglist>
    </member>
    <member kind="function">
      <name>Entry::Entry</name>
      <anchor>b33698d09599b00f97a472867ca530e2</anchor>
      <arglist>(const char *path, const char *type, bool recursive=false)</arglist>
    </member>
    <member kind="function">
      <name>Entry::Entry</name>
      <anchor>701d585e92d52b5132dc5ba2f9bd7e8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Entry::path</name>
      <anchor>54a5e4eb2947c4be24e09b892c6c6d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Entry::scanRecursive</name>
      <anchor>45f15d7a298fb070da110689981faae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Entry::type</name>
      <anchor>b930bb9c9d26f120a6c1193f0d60c643</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPixelCoord</name>
    <filename>structcsPixelCoord.html</filename>
    <member kind="function">
      <name>x</name>
      <anchor>3ef06d4c8826da90ec4b8f7d959362fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>y</name>
      <anchor>02fcc2403605e00c969262d2f4f431dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPixelFormat</name>
    <filename>structcsPixelFormat.html</filename>
    <member kind="function">
      <name>AlphaBits</name>
      <anchor>d83273bbb742ff808cfe067b649c62a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AlphaMask</name>
      <anchor>7bc610c1f073b232fe4ae22f6696baa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AlphaShift</name>
      <anchor>8fe4f27d7f55ee71c0919658b3471899</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BlueBits</name>
      <anchor>4d1b414f4376180d379948fa4570e795</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BlueMask</name>
      <anchor>344c300262e89a13626c644d2ddb5865</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BlueShift</name>
      <anchor>449980233ccf3a383530cc3d24cfb2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GreenBits</name>
      <anchor>4ac98dd68e5529a831a85e0af15f2202</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GreenMask</name>
      <anchor>f15b67458e85bdf86cf2c2aa6a2c298c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GreenShift</name>
      <anchor>38b92fd903f6010730e88a36fd60c0da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>complete</name>
      <anchor>f8f67304c3819c3b4954ca6922281599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>PalEntries</name>
      <anchor>f02f2fb5a97de4077d7b9067743c1c55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PixelBytes</name>
      <anchor>edc82fc868b361aa8a2f6a316fdd2258</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RedBits</name>
      <anchor>ab76d988886d16b779a5610b2cceee1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RedMask</name>
      <anchor>604edca9430a5d5b4e812baa49e7fbf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RedShift</name>
      <anchor>5b707202477e14246335d24e1e428fe8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlatformMemoryMappingDummy::PlatformMemoryMapping</name>
    <filename>structcsPlatformMemoryMappingDummy_1_1PlatformMemoryMapping.html</filename>
    <member kind="function">
      <name>PlatformMemoryMapping::realPtr</name>
      <anchor>66d41678e98bf092d83be2cdf29cea04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlatformMemoryMappingPosix::PlatformMemoryMapping</name>
    <filename>structcsPlatformMemoryMappingPosix_1_1PlatformMemoryMapping.html</filename>
    <member kind="function">
      <name>PlatformMemoryMapping::realPtr</name>
      <anchor>8800a5d8f5b8467330fc5bc29a33e472</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PlatformMemoryMapping::realSize</name>
      <anchor>f1501a857c240f79e4aefc8dbc127d68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPlatformMemoryMappingWin32::PlatformMemoryMapping</name>
    <filename>structcsPlatformMemoryMappingWin32_1_1PlatformMemoryMapping.html</filename>
    <member kind="function">
      <name>PlatformMemoryMapping::realPtr</name>
      <anchor>23851ca454b8d9c5276a6779acdcd71c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPluginLoadRec</name>
    <filename>structcsPluginLoadRec.html</filename>
    <member kind="function">
      <name>csPluginLoadRec</name>
      <anchor>7e9c2bfe486a232c8e2490c0692cc694</anchor>
      <arglist>(const char *iTag, const char *iClassID)</arglist>
    </member>
    <member kind="function">
      <name>~csPluginLoadRec</name>
      <anchor>9de7d41d581558a68bf6f22d3ee3c666</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClassID</name>
      <anchor>6367e0fc1e93f0395d17c02fa9ec34a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>plugin</name>
      <anchor>0ca7c2e92fd0e74a8ed9afbcbf6e507c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Tag</name>
      <anchor>5ab8afe406131dd3ddc204e8a42863bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolygonMeshEdge</name>
    <filename>structcsPolygonMeshEdge.html</filename>
    <member kind="function">
      <name>poly2</name>
      <anchor>13b6346d62e05c782dfdaa75f425a514</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vt2</name>
      <anchor>e756b6cd426a6a8a4f9b244429f8cec5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>active</name>
      <anchor>2897148b4ffd9c7af9dc8b26871d3fe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>poly1</name>
      <anchor>f7126143050a770ba635057353797bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vt1</name>
      <anchor>9f4831a701a6e23cc2e6db8106f07eac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csPolygonRange</name>
    <filename>structcsPolygonRange.html</filename>
    <member kind="function">
      <name>csPolygonRange</name>
      <anchor>30fccb426f581f367b9e0872ec3334ad</anchor>
      <arglist>(int start, int end)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>3845414905cac97575377b09fc5358c9</anchor>
      <arglist>(int idx)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>651210f2296304ec811ea8176eff4004</anchor>
      <arglist>(int start, int end)</arglist>
    </member>
    <member kind="function">
      <name>end</name>
      <anchor>f7062769ecbe7d6e73b0dbc01d713212</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>start</name>
      <anchor>7269a7b86d8a5cb3317aa4199c917515</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRealisticAttenuation</name>
    <filename>structcsRealisticAttenuation.html</filename>
    <member kind="function">
      <name>csRealisticAttenuation</name>
      <anchor>b8d4033b4c003165e2c70a39602cc433</anchor>
      <arglist>(const csLightProperties &amp;)</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>c83d1c67874df11c5208eee27defc4f3</anchor>
      <arglist>(float distance, float &amp;dp) const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRedBlackTree::Node</name>
    <filename>structcsRedBlackTree_1_1Node.html</filename>
    <member kind="function">
      <name>Node::GetColor</name>
      <anchor>1e367a1c96b424e5dd1afbad107e9e6a</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Node::GetParent</name>
      <anchor>04f78abc9ba55766caf122c59060a11b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Node::Node</name>
      <anchor>fc903ca8253bf05bc60cf9de841cd8fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Node::SetColor</name>
      <anchor>228cb3d0f17abcf725205132e649d956</anchor>
      <arglist>(NodeColor color)</arglist>
    </member>
    <member kind="function">
      <name>Node::SetParent</name>
      <anchor>fc325c1066ec7f7ebea039b1dc07b418</anchor>
      <arglist>(Node *p)</arglist>
    </member>
    <member kind="function">
      <name>Node::~Node</name>
      <anchor>ba2bfbf0d65c1dcd95b5e24acd85df57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Node::key</name>
      <anchor>85bb205d78f4a32472778535c548a01b</anchor>
      <arglist>[sizeof(K)]</arglist>
    </member>
    <member kind="function">
      <name>Node::left</name>
      <anchor>d8304f76fa3b326757d9b2972d6fd517</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Node::right</name>
      <anchor>21ed8c655be227e29c1df2eae85dd22a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRegExpMatch</name>
    <filename>structcsRegExpMatch.html</filename>
    <member kind="function">
      <name>endOffset</name>
      <anchor>79b7b8c3fa4a0db9cb7e879b0e1222d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>startOffset</name>
      <anchor>ef8b424895ffc927787074737ce79b9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderBuffer::Props</name>
    <filename>structcsRenderBuffer_1_1Props.html</filename>
    <member kind="function">
      <name>Props::Props</name>
      <anchor>ce5ef114c7d7544452a66f391d385492</anchor>
      <arglist>(csRenderBufferType type, csRenderBufferComponentType componentType, uint componentCount, bool copy)</arglist>
    </member>
    <member kind="function">
      <name>Props::bufferType</name>
      <anchor>37b92a5c0b58c63b1b19cae943565c02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::compCount</name>
      <anchor>685c746d1a525ff820b6cce173707588</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::comptype</name>
      <anchor>6a8f28b8d5c4dfd46eb5014f7f9e920f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::doCopy</name>
      <anchor>d2a046da90175e867c44cec68af50a46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::doDelete</name>
      <anchor>f5bb0aa7bfe15ac530086ae9f9d59171</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::isIndex</name>
      <anchor>1ed439fb355f676c44ae14a5b0320f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::isLocked</name>
      <anchor>6f0e8eabe654612621c7d07ab94c3bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::lastLock</name>
      <anchor>1efc2e689e99f14dd6e2c4ab2cbee709</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::offset</name>
      <anchor>bd73f18dd661111089be0d0ed801ff01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Props::stride</name>
      <anchor>17fd1068f0a8daf4dc1995aa677a0549</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderMesh</name>
    <base>csCoreRenderMesh</base>
    <base>csRenderMeshModes</base>
    <filename>structcsRenderMesh.html</filename>
    <member kind="function">
      <name>csRenderMesh</name>
      <anchor>5d019e6c4319a4e5214d0bba83a55782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csRenderMesh</name>
      <anchor>8b714101ccd96332cc1d7f181a1c7fbc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>geometryInstance</name>
      <anchor>ef94e3fb3eba5cf7c61e9a2c4ba08b15</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>portal</name>
      <anchor>f116b163b891149287a16a14bbfc4083</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>variablecontext</name>
      <anchor>76bb74a7b1a95b947a677fa02f154459</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>worldspace_origin</name>
      <anchor>ffa9b4053b2fc8ba33fe5c2ddbfcc4f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRenderMeshModes</name>
    <filename>structcsRenderMeshModes.html</filename>
    <member kind="function">
      <name>csRenderMeshModes</name>
      <anchor>737fc73af6632be87897dcd311a41e77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csRenderMeshModes</name>
      <anchor>0ad660f373ab43f995c37835b459d613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>instances</name>
      <anchor>752af9432200f737125934e33c6d7779</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>instances_binds</name>
      <anchor>9acfea1e36756da65417cb5525ec2c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>supports_pseudoinstancing</name>
      <anchor>61d4ebe8536ac7c5513877b2ad985bb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>alphaType</name>
      <anchor>0026fa81c2f5d3adae5951ebc837824f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>buffers</name>
      <anchor>1ecb40a8cb9d7420e3c60fb8e43b869f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>flipCulling</name>
      <anchor>dd744730d3728e7e47b0fbee6ea91ab0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mixmode</name>
      <anchor>b847ec2fa70029bd9cd7d3725d4b128c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z_buf_mode</name>
      <anchor>c801e0a633d623916daefa460219d742</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRGBcolor</name>
    <filename>structcsRGBcolor.html</filename>
    <member kind="function">
      <name>blue</name>
      <anchor>7f3c30e3543bea7d2e2be81c5c2830d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>green</name>
      <anchor>540bf2c73388f5d58cd22413b4a88492</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRGBcolor</name>
      <anchor>b36792004650905a595e38c8574218f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRGBcolor</name>
      <anchor>bb0140fc97b6ea54dd308a2686650f60</anchor>
      <arglist>(unsigned char r, unsigned char g, unsigned char b)</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>03b9a932c50e4b2d133da2c5675ec96e</anchor>
      <arglist>(const csRGBcolor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>981f1ba8ca1a188b7788824604dde5d5</anchor>
      <arglist>(const csRGBcolor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>ed4235e609a707b78e8389994749a7e2</anchor>
      <arglist>(const csRGBcolor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>SafeAdd</name>
      <anchor>5d5e1d404c4178f9986c390ebeb6b5a0</anchor>
      <arglist>(const csRGBcolor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>aa98cfc5fe7252ab9e96340048b2dfc5</anchor>
      <arglist>(unsigned char r, unsigned char g, unsigned char b)</arglist>
    </member>
    <member kind="function">
      <name>UnsafeAdd</name>
      <anchor>0585be6ff29020c94b331bea64b57f69</anchor>
      <arglist>(const csRGBcolor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>red</name>
      <anchor>98ef2bec4ae039e5ced29749aa863a65</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csRGBpixel</name>
    <filename>structcsRGBpixel.html</filename>
    <member kind="function">
      <name>alpha</name>
      <anchor>58a33c33dc5dc74a7dd6932e3f2898ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>blue</name>
      <anchor>7d9406a1b90680449576409de3dec687</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>green</name>
      <anchor>de8609d3314daf67f51cc20cdd05db61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csRGBpixel</name>
      <anchor>92fc19282589437ca079bda91d36e29b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csRGBpixel</name>
      <anchor>f8e664b0d91176c0f21df2a700f932b6</anchor>
      <arglist>(const csRGBpixel &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>csRGBpixel</name>
      <anchor>20b9ecd37d38cdbd59e259aaea4f7ea3</anchor>
      <arglist>(const csRGBcolor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>csRGBpixel</name>
      <anchor>dc89861603b2d70eeb77c599fbf274b6</anchor>
      <arglist>(int r, int g, int b, int a=255)</arglist>
    </member>
    <member kind="function">
      <name>eq</name>
      <anchor>18b5bc0b07c061ac71180d5b5a777ba1</anchor>
      <arglist>(const csRGBpixel &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>Intensity</name>
      <anchor>614de49deec08e1c982b2e9819c15a2b</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>Luminance</name>
      <anchor>2a3a13910b2db527d01afed70a005d98</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator csRGBcolor</name>
      <anchor>07fd94c1ef336268131baf1e0e9a7d78</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>1b00dc9d08f6129e6d37bba8c7181f12</anchor>
      <arglist>(const csRGBpixel &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>c31c9a179089580e6092f3d5165e47e7</anchor>
      <arglist>(const csRGBcolor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>66d8e863397a8f45bd7fe8e631e03480</anchor>
      <arglist>(const csRGBcolor &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>c5ba329bd598bb600b36c1d2f674a547</anchor>
      <arglist>(const csRGBpixel &amp;p) const </arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>1ae0c63993f6400449fc7df602cfdeae</anchor>
      <arglist>(const csRGBcolor &amp;c) const </arglist>
    </member>
    <member kind="function">
      <name>SafeAdd</name>
      <anchor>e14cc4650308be9665f558c93e44d766</anchor>
      <arglist>(const csRGBpixel &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>956456c14a3fd20be63bcc712d6238ad</anchor>
      <arglist>(const csRGBpixel &amp;p)</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>4d42ebbb0b48b34112036a22b77412cc</anchor>
      <arglist>(const int r, const int g, const int b, const int a=255)</arglist>
    </member>
    <member kind="function">
      <name>UnsafeAdd</name>
      <anchor>8e0d1cd2ecdf39f8eb0504d72eeed8c9</anchor>
      <arglist>(const csRGBpixel &amp;c)</arglist>
    </member>
    <member kind="function">
      <name>red</name>
      <anchor>3d0b8bf1bee5647cd7616ed0735c1ba0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csScreenBoxResult</name>
    <filename>structcsScreenBoxResult.html</filename>
    <member kind="function">
      <name>cbox</name>
      <anchor>d5cc16b6754c056144c543a6db821367</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>distance</name>
      <anchor>8ae795d3ecf4c230d20f40340a9e047d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sbox</name>
      <anchor>0f93223749d87a5f56fd155a8231ebcb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csScreenTargetResult</name>
    <filename>structcsScreenTargetResult.html</filename>
    <member kind="function">
      <name>isect</name>
      <anchor>64893f7e4752e5423c15df47bbf7139a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mesh</name>
      <anchor>2c6cc3f390829afb34ea6297d0a435be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>polygon_idx</name>
      <anchor>f7a0bc39b545eb3914c1a03ae8d9dbba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSectorHitBeamResult</name>
    <filename>structcsSectorHitBeamResult.html</filename>
    <member kind="function">
      <name>final_sector</name>
      <anchor>8ce051da6d2e8bd02b3a5561eab3bf97</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>isect</name>
      <anchor>c2d501bcbcfc1e4bb01848240f188be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mesh</name>
      <anchor>753a309f41bf247ba6d5621daf4cdf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>polygon_idx</name>
      <anchor>ac6b73d93ba3e96f661b433abc908df0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSequenceOp</name>
    <filename>structcsSequenceOp.html</filename>
    <member kind="function">
      <name>csSequenceOp</name>
      <anchor>6167ce0aadae35155ec0b4ef09a797fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~csSequenceOp</name>
      <anchor>f537cf4d1779e0d7ed634ec9caa3fe0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>next</name>
      <anchor>e995115f8543ee05f3b7be31ebd6803c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>operation</name>
      <anchor>b52a48b6539cdf6a8d1fad33fa42eb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>params</name>
      <anchor>ac7bdccef9086c83fa9cca47e53c7db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>prev</name>
      <anchor>3a38a858f06a756f29437b6e1d259ac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sequence_id</name>
      <anchor>2211efc8015cfa5f15736b90247a61a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>time</name>
      <anchor>1fab99539aa4a0bb66bf9a8c5ce328b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSetToAddress</name>
    <filename>structcsSetToAddress.html</filename>
    <member kind="function">
      <name>Int16</name>
      <anchor>a54a63d685a030db0bdadc0f22b4eb79</anchor>
      <arglist>(void *buff, int16 s)</arglist>
    </member>
    <member kind="function">
      <name>Int32</name>
      <anchor>126da6c6242dbdd77fb94d9b475e8de9</anchor>
      <arglist>(void *buff, int32 s)</arglist>
    </member>
    <member kind="function">
      <name>Int64</name>
      <anchor>40112b0d4fdbb89c494c62402478f763</anchor>
      <arglist>(void *buff, int64 s)</arglist>
    </member>
    <member kind="function">
      <name>UInt32</name>
      <anchor>8929e8dda17acbe00bc5abd911a50826</anchor>
      <arglist>(void *buff, uint32 s)</arglist>
    </member>
    <member kind="function">
      <name>UInt64</name>
      <anchor>9f5bcd5cd15f98aa007f3b88902e180f</anchor>
      <arglist>(void *buff, uint64 s)</arglist>
    </member>
    <member kind="function">
      <name>UInt16</name>
      <anchor>62a9b7cdafbc13e66030e7e3acc89228</anchor>
      <arglist>(void *buff, uint16 s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderExpression::oper</name>
    <filename>structcsShaderExpression_1_1oper.html</filename>
    <member kind="function">
      <name>oper::acc</name>
      <anchor>b1fef9cb2ff94b43b7e07faaa48d8a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper::arg1</name>
      <anchor>4475cb03f17b810dfbb345c7ffde29a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper::arg2</name>
      <anchor>5e435c0bb39ff41928cc6348888e3ab2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper::opcode</name>
      <anchor>81c646c1b13d880c05fae62b51b98f14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderExpression::oper_arg</name>
    <filename>structcsShaderExpression_1_1oper__arg.html</filename>
    <member kind="function">
      <name>oper_arg::type</name>
      <anchor>cc2957a87d185843f651ab382137e3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_arg::vec4</name>
      <anchor>4c58a0e6bf50401731e84e401cee1501</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_arg::acc</name>
      <anchor>9969d82f590811026aba664afbe7e904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_arg::cell</name>
      <anchor>259c55e8773d0796c4199cc31b7bb013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_arg::num</name>
      <anchor>95af039e189a32bff8fef92eca3ee4f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_arg::oper</name>
      <anchor>ba1b32196d2b19dca225fd369a33c4c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>oper_arg::var</name>
      <anchor>7f5d26b977ac9784bd20c92f84719fb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderMetadata</name>
    <filename>structcsShaderMetadata.html</filename>
    <member kind="function">
      <name>csShaderMetadata</name>
      <anchor>941b967afb26ce4498ae83a8998277f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>description</name>
      <anchor>e62664e8f585c77668d8cf180f1b6cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>numberOfLights</name>
      <anchor>0854450e408ed7b39bc1425aabdd8229</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderProgram::ProgramParam</name>
    <filename>structcsShaderProgram_1_1ProgramParam.html</filename>
    <member kind="function">
      <name>ProgramParam::ProgramParam</name>
      <anchor>24e392d6505a305dae148bd6d6b8b0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ProgramParam::name</name>
      <anchor>a96e06a51abe61e52c3dfb6cecaa05ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProgramParam::valid</name>
      <anchor>245760c2415813483dc05829cb696a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProgramParam::var</name>
      <anchor>e27b590ac81adfcbe9cc2d221ea28a7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderProgram::VariableMapEntry</name>
    <base>csShaderVarMapping</base>
    <filename>structcsShaderProgram_1_1VariableMapEntry.html</filename>
    <member kind="function">
      <name>VariableMapEntry::VariableMapEntry</name>
      <anchor>8b53de0f88e3c683abad1522e0c9d83a</anchor>
      <arglist>(const csShaderVarMapping &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>VariableMapEntry::VariableMapEntry</name>
      <anchor>38c2c89a0b1506fbf381a8d6c62f0082</anchor>
      <arglist>(csStringID s, const char *d)</arglist>
    </member>
    <member kind="function">
      <name>VariableMapEntry::mappingParam</name>
      <anchor>e1dba7b8a1d2a143d52b40c59baed1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VariableMapEntry::userVal</name>
      <anchor>9bc71f06a0b6e1b17ebe4ba6536d25d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShaderVarMapping</name>
    <filename>structcsShaderVarMapping.html</filename>
    <member kind="function">
      <name>csShaderVarMapping</name>
      <anchor>2b910bd01f81787d1e6c2450fb1a9aab</anchor>
      <arglist>(csStringID n, const char *d)</arglist>
    </member>
    <member kind="function">
      <name>destination</name>
      <anchor>3c1b65e7bd2eff98b7355525db082061</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>8cc49699a1d7f6e73f5422e244824ae1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csShortestDistanceResult</name>
    <filename>structcsShortestDistanceResult.html</filename>
    <member kind="function">
      <name>direction</name>
      <anchor>f710e3802324728a866d6a68a0014f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sqdistance</name>
      <anchor>adb4075d4fadcd5fcf5af2bed05f2d6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSimpleRenderMesh</name>
    <filename>structcsSimpleRenderMesh.html</filename>
    <member kind="function">
      <name>csSimpleRenderMesh</name>
      <anchor>942ade074bd8b9ab5b11d852bd669d6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>alphaType</name>
      <anchor>35e4295893e187fa2a51fa65f04bc85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>colors</name>
      <anchor>fa37b64dc911c62bc294a9c7615e4545</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dynDomain</name>
      <anchor>efc56c1a346a88589af3158b4e778cbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indexCount</name>
      <anchor>95ead2b8a5af33dbd8d5e8316da2e1a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>indices</name>
      <anchor>ae0310fbd68a4897f4b9bef8712b11dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>meshtype</name>
      <anchor>92f84b0698056690a5062a3108b3da55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>mixmode</name>
      <anchor>7ca11eb0c8d2fffa2d458dfec0757403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>object2world</name>
      <anchor>856070d79fc2f677ec4829767c690e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>shader</name>
      <anchor>cd6707ce76af92f0474c0e099fe4f255</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texcoords</name>
      <anchor>185f95dd86f321c188f815ed6d2fef5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>texture</name>
      <anchor>727ef62fc04219f904cd862fc90a0542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vertexCount</name>
      <anchor>d3a600ee0883722f77451671f3bc5a21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>vertices</name>
      <anchor>b9e7c8b8c9719fe191b28cb9e00013d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>z_buf_mode</name>
      <anchor>6e4ee61bd87fcb8e94cec141167b89f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSndSysSoundFormat</name>
    <filename>structcsSndSysSoundFormat.html</filename>
    <member kind="function">
      <name>Bits</name>
      <anchor>e02256a3b559c98edc8c39553d75ff41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Channels</name>
      <anchor>c0bfee2805f7920eeba1ad4b8ac3c41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Flags</name>
      <anchor>342f245b33de64b66bc4f4e2f98976cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Freq</name>
      <anchor>219a79f01aa23c4b2e1e8ad8204e3b0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSoftFontCache::SoftGlyphCacheData</name>
    <base>csFontCache::GlyphCacheData</base>
    <filename>structcsSoftFontCache_1_1SoftGlyphCacheData.html</filename>
    <member kind="function">
      <name>SoftGlyphCacheData::alphaMetrics</name>
      <anchor>ea2a4006e5374fefbae5ac7e650086d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SoftGlyphCacheData::bitmapMetrics</name>
      <anchor>c52ddd294102d54be1a830ea320ad67a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SoftGlyphCacheData::glyphAlphaData</name>
      <anchor>e4e306d6c020c90649cc2ae576f4f768</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SoftGlyphCacheData::glyphAlphaDataBuf</name>
      <anchor>746fd4166df2603b83a7e46a3df7f6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SoftGlyphCacheData::glyphData</name>
      <anchor>4bd2ffcc0b58dc478b7bd65d026d880c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SoftGlyphCacheData::glyphDataBuf</name>
      <anchor>f7933549ac26e3054d4d30ef323a295f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSprite2DVertex</name>
    <filename>structcsSprite2DVertex.html</filename>
    <member kind="function">
      <name>operator==</name>
      <anchor>37477a9b1a0a6e13fb6cee67558e2664</anchor>
      <arglist>(const csSprite2DVertex &amp;other)</arglist>
    </member>
    <member kind="function">
      <name>color</name>
      <anchor>8024a308185d525bb496acae807ce032</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>color_init</name>
      <anchor>fa9b22365c81d77826d123a3fca3abc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>pos</name>
      <anchor>c99c0df5c5c3aeb4cd75feeb66b0a1fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>u</name>
      <anchor>e1f6334b2ac934704041df91472c7085</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>v</name>
      <anchor>8dbd7cce0b7e8cd829859274cd358593</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSpriteCal3DActiveAnim</name>
    <filename>structcsSpriteCal3DActiveAnim.html</filename>
    <member kind="function">
      <name>index</name>
      <anchor>18bed77e0293b0808bfd05fa0064d6d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>weight</name>
      <anchor>88a79f1d17b8af7db9ac94065bb4cbd1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSubRectangles::SubRect::AllocInfo</name>
    <filename>structcsSubRectangles_1_1SubRect_1_1AllocInfo.html</filename>
    <member kind="function">
      <name>SubRect::AllocInfo::AllocInfo</name>
      <anchor>1d8e9c6f1702c1833f34606ff712352f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SubRect::AllocInfo::allocPos</name>
      <anchor>5b0e63133d3a68229149be613cb1e2be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::AllocInfo::d</name>
      <anchor>c848da4f15d60406fc9b45385bc6c948</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::AllocInfo::node</name>
      <anchor>ed7527aa6bcadf73e28cbbf2dfd72c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SubRect::AllocInfo::res</name>
      <anchor>1ea99621a4913fece48f6d44fa9aa993</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csSwapBytes</name>
    <filename>structcsSwapBytes.html</filename>
    <member kind="function">
      <name>Int16</name>
      <anchor>ece0f810fb22e2fdd9468ccaeed76053</anchor>
      <arglist>(int16 x)</arglist>
    </member>
    <member kind="function">
      <name>Int32</name>
      <anchor>9b487f0d4a4cffa29b15ebc57b8b9200</anchor>
      <arglist>(int32 x)</arglist>
    </member>
    <member kind="function">
      <name>Int64</name>
      <anchor>9e5a47f1009fb8f48a2c6885762cf472</anchor>
      <arglist>(int64 x)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>929e07595c810ccfe44bd358b5b551e8</anchor>
      <arglist>(int64 l)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>05bba77db9204e7ea049ddc49c16fae3</anchor>
      <arglist>(uint64 l)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>99a637159d3b6807e9e596f858279d17</anchor>
      <arglist>(int32 l)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>a55ee2e5d2b725fabfcce4419885f0ea</anchor>
      <arglist>(uint32 l)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>ef4bc5932a8447bc469795947f9ac45e</anchor>
      <arglist>(int16 s)</arglist>
    </member>
    <member kind="function">
      <name>UInt16</name>
      <anchor>3cac62ed529aa3f7d34ac52fe3b16846</anchor>
      <arglist>(uint16 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt32</name>
      <anchor>a7438c05f6bcd9b8205f2ca1f16773e5</anchor>
      <arglist>(uint32 x)</arglist>
    </member>
    <member kind="function">
      <name>UInt64</name>
      <anchor>5eb35bd81c1a9dd7014a0c24e71fb3a6</anchor>
      <arglist>(uint64 x)</arglist>
    </member>
    <member kind="function">
      <name>Swap</name>
      <anchor>e9054cbad7085e9717ebf09e825bb2be</anchor>
      <arglist>(uint16 s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTestRectData</name>
    <filename>structcsTestRectData.html</filename>
    <member kind="function">
      <name>bbox</name>
      <anchor>bec8eaf87f248f1dbe869a1f00633037</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>end_x</name>
      <anchor>c13bc2f1dbb06f03653aaee2765d665f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>endcol</name>
      <anchor>97b65db273f301eeba24c5ae1d1789c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>endrow</name>
      <anchor>cff60b56d2bfdaf5a26c0fd511f1de38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>start_x</name>
      <anchor>419583d8d20dd134f11eb57bcfd697af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>startcol</name>
      <anchor>8a0f66e0e8cdfe0a8298b4f09115758e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>startrow</name>
      <anchor>243f40f57d099bebf19c6ea2ff9c71c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTraceBeamResult</name>
    <filename>structcsTraceBeamResult.html</filename>
    <member kind="function">
      <name>closest_isect</name>
      <anchor>c345922daba1648ec492d16f2c34de94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>closest_mesh</name>
      <anchor>66ac8566413963a17c1ddec058701840</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>closest_tri</name>
      <anchor>f5e4f83424af9952a2daa7cb14b69297</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>end_sector</name>
      <anchor>2230e410c449422c2c8ecfe2f2733fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sqdistance</name>
      <anchor>379d9779aafd414c7a822c65f029d823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangle</name>
    <base>CS::TriangleT&lt; int &gt;</base>
    <filename>structcsTriangle.html</filename>
    <member kind="function">
      <name>csTriangle</name>
      <anchor>a532c2b5fdb587d4545a00bde26fa9ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csTriangle</name>
      <anchor>d3e7446169f793125e8e7218da4ae42f</anchor>
      <arglist>(int _a, int _b, int _c)</arglist>
    </member>
    <member kind="function">
      <name>csTriangle</name>
      <anchor>2f00b9a1b9ed9bdc175fe249e0df78b7</anchor>
      <arglist>(const CS::TriangleT&lt; int &gt; &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csTriangleMinMax</name>
    <base>csTriangle</base>
    <filename>structcsTriangleMinMax.html</filename>
    <member kind="function">
      <name>maxx</name>
      <anchor>ab8fba1ddaf2a01118363e96ef339ae4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>minx</name>
      <anchor>a9099b1cee334b3a6873814b19d26d53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVariant</name>
    <filename>structcsVariant.html</filename>
    <member kind="function">
      <name>csVariant</name>
      <anchor>6594afe4ffa4a685e030779a9a811975</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>0aa9f6d202cc90e06447f70c238f44c2</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>~csVariant</name>
      <anchor>1be8c7cdc8e6205ce578bf34d7567349</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csVariant</name>
      <anchor>4ebfd4836c17bc6b3a1ddc97c8e513db</anchor>
      <arglist>(const csVariant &amp;var)</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>36fa1d06d3d829ca555a9985a596b43c</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>d4ffafd84f2eac8e44ced0bb87312e4e</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetLong</name>
      <anchor>babd9d1ee88facf3a25afc5911d4fdee</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>2ad7fab5668e57b446c12e8bed91e3b0</anchor>
      <arglist>() const </arglist>
    </member>
    <member kind="function">
      <name>operator=</name>
      <anchor>8becb055148eb778d7100400b9f7263a</anchor>
      <arglist>(const csVariant &amp;var)</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>6c45850ca04ce0b460a95c4433a584b5</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <name>SetCommand</name>
      <anchor>1f651e489b425485c7ba4620b8b571b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>SetFloat</name>
      <anchor>8c0a880bd68da00c11776cb4b75ce291</anchor>
      <arglist>(float f)</arglist>
    </member>
    <member kind="function">
      <name>SetLong</name>
      <anchor>6ae9d0b1f1dbe2b0d190425d1b584f68</anchor>
      <arglist>(long l)</arglist>
    </member>
    <member kind="function">
      <name>SetString</name>
      <anchor>70568ffe2ca094b6da29a5264da53fa6</anchor>
      <arglist>(const char *s)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csVertexStatus</name>
    <filename>structcsVertexStatus.html</filename>
    <member kind="function">
      <name>Pos</name>
      <anchor>722b6f229060130fed7cf7b0b10db2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>10f72f3a72d0f4c2247cd2e3aea02364</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Vertex</name>
      <anchor>f806090dc9cfa0147b19ac4c8fc6ef40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cswinCtoA</name>
    <filename>structcswinCtoA.html</filename>
    <member kind="function">
      <name>cswinCtoA</name>
      <anchor>e8662ae8d8f84eeba89300c418b70edf</anchor>
      <arglist>(const char *ws, UINT codePage=CP_ACP)</arglist>
    </member>
    <member kind="function">
      <name>~cswinCtoA</name>
      <anchor>98893b9b3fc385cd01a2c7c8b4c736a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator const char *</name>
      <anchor>913b95d2fc6b23bc3fb5ac74bb26180a</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cswinWtoA</name>
    <filename>structcswinWtoA.html</filename>
    <member kind="function">
      <name>cswinWtoA</name>
      <anchor>23fa6a6972f6e73a9725722f775812b3</anchor>
      <arglist>(const wchar_t *ws)</arglist>
    </member>
    <member kind="function">
      <name>~cswinWtoA</name>
      <anchor>d8e5c95803d7f0c5e35cee74aa1fe351</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator const char *</name>
      <anchor>e339ca1bf5b09772d188ef74fa1f55ed</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>csWtoC</name>
    <filename>structcsWtoC.html</filename>
    <member kind="function">
      <name>csWtoC</name>
      <anchor>b0133db4781c438c020b65dae5f1ecf9</anchor>
      <arglist>(const wchar_t *ws)</arglist>
    </member>
    <member kind="function">
      <name>~csWtoC</name>
      <anchor>f880661c27c3d47630f985f200e1b38e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator const char *</name>
      <anchor>a31ecb2bea789b3a4b7e71064087c35c</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>dirent</name>
    <filename>structdirent.html</filename>
    <member kind="function">
      <name>d_name</name>
      <anchor>642c07ca7bb5d1b47a3a3096c04480c0</anchor>
      <arglist>[CS_MAXPATHLEN+1]</arglist>
    </member>
    <member kind="function">
      <name>d_size</name>
      <anchor>4c606d73e05eaa002163fdfa23527c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>dwFileAttributes</name>
      <anchor>66dbc9773de312f662acd9a3d98c6903</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>getopt_option</name>
    <filename>structgetopt__option.html</filename>
    <member kind="function">
      <name>flag</name>
      <anchor>ae7c182735ea02add1c66d554fcf01d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>has_arg</name>
      <anchor>9bebd1453e53654a803e2fb46a2970e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>name</name>
      <anchor>21232852018133c79b7987b4f5a89bcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>val</name>
      <anchor>0315120b2afc2c36980c6df4659571e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAddonReference</name>
    <base>iBase</base>
    <filename>structiAddonReference.html</filename>
    <member kind="function">
      <name>GetAddonObject</name>
      <anchor>e92aede02e79729f6f90fac572c6a1df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParamsFile</name>
      <anchor>76cd18a11a0d38f0b697f8f5f4513b4e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPlugin</name>
      <anchor>674f0d12142ee52198393ae4f4774b87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>68c39a062ae3596c2fb06375d22d0e38</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAnimatedImage</name>
    <base>iBase</base>
    <filename>structiAnimatedImage.html</filename>
    <member kind="function">
      <name>Animate</name>
      <anchor>136b7998062d9a59e4af704e992558b9</anchor>
      <arglist>(csTicks time, csRect *dirtyrect=0)=0</arglist>
    </member>
    <member kind="function">
      <name>IsAnimated</name>
      <anchor>1c79f1a3a4ac84ad97ea191f0d725e37</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAnimTimeUpdateHandler</name>
    <base>iBase</base>
    <filename>structiAnimTimeUpdateHandler.html</filename>
    <member kind="function">
      <name>UpdatePosition</name>
      <anchor>8df971b6a0fd16f56fa35f01dbf61317</anchor>
      <arglist>(float delta, CalModel *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iArrayChangeAll</name>
    <base>iArrayChangeElements</base>
    <filename>structiArrayChangeAll.html</filename>
    <member kind="function">
      <name>Delete</name>
      <anchor>aadbe10bbd38f317b5db7d70da5d7808</anchor>
      <arglist>(T const &amp;item)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>aa7f467cd25c4ddd9fc219eb8432d2b6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteFast</name>
      <anchor>b33cb753dab67579e4c693d485b48a5f</anchor>
      <arglist>(T const &amp;item)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>17ad112d4dea8c7668aa962f2186c21a</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndexFast</name>
      <anchor>3d1c6002328ad490a6adf3539b23f448</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>def4f0fbb60ff7174a74bf11d580c2f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetExtend</name>
      <anchor>776ed11bb011ed93877a5a9b1bc374bb</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>8253480032393d7d58b8c57bd5f1f00b</anchor>
      <arglist>(size_t n, T const &amp;item)=0</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>50f0d70e6f3c8fd0320cec087484a1e6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>a648fc0d73451acd2df2d88527a687db</anchor>
      <arglist>(T const &amp;what)=0</arglist>
    </member>
    <member kind="function">
      <name>PushSmart</name>
      <anchor>b14c3336c5cf44e8281fa680885e7a11</anchor>
      <arglist>(T const &amp;what)=0</arglist>
    </member>
    <member kind="function">
      <name>Put</name>
      <anchor>d4203e8c720fd5cf63105b1bb719e2b5</anchor>
      <arglist>(size_t n, T const &amp;what)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>bdb46bff30afb87b54669eabff01f104</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>0cbbef05612215a4a8d9b4afbd71e2be</anchor>
      <arglist>(size_t n, T const &amp;what)=0</arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>1ede306c0902e510ab6a6fee1afe38b5</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iArrayChangeElements</name>
    <base>iArrayReadOnly</base>
    <filename>structiArrayChangeElements.html</filename>
    <member kind="function">
      <name>Get</name>
      <anchor>d3277c4249557c0b1a3caa515f23d339</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>3cf15a2c1a7cce6057515f1d3e3b38bb</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iArrayReadOnly</name>
    <base>iBase</base>
    <filename>structiArrayReadOnly.html</filename>
    <member kind="function">
      <name>ContainedType</name>
      <anchor>d57eaef5cfcd51b76cb2308e3b0333e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>aee6d8cf6a981bc1e5e29913ccc5de3e</anchor>
      <arglist>(T const &amp;which) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>4a09769cbe113928a44a96a4583280be</anchor>
      <arglist>(size_t n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAll</name>
      <anchor>57bf83babeef3a61acea98de602244b6</anchor>
      <arglist>(T *dest) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetIndex</name>
      <anchor>4200cbce14f8a33dcfc32a857c103dea</anchor>
      <arglist>(const T *which) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>a17db8fd7343b9837f8c4183f21bfba0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>76e4e46b9b734d191c01b4ff6691f931</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Top</name>
      <anchor>b27e95095c660071a3644a39481e8cfe</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAws</name>
    <base>iBase</base>
    <filename>structiAws.html</filename>
    <member kind="function">
      <name>FrameStart</name>
      <anchor>fcbde26717a8706b229f22dc73d3f71f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GainFocus</name>
      <anchor>c1311dd78968ef57d81d68edd31c2167</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GroupOff</name>
      <anchor>5b1633d076bf767a8cdb84de92cb29d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KeyboardDown</name>
      <anchor>285d392ef5700e92b8d0744cede75163</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KeyboardUp</name>
      <anchor>5b5bc27f07af5f2f3a32a6aa7e4c390e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LoseFocus</name>
      <anchor>6018103f4d209a6f2c0170691cfde7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseClick</name>
      <anchor>c079968053606407f6c13c5bea90cb0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseDown</name>
      <anchor>c048f55b06a13cea2ddcf8517d9339a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseEnter</name>
      <anchor>59265be2e1e8fa54e5baa8e7dfb92a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseExit</name>
      <anchor>660f7e3eac794afa2a050a1a682596ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseMove</name>
      <anchor>7003b5dd2d38a563d61c5e46ddcb6818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MouseUp</name>
      <anchor>ec266232ee5340463dd53a27346fd85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AllWindowsHidden</name>
      <anchor>e207fc297c3799459659bd1f88b9eac5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CaptureMouse</name>
      <anchor>26c25d06ff31dd3688208d12099e6f5d</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearFlag</name>
      <anchor>0861bd11f950ca59262bfa843f9469cb</anchor>
      <arglist>(unsigned int flags)=0</arglist>
    </member>
    <member kind="function">
      <name>ComponentAt</name>
      <anchor>4cdae8de97f2052b49397ad963445130</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>ComponentDestroyed</name>
      <anchor>e4ba0e196e75e084f8f8dd6d385d2ae2</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>ComponentIsInTransition</name>
      <anchor>ba58d2502a70f9f79d844660d3f18a8c</anchor>
      <arglist>(iAwsComponent *win)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateEmbeddableComponent</name>
      <anchor>e66382f37fa79c323184b8bff393eeea</anchor>
      <arglist>(iAwsComponent *covercomp)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateParmList</name>
      <anchor>d5b363cda854ecd9a7f3046f6445c716</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateTransition</name>
      <anchor>5c2219820c1976b4228711e699e4e327</anchor>
      <arglist>(iAwsComponent *win, unsigned transition_type, csTicks duration=250)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateTransitionEx</name>
      <anchor>ae5ccf0c672f021dc27c6b63d2ff054d</anchor>
      <arglist>(iAwsComponent *win, unsigned transition_type, csTicks duration, csRect &amp;user)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateWindowFrom</name>
      <anchor>2687fbbc14b79f1d907a4fe9bb78b13b</anchor>
      <arglist>(const char *defname)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteMarkedComponents</name>
      <anchor>72c63c7c8d268cb96a11bdb545c02de3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Erase</name>
      <anchor>93e6753fc06c8f599a7596e6d44b5ba3</anchor>
      <arglist>(const csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>FindComponentFactory</name>
      <anchor>9dbb5f8228538d5c10933780f4261932</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>G2D</name>
      <anchor>95002744b0cf65289f142738ba69eebe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>G3D</name>
      <anchor>20453db13beff397dcbb138851e42193</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCanvas</name>
      <anchor>70210dceaad1b598e789244a2dc344c8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>dae96ac09cffa6d6102fdf0b5ad2665a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFocusedComponent</name>
      <anchor>61dc0033c2c7ef2041ad39009ab29fc6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyboardFocusedComponent</name>
      <anchor>ed39a94b6248d9883dbf035d13578973</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectRegistry</name>
      <anchor>d1517050a7ecf90b033066cfb99cc1f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPrefMgr</name>
      <anchor>925f1f5834c4fae501f13a1a84f9d06f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSinkMgr</name>
      <anchor>38cc69f927a9df88933c2358de75b813</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStringTable</name>
      <anchor>92699841d34e62d29ce838e957869a79</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTopComponent</name>
      <anchor>0b01ae7b081e9eb478234ccf32d1ddb2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>cd0af10290ecbac7f8f4daa4eccfe43e</anchor>
      <arglist>(iEvent &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>InvalidateUpdateStore</name>
      <anchor>b436f82a351fea8ff445ed5065422821</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Mark</name>
      <anchor>748e7b651345004bbf0b995746bcfee2</anchor>
      <arglist>(const csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>MarkToDeleteRecursively</name>
      <anchor>396e558b5274d5efaee94dc19fc70679</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>MaskEraser</name>
      <anchor>044eb1daf54638516376e540e953765d</anchor>
      <arglist>(const csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>MouseInComponent</name>
      <anchor>c61e8585b60cd0eca1a93c555989b5f9</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>Print</name>
      <anchor>0dfc59cbba1bed71ce480b2894b7e195</anchor>
      <arglist>(iGraphics3D *g3d, uint8 Alpha=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Redraw</name>
      <anchor>892874caf5be95d3bcda7464714954c0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterComponentFactory</name>
      <anchor>75f817a10c03da9ac7162b083ab78b1e</anchor>
      <arglist>(iAwsComponentFactory *factory, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>ReleaseMouse</name>
      <anchor>d0482edb42a32a09e45bea16a15255a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetFlag</name>
      <anchor>ff963a4353ce6a654256c4ebac291cf8</anchor>
      <arglist>(unsigned int flags)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFocusedComponent</name>
      <anchor>e8710cc773da5aef5913a2ccbb55517d</anchor>
      <arglist>(iAwsComponent *_focused)=0</arglist>
    </member>
    <member kind="function">
      <name>SetModal</name>
      <anchor>93d81265cf4690887fc64e883fbaf997</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPrefMgr</name>
      <anchor>28cf947c84461ccccfd47bced707acac</anchor>
      <arglist>(iAwsPrefManager *pmgr)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTopComponent</name>
      <anchor>b75bcbcea1d387472bb8bfd4e8935c2f</anchor>
      <arglist>(iAwsComponent *win)=0</arglist>
    </member>
    <member kind="function">
      <name>SetupCanvas</name>
      <anchor>4a8b930c619eef83a665a1336912e166</anchor>
      <arglist>(iAwsCanvas *newCanvas, iGraphics2D *g2d=0, iGraphics3D *g3d=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Unmark</name>
      <anchor>507502c274361fd59b5d7b8c22c1388c</anchor>
      <arglist>(const csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>UnSetModal</name>
      <anchor>2553b834984029dd3428f46e507e2b3d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PreProcess</name>
      <anchor>10dca66e4bb91d42d62864859d740f50</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAws2</name>
    <base>iBase</base>
    <filename>structiAws2.html</filename>
    <member kind="function">
      <name>CreateScriptObject</name>
      <anchor>11f7dbfd2913e44891328caccd2ffc7e</anchor>
      <arglist>(const char *name, iAws2ScriptEvent *notification_func=0)=0</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>cc9237a203ef7b3719b057da8c16d199</anchor>
      <arglist>(iEvent &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>89c7d1c44e26ac405f4f15a7baaddec3</anchor>
      <arglist>(iObjectRegistry *_object_reg)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>efaa0640da91f40fa49052f769e2df86</anchor>
      <arglist>(const scfString &amp;_filename)=0</arglist>
    </member>
    <member kind="function">
      <name>Redraw</name>
      <anchor>2ef160647c5a5f6b67c5383c35d1ee1a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetDrawTarget</name>
      <anchor>d83582cf8bf42273da012fafcf41da52</anchor>
      <arglist>(iGraphics2D *_g2d, iGraphics3D *_g3d)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAws2ScriptEvent</name>
    <filename>structiAws2ScriptEvent.html</filename>
    <member kind="function">
      <name>~iAws2ScriptEvent</name>
      <anchor>b3ce747f6ce18a93e1ad6d959c6c4fb8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator()</name>
      <anchor>a3f4d69d6de5b370e87536604ef5de86</anchor>
      <arglist>(iAws2ScriptObject *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAws2ScriptObject</name>
    <filename>structiAws2ScriptObject.html</filename>
    <member kind="function">
      <name>~iAws2ScriptObject</name>
      <anchor>243c67f9dc34c7438d0ce99472743f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>Exec</name>
      <anchor>fd406b467c61add3ec26901257eb372f</anchor>
      <arglist>(const char *code)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDoubleArg</name>
      <anchor>0541418b1479cf2cf78a6e422b15d39f</anchor>
      <arglist>(uint arg)=0</arglist>
    </member>
    <member kind="function">
      <name>GetIntArg</name>
      <anchor>0e5b2f4fab31159a9b8f0175b1390546</anchor>
      <arglist>(uint arg)=0</arglist>
    </member>
    <member kind="function">
      <name>GetProp</name>
      <anchor>525146e3418a5816611b8e8c51071672</anchor>
      <arglist>(const char *name, iString *val)=0</arglist>
    </member>
    <member kind="function">
      <name>GetProp</name>
      <anchor>6fec487aa44064f5782ac21015091d6f</anchor>
      <arglist>(const char *name, double &amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>GetProp</name>
      <anchor>f340e99b8195e5e2d608ab46879d1410</anchor>
      <arglist>(const char *name, int32 &amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>GetStringArg</name>
      <anchor>52703cbca529bd993be024c5847a0d3e</anchor>
      <arglist>(uint arg)=0</arglist>
    </member>
    <member kind="function">
      <name>NumArgs</name>
      <anchor>a1bec78f16639ad116506f06f83472f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetNotification</name>
      <anchor>d560f85a260bc8ce5aefd8c4b907369c</anchor>
      <arglist>(iAws2ScriptEvent *_event)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProp</name>
      <anchor>b91337ff0946fef20d58ee8a3e0c8aab</anchor>
      <arglist>(const char *name, const char *val)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProp</name>
      <anchor>ad2d5fbed3478075b5b1d71ceabafd9f</anchor>
      <arglist>(const char *name, double val)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProp</name>
      <anchor>e38a3b347aa3a12edbc3741ab5d4716b</anchor>
      <arglist>(const char *name, int32 val)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsCanvas</name>
    <base>iBase</base>
    <filename>structiAwsCanvas.html</filename>
    <member kind="function">
      <name>Animate</name>
      <anchor>4ea2bee5f1ad445d80d13380529a852b</anchor>
      <arglist>(csTicks current_time)=0</arglist>
    </member>
    <member kind="function">
      <name>G2D</name>
      <anchor>8f152e0cc446ed8ed60b9a5b70023329</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>G3D</name>
      <anchor>553d05956196945b7cd09d92d90e4131</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsComponent</name>
    <base>iAwsSource</base>
    <filename>structiAwsComponent.html</filename>
    <member kind="function">
      <name>AddChild</name>
      <anchor>020c38a051efb67811395ffcdac3b1fa</anchor>
      <arglist>(iAwsComponent *child)=0</arglist>
    </member>
    <member kind="function">
      <name>AddToLayout</name>
      <anchor>2cb38f1f5f4c304e73a4aa8b4f8ddf7c</anchor>
      <arglist>(iAwsComponent *cmp, iAwsComponentNode *settings)=0</arglist>
    </member>
    <member kind="function">
      <name>AddToTabOrder</name>
      <anchor>d6bf5a3e3c7a062efb673caa656d0fad</anchor>
      <arglist>(iAwsComponent *child)=0</arglist>
    </member>
    <member kind="function">
      <name>ChildAt</name>
      <anchor>988e1eddf5604c063fe6de9b7ae6a944</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearFlag</name>
      <anchor>1d21b7389565009db3bf64c85e482d16</anchor>
      <arglist>(unsigned int flag)=0</arglist>
    </member>
    <member kind="function">
      <name>clearPreferredSize</name>
      <anchor>894eb1080547173073aad905507cecdf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ClientFrame</name>
      <anchor>7a253a9e3cde773f7820b5f56796d58a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ComponentAbove</name>
      <anchor>bd2c4f15899d9bf9bcf9e43e6e1463fb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ComponentBelow</name>
      <anchor>880781297d7283f84ef1193f01bf99aa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Create</name>
      <anchor>d1b33c0d2c351f6afcbed85e51a1d42f</anchor>
      <arglist>(iAws *mgr, iAwsComponent *parent, iAwsComponentNode *settings)=0</arglist>
    </member>
    <member kind="function">
      <name>DoFindChild</name>
      <anchor>abcfa361ceb86bc05bad8e014ce3b712</anchor>
      <arglist>(unsigned id)=0</arglist>
    </member>
    <member kind="function">
      <name>Execute</name>
      <anchor>f3443070f2996235da4b0387303dbf82</anchor>
      <arglist>(const char *action, iAwsParmList *parmlist=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindChild</name>
      <anchor>cc7fd3de2cfd7c7c5acda13800ce2403</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Flags</name>
      <anchor>e1eeec6aab4ad5ffed6ae86b1cd39520</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Focusable</name>
      <anchor>5cb4083ee8f24112b68bc912d5a00113</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Frame</name>
      <anchor>cde08efc822d9dba5044135e645da1c2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetChildCount</name>
      <anchor>7d465e9c5093416998fe67cdc92053fc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFirstFocusableChild</name>
      <anchor>5f80ad1a883863b15d33cd3312ef2ff8</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>bfa64a76fd29d989dacb3ab300498bfb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getInsets</name>
      <anchor>4ff743699da3e53e7387f2b9d4833e0b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMarkToDelete</name>
      <anchor>c064847500d7655209c187b99374c542</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getMinimumSize</name>
      <anchor>e2b47a9c81f7840954c917ffba640884</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>getPreferredSize</name>
      <anchor>d5cf5241eff9c1490c190f42e873176b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetProperty</name>
      <anchor>369bb870598a7a9881c3f619d0c7fb04</anchor>
      <arglist>(const char *name, void **parm)=0</arglist>
    </member>
    <member kind="function">
      <name>GetProperty</name>
      <anchor>684aa7f52a05db2789ae764eaf5799c7</anchor>
      <arglist>(const char *name, intptr_t *parm)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTabComponent</name>
      <anchor>be758ce2aed14e5a885e012bc6bf88a2</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTabLength</name>
      <anchor>ab0ae33b9357059987be3f746caa2324</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTopChild</name>
      <anchor>6f9a1ad6d9d5d4fa547e3254159ee968</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>6b3d12da1e4739c4229f6245d4709e7a</anchor>
      <arglist>(iEvent &amp;Event)=0</arglist>
    </member>
    <member kind="function">
      <name>HasChildren</name>
      <anchor>16a2a51ea9b4327dd06ab0cdef9f3d52</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Hide</name>
      <anchor>fdf4f5b8e5310b4f61f027db02bf4df2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>9132408abf4a93a350939a8de771a2db</anchor>
      <arglist>(csRect area)=0</arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>b3e38038d86bee58d7513e1a3b24d15e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isDeaf</name>
      <anchor>03d45b5281af5024626193234adf38fc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isFocused</name>
      <anchor>7b7b4e4ca9ce99d6faf3b51370293333</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>isHidden</name>
      <anchor>fef66bd740a14be1ac0b4eef7fe51d99</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsMaximized</name>
      <anchor>6914e5f58e51e0cfff1d461ccc6210d9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Layout</name>
      <anchor>f5f75316f8110c28ca269d3fc21912d6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LayoutChildren</name>
      <anchor>05683892d88274230d4d1970cc3e8c4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LinkAbove</name>
      <anchor>3e3468bd382dbad071febeec3c583687</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>LinkBelow</name>
      <anchor>e3190f1eac4ccd30f7c33753af124bb0</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>Lower</name>
      <anchor>4babf749e0375982500db1b479483f6d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>MarkToDelete</name>
      <anchor>24e290c73f673d5ef67331e7d233c4cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Maximize</name>
      <anchor>e1af5564382a86c5f2265c2d735b8aef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Move</name>
      <anchor>2ee53f62591c64860d27a89594aa9b18</anchor>
      <arglist>(int delta_x, int delta_y)=0</arglist>
    </member>
    <member kind="function">
      <name>MoveTo</name>
      <anchor>cec98d94cefe5191799d40409b67a54f</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>OnAdded</name>
      <anchor>c065b629a4619503b2e14525b6c1c738</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnChildHide</name>
      <anchor>249b36aeaec1bad5361ccacf07fd7a2c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnChildMoved</name>
      <anchor>739b33be2b88ff49bdd934a0df46ff3d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnChildShow</name>
      <anchor>2fddff9ac6530adc7154fc87ae0273eb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnDraw</name>
      <anchor>fefaadd400c46b8ec69982bdefe9cc7b</anchor>
      <arglist>(csRect clip)=0</arglist>
    </member>
    <member kind="function">
      <name>OnFrame</name>
      <anchor>0538189cb2e3513c13db28571ddd6b80</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnGainFocus</name>
      <anchor>a7a822f2dc86a6bc2f262d1cf027ef1e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnKeyboard</name>
      <anchor>fdb74788e04577bc7f349d38040d605c</anchor>
      <arglist>(const csKeyEventData &amp;eventData)=0</arglist>
    </member>
    <member kind="function">
      <name>OnLostFocus</name>
      <anchor>f7d58802a90a7209540b9e2544c870b9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnLower</name>
      <anchor>856bf0c730f8d5a161a86bc722094554</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseClick</name>
      <anchor>bbf9e429963b4fde184e8698004484eb</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseDoubleClick</name>
      <anchor>ec961b352d989d7c1c52c24c2c5035f7</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseDown</name>
      <anchor>b6769a302ba162a7187f1202434ad16f</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseEnter</name>
      <anchor>d48ba0b560c4d6e10341c2678ac0a349</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseExit</name>
      <anchor>c33493166ce9af9fba2097d67a586ae2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseMove</name>
      <anchor>b2fc50be5fd2210cc7f5404138bd8b84</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>OnMouseUp</name>
      <anchor>6138cb5ac0f258578fedc4b8f4349cec</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>OnRaise</name>
      <anchor>dba028b614b67b91c8e46d1bb21cf26a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnResized</name>
      <anchor>8212f0f56c25871f5581ad7e7c7325cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnSetFocus</name>
      <anchor>bea9666cf060e5475842ffb76d7e4920</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OnUnsetFocus</name>
      <anchor>da9b3211850fe54cffc66ff67fe8b90e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Overlaps</name>
      <anchor>2252bf89cdcb0f1807c90295da45146b</anchor>
      <arglist>(const csRect &amp;r)=0</arglist>
    </member>
    <member kind="function">
      <name>Parent</name>
      <anchor>c1903b3338963136b789c65b459e9665</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Raise</name>
      <anchor>5fb0f6b5de1c6b7f4c4d953a0eb810ce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RedrawTag</name>
      <anchor>14cba8a3c6f5de22afd8758d61e40681</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveChild</name>
      <anchor>e0b2323171bb87ff534d3f167b1430ac</anchor>
      <arglist>(iAwsComponent *child)=0</arglist>
    </member>
    <member kind="function">
      <name>Resize</name>
      <anchor>4da6d7803f619048f420683e4ffd24b8</anchor>
      <arglist>(int width, int height)=0</arglist>
    </member>
    <member kind="function">
      <name>ResizeTo</name>
      <anchor>568a6b3a38340496ba7000482edcaa6f</anchor>
      <arglist>(csRect newFrame)=0</arglist>
    </member>
    <member kind="function">
      <name>SetComponentAbove</name>
      <anchor>1d8823ad0fe28a62be7b16a89fc44614</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetComponentBelow</name>
      <anchor>af3d888dd920c4ce30676099ad327e36</anchor>
      <arglist>(iAwsComponent *comp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDeaf</name>
      <anchor>6b05b9ca753d765e1fbe459c7498613c</anchor>
      <arglist>(bool bDeaf)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFlag</name>
      <anchor>b4fb9005e6b756e6b62ba9201129eee9</anchor>
      <arglist>(unsigned int flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFocus</name>
      <anchor>fe4908de5bdc136e0c8dc83733f80523</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetFocusable</name>
      <anchor>a3823bad846033713ee5de7054eadbc7</anchor>
      <arglist>(bool _focusable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetID</name>
      <anchor>29b4dd5c5f7a927da347bdead88cbd65</anchor>
      <arglist>(unsigned long _id)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLayout</name>
      <anchor>dc75f8899211bbc073b7e298c9175fc5</anchor>
      <arglist>(iAwsLayoutManager *layout)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>37d3efa6e1c522fcd9c90947196932b9</anchor>
      <arglist>(iAwsComponent *parent)=0</arglist>
    </member>
    <member kind="function">
      <name>setPreferredSize</name>
      <anchor>1c373d55ea349c46fb7c4df5b83afd74</anchor>
      <arglist>(const csRect &amp;size)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProperty</name>
      <anchor>4ef8fb9b5bb9572420125a88ae78eaa5</anchor>
      <arglist>(const char *name, void *parm)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProperty</name>
      <anchor>17c1b212e8a66812652331a8efe2a436</anchor>
      <arglist>(const char *name, intptr_t parm)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRedrawTag</name>
      <anchor>a541eb3bfcfdb583660f1ed0ccfed561</anchor>
      <arglist>(unsigned int tag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTopChild</name>
      <anchor>71fa14b70e6bef0e06c2cfcff339ffdd</anchor>
      <arglist>(iAwsComponent *child)=0</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>adee1037c08df6ad10f9914b8015f1f1</anchor>
      <arglist>(iAws *wmgr, iAwsComponentNode *settings)=0</arglist>
    </member>
    <member kind="function">
      <name>Show</name>
      <anchor>612d192b28ecb6ed796cb3a919e42d23</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>TabNext</name>
      <anchor>d0d239f63e64d1168f0ba8ca94651b4d</anchor>
      <arglist>(iAwsComponent *child)=0</arglist>
    </member>
    <member kind="function">
      <name>TabPrev</name>
      <anchor>5bfe07b1181a3f3192d01435d1eb3b4d</anchor>
      <arglist>(iAwsComponent *child)=0</arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>ae89519f02369b5ce9bb4a94d2497405</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Unlink</name>
      <anchor>bf87030f98362a67e8ffdcf81d1048f7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnMaximize</name>
      <anchor>b6ef4b3b1c424891d3553d0112af44a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnsetFocus</name>
      <anchor>5a105a1d3cb44adadceec750defbacff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Window</name>
      <anchor>f129c453239701b0dd613ee7d5659202</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>WindowManager</name>
      <anchor>906214a4faac2417297257e62fbb67ca</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsComponentFactory</name>
    <base>iBase</base>
    <filename>structiAwsComponentFactory.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>ccb9d8ede76217e5ffb08b08d9c84d6b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>1c946fc85e3c3aa86f9c78525ffc8378</anchor>
      <arglist>(const char *type)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterConstant</name>
      <anchor>71857ddcc9f790b0d19732542977ae8a</anchor>
      <arglist>(const char *name, int value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsComponentNode</name>
    <base>iAwsKeyContainer</base>
    <filename>structiAwsComponentNode.html</filename>
    <member kind="function">
      <name>ComponentTypeName</name>
      <anchor>75b5e9cf134d256dc98bca6556dfb87b</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsConnectionKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsConnectionKey.html</filename>
    <member kind="function">
      <name>Signal</name>
      <anchor>549ef141a94588a6c355ef7c63973922</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Sink</name>
      <anchor>088e18c700299a614cf9416370427a2a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Trigger</name>
      <anchor>65aab4c980e27952c0235c463a49205e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsConnectionNodeFactory</name>
    <base>iBase</base>
    <filename>structiAwsConnectionNodeFactory.html</filename>
    <member kind="function">
      <name>AddConnectionKey</name>
      <anchor>66bfa6ac7b909dc05e24b667dfbe1289</anchor>
      <arglist>(const char *name, iAwsSink *s, unsigned long t, unsigned long sig)=0</arglist>
    </member>
    <member kind="function">
      <name>GetThisNode</name>
      <anchor>8deaea9d83705b21dd53e140a8d63d28</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>09a2eee1603407146e155c13ab9644a3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsDockableWindow</name>
    <base>iBase</base>
    <filename>structiAwsDockableWindow.html</filename>
    <member kind="function">
      <name>GetDockSite</name>
      <anchor>c0ac0c4af0963bb921ad0e2cc09a44b0</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsDockSite</name>
    <base>iBase</base>
    <filename>structiAwsDockSite.html</filename>
    <member kind="function">
      <name>AddDockWindow</name>
      <anchor>45b1908ffc30d9d2fd2d6098a7c86725</anchor>
      <arglist>(iAwsDockableWindow *win)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDockedWindowFrame</name>
      <anchor>daf143223b0f3839624aac74762c5f09</anchor>
      <arglist>(iAwsDockableWindow *win)=0</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>f2de6363fe21315f5041763a90e34beb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDockWindow</name>
      <anchor>5004318fb28f188aaa4a1f221c168b40</anchor>
      <arglist>(iAwsDockableWindow *win)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsFloatKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsFloatKey.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>998d85827baa50add1d8ca2bd7315c40</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsIntKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsIntKey.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>e90da12311b30fe53c88b39c25d0db43</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsKey</name>
    <base>iBase</base>
    <filename>structiAwsKey.html</filename>
    <member kind="function">
      <name>Name</name>
      <anchor>8afe263816b8d32def6310c8771e4fbc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>d7ff0a3063d259040f8bff10dc4f6c0e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsKeyContainer</name>
    <base>iAwsKey</base>
    <filename>structiAwsKeyContainer.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>5ab98595bafed842628b0f72c5335120</anchor>
      <arglist>(iAwsKey *key)=0</arglist>
    </member>
    <member kind="function">
      <name>Consume</name>
      <anchor>d56ba09a158a8173642a8563b905b3d1</anchor>
      <arglist>(iAwsKeyContainer *c)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>7484c865645fac0ef6ba3e187eb79c58</anchor>
      <arglist>(unsigned long id) const =0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>34d857b1d897fb83714d9f6f06109b79</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>ba8ea869885e5178b8f6ee1af614f164</anchor>
      <arglist>(iString *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAt</name>
      <anchor>4ccf4ad76fe71dd878de71167190dd34</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>622fb84cca3b104f0637769d3aca751f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>e35760b3edc7c279f1b6efe4ae1b36eb</anchor>
      <arglist>(iAwsKey *key)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>288a2b0a0021e2c6b0d7fba46362975b</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>165da74f5dc87d129a65a9ffb283b4a4</anchor>
      <arglist>(iString *name)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>b051b0acff659ace3950cc7e39802476</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsKeyFactory</name>
    <base>iBase</base>
    <filename>structiAwsKeyFactory.html</filename>
    <member kind="function">
      <name>AddConnectionKey</name>
      <anchor>cb33b0c19fd1b3adae79b7688f1eee70</anchor>
      <arglist>(const char *name, iAwsSink *s, unsigned long t, unsigned long sig)=0</arglist>
    </member>
    <member kind="function">
      <name>AddConnectionNode</name>
      <anchor>b571d437d5c5242771d8c65af14476ae</anchor>
      <arglist>(iAwsConnectionNodeFactory *node)=0</arglist>
    </member>
    <member kind="function">
      <name>AddFactory</name>
      <anchor>ffc2cc07e56cd7f9ccb247a728bebd44</anchor>
      <arglist>(iAwsKeyFactory *factory)=0</arglist>
    </member>
    <member kind="function">
      <name>AddIntKey</name>
      <anchor>114de3c636b55c634cb139f579c89bef</anchor>
      <arglist>(const char *name, int v)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPointKey</name>
      <anchor>5c36699db1d833840535ee4c39ceacd4</anchor>
      <arglist>(const char *name, csVector2 v)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRectKey</name>
      <anchor>a8d9bf80a5ada5272c09cf2f5886b568</anchor>
      <arglist>(const char *name, csRect v)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRGBKey</name>
      <anchor>cc109fd85088da1a4f05d33611aaaa03</anchor>
      <arglist>(const char *name, unsigned char r, unsigned char g, unsigned char b)=0</arglist>
    </member>
    <member kind="function">
      <name>AddStringKey</name>
      <anchor>ba64bd173c89f91b5b9e07a9fbd280f7</anchor>
      <arglist>(const char *name, const char *v)=0</arglist>
    </member>
    <member kind="function">
      <name>AddToWindowList</name>
      <anchor>f1f65171efd272f147123a99e77fa043</anchor>
      <arglist>(iAwsPrefManager *pm)=0</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>828056a54c9885dca94be8dead65d16a</anchor>
      <arglist>(const char *name, const char *component_type)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsLayoutManager</name>
    <base>iBase</base>
    <filename>structiAwsLayoutManager.html</filename>
    <member kind="function">
      <name>AddComponent</name>
      <anchor>b523d224fde1b7a3749dbe7dc7af5304</anchor>
      <arglist>(iAwsComponent *cmp, iAwsComponentNode *settings)=0</arglist>
    </member>
    <member kind="function">
      <name>LayoutComponents</name>
      <anchor>d67f03848e29b751d86629fa4ba21654</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveComponent</name>
      <anchor>21b7edc0f8fb3528c4285988e1b251f8</anchor>
      <arglist>(iAwsComponent *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOwner</name>
      <anchor>7d103d0a42929323de5829a0ac9f934b</anchor>
      <arglist>(iAwsComponent *_owner)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsParmList</name>
    <base>iBase</base>
    <filename>structiAwsParmList.html</filename>
    <member kind="function">
      <name>AddBool</name>
      <anchor>bde7125184953a7c781187b17340a554</anchor>
      <arglist>(const char *name, bool value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddFloat</name>
      <anchor>e57e6f5746bf53fefbd022e826041c16</anchor>
      <arglist>(const char *name, float value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddInt</name>
      <anchor>50fd76005a83296ee7f180357c76d311</anchor>
      <arglist>(const char *name, int value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOpaque</name>
      <anchor>7c0d87adc8b3aff8778e94c746bf2bb9</anchor>
      <arglist>(const char *name, intptr_t value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPoint</name>
      <anchor>e410465f9a438f5be11c722de44d82c2</anchor>
      <arglist>(const char *name, csVector2 *value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRect</name>
      <anchor>3eb7d682d46b6299a87e98abaf3908b9</anchor>
      <arglist>(const char *name, csRect *value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddString</name>
      <anchor>223cc0ec9ec7532964c4d1c8cd01e8e0</anchor>
      <arglist>(const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>AddStringVector</name>
      <anchor>09ad67a6d16f1cb8c55d933301c23987</anchor>
      <arglist>(const char *name, iStringArray *value)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>16ff10d5b0d9645307d44ccdad7fab4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>5ddf0f247f7332d3828b8c32d079df49</anchor>
      <arglist>(const char *name, bool *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>a19a67d0615b5aad290d62162e5ec466</anchor>
      <arglist>(const char *name, float *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>be64e40b92edbd435193b60bd34c1170</anchor>
      <arglist>(const char *name, int *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOpaque</name>
      <anchor>7f6e3f86e1483a303f8aa3dfc131b353</anchor>
      <arglist>(const char *name, intptr_t *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPoint</name>
      <anchor>8b1ad885fd9ad2508635dec49ebd38d6</anchor>
      <arglist>(const char *name, csVector2 **value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRect</name>
      <anchor>de8f68929d558478356163fa708c70d5</anchor>
      <arglist>(const char *name, csRect **value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>7d2ba534f7710767d71efd39df2ce9bc</anchor>
      <arglist>(const char *name, csRef&lt; iString &gt; &amp;value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>14a03d0adcd15d9007531214dbb6fb29</anchor>
      <arglist>(const char *name, iString **value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStringVector</name>
      <anchor>6900f31eedcb401aa6a33b0d2720bf21</anchor>
      <arglist>(const char *name, csRef&lt; iStringArray &gt; &amp;value) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStringVector</name>
      <anchor>7cbc3fbbf095728650a16ece9c10cb6a</anchor>
      <arglist>(const char *name, iStringArray **value) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsPointKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsPointKey.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>449d989f136ba432cd817bd1a8660675</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsPrefManager</name>
    <base>iBase</base>
    <filename>structiAwsPrefManager.html</filename>
    <member kind="function">
      <name>AddCustomStringProperty</name>
      <anchor>7166dbdcb77d006c0c27dd0904e6e0c9</anchor>
      <arglist>(const char *prop)=0</arglist>
    </member>
    <member kind="function">
      <name>ConstantExists</name>
      <anchor>419deec10125f3265574d07e666ca0fc</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateConnectionNodeFactory</name>
      <anchor>41cc9519cecade0fd635344a9a7ad28e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateKeyFactory</name>
      <anchor>79448b9ed39ae87a6f145c361b8ca1ce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindColor</name>
      <anchor>1e508f6ed0e2028241f24d29b4699d51</anchor>
      <arglist>(unsigned char r, unsigned char g, unsigned char b)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSkinDef</name>
      <anchor>b62cd859d8952b2ab6741998cedc1518</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindWindowDef</name>
      <anchor>6407c7e1b4ac75bdf9dca0dd02ac9f64</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>6e4f883cfafb05a617dbe81e84d11fe9</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetConstantValue</name>
      <anchor>000d03a3441ccf7d66ec4b4d03f20ac0</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCustomStringProperties</name>
      <anchor>a78edb851938d4df16717c2cf177ad5d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultFont</name>
      <anchor>363bdb1851945a041bf8ba061c661b95</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>f836294f1471c7ed8239e0ff31e464ca</anchor>
      <arglist>(iAwsComponentNode *, const char *name, float &amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFont</name>
      <anchor>34c70ee7592c141d10a2c73fa1a7f902</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>4ce98481e115767cab11759eaedbb382</anchor>
      <arglist>(iAwsComponentNode *node, const char *name, int &amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRect</name>
      <anchor>a2aff689beda07dcb6a6a9fe85905798</anchor>
      <arglist>(iAwsComponentNode *node, const char *name, csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>b3292421064b9a1af6c204f796a38cea</anchor>
      <arglist>(iAwsComponentNode *node, const char *name, unsigned char &amp;r, unsigned char &amp;g, unsigned char &amp;b)=0</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>698a0ae208971219b014e70debe770e3</anchor>
      <arglist>(iAwsComponentNode *node, const char *name, iString *val)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTexture</name>
      <anchor>a1c93cafb27c0d3e28a44a2ef3cc7abd</anchor>
      <arglist>(const char *name, const char *filename, unsigned char key_r, unsigned char key_g, unsigned char key_b)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTexture</name>
      <anchor>58a5de105161b2a7e85c8083759dd18b</anchor>
      <arglist>(const char *name, const char *filename=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>4c2530646146545925455a5f38cdc697</anchor>
      <arglist>(const char *def_file)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupIntKey</name>
      <anchor>32ab7c9bc44d49fa8467c646cba6fad7</anchor>
      <arglist>(unsigned long id, int &amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupIntKey</name>
      <anchor>d2c0f6b68d4ae33b3069df3e7647082f</anchor>
      <arglist>(const char *name, int &amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupPointKey</name>
      <anchor>2225f5589bed6145bb5a31ac7c27b842</anchor>
      <arglist>(unsigned long id, csVector2 &amp;point)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupPointKey</name>
      <anchor>341d751bc5bcf2682f79239de93bd077</anchor>
      <arglist>(const char *name, csVector2 &amp;point)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupRectKey</name>
      <anchor>6b1f3027ef6d45e02493c9d8793fd593</anchor>
      <arglist>(unsigned long id, csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupRectKey</name>
      <anchor>81e956926ccc16db31ee9a6f3ddcc661</anchor>
      <arglist>(const char *name, csRect &amp;rect)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupRGBKey</name>
      <anchor>c36b6073995b1dd40b781a49375575ef</anchor>
      <arglist>(unsigned long id, unsigned char &amp;red, unsigned char &amp;green, unsigned char &amp;blue)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupRGBKey</name>
      <anchor>1a970b904e31e1fe0a036271c7ea6787</anchor>
      <arglist>(const char *name, unsigned char &amp;red, unsigned char &amp;green, unsigned char &amp;blue)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupStringKey</name>
      <anchor>bba2f8179e8e329d5d900fa97d979678</anchor>
      <arglist>(unsigned long id, iString *&amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>LookupStringKey</name>
      <anchor>db2b5b1d3a34358c3dbbb4f4ac89d1ba</anchor>
      <arglist>(const char *name, iString *&amp;val)=0</arglist>
    </member>
    <member kind="function">
      <name>NameToId</name>
      <anchor>bc26a4e3e7ec0e20139f1c83d95156d5</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterConstant</name>
      <anchor>c563baabf5d8e7afae53473cd062d616</anchor>
      <arglist>(const char *name, int value)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllSkinDefs</name>
      <anchor>8900d85dafdb3275e23f6d8327e35e1d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllWindowDefs</name>
      <anchor>28e4b23a71d63d9dfdf6a9b1cb1f4172</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSkinDef</name>
      <anchor>8a62e382873a5d18c2175040f1f05bab</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveWindowDef</name>
      <anchor>a89432a060d8362081aa57131a5e08b8</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SelectDefaultSkin</name>
      <anchor>e39a0c0517a2dc482eb48b58c26e2928</anchor>
      <arglist>(const char *skin_name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>da5154d6dfe49526dc440802447a6bb9</anchor>
      <arglist>(int index, int color)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDefaultFont</name>
      <anchor>cbaeb503b985825836fb0b83e5178f43</anchor>
      <arglist>(iFont *font)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFontServer</name>
      <anchor>6730a23b03bbe1f92eee9844b32c543d</anchor>
      <arglist>(iFontServer *fntsvr)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTextureManager</name>
      <anchor>922a9d0ebf10fce6586f8fb993cffee5</anchor>
      <arglist>(iTextureManager *txtmgr)=0</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>6efec9546262e5841c868d71dc94ee67</anchor>
      <arglist>(iObjectRegistry *object_reg)=0</arglist>
    </member>
    <member kind="function">
      <name>SetupPalette</name>
      <anchor>4add9afeca747fb62b9228888345d641</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetWindowMgr</name>
      <anchor>81f0e5607472ff7e7f26fe759942ff85</anchor>
      <arglist>(iAws *wmgr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsRectKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsRectKey.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>691910ed81e5223199524d7ba97ff9d9</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsRGBKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsRGBKey.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>35e52b28ce0f01292ae5e00454d06c94</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsRGBKey::RGB</name>
    <filename>structiAwsRGBKey_1_1RGB.html</filename>
    <member kind="function">
      <name>RGB::blue</name>
      <anchor>4273e6415b6e305744a044d1075ca4ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RGB::green</name>
      <anchor>ad281ebf1c63770e6d66241594f589ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>RGB::red</name>
      <anchor>4d3dd7033f7f1f8bddbe57d6438da1d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsSink</name>
    <base>iBase</base>
    <filename>structiAwsSink.html</filename>
    <member kind="function">
      <name>GetError</name>
      <anchor>f6777e91e8e6e3d8621ab1d529d175fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTriggerID</name>
      <anchor>2017c7193fb29536f870c181e1de4e0a</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>HandleTrigger</name>
      <anchor>f6d0daca527592337cb8155b8c33dffc</anchor>
      <arglist>(int trigger_id, iAwsSource *source)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterTrigger</name>
      <anchor>0d905df32503facb37128cc964b24db8</anchor>
      <arglist>(const char *name, void(*Trigger)(unsigned long, void *, iAwsSource *))=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterTrigger</name>
      <anchor>bf10d7a6ec66c5475df3fe1003ad7105</anchor>
      <arglist>(const char *name, void(*Trigger)(unsigned long, intptr_t, iAwsSource *))=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsSinkManager</name>
    <base>iBase</base>
    <filename>structiAwsSinkManager.html</filename>
    <member kind="function">
      <name>CreateSink</name>
      <anchor>f6440e69a39949c5c8f1804bdae387a1</anchor>
      <arglist>(void *parm)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSink</name>
      <anchor>43dda51914c856f8089a9e7f7940e3e2</anchor>
      <arglist>(intptr_t parm)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSlot</name>
      <anchor>fdf3240b34da12f036152516178377c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindSink</name>
      <anchor>f6068b8d7dcb72f1cf46caac7d7fab33</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterSink</name>
      <anchor>fbbc3e56963e4011b6bfe4ec8b8936c7</anchor>
      <arglist>(const char *name, iAwsSink *sink)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSink</name>
      <anchor>e1bb9ce284d75c0606e25567ac3e15e3</anchor>
      <arglist>(iAwsSink *sink)=0</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>d224546424a2fa4088fe286662ae3be7</anchor>
      <arglist>(iObjectRegistry *object_reg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsSlot</name>
    <base>iBase</base>
    <filename>structiAwsSlot.html</filename>
    <member kind="function">
      <name>Connect</name>
      <anchor>bd6fcfee05412833ee2f8d0af96f6c35</anchor>
      <arglist>(iAwsSource *source, unsigned long signal, iAwsSink *sink, unsigned long trigger)=0</arglist>
    </member>
    <member kind="function">
      <name>Disconnect</name>
      <anchor>f3c2a3f04d11784cec5452813135cea8</anchor>
      <arglist>(iAwsSource *source, unsigned long signal, iAwsSink *sink, unsigned long trigger)=0</arglist>
    </member>
    <member kind="function">
      <name>Emit</name>
      <anchor>78044d5ae46656b886dbec62b7d31b4e</anchor>
      <arglist>(iAwsSource &amp;source, unsigned long signal)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsSource</name>
    <base>iBase</base>
    <filename>structiAwsSource.html</filename>
    <member kind="function">
      <name>Broadcast</name>
      <anchor>0b40659e110522174d7f7ac4b7df1f09</anchor>
      <arglist>(uint32 signal)=0</arglist>
    </member>
    <member kind="function">
      <name>GetComponent</name>
      <anchor>207038c992e2fc103d5e215d584ab3be</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterSlot</name>
      <anchor>df224f2f5279a36f05937f4340504696</anchor>
      <arglist>(iAwsSlot *slot, unsigned long signal)=0</arglist>
    </member>
    <member kind="function">
      <name>UnregisterSlot</name>
      <anchor>5b878df64d7ba082cc64acdd836f3fb7</anchor>
      <arglist>(iAwsSlot *slot, unsigned long signal)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iAwsStringKey</name>
    <base>iAwsKey</base>
    <filename>structiAwsStringKey.html</filename>
    <member kind="function">
      <name>Value</name>
      <anchor>d21c85b15e1b10d13aff4320dd824c62</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBase</name>
    <filename>structiBase.html</filename>
    <member kind="function">
      <name>~iBase</name>
      <anchor>64186fd7973d2ef0bc16013e302b6ea3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>AddRefOwner</name>
      <anchor>5d0ec17cc4948f7bdcf668fcb52b9eb1</anchor>
      <arglist>(void **ref_owner)=0</arglist>
    </member>
    <member kind="function">
      <name>DecRef</name>
      <anchor>3a44d46ca155e6ab0c0179db01011bb0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRefCount</name>
      <anchor>74696c1b99c7161216ee26161944adfd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IncRef</name>
      <anchor>426a2763702fbbc33a213f849042284a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryInterface</name>
      <anchor>2adc74eb0286a65f2310f221be4ddded</anchor>
      <arglist>(scfInterfaceID iInterfaceID, int iVersion)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveRefOwner</name>
      <anchor>0292fc77bd2b4f8ff5ff25e9540417e0</anchor>
      <arglist>(void **ref_owner)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBaseHalo</name>
    <base>iBase</base>
    <filename>structiBaseHalo.html</filename>
    <member kind="function">
      <name>GetIntensity</name>
      <anchor>cfe9b3cb7655164b6af64e7000311c18</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>522818e9d5340e2eba1ec10e77aa8cc3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetIntensity</name>
      <anchor>96f5b0ef4e951a5b8d1dd0b118c0af7f</anchor>
      <arglist>(float i)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBezierFactoryState</name>
    <base>iBase</base>
    <filename>structiBezierFactoryState.html</filename>
    <member kind="function">
      <name>AddCurveVertex</name>
      <anchor>16389930aede538d60634ee97a81ae02</anchor>
      <arglist>(const csVector3 &amp;v, const csVector2 &amp;uv)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearCurveVertices</name>
      <anchor>db64a22e2bc6dc0b1b7df6c6d2ee784c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCurve</name>
      <anchor>0ff86bee48e3b44c3d71fc9342327556</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindCurveIndex</name>
      <anchor>543ea463a30f31ebade398808f59596e</anchor>
      <arglist>(iCurve *curve) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCosinusFactor</name>
      <anchor>ae264f45204377c1f56f4c39f4dfa029</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurve</name>
      <anchor>b93cd093ea50a35e8d2b2e93b43f6fad</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurveCount</name>
      <anchor>c60acabed9238583d9a55b6749cfb321</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurvesCenter</name>
      <anchor>e9fc3cefee252e00aa936293a9004a7a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurvesScale</name>
      <anchor>6b4e6c1388fa4a0844bdb95c2b782f85</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurveTexel</name>
      <anchor>2885e02539337e23cd4edb359e94b33e</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurveVertex</name>
      <anchor>34aefea88895bfb05898b3e5b59ed535</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurveVertexCount</name>
      <anchor>44781e23fb1451f7c22e2e489f4c009b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurveVertices</name>
      <anchor>02b087ea2e27ac150be9f85c452626bb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>MergeTemplate</name>
      <anchor>ef201b4cc4b62c2ece1da70fd23420e9</anchor>
      <arglist>(iBezierFactoryState *tpl, iMaterialWrapper *default_material=0, csVector3 *shift=0, csMatrix3 *transform=0)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveCurve</name>
      <anchor>e3628af13d3b1dab1a96eff794a4a31c</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveCurves</name>
      <anchor>bb1e180b979d543a15df34cc77f26442</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetCosinusFactor</name>
      <anchor>0c40a1bc2f9a564f48e55103b7bbd622</anchor>
      <arglist>(float cosfact)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurvesCenter</name>
      <anchor>90c4bdb96f5cd0ae55255ca99b008780</anchor>
      <arglist>(const csVector3 &amp;cen)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurvesScale</name>
      <anchor>c0ae094dd9fdf178a46f3f4ccb36ac45</anchor>
      <arglist>(float scale)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurveTexel</name>
      <anchor>fd2cad88791eec54fee34f0c1c663267</anchor>
      <arglist>(int idx, const csVector2 &amp;vt)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurveVertex</name>
      <anchor>9f74fa8dcbaedc4d91244a927a83ea9e</anchor>
      <arglist>(int idx, const csVector3 &amp;vt)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBezierState</name>
    <base>iBase</base>
    <filename>structiBezierState.html</filename>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>74edd8bcc930945a3c4df04bfc48b96e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBinaryLoaderPlugin</name>
    <base>iBase</base>
    <filename>structiBinaryLoaderPlugin.html</filename>
    <member kind="function">
      <name>Parse</name>
      <anchor>cfd93e1e3a78dca229868790042bff41</anchor>
      <arglist>(iDataBuffer *data, iStreamSource *ssource, iLoaderContext *ldr_context, iBase *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBinarySaverPlugin</name>
    <base>iBase</base>
    <filename>structiBinarySaverPlugin.html</filename>
    <member kind="function">
      <name>WriteDown</name>
      <anchor>7b17f99a9e4fff00ed08939ff0ab5f59</anchor>
      <arglist>(iBase *obj, iFile *file, iStreamSource *ssource)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBodyGroup</name>
    <base>iBase</base>
    <filename>structiBodyGroup.html</filename>
    <member kind="function">
      <name>AddBody</name>
      <anchor>bd3b81009beb639e6c196938172bbbf7</anchor>
      <arglist>(iRigidBody *body)=0</arglist>
    </member>
    <member kind="function">
      <name>BodyInGroup</name>
      <anchor>530db8a86458d230ed452c955fd3ef93</anchor>
      <arglist>(iRigidBody *body)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveBody</name>
      <anchor>6fcc1d79029c7c0c3d5b6681f8ac5598</anchor>
      <arglist>(iRigidBody *body)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBugPlug</name>
    <base>iBase</base>
    <filename>structiBugPlug.html</filename>
    <member kind="function">
      <name>AddCounter</name>
      <anchor>95cb264d6c55c1016680bc9e4ca5c16d</anchor>
      <arglist>(const char *countername, int amount=1)=0</arglist>
    </member>
    <member kind="function">
      <name>AddCounterEnum</name>
      <anchor>b09a431df9fe665d490059ff1327489e</anchor>
      <arglist>(const char *countername, int enumval, int amount=1)=0</arglist>
    </member>
    <member kind="function">
      <name>CheckDebugSector</name>
      <anchor>efd50d89999bd5fec27e4b20f777d051</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>CheckDebugView</name>
      <anchor>8c49fcf0c6f7c637b4d50baed577bb66</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugSectorBox</name>
      <anchor>4c707f5c6899abf7a828e62698e5ca0d</anchor>
      <arglist>(const csBox3 &amp;box, float r, float g, float b, const char *name=0, iMeshObject *mesh=0, uint mixmode=CS_FX_COPY)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugSectorTriangle</name>
      <anchor>abb7141782f7aed16c273a42e20acd04</anchor>
      <arglist>(const csVector3 &amp;s1, const csVector3 &amp;s2, const csVector3 &amp;s3, float r, float g, float b, uint mixmode=CS_FX_ADD)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewBox</name>
      <anchor>1cdbe4170e7c5eac0f6b2c04e43869fd</anchor>
      <arglist>(int i1, int i2)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewBoxCount</name>
      <anchor>ddfc07138d6fd927d04af76188b0637c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewClearScreen</name>
      <anchor>2b6e84dd265bf4283e3e9e369e270c45</anchor>
      <arglist>(bool cs)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewGetBox</name>
      <anchor>96d0e4caeeb2378c096b792a24479922</anchor>
      <arglist>(int i, int &amp;i1, int &amp;i2) const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewGetLine</name>
      <anchor>a79bcafc797e427c7c46f4eb1c066921</anchor>
      <arglist>(int i, int &amp;i1, int &amp;i2) const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewGetPoint</name>
      <anchor>0503176b358dd009edfd207b692b42b6</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewLine</name>
      <anchor>a0165606f308b00b2db1cd33ba088afc</anchor>
      <arglist>(int i1, int i2)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewLineCount</name>
      <anchor>ab446c0f4e40300ca9c9ed288520d194</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewPoint</name>
      <anchor>35a390ec2fefba76dec0bb75d600a543</anchor>
      <arglist>(const csVector2 &amp;point)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewPointCount</name>
      <anchor>3c9f71ca9194af6b01344d182f1ffb63</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>DebugViewRenderObject</name>
      <anchor>cd7d28e01683b1f075e14afbb692f98d</anchor>
      <arglist>(iBugPlugRenderObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>ExecCommand</name>
      <anchor>3752acf5c027ee281f4e6a657409cfc5</anchor>
      <arglist>(const char *command)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveCounter</name>
      <anchor>6d00df11848ee65a63e70f76ca1912c4</anchor>
      <arglist>(const char *countername)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetCounter</name>
      <anchor>6e62b43d1ed0850d2c70b4dd9466b84f</anchor>
      <arglist>(const char *countername, int value=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetupDebugSector</name>
      <anchor>ef02888308e5fc1fbc68ab75758cd622</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetupDebugView</name>
      <anchor>31aea03296bbef0064ff65af65157992</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SwitchDebugSector</name>
      <anchor>3eeec279e472685aef12a171ca97c3bb</anchor>
      <arglist>(const csReversibleTransform &amp;trans, bool clear=true)=0</arglist>
    </member>
    <member kind="function">
      <name>SwitchDebugView</name>
      <anchor>3b0eb5c0ee382ddedf01afb08b50d3a3</anchor>
      <arglist>(bool clear=true)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iBugPlugRenderObject</name>
    <base>iBase</base>
    <filename>structiBugPlugRenderObject.html</filename>
    <member kind="function">
      <name>Render</name>
      <anchor>cd2f04fabad4d939c884b6f0e72cec82</anchor>
      <arglist>(iGraphics3D *g3d, iBugPlug *bugplug)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCacheManager</name>
    <base>iBase</base>
    <filename>structiCacheManager.html</filename>
    <member kind="function">
      <name>CacheData</name>
      <anchor>2aedafde9aa1abfd45423fa2b509a487</anchor>
      <arglist>(const void *data, size_t size, const char *type, const char *scope, uint32 id)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearCache</name>
      <anchor>026bda3760ef474ba81032e849bd40b8</anchor>
      <arglist>(const char *type=0, const char *scope=0, const uint32 *id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>6f55692170b6a800973260d3efe9dd98</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentScope</name>
      <anchor>6c368f02fd33a11c9758daa968e0e6ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentType</name>
      <anchor>757fe6fbfa9de749269ee522106ac508</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsReadOnly</name>
      <anchor>5354f443c37597e6f91c65aa435910c8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>ReadCache</name>
      <anchor>8720145834e76d05d858b7b4bac6b8b1</anchor>
      <arglist>(const char *type, const char *scope, uint32 id)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentScope</name>
      <anchor>9467a5d21d2f805217fe3017d3475349</anchor>
      <arglist>(const char *scope)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentType</name>
      <anchor>368ec9b2fdcf57ef7e74a90f60189646</anchor>
      <arglist>(const char *type)=0</arglist>
    </member>
    <member kind="function">
      <name>SetReadOnly</name>
      <anchor>013f35481ea7adb2edd11c3c556b6cf4</anchor>
      <arglist>(bool ro)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCamera</name>
    <base>iBase</base>
    <filename>structiCamera.html</filename>
    <member kind="function">
      <name>AddCameraSectorListener</name>
      <anchor>4d8527a29f0d87221b3de72797099bcf</anchor>
      <arglist>(iCameraSectorListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>d2c6a9f96923ab05b1b4bc7ab8668b2d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Correct</name>
      <anchor>44b84ec5d985df1e27681c31c3077e13</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCameraNumber</name>
      <anchor>b166fe4d9dd134cb8ac8a099de1db62d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFarPlane</name>
      <anchor>1afe79fc26b38ede040686abf5418abd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFOV</name>
      <anchor>e2527b4b0e55e40a90a19a9467bb287b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFOVAngle</name>
      <anchor>93498f196438987fa33aa67e79812edd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInvFOV</name>
      <anchor>0419eeef624f29bd69d0c7cae85bc53f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOnlyPortals</name>
      <anchor>5856e91fff07086203304d26fc2a6a66</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>212a03b2c86fadbb6d38c926abec9c7c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetShiftX</name>
      <anchor>b89c5197a15f27f6235836b85ffbe75b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetShiftY</name>
      <anchor>2e3b1e7c34b0bc4fa07ac96cf09cb975</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>2e6b1eb108ca920f04c6dafdf53a1776</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>39c734c8b8ed6fe791adc9305f4f20e9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>InvPerspective</name>
      <anchor>bb231a28f64c79a96e19adc4636a5fe0</anchor>
      <arglist>(const csVector2 &amp;p, float z) const =0</arglist>
    </member>
    <member kind="function">
      <name>InvPerspective</name>
      <anchor>846cfae93909c5bf93aecc70d459f506</anchor>
      <arglist>(const csVector2 &amp;p, float z, csVector3 &amp;v) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsMirrored</name>
      <anchor>19105d5e760e20e0dfeec7cd7916ab67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Move</name>
      <anchor>3ffbec96a2bdb1b70a35a6e02f8cbde4</anchor>
      <arglist>(const csVector3 &amp;v, bool cd=true)=0</arglist>
    </member>
    <member kind="function">
      <name>MoveUnrestricted</name>
      <anchor>d91b5e0841fd4992826d82e3aa6863ff</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>MoveWorld</name>
      <anchor>8d6db7001ce462a12e33085886b9e694</anchor>
      <arglist>(const csVector3 &amp;v, bool cd=true)=0</arglist>
    </member>
    <member kind="function">
      <name>MoveWorldUnrestricted</name>
      <anchor>e60d65f7e5cc538b3f3c06bcd463c20c</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>OnlyPortals</name>
      <anchor>c24a15670bd2e9efc9f8ddb21d56d3be</anchor>
      <arglist>(bool hop)=0</arglist>
    </member>
    <member kind="function">
      <name>Perspective</name>
      <anchor>d20cfa0371835cde47edba6bdba3372a</anchor>
      <arglist>(const csVector3 &amp;v) const =0</arglist>
    </member>
    <member kind="function">
      <name>Perspective</name>
      <anchor>ce969c4efc08e1dede95b238cc6a2fd6</anchor>
      <arglist>(const csVector3 &amp;v, csVector2 &amp;p) const =0</arglist>
    </member>
    <member kind="function">
      <name>QuerySceneNode</name>
      <anchor>ec8055b3a79a5ffe1097340cec91ddf0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveCameraSectorListener</name>
      <anchor>21fab56a5aecb3dbfb06b0de825741f4</anchor>
      <arglist>(iCameraSectorListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFarPlane</name>
      <anchor>7952a5d437462be573ee6815bcc2dfec</anchor>
      <arglist>(csPlane3 *fp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFOV</name>
      <anchor>5a23467a8387fe5f9be7ea45d3750d77</anchor>
      <arglist>(int fov, int width)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFOVAngle</name>
      <anchor>7e4a473230ea862e9760bcf034e3b528</anchor>
      <arglist>(float fov, int width)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMirrored</name>
      <anchor>8bb8f578937986aa71e83737e1fc1d8b</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPerspectiveCenter</name>
      <anchor>3059470e29160ab29cda3b05ed3caa46</anchor>
      <arglist>(float x, float y)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSector</name>
      <anchor>5bc035b003cb911dcdccae030cc8cb59</anchor>
      <arglist>(iSector *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>06016d7b730bb26825547032b8a7e4ef</anchor>
      <arglist>(const csOrthoTransform &amp;tr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCameraPosition</name>
    <base>iBase</base>
    <filename>structiCameraPosition.html</filename>
    <member kind="function">
      <name>ClearFarPlane</name>
      <anchor>d993d135ac27c64b16499d5ea7f90d69</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>8f4ad04b45a404c7f6475b273482ca41</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFarPlane</name>
      <anchor>ffa5ab4c49aca96e0fda8f5a130dea7c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetForwardVector</name>
      <anchor>2f68550836f774784dced4498599de73</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>739ab5871b57f912024b37b9f41e1f3d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>2658c3e8a7bade1203a58d95e1daad8e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUpwardVector</name>
      <anchor>7dae9e578708d9146d194240aaaa3c5f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>15f694525af59eb5501e511caaf08b20</anchor>
      <arglist>(iCamera *, iEngine *)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>5258cfb5d9061117888c00b5b208e2a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>049a3062ce70650dbbdb251866bc1941</anchor>
      <arglist>(const char *sector, const csVector3 &amp;pos, const csVector3 &amp;forward, const csVector3 &amp;upward)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFarPlane</name>
      <anchor>da700c6068310cfe2e2133303defac5a</anchor>
      <arglist>(csPlane3 *pl)=0</arglist>
    </member>
    <member kind="function">
      <name>SetForwardVector</name>
      <anchor>98da9ccc294ba36b191908ff0ab0380c</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>48ad5f673fa4ebd8218e32b972ae4d9a</anchor>
      <arglist>(const csVector3 &amp;p)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSector</name>
      <anchor>1d6f44a13c54826e358df70a5b3b5f32</anchor>
      <arglist>(const char *Name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUpwardVector</name>
      <anchor>c6267bbe939332a92e89cfe4921a580c</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCameraPositionList</name>
    <base>iBase</base>
    <filename>structiCameraPositionList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>95ab94c2b074c9e17df52ee9bdacfb9b</anchor>
      <arglist>(iCameraPosition *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>d8843793fd9944b5914a0b32c7c4ed08</anchor>
      <arglist>(iCameraPosition *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>5de4f2eb95e8ccc863e954d598c62b50</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>ccfb7d05d33cc3063a038e51fa313c14</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>d2918880c25b5b2fbe4e5ad80872dbcb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>NewCameraPosition</name>
      <anchor>e2f07c78bc282954a2d5619a60e0bfbd</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>28d8c9bd359f998044c5a4c13b16daff</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>47912c0cf50fc4a157c3adc94f800efd</anchor>
      <arglist>(iCameraPosition *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>f058f0282a137a2759465f53de7740e8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCameraSectorListener</name>
    <base>iBase</base>
    <filename>structiCameraSectorListener.html</filename>
    <member kind="function">
      <name>NewSector</name>
      <anchor>36695d918e207ebd19317c7dba4d6bc5</anchor>
      <arglist>(iCamera *camera, iSector *sector)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCEGUI</name>
    <base>iBase</base>
    <filename>structiCEGUI.html</filename>
    <member kind="function">
      <name>GetFontManagerPtr</name>
      <anchor>971528362753153cd6a8d8d973d4a757</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetGlobalEventSetPtr</name>
      <anchor>48351a50d36da41f1f4292e014bae6c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetImagesetManagerPtr</name>
      <anchor>4ab0750ff0df8592fd566a001a8d3832</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLoggerPtr</name>
      <anchor>ad60ef6a42cda8186ab9d0c99004baf0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMouseCursorPtr</name>
      <anchor>bd738fc44c8d478e186b562f628a3a53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSchemeManagerPtr</name>
      <anchor>e06ccacd86e4ef8255114fd06e2761b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSystemPtr</name>
      <anchor>5201fbfe67e75b0c69a0954a93ad699f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWindowFactoryManagerPtr</name>
      <anchor>5da29b23abdda6488c843aa2e26161dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWindowManagerPtr</name>
      <anchor>dcfc1d6ec4a5481eb0ba9f6190f92804</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>45fa2bf1e2d1128b69c4285ede1fc29b</anchor>
      <arglist>(iScript *script=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Render</name>
      <anchor>2aa630e9e88cf0e1e3b384001c4eaaba</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iClipper2D</name>
    <base>iBase</base>
    <filename>structiClipper2D.html</filename>
    <member kind="function">
      <name>ClipperType</name>
      <anchor>03ed976bdb8cd014a5dabccc06bd3730</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lipperPoly</name>
      <anchor>03ed976bdb8cd014a5dabccc06bd3730e0b781f11ae6a39b9efcfe103d52e7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>lipperBox</name>
      <anchor>03ed976bdb8cd014a5dabccc06bd37301ad4ee39e028ea58c417ba29820b0da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ClassifyBox</name>
      <anchor>f79ddb0aa5da86b8fe78d25395385de6</anchor>
      <arglist>(const csBox2 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>3bd59eeae178ed2b3af653f88b71e9aa</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount, csVertexStatus *OutStatus)=0</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>5868f2ecb9b6de52cb9a2fb27901ea66</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount, csBox2 &amp;BoundingBox)=0</arglist>
    </member>
    <member kind="function">
      <name>Clip</name>
      <anchor>2b9dcd9f97500ea210e434a2f5f02299</anchor>
      <arglist>(csVector2 *InPolygon, size_t InCount, csVector2 *OutPolygon, size_t &amp;OutCount)=0</arglist>
    </member>
    <member kind="function">
      <name>ClipInPlace</name>
      <anchor>372dfc98a91136aee698f9baaf2ed962</anchor>
      <arglist>(csVector2 *InPolygon, size_t &amp;InOutCount, csBox2 &amp;BoundingBox)=0</arglist>
    </member>
    <member kind="function">
      <name>GetClipperType</name>
      <anchor>7016695a49e465211d75df6224a17979</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetClipPoly</name>
      <anchor>8210d2f967bdd837630a6caccea43169</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>624994070bdb107a90f8902ba332a937</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsInside</name>
      <anchor>c0b0813e21123d4211d8cd093b8dd3ba</anchor>
      <arglist>(const csVector2 &amp;v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCollection</name>
    <base>iBase</base>
    <filename>structiCollection.html</filename>
    <member kind="function">
      <name>AddObject</name>
      <anchor>61a6b639a646bbd5b97ce3b06732fd03</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>FindObject</name>
      <anchor>88b9d717d03c5ea0ad2970c17d1f6bae</anchor>
      <arglist>(char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObject</name>
      <anchor>7ca961b310eb338b9d8b39860013fc71</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectCount</name>
      <anchor>196ffa5866638dd104225b714418fad6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>a28f7cdc3d3dcd8974c16e5fb07c0bbf</anchor>
      <arglist>(int i) const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>4a4f0724d2d854c1475987910f3c945b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCollectionList</name>
    <base>iBase</base>
    <filename>structiCollectionList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>7ae11319b60327f808858ebee0ba88fb</anchor>
      <arglist>(iCollection *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>8478b27a7d21850805a7820fa5bb7bb1</anchor>
      <arglist>(iCollection *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>ca22f36c9e9cb740bae14da616943d69</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>1ff5deade6ef1eb9fe53d2fe015670a9</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>4a15766aa1adf69ba0ea6acdb7099479</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>NewCollection</name>
      <anchor>35742d9ea419ffb3e30bbcf9c6b1396d</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>aa3e8f2ba68a6f80f640ec3a35c8911f</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>f367ea9bed28f6a2fd3cff9cc9eb64d3</anchor>
      <arglist>(iCollection *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>024df92cc3eda62608a0054baea1589f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCollider</name>
    <base>iBase</base>
    <filename>structiCollider.html</filename>
  </compound>
  <compound kind="class">
    <name>iCollideSystem</name>
    <base>iBase</base>
    <filename>structiCollideSystem.html</filename>
    <member kind="function">
      <name>Collide</name>
      <anchor>34744ad030fa6c98540ae26827fdc441</anchor>
      <arglist>(iCollider *collider1, const csReversibleTransform *trans1, iCollider *collider2, const csReversibleTransform *trans2)=0</arglist>
    </member>
    <member kind="function">
      <name>CollideRay</name>
      <anchor>8093a9a820b1bf567e96d6d50738f197</anchor>
      <arglist>(iCollider *collider, const csReversibleTransform *trans, const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>CollideSegment</name>
      <anchor>1119dd1fb105013170511669b9c52294</anchor>
      <arglist>(iCollider *collider, const csReversibleTransform *trans, const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCollider</name>
      <anchor>1e98e20452ce1b5a65c84de99e7c7a6e</anchor>
      <arglist>(iTerraFormer *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCollider</name>
      <anchor>f381b4b46f697bd015d592005da55244</anchor>
      <arglist>(iPolygonMesh *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCollisionPairCount</name>
      <anchor>75a82c7b2315a18f77605a1d1156483d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCollisionPairs</name>
      <anchor>c7a5042c629d9e2af4779adbc7a63ff1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetIntersectingTriangles</name>
      <anchor>88c867cf70c2f37adddb94805f7f12c7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOneHitOnly</name>
      <anchor>7fa1375fe5ee5af587d83129d772642d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ResetCollisionPairs</name>
      <anchor>f72f89a83eccdb79ab1aec8eca89128c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetOneHitOnly</name>
      <anchor>23dbedb7b9c40f558ec5ad89471e6204</anchor>
      <arglist>(bool o)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iColoredVertices</name>
    <base>iArrayChangeAll&lt; csSprite2DVertex &gt;</base>
    <filename>structiColoredVertices.html</filename>
  </compound>
  <compound kind="class">
    <name>iCommandLineParser</name>
    <base>iBase</base>
    <filename>structiCommandLineParser.html</filename>
    <member kind="function">
      <name>AddName</name>
      <anchor>b1c68ce1437771485a37afbeabb8fa16</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOption</name>
      <anchor>6a9dc0c50b8b749a811baf25b5bdaaad</anchor>
      <arglist>(const char *iName, const char *iValue)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAppDir</name>
      <anchor>5acb76c6b6fa5d8341484419f746cf85</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAppPath</name>
      <anchor>9cdab73efb60f1717cdef1063117263d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBoolOption</name>
      <anchor>2c5724a88f108f20c67bf0665e958871</anchor>
      <arglist>(const char *iName, bool defaultValue=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>59cf7c820eafbe300ede2d1838a13026</anchor>
      <arglist>(size_t iIndex=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOption</name>
      <anchor>d52917eda5e7f77ef3289840d68e5de2</anchor>
      <arglist>(const char *iName, size_t iIndex=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOptionName</name>
      <anchor>2fe876b28e464730c8de6ed3fe4c07e6</anchor>
      <arglist>(size_t iIndex) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetResourceDir</name>
      <anchor>d1c6d069c77096ff2fd1309b9b4aa549</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>8d25bc427fec78a269dde101db5531ab</anchor>
      <arglist>(int argc, const char *const argv[])=0</arglist>
    </member>
    <member kind="function">
      <name>ReplaceName</name>
      <anchor>c7ae0c3765b857d094b42331af2c6932</anchor>
      <arglist>(const char *iValue, size_t iIndex=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ReplaceOption</name>
      <anchor>772e8cdddbe4f7c4bddf824c0ef67995</anchor>
      <arglist>(const char *iName, const char *iValue, size_t iIndex=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>bed5ba8c694e129505b6d6174cd58344</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iComponent</name>
    <base>iBase</base>
    <filename>structiComponent.html</filename>
    <member kind="function">
      <name>Initialize</name>
      <anchor>b11e4707c25689ad1a88491a9ff09bf1</anchor>
      <arglist>(iObjectRegistry *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConfigFile</name>
    <base>iBase</base>
    <filename>structiConfigFile.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>2f9ffafeb0fb141317ccd4bcdf27a4c5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteKey</name>
      <anchor>be5a3cd2a0008b2b1a1d0bf6fadf26c3</anchor>
      <arglist>(const char *Key)=0</arglist>
    </member>
    <member kind="function">
      <name>Enumerate</name>
      <anchor>b7c4701d439cecfa848ee2d2d3069b53</anchor>
      <arglist>(const char *Subsection=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBool</name>
      <anchor>571a6754e0628698e00939db8e978aab</anchor>
      <arglist>(const char *Key, bool Def=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>1340a49a3b842a014efddfee86046b24</anchor>
      <arglist>(const char *Key) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEOFComment</name>
      <anchor>db1a8f5c2ac5fdcce859df5538a4d654</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>2183db4f11cdcaf8b9dd8b92618585e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>c829e1af3a2a530eef875a969c9b24ac</anchor>
      <arglist>(const char *Key, float Def=0.0) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>058ef45008514b8fab06e5b3bf126238</anchor>
      <arglist>(const char *Key, int Def=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStr</name>
      <anchor>f1907f764a4fd50addec669a214491a6</anchor>
      <arglist>(const char *Key, const char *Def=&quot;&quot;) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTuple</name>
      <anchor>502760e45145e28b475c9217399c39a3</anchor>
      <arglist>(const char *Key) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVFS</name>
      <anchor>6d13df20f0442c1fbf65f59e4daac67a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>KeyExists</name>
      <anchor>ea44c9e9825898dffa3024247e247e6f</anchor>
      <arglist>(const char *Key) const =0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>0b1a3f6ebd3ccaa9be019fb616156ad7</anchor>
      <arglist>(const char *iFileName, iVFS *=0, bool Merge=false, bool NewWins=true)=0</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>cf862ed68d57a0e307e059ac049b8202</anchor>
      <arglist>(const char *iFileName, iVFS *=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>e1a3711352a01b8e5611fb6d0d58a351</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetBool</name>
      <anchor>075259cdd90c949538041f6bd0d98722</anchor>
      <arglist>(const char *Key, bool Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetComment</name>
      <anchor>0c6dd11917647182fb9632264e588c42</anchor>
      <arglist>(const char *Key, const char *Text)=0</arglist>
    </member>
    <member kind="function">
      <name>SetEOFComment</name>
      <anchor>0ed1957a7cdd5b9de17c92dd4b7d2a82</anchor>
      <arglist>(const char *Text)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFileName</name>
      <anchor>020ae0fa1c3ce264bd46ed90561c4dbd</anchor>
      <arglist>(const char *, iVFS *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFloat</name>
      <anchor>d6fddd5fd6223bd179c1da1f101464a6</anchor>
      <arglist>(const char *Key, float Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetInt</name>
      <anchor>16d2d2c324f71e232fd86ccc42b678f0</anchor>
      <arglist>(const char *Key, int Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStr</name>
      <anchor>98cd57c950aa067f5ffa51e7b22a8f6e</anchor>
      <arglist>(const char *Key, const char *Val)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTuple</name>
      <anchor>5ceeff4b4cdcf00c38d1a4ed7a1a92b7</anchor>
      <arglist>(const char *Key, iStringArray *Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SubsectionExists</name>
      <anchor>aa086cbf83a800a3e9ed9fc88740b376</anchor>
      <arglist>(const char *Subsection) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConfigIterator</name>
    <base>iBase</base>
    <filename>structiConfigIterator.html</filename>
    <member kind="function">
      <name>GetBool</name>
      <anchor>354ece7957e771b8fa0e616c99409d08</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetComment</name>
      <anchor>55dc4809718fb2e1d205bf1cf3be59f9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetConfigFile</name>
      <anchor>7408c25ed5507f5b5cfb331873385e76</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFloat</name>
      <anchor>81d2d906f24123bf2af46c963fe40058</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInt</name>
      <anchor>2dc4b11a259b1e9afc586554f7bf0bcd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKey</name>
      <anchor>2fc96577deafa1c4b73ebc6736503b73</anchor>
      <arglist>(bool Local=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStr</name>
      <anchor>2d49f0489da4d331978d54c2791bbdb9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSubsection</name>
      <anchor>4fee237b80c2c9d56003e54e6bf66097</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTuple</name>
      <anchor>3f3727e1b89edc96744c4847aed66c9a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>c452088aeafb8b132d2b99bd700f6fea</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>5be26e40e64e7a13b156431fb54e0d25</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Rewind</name>
      <anchor>f1398cfdc4aeb4c85c36263035c16c11</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConfigManager</name>
    <base>iConfigFile</base>
    <filename>structiConfigManager.html</filename>
    <member kind="function">
      <name>@75</name>
      <anchor>bb63de714ca81f05e102b2f14d373aaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddDomain</name>
      <anchor>f2e9c4b81e5f192067111be15405f3af</anchor>
      <arglist>(char const *path, iVFS *, int priority)=0</arglist>
    </member>
    <member kind="function">
      <name>AddDomain</name>
      <anchor>38c9859cee5430105f30496ed83e0b61</anchor>
      <arglist>(iConfigFile *, int priority)=0</arglist>
    </member>
    <member kind="function">
      <name>FlushRemoved</name>
      <anchor>05f0057857b450bfd469d32a56eb7a57</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDomainPriority</name>
      <anchor>e925a10ae6140ea20e2ddb37c8ab2f89</anchor>
      <arglist>(iConfigFile *) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDomainPriority</name>
      <anchor>9565a51ea7e9cb94e1c7c16e8b233058</anchor>
      <arglist>(char const *path) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDynamicDomain</name>
      <anchor>0c7f32314629cb508a23ecdc7ab077ed</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDynamicDomainPriority</name>
      <anchor>c4a90dc6a128b6bcf4a3fe0bf675e08c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>LookupDomain</name>
      <anchor>b64fecc581b48307ee6fe808282bb8e9</anchor>
      <arglist>(char const *path) const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDomain</name>
      <anchor>9d0c9ffda43825b08df7f26777feac2e</anchor>
      <arglist>(char const *path)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDomain</name>
      <anchor>cce61292e4db86ab9c9964bb5fe4ddd8</anchor>
      <arglist>(iConfigFile *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDomainPriority</name>
      <anchor>44b549eba61bf4b67ddd1bcf1bc17c75</anchor>
      <arglist>(iConfigFile *, int priority)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDomainPriority</name>
      <anchor>bc3935c16447bc824f63b3965127ba49</anchor>
      <arglist>(char const *path, int priority)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDynamicDomain</name>
      <anchor>88aa2f5b6f581788e1c3b695811cfd50</anchor>
      <arglist>(iConfigFile *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDynamicDomainPriority</name>
      <anchor>4b423182a5bd39f6764eff2fa500bf27</anchor>
      <arglist>(int priority)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConsoleExecCallback</name>
    <base>iBase</base>
    <filename>structiConsoleExecCallback.html</filename>
    <member kind="function">
      <name>Execute</name>
      <anchor>83fe9f669f45f52811518ddc91052ba5</anchor>
      <arglist>(const char *cmd)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConsoleInput</name>
    <base>iBase</base>
    <filename>structiConsoleInput.html</filename>
    <member kind="function">
      <name>Bind</name>
      <anchor>1f5b8daedccffc7e7575590d49daabc7</anchor>
      <arglist>(iConsoleOutput *console)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>5a0e25d466cd2f4c98d631702de6fdb3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBufferSize</name>
      <anchor>9a29c96a7f9c5cced82b309874b91acd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurLine</name>
      <anchor>f3d214c434d6eaa30f766a7a93f08e87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetExecuteCallback</name>
      <anchor>1a9cf5575d044aaec51dcfdd8c739d98</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetText</name>
      <anchor>e27953cf4fdfacec49f2bc7be71db810</anchor>
      <arglist>(int line=-1) const =0</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>0968f75aafe3f6cd54db2ef58c5f8738</anchor>
      <arglist>(iEvent &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBufferSize</name>
      <anchor>962536edcdf9b037df484fa8fe90f66f</anchor>
      <arglist>(int size)=0</arglist>
    </member>
    <member kind="function">
      <name>SetExecuteCallback</name>
      <anchor>23c3024e4c7fa659478175ecf9b46a9e</anchor>
      <arglist>(iConsoleExecCallback *callback)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPrompt</name>
      <anchor>e6649300f875a19b56a070fe922205c3</anchor>
      <arglist>(const char *prompt)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConsoleOutput</name>
    <base>iBase</base>
    <filename>structiConsoleOutput.html</filename>
    <member kind="function">
      <name>AutoUpdate</name>
      <anchor>1632713c98a0d4096427ca3c58d1392d</anchor>
      <arglist>(bool autoUpdate)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>c1be1a129c8e5ed871c1890cef6fd705</anchor>
      <arglist>(bool wipe=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Draw2D</name>
      <anchor>5f379d5e33fb73741f2d471bdd080ab8</anchor>
      <arglist>(csRect *oRect=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Draw3D</name>
      <anchor>44f42b38f0132f2b00096ce3a39da4ac</anchor>
      <arglist>(csRect *oRect=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCursorStyle</name>
      <anchor>210a09a7ec390582fdacc1c08596759b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFont</name>
      <anchor>3638a872005fb8cb8c1e5638de3b915c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLine</name>
      <anchor>7b299342fba17ed6bc8edb8ececa7382</anchor>
      <arglist>(int line=-1) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaxLineWidth</name>
      <anchor>28c97445fb74e2353af20a0e36828e43</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTopLine</name>
      <anchor>b9103719ad671df0641c900e6e9a2285</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransparency</name>
      <anchor>6c7a6d7985561ef359902f72b8170ce8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVisible</name>
      <anchor>423d3c30d842d32d6550a35ef371ea79</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PerformExtension</name>
      <anchor>9407328b722a9c5525f92b65d50c7c1c</anchor>
      <arglist>(const char *command,...)=0</arglist>
    </member>
    <member kind="function">
      <name>PerformExtensionV</name>
      <anchor>c902dd0d4410f09040ceb38a92a4f4b4</anchor>
      <arglist>(const char *command, va_list)=0</arglist>
    </member>
    <member kind="function">
      <name>PutText</name>
      <anchor>9f08d35b1c7bae5d026fba47daa80f37</anchor>
      <arglist>(const char *text,...)=0</arglist>
    </member>
    <member kind="function">
      <name>PutTextV</name>
      <anchor>77abf6bbd53d30a6a3167c4144b845f7</anchor>
      <arglist>(const char *text, va_list args)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterWatcher</name>
      <anchor>3cc6fc80e581764182e9d69098b0cfc9</anchor>
      <arglist>(iConsoleWatcher *)=0</arglist>
    </member>
    <member kind="function">
      <name>ScrollTo</name>
      <anchor>0a6c077f8f5333e97160387aaaaac1c8</anchor>
      <arglist>(int topLine, bool snap=true)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBufferSize</name>
      <anchor>ea51c84cd36dcb66db2f15a5d5800777</anchor>
      <arglist>(int maxLines)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCursorPos</name>
      <anchor>c55c7821252f400cfaba649416bcc674</anchor>
      <arglist>(int charNo)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCursorStyle</name>
      <anchor>aab26286b0487d58e3377c452f029b98</anchor>
      <arglist>(int style)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFont</name>
      <anchor>64482f142ac27745bf746702c1fa42c1</anchor>
      <arglist>(iFont *font)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransparency</name>
      <anchor>aa3a25dc7c42913280742c6b0b41c8df</anchor>
      <arglist>(bool transp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVisible</name>
      <anchor>439fedb2f76223f5792351608e33fcc1</anchor>
      <arglist>(bool show)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iConsoleWatcher</name>
    <base>iBase</base>
    <filename>structiConsoleWatcher.html</filename>
    <member kind="function">
      <name>ConsoleVisibilityChanged</name>
      <anchor>39b717074bdad23074e989eca96d7a37</anchor>
      <arglist>(iConsoleOutput *, bool visible)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCrossHalo</name>
    <base>iBase</base>
    <filename>structiCrossHalo.html</filename>
    <member kind="function">
      <name>GetCrossFactor</name>
      <anchor>9a2b667ad8060f3fd7fbd6a8ae38cb1d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetIntensityFactor</name>
      <anchor>d18cb563147c0a2c434343f53ab56afa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetCrossFactor</name>
      <anchor>2e93bf90d5ff6bce2135ff18757c79d0</anchor>
      <arglist>(float i)=0</arglist>
    </member>
    <member kind="function">
      <name>SetIntensityFactor</name>
      <anchor>636f9977b93a0858b6391d473196070b</anchor>
      <arglist>(float i)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCursor</name>
    <base>iBase</base>
    <filename>structiCursor.html</filename>
    <member kind="function">
      <name>GetBGColor</name>
      <anchor>281942a563a0d060cde2670dd8f56dd0</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCursorImage</name>
      <anchor>b93ce20426b07eeeef7e20a19ccbe75d</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFGColor</name>
      <anchor>1ffaaea912f8182832349b9c90cc6cf1</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetHotSpot</name>
      <anchor>403a969caee78ea3fd7283588f3da8a4</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>690ea68462ea68901a03b9dce8f98488</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransparency</name>
      <anchor>e0b0575dac2ac89957eaeaf33e432287</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>ParseConfigFile</name>
      <anchor>949bf7e4dc835544ab14689c6ec34858</anchor>
      <arglist>(iConfigFile *)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllCursors</name>
      <anchor>eb243efe50e32012ab0058b9c1e7eb8a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveCursor</name>
      <anchor>a0a77374c2d63cc5167937db889a98a2</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>309b45fd1b56cf88f796e8d765d97353</anchor>
      <arglist>(const char *name, csRGBcolor fg, csRGBcolor bg)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCursor</name>
      <anchor>48344b2df7dac77684b67acc096ca866</anchor>
      <arglist>(const char *name, iImage *image, csRGBcolor *keycolor=0, csVector2 hotspot=csVector2(0, 0), uint8 transparency=0, csRGBcolor fg=csRGBcolor(255, 255, 255), csRGBcolor bg=csRGBcolor(0, 0, 0))=0</arglist>
    </member>
    <member kind="function">
      <name>SetHotSpot</name>
      <anchor>691c68d49f982a0e7e76f258fe2da69c</anchor>
      <arglist>(const char *name, csVector2 hotspot)=0</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>60c74d1eb63637fa834355126bd5fb14</anchor>
      <arglist>(const char *name, csRGBcolor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransparency</name>
      <anchor>4ccf9bcceff754fcca33fd7a2acf2528</anchor>
      <arglist>(const char *name, uint8 transparancy)=0</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>13690fa9bef1a2d34ffa87001ad30ab7</anchor>
      <arglist>(iGraphics3D *, bool ForceEmulation=false)=0</arglist>
    </member>
    <member kind="function">
      <name>SwitchCursor</name>
      <anchor>761485f78c6b03f2da959bb8c9ad1553</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iCurve</name>
    <base>iBase</base>
    <filename>structiCurve.html</filename>
    <member kind="function">
      <name>GetMaterial</name>
      <anchor>84f282fd3c16d5f029b100c74d3e3062</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>34a1a09abaac1cac2340780a12d02730</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>6db99d9123a2e9cd0d22587d280db1c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>0ad33cf538ff9c797fe5b3d142e8799d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetControlPoint</name>
      <anchor>da52ba5b489e2cbe8b8c88c610c90e95</anchor>
      <arglist>(int idx, int control_id)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterial</name>
      <anchor>e2af40f781041ce789abdeaa51cf05d7</anchor>
      <arglist>(iMaterialWrapper *mat)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVertex</name>
      <anchor>679bc94ae18719583f9c71926f0f1d5e</anchor>
      <arglist>(int idx, int vt)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDataBuffer</name>
    <base>iBase</base>
    <filename>structiDataBuffer.html</filename>
    <member kind="function">
      <name>GetData</name>
      <anchor>fa904d74bb662c7384fdfebf585fb4a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInt8</name>
      <anchor>bca78757222fc5b3ae5ad9e1a9faf330</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>939ef02696252badf2b5d0d19d3c9012</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUint8</name>
      <anchor>773b3fbb4892aae9c2632190eb463833</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>operator *</name>
      <anchor>945561e89d3bcf1babcd97733b9082ee</anchor>
      <arglist>() const </arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDebugHelper</name>
    <base>iBase</base>
    <filename>structiDebugHelper.html</filename>
    <member kind="function">
      <name>Benchmark</name>
      <anchor>25c2acc4eb241ee157d4ee44a18ec076</anchor>
      <arglist>(int num_iterations)=0</arglist>
    </member>
    <member kind="function">
      <name>DebugCommand</name>
      <anchor>ef3ec51d8b43aec5a72607f8d1cd05f5</anchor>
      <arglist>(const char *cmd)=0</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>092959d6706ec98e4758f1cfd4efc413</anchor>
      <arglist>(iGraphics3D *g3d)=0</arglist>
    </member>
    <member kind="function">
      <name>Dump</name>
      <anchor>8f8586bce8979a6af565408a803090a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSupportedTests</name>
      <anchor>b1be8b6d44cbc36aa342283a879090a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>StateTest</name>
      <anchor>39f26006470eca6787836a607142c7d5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnitTest</name>
      <anchor>aac65ad9e321a6edba9843f8bfd51702</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDocument</name>
    <base>iBase</base>
    <filename>structiDocument.html</filename>
    <member kind="function">
      <name>Changeable</name>
      <anchor>2d2d1a9f40572e6e4c1704efbfede5f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>7a3b311d687285d6252727887996a39b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateRoot</name>
      <anchor>e16013f5679cfcd6ed7a23797b7c76de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRoot</name>
      <anchor>60039523bba5207661cd04e89fd996cc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>695484b6a5e5d1538bd07cde1666ebb3</anchor>
      <arglist>(const char *buf, bool collapse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>9a311c0d37f23e2b6d33c13c2f8dc750</anchor>
      <arglist>(iString *str, bool collapse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>55896edfa6e24b56dd099bf75e2dcf84</anchor>
      <arglist>(iDataBuffer *buf, bool collapse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>41697f135ccbcd45ece2789186ba5a79</anchor>
      <arglist>(iFile *file, bool collapse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>99ee40858db02ab380ad5f19ab78acbe</anchor>
      <arglist>(iVFS *vfs, const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>a008abf96f2767bbda2911d8fead4f24</anchor>
      <arglist>(iString *str)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>1ba88d38ecfb4e6e46b72d08c8bbe3c2</anchor>
      <arglist>(iFile *file)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDocumentAttribute</name>
    <base>iBase</base>
    <filename>structiDocumentAttribute.html</filename>
    <member kind="function">
      <name>GetName</name>
      <anchor>43d3611004d9f37a47fa99a5a1080f55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>449d39099c4babd5ac7f82d0702f6c39</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetValueAsBool</name>
      <anchor>0134cb3c0c37cf53da5a21aef93a219a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetValueAsFloat</name>
      <anchor>2f087eb33c24e0ddbd764a8de43b4cd9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetValueAsInt</name>
      <anchor>b8dab64c725f418fef6e18f233127ac4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>68f6182c10af91b19ac33915873f44aa</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>3a02605f0afd024645de1ba2aef86bce</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsFloat</name>
      <anchor>73da4f5ba204a78f9722565083ff9378</anchor>
      <arglist>(float f)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsInt</name>
      <anchor>7aadf9e5775a6555dc6605c7cabd7772</anchor>
      <arglist>(int v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDocumentAttributeIterator</name>
    <base>iBase</base>
    <filename>structiDocumentAttributeIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>76097517fa86c1043ba483b4de184bce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>5fe755431ab17b6a254f6c828c065e4a</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDocumentNode</name>
    <base>iBase</base>
    <filename>structiDocumentNode.html</filename>
    <member kind="function">
      <name>CreateNodeBefore</name>
      <anchor>d0ce2e3bb16086e54fb1b48d2a14b10c</anchor>
      <arglist>(csDocumentNodeType type, iDocumentNode *before=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Equals</name>
      <anchor>30e738959ed68b1ab8e942ff335d67d3</anchor>
      <arglist>(iDocumentNode *other)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttribute</name>
      <anchor>86b59398e8193b41ace0f05092fd44e3</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributes</name>
      <anchor>9463d8ca1424ab5445dfb3ca17ead61d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValue</name>
      <anchor>41651de583fb1c5956450c4c9664482b</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValueAsBool</name>
      <anchor>69940b2e70c1d09ca2078eb3e66b7e0c</anchor>
      <arglist>(const char *name, bool defaultvalue=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValueAsFloat</name>
      <anchor>29e14141c0a083af47a93742e8a9dab7</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeValueAsInt</name>
      <anchor>62a20d58cbceb33904990ac32d60bf99</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetContentsValue</name>
      <anchor>a6b07daa8d45431b7db26cdb3cab2907</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetContentsValueAsFloat</name>
      <anchor>aadde1fe5f529891c4b330f81f04c8f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetContentsValueAsInt</name>
      <anchor>1b596cb445c5f3359af7eec7a58c5c35</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetNode</name>
      <anchor>77e9924d8e13f97d685ac19c040f613e</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNodes</name>
      <anchor>6b1bcf5b03214a5bd5ef965c7e82e352</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNodes</name>
      <anchor>e458462ca2357d0fd96fc9c31492bdcc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetParent</name>
      <anchor>746c9ddc20fb873f5e506c3073ab3942</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>01bdda169c7e67a2427fdc745c29d980</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>001037e1e4e663de3425b5f2da4bb3bb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAttribute</name>
      <anchor>87569d3d384e77e9521d5ab018033671</anchor>
      <arglist>(const csRef&lt; iDocumentAttribute &gt; &amp;attr)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAttributes</name>
      <anchor>16d15130c08cb83ba113b3dc8f14e658</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveNode</name>
      <anchor>66a3dc2b5163a6323c0aeab989929112</anchor>
      <arglist>(const csRef&lt; iDocumentNode &gt; &amp;child)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveNodes</name>
      <anchor>d2cf284535c1d53966779b58383a2b8c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveNodes</name>
      <anchor>e74d9d743192f8bad8cff37ef057b63a</anchor>
      <arglist>(csRef&lt; iDocumentNodeIterator &gt; children)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttribute</name>
      <anchor>bee95c0bdfcdb6f1faf80d0ad0a67b54</anchor>
      <arglist>(const char *name, const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttributeAsFloat</name>
      <anchor>bc2d86689d6d2f3633079315543f2c0a</anchor>
      <arglist>(const char *name, float value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttributeAsInt</name>
      <anchor>b6f5406b4001af7eff706a69c176a4d3</anchor>
      <arglist>(const char *name, int value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>bd592bb2346da560dbbe5f0c98bc60ff</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsFloat</name>
      <anchor>1994b56c06980134d9a49487bf578dc9</anchor>
      <arglist>(float value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValueAsInt</name>
      <anchor>b501e17db6ec2e58f42b9d1f5db5da7b</anchor>
      <arglist>(int value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDocumentNodeIterator</name>
    <base>iBase</base>
    <filename>structiDocumentNodeIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>b3e8b1198d6504e948bffee655107212</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>02894065434c2f3258dcffd4437ef460</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDocumentSystem</name>
    <base>iBase</base>
    <filename>structiDocumentSystem.html</filename>
    <member kind="function">
      <name>CreateDocument</name>
      <anchor>bd7da32b9b25a5c260c2c27db90b1126</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynamics</name>
    <base>iBase</base>
    <filename>structiDynamics.html</filename>
    <member kind="function">
      <name>CreateSystem</name>
      <anchor>2fadaa87e6ec28f8e000fd0c2f153d4b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindSystem</name>
      <anchor>7cc509f83eb59413a3e4fa3f7df6a273</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSystem</name>
      <anchor>1b8f2d80d49a394c0773966fca56d4e9</anchor>
      <arglist>(iDynamicSystem *system)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSystems</name>
      <anchor>c06216f58781c4684ac444a5c7c5be80</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Step</name>
      <anchor>f16841850e6b63e6f12b377812003f1d</anchor>
      <arglist>(float stepsize)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynamicsColliderCollisionCallback</name>
    <base>iBase</base>
    <filename>structiDynamicsColliderCollisionCallback.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynamicsCollisionCallback</name>
    <base>iBase</base>
    <filename>structiDynamicsCollisionCallback.html</filename>
    <member kind="function">
      <name>Execute</name>
      <anchor>f7d25a3d79a5e2726822b71a47883287</anchor>
      <arglist>(iRigidBody *thisbody, iRigidBody *otherbody, const csVector3 &amp;pos, const csVector3 &amp;normal, float depth)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynamicsMoveCallback</name>
    <base>iBase</base>
    <filename>structiDynamicsMoveCallback.html</filename>
  </compound>
  <compound kind="class">
    <name>iDynamicsSystemCollider</name>
    <base>iBase</base>
    <filename>structiDynamicsSystemCollider.html</filename>
    <member kind="function">
      <name>CreateBoxGeometry</name>
      <anchor>0aca5001dd3e09a3e5de9d3058399957</anchor>
      <arglist>(const csVector3 &amp;box_size)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCCylinderGeometry</name>
      <anchor>f1b3359dcd7e75069de18659a18e433e</anchor>
      <arglist>(float length, float radius)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshGeometry</name>
      <anchor>4424acb763e59e18ff64fa243bba9277</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>CreatePlaneGeometry</name>
      <anchor>f70dd646821553ff034cb09449589d50</anchor>
      <arglist>(const csPlane3 &amp;plane)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSphereGeometry</name>
      <anchor>d94e94d62f57a37512a33a1de4f78821</anchor>
      <arglist>(const csSphere &amp;sphere)=0</arglist>
    </member>
    <member kind="function">
      <name>FillWithColliderGeometry</name>
      <anchor>825212f0de265f9978d987b4802cbf51</anchor>
      <arglist>(csRef&lt; iGeneralFactoryState &gt; genmesh_fact)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBoxGeometry</name>
      <anchor>12f36be26a5e11b9bff33853e39359f1</anchor>
      <arglist>(csVector3 &amp;size)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCylinderGeometry</name>
      <anchor>722bdc408799b36bc76e1fbf744ae7d4</anchor>
      <arglist>(float &amp;length, float &amp;radius)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDensity</name>
      <anchor>ba11c29e72d6d0b71f44b0661611d0cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetElasticity</name>
      <anchor>93dcd98eae92ab252bd704d405ab35f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFriction</name>
      <anchor>dad21661870e64fa11706198f55a6e4c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetGeometryType</name>
      <anchor>5e6813d15f7bdb609989566d7310d72f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLocalTransform</name>
      <anchor>40b5bf6f442265ad814b928aa0dc83f6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPlaneGeometry</name>
      <anchor>ad4dfd752c8b6c7c33b42fce21370f23</anchor>
      <arglist>(csPlane3 &amp;plane)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSoftness</name>
      <anchor>6878fde30bf26d1a6337bef7a5571bd2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSphereGeometry</name>
      <anchor>5a5b9cfd7caed07a65ceff02e1b2c664</anchor>
      <arglist>(csSphere &amp;sphere)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>1634ed240cfdad127ce6d8d585cb8524</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsStatic</name>
      <anchor>9cefb66f5cf34672611193084e733a23</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>MakeDynamic</name>
      <anchor>bacbf5d72adde21459ac613e4438058a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>MakeStatic</name>
      <anchor>ec896a4a0730edf160626706aa1dc3df</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetDensity</name>
      <anchor>176e2cef8c2bc3fec233600e0bc9f59a</anchor>
      <arglist>(float density)=0</arglist>
    </member>
    <member kind="function">
      <name>SetElasticity</name>
      <anchor>d936a8e6bdc90ff4eb39d1b947c298e4</anchor>
      <arglist>(float elasticity)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFriction</name>
      <anchor>0b19ecdadd7c4bbfd6a8ae674cce08f5</anchor>
      <arglist>(float friction)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSoftness</name>
      <anchor>39be28e7351064259f5cd92859a1ff62</anchor>
      <arglist>(float softness)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>da6a07db59541283bd45d8361d6bd5f9</anchor>
      <arglist>(const csOrthoTransform &amp;trans)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iDynamicSystem</name>
    <base>iBase</base>
    <filename>structiDynamicSystem.html</filename>
    <member kind="function">
      <name>AttachCollider</name>
      <anchor>bd16f41cc92cba534dde08c84cd2275d</anchor>
      <arglist>(iDynamicsSystemCollider *collider)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderBox</name>
      <anchor>3d08b869bc7bb1c538d1c7708c38ce43</anchor>
      <arglist>(const csVector3 &amp;size, const csOrthoTransform &amp;trans, float friction, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderCylinder</name>
      <anchor>22c05542e9f0869b31d60371f87f092a</anchor>
      <arglist>(float length, float radius, const csOrthoTransform &amp;trans, float friction, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderMesh</name>
      <anchor>9e4cb1cad040deacaf02df97ec55c939</anchor>
      <arglist>(iMeshWrapper *mesh, const csOrthoTransform &amp;trans, float friction, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderPlane</name>
      <anchor>e9eddc879b08eed823d378477d1e5f6d</anchor>
      <arglist>(const csPlane3 &amp;plane, float friction, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderSphere</name>
      <anchor>c6af95c792b5d751b056537347deb0eb</anchor>
      <arglist>(float radius, const csVector3 &amp;offset, float friction, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateBody</name>
      <anchor>291a3b0f3f65d25d290bc6511291d60a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCollider</name>
      <anchor>f14bd22e1450bdb97c1e37deee233052</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateGroup</name>
      <anchor>2e3319edfec1797abc82a3112ca71998</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateJoint</name>
      <anchor>9f4156c2ab6332edcfffb5ac1f43edfb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyCollider</name>
      <anchor>96e0c5dc2e70c631ee2582876c973a01</anchor>
      <arglist>(iDynamicsSystemCollider *collider)=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyColliders</name>
      <anchor>3f5ea0a9b0986b31f6e2fe9e94be502e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>EnableAutoDisable</name>
      <anchor>9f48d7826e2f78f59f156e4e23d61907</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>FindBody</name>
      <anchor>a969e3f449c2429d4baf24e4ed44c1ad</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBody</name>
      <anchor>c42c7efb36cda2f22178821215965127</anchor>
      <arglist>(unsigned int index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBodysCount</name>
      <anchor>845d585a34eae20913460776f1379155</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCollider</name>
      <anchor>17c0960be4fe5c9fef6aaa081d190e89</anchor>
      <arglist>(unsigned int index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColliderCount</name>
      <anchor>b38ea552238219cd4b6056bc10a674bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultMoveCallback</name>
      <anchor>1b876631a683ee7a24dcef382aabdbb6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetGravity</name>
      <anchor>3dabe0b6ddfb9a64a670d65346943199</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLinearDampener</name>
      <anchor>0609aa3cde5196df7d58e3cba3854eac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRollingDampener</name>
      <anchor>35056b9679654f5be94b0d346822f957</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>2acb7d6f87fcd7d33fbb5a5579fab047</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveBody</name>
      <anchor>0c3df60197d406c1ea31577547b67657</anchor>
      <arglist>(iRigidBody *body)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveGroup</name>
      <anchor>727a7f6ce023f21f7b71de4a7d072dd2</anchor>
      <arglist>(iBodyGroup *group)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>3681fcca08aaf2d214fc374fef035300</anchor>
      <arglist>(iJoint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAutoDisableParams</name>
      <anchor>9da628db607de6c8424e3f20847f001f</anchor>
      <arglist>(float linear, float angular, int steps, float time)=0</arglist>
    </member>
    <member kind="function">
      <name>SetGravity</name>
      <anchor>984ef4b916592ea9a4d4228334008bfb</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLinearDampener</name>
      <anchor>04d0000cf75b84fe6352e57386b82d78</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRollingDampener</name>
      <anchor>043c42e0a314dfe25c79151861923636</anchor>
      <arglist>(float d)=0</arglist>
    </member>
    <member kind="function">
      <name>Step</name>
      <anchor>5ed29beeb38862085f77b0eecc83f86c</anchor>
      <arglist>(float stepsize)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitBox</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitBox.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>fe48b446125aed1e8da91ce376802481</anchor>
      <arglist>(csVector3 &amp;min, csVector3 &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>e5184996a3fe9f5c33ecca463d9e513e</anchor>
      <arglist>(const csVector3 &amp;min, const csVector3 &amp;max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitCone</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitCone.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>2296197a41c4069ef88b7405f760847b</anchor>
      <arglist>(csVector3 &amp;origin, float &amp;elevation, float &amp;azimuth, float &amp;aperture, float &amp;min, float &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>54058d15c2c560d639fb3ca33d3dd87f</anchor>
      <arglist>(const csVector3 &amp;origin, float elevation, float azimuth, float aperture, float min, float max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitCylinder</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitCylinder.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>360e120cdce93d5c717e7aa6e481a9c1</anchor>
      <arglist>(csVector3 &amp;start, csVector3 &amp;end, float &amp;min, float &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>752c3859033e83dd29fbeedbd7c1f8ba</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, float min, float max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitCylinderTangent</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitCylinderTangent.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>131905158f8e5df72102c85f0c5aa568</anchor>
      <arglist>(csVector3 &amp;start, csVector3 &amp;end, float &amp;min, float &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>597eac35b72c99af84afc959f81f7613</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, float min, float max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitFactoryState</name>
    <base>iBase</base>
    <filename>structiEmitFactoryState.html</filename>
    <member kind="function">
      <name>CreateBox</name>
      <anchor>477da604ea51fd65cd5adc116bb1d716</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCone</name>
      <anchor>516ed132235b01bca42fdb12d7109c31</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCylinder</name>
      <anchor>b99bf508bd4f02b7ebe7fc5979de1ff5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCylinderTangent</name>
      <anchor>ee579d8412505ba2ae0ad07f9289b0d2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateFixed</name>
      <anchor>68a723668a9d2c566ab652a87e8e33f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateLine</name>
      <anchor>cc65b5d4ea67b1578791ac39e202c97d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMix</name>
      <anchor>e352d9ab557998fbd1957424559db0e7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSphere</name>
      <anchor>fc274d90eaf89c179e0e894533b97150</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSphereTangent</name>
      <anchor>32cee4eb0ccc5dcf9bd9530f9181d55e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitFixed</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitFixed.html</filename>
    <member kind="function">
      <name>SetValue</name>
      <anchor>f5e00a8f7acc45fe6c73e3b5e65598c2</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitGen3D</name>
    <base>iBase</base>
    <filename>structiEmitGen3D.html</filename>
    <member kind="function">
      <name>GetValue</name>
      <anchor>87668387d6904e857bae11d8f05066a5</anchor>
      <arglist>(csVector3 &amp;value, csVector3 &amp;given)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitLine</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitLine.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>29fdd9d0b9d54c3444c298209ddab2fd</anchor>
      <arglist>(csVector3 &amp;start, csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>182c3ae50a9db51afbba6f14e75793d1</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitMix</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitMix.html</filename>
    <member kind="function">
      <name>AddEmitter</name>
      <anchor>09b31847a408f7f229d89e8211b71207</anchor>
      <arglist>(float weight, iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>AdjustEmitterWeight</name>
      <anchor>96800c19dc70bef25b9e737880defe25</anchor>
      <arglist>(int num, float weight)=0</arglist>
    </member>
    <member kind="function">
      <name>GetContent</name>
      <anchor>c58bd67c8d0b5b0eefff825722f7def1</anchor>
      <arglist>(int num, float &amp;weight, iEmitGen3D *&amp;emit)=0</arglist>
    </member>
    <member kind="function">
      <name>GetEmitterCount</name>
      <anchor>110abb5d0b0404a58fc41950e7e8566b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTotalWeight</name>
      <anchor>302d614782e9637a61969248f494d705</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveEmitter</name>
      <anchor>2551c1b511282657c38532a342c9b2df</anchor>
      <arglist>(int num)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitSphere</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitSphere.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>af66d47af178202a4e48c1e3f28932d4</anchor>
      <arglist>(csVector3 &amp;center, float &amp;min, float &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>1809b0ef903fff0ab769386edd216cfe</anchor>
      <arglist>(const csVector3 &amp;center, float min, float max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitSphereTangent</name>
    <base>iEmitGen3D</base>
    <filename>structiEmitSphereTangent.html</filename>
    <member kind="function">
      <name>GetContent</name>
      <anchor>f293be6ad84e25b83ebc7c669794fa22</anchor>
      <arglist>(csVector3 &amp;center, float &amp;min, float &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContent</name>
      <anchor>7ed4c4095c7ebf7186aca24725775ac4</anchor>
      <arglist>(const csVector3 &amp;center, float min, float max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEmitState</name>
    <base>iBase</base>
    <filename>structiEmitState.html</filename>
    <member kind="function">
      <name>AddAge</name>
      <anchor>dd244778e0baa3b13fe149170d67302f</anchor>
      <arglist>(int time, const csColor &amp;color, float alpha, float swirl, float rotspeed, float scale)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAgingCount</name>
      <anchor>8f57b00b94959a1384face9a0f790d83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAgingMoment</name>
      <anchor>5a2bf55c10c357bfb534853176fcd512</anchor>
      <arglist>(int i, int &amp;time, csColor &amp;color, float &amp;alpha, float &amp;swirl, float &amp;rotspeed, float &amp;scale)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttractorEmit</name>
      <anchor>5c1ccfb0511eaa76b195f4e427492a4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAttractorForce</name>
      <anchor>f1d67823fc5257c75275e2454be49c79</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetContainerBox</name>
      <anchor>cadc0385aa7969721d7a2161c934f28d</anchor>
      <arglist>(csVector3 &amp;min, csVector3 &amp;max) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFieldAccelEmit</name>
      <anchor>097dea112dffa279bee3e92b124669ef</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFieldSpeedEmit</name>
      <anchor>dc50e2d2d25fcfd440c450e605c9a085</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLighting</name>
      <anchor>0963beaf8f22c5a6058cc9796e31491c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParticleCount</name>
      <anchor>c34ead06690127f130f0ff6899200b72</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParticleTime</name>
      <anchor>ba8a4b1ef3e9b8c0124c22e7a3b58718</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRectParticles</name>
      <anchor>0b1cb73bf77884e948ca7ae3af8ef295</anchor>
      <arglist>(float &amp;w, float &amp;h) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRegularParticles</name>
      <anchor>b88f2245d036b21e38bd7171a6c8f59e</anchor>
      <arglist>(int &amp;n, float &amp;radius) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStartAccelEmit</name>
      <anchor>626645f54da4a2ec81e20095f95b9233</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStartPosEmit</name>
      <anchor>18314d087f433fb0303eee491373fd3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStartSpeedEmit</name>
      <anchor>38ac32a614b0d33ffb8ca9345a9b1dd1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAge</name>
      <anchor>8cc2366039b79d0e1ef5c8e88415f93e</anchor>
      <arglist>(int time, const csColor &amp;color, float alpha, float swirl, float rotspeed, float scale)=0</arglist>
    </member>
    <member kind="function">
      <name>ReplaceAge</name>
      <anchor>4d115f3eaa2f23f0e2cfe4e8f282724d</anchor>
      <arglist>(int time, const csColor &amp;color, float alpha, float swirl, float rotspeed, float scale)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttractorEmit</name>
      <anchor>2c3355449f7488aa61aaf87938bde6fb</anchor>
      <arglist>(iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttractorForce</name>
      <anchor>0ff76ef0ee7e69d18b4881c02c9fd1b9</anchor>
      <arglist>(float f)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContainerBox</name>
      <anchor>e204e3700ca02e961195df52f466088e</anchor>
      <arglist>(bool enabled, const csVector3 &amp;min, const csVector3 &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFieldAccelEmit</name>
      <anchor>96e963c9f756b296b22a25b00165d8b5</anchor>
      <arglist>(iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFieldSpeedEmit</name>
      <anchor>8c35109337f9bbc6a4884dc757b88b88</anchor>
      <arglist>(iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLighting</name>
      <anchor>519ebb539841024b607401f2263e93a7</anchor>
      <arglist>(bool l)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParticleCount</name>
      <anchor>9299dbb3d367e95e3cd98930a5aa1c25</anchor>
      <arglist>(int num)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParticleTime</name>
      <anchor>5bcd3a4f0e1b890c2c1b94795165d223</anchor>
      <arglist>(int ttl)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRectParticles</name>
      <anchor>49b16beef9391e895a0e224a81df6522</anchor>
      <arglist>(float w, float h)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRegularParticles</name>
      <anchor>61cebb5829ff36a3ff3725ee98fd1728</anchor>
      <arglist>(int n, float radius)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStartAccelEmit</name>
      <anchor>d6a4bfa1c86cf8e873c9e4cdf15c3865</anchor>
      <arglist>(iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStartPosEmit</name>
      <anchor>363d5db5d06e70f0d9f754376de71d5f</anchor>
      <arglist>(iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStartSpeedEmit</name>
      <anchor>310ad55ae86781224f7739c346dc9894</anchor>
      <arglist>(iEmitGen3D *emit)=0</arglist>
    </member>
    <member kind="function">
      <name>UsingRectParticles</name>
      <anchor>a0fb2e35e4c58d5af816738bfd0d5522</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEngine</name>
    <base>iBase</base>
    <filename>structiEngine.html</filename>
    <member kind="function">
      <name>AddEngineFrameCallback</name>
      <anchor>552b31f7b3bdf4ac82b655b4f49a66c6</anchor>
      <arglist>(iEngineFrameCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>AddEngineSectorCallback</name>
      <anchor>916e54a6c4b67d83a6c8291dab82c54e</anchor>
      <arglist>(iEngineSectorCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>AddMeshAndChildren</name>
      <anchor>8af99d4d6f43f529b8da5e0c3eabce7a</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearRenderPriorities</name>
      <anchor>b7170c64726aa3e2bd0401fbc4a9b678</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateBaseMaterial</name>
      <anchor>ac6bb2647e8b14f3c283bb795303383d</anchor>
      <arglist>(iTextureWrapper *txt)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateBlackTexture</name>
      <anchor>0cb213348fb3ea887ec98cfcc87f09b6</anchor>
      <arglist>(const char *name, int w, int h, csColor *transp, int flags)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCamera</name>
      <anchor>9012a0db34f043094a7e9ab079694846</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateFrustumView</name>
      <anchor>439235a5269125736739f3203f2658c9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateLight</name>
      <anchor>ff05f7ed9baaea9153a3114221770b57</anchor>
      <arglist>(const char *name, const csVector3 &amp;pos, float radius, const csColor &amp;color, csLightDynamicType dyntype=CS_LIGHT_DYNAMICTYPE_STATIC)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateLoaderContext</name>
      <anchor>9fe0e965e3024984d474d306ab572eeb</anchor>
      <arglist>(iRegion *region=0, bool curRegOnly=true)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMaterial</name>
      <anchor>81ae6f870c45baa481be3cb509fd8a7f</anchor>
      <arglist>(const char *name, iTextureWrapper *texture)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshFactory</name>
      <anchor>dae694302990665d0879f370510df79c</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshFactory</name>
      <anchor>4616453c483f14a5e2426ddef239d084</anchor>
      <arglist>(iMeshObjectFactory *factory, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshFactory</name>
      <anchor>d5e76da45534fdebb9b9eb38eeb8d644</anchor>
      <arglist>(const char *classId, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshWrapper</name>
      <anchor>8550f82cc317a7511cc5fe28fe964f7f</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshWrapper</name>
      <anchor>3be743243db7ef0228f38214ee2c0c7c</anchor>
      <arglist>(const char *classid, const char *name, iSector *sector=0, const csVector3 &amp;pos=csVector3(0, 0, 0))=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshWrapper</name>
      <anchor>c281fb50683fdeb6b6560c1ff7c4c7fa</anchor>
      <arglist>(iMeshObject *meshobj, const char *name, iSector *sector=0, const csVector3 &amp;pos=csVector3(0, 0, 0))=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshWrapper</name>
      <anchor>35360daf38638b5b0da662abaf41b644</anchor>
      <arglist>(iMeshFactoryWrapper *factory, const char *name, iSector *sector=0, const csVector3 &amp;pos=csVector3(0, 0, 0))=0</arglist>
    </member>
    <member kind="function">
      <name>CreateObjectWatcher</name>
      <anchor>f7d937735a5c5908593be4160da057bf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreatePortal</name>
      <anchor>2a30bb23a82aa1723ee66b76a13f2e4e</anchor>
      <arglist>(const char *name, iSector *sourceSector, const csVector3 &amp;pos, iSector *destSector, csVector3 *vertices, int num_vertices, iPortal *&amp;portal)=0</arglist>
    </member>
    <member kind="function">
      <name>CreatePortal</name>
      <anchor>4d22a0d356014e1808b76c1545eb2a3a</anchor>
      <arglist>(const char *name, iMeshWrapper *parentMesh, iSector *destSector, csVector3 *vertices, int num_vertices, iPortal *&amp;portal)=0</arglist>
    </member>
    <member kind="function">
      <name>CreatePortalContainer</name>
      <anchor>504165d54bce4969ed47560efa729f55</anchor>
      <arglist>(const char *name, iSector *sector=0, const csVector3 &amp;pos=csVector3(0, 0, 0))=0</arglist>
    </member>
    <member kind="function">
      <name>CreateRegion</name>
      <anchor>115c27681a8da759bb77d5c6ddc9e58f</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSector</name>
      <anchor>113d382d5c896b93edb14b5971c1e7f0</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSectorWallsMesh</name>
      <anchor>00e06b4acee4e55e17dc4308fd7b8f6c</anchor>
      <arglist>(iSector *sector, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateTexture</name>
      <anchor>2ff95180241ae39a12d30c40a15f9d51</anchor>
      <arglist>(const char *name, const char *fileName, csColor *transp, int flags)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateThingMesh</name>
      <anchor>eba165df1295ebd63bf7a75d447d82ef</anchor>
      <arglist>(iSector *sector, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>DelayedRemoveObject</name>
      <anchor>adc811de2afd1011cc4abff512347576</anchor>
      <arglist>(csTicks delay, iBase *object)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>614e0e5002db491b85fd58c889d0912e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>492af84d9a8807199525ac1e09a9533e</anchor>
      <arglist>(iCamera *c, iClipper2D *clipper, iMeshWrapper *mesh=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindCameraPosition</name>
      <anchor>a7029043ade4e3f6bfebe3b89c56fa07</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindCollection</name>
      <anchor>02655762d68c9a634ddcd3072b0cff84</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindLight</name>
      <anchor>6597439f229823aac66ad2e5c37e0399</anchor>
      <arglist>(const char *Name, bool RegionOnly=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindLightID</name>
      <anchor>dfa09c8b48015613e849aaa3462869a7</anchor>
      <arglist>(const char *light_id) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindMaterial</name>
      <anchor>5302246402907bacef4cb7c472f7f9d4</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshFactory</name>
      <anchor>85db1bdceecb40a7d0330d45aef9fa00</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshObject</name>
      <anchor>ab0639af64af258b0bbd8e2d117a9102</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSector</name>
      <anchor>0ce30b8875cfd591b3ba404d5dd37736</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindTexture</name>
      <anchor>830fd767bc4853302d0a3d41beea0f8c</anchor>
      <arglist>(const char *name, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ForceRelight</name>
      <anchor>969e01f5487b3df471fe3fa1a01e584d</anchor>
      <arglist>(iLight *light, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ForceRelight</name>
      <anchor>02d901972eaf256d7069f7e4c381aef9</anchor>
      <arglist>(iRegion *region=0, iProgressMeter *meter=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAlphaRenderPriority</name>
      <anchor>4ae4722370f3d2bfb98fc350787bfce8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAmbientLight</name>
      <anchor>f9a3ad0290154c2c3dfc6bc07a967f36</anchor>
      <arglist>(csColor &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetBeginDrawFlags</name>
      <anchor>9b0647c948db21472a4abdd09da93a03</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCacheManager</name>
      <anchor>34c2e0548ae57b1edfad207efb1a2578</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCameraPositions</name>
      <anchor>348a3938335559585a520288ae188c62</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetClearScreen</name>
      <anchor>22fe6b87b312859ca39add9473c3c660</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetClearZBuf</name>
      <anchor>6ecb056d6dcabf95ba027bc434527976</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCollections</name>
      <anchor>6e06f295919e64200c59ae62cab08b65</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetContext</name>
      <anchor>06a344ee8878a179d3804a93881841a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentDefaultRenderloop</name>
      <anchor>459bc3323b47b1de452032af0238eaff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentFrameNumber</name>
      <anchor>a89620f8f0649e1f8ad4e0e146516145</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultAmbientLight</name>
      <anchor>ebfe5005b67343efb30eaae2a39f76a2</anchor>
      <arglist>(csColor &amp;c) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultClearScreen</name>
      <anchor>788b3f8ef5df28084b8e838ca9dc7793</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultClearZBuf</name>
      <anchor>8e24a85a79ec7a6d7e422566ae267f7c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultMaxLightmapSize</name>
      <anchor>742d1dcbe1983a73ecb75a8d060323e6</anchor>
      <arglist>(int &amp;w, int &amp;h)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLightingCacheMode</name>
      <anchor>eb4e914497ddfc5dd212307c01d0c6f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLightIterator</name>
      <anchor>0cb1a95ef972e82d385ea19bcfa7e9fa</anchor>
      <arglist>(iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialList</name>
      <anchor>6dcb5e7dd9004033ad7fe880092a6540</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaxLightmapAspectRatio</name>
      <anchor>08838940b446b2112f245d45a5abd04a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaxLightmapSize</name>
      <anchor>b568901eb699d82e21d75c01169bce6b</anchor>
      <arglist>(int &amp;w, int &amp;h)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshes</name>
      <anchor>7292eb1ca7d9ab3cfddb5e1e2ff11947</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshFactories</name>
      <anchor>780210dfa59e8a1d6a98dd9b3174d3a7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbyLights</name>
      <anchor>33abbf29d052ad667a8104f329b7f663</anchor>
      <arglist>(iSector *sector, const csBox3 &amp;box, iLight **lights, int max_num_lights)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbyLights</name>
      <anchor>c01401d96d9ee01376afd62f62699e8f</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;pos, iLight **lights, int max_num_lights)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbyMeshes</name>
      <anchor>0aa696120d2b56dca599350ba731fbcd</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;start, const csVector3 &amp;end, bool crossPortals=true)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbyMeshes</name>
      <anchor>6baf62333e57d70aa16716fec796143c</anchor>
      <arglist>(iSector *sector, const csBox3 &amp;box, bool crossPortals=true)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbyMeshes</name>
      <anchor>6973f808752c23c4a4156c0aa89180ae</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;pos, float radius, bool crossPortals=true)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbyObjects</name>
      <anchor>8f240aa9e85552db21bd5892d6d847a1</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;pos, float radius, bool crossPortals=true)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbySectors</name>
      <anchor>a8ce4fac89c9d5077abce640743d617e</anchor>
      <arglist>(iSector *sector, const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNearbySectors</name>
      <anchor>f5d136e5d7e2ddd7345a36eaa66c919a</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;pos, float radius)=0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectRenderPriority</name>
      <anchor>c8d2fd7ee67138050310070104f3640f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalRenderPriority</name>
      <anchor>ff9edc613b2ce36463fa99f52aeb4cf2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRegions</name>
      <anchor>5bbd0804c6644fda86696f181a0e3bd6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderLoopManager</name>
      <anchor>194a2bb47730e51de356fb182320422b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPriority</name>
      <anchor>b672781af411e7e19928c293600ec386</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPriorityCount</name>
      <anchor>5ac359838972d5be0ce912088606e5c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPriorityName</name>
      <anchor>e5111a583acdd63ed6c58ef61470bba0</anchor>
      <arglist>(long priority) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPrioritySorting</name>
      <anchor>1b1d40d45e7cfc5d5d9f316649c18fb8</anchor>
      <arglist>(long priority) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPrioritySorting</name>
      <anchor>56c311b104db1938bb17b2f8e5aa7129</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSaveableFlag</name>
      <anchor>e99bfe1f8744909f2ce6ae01578bb878</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSectors</name>
      <anchor>6154fdb7e98d5b4519e02149ceb4a00e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSkyRenderPriority</name>
      <anchor>8146da117a392ad0d429b99e1828b436</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureFormat</name>
      <anchor>4e620d29c940740481fe75369ad67735</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureList</name>
      <anchor>c2f26b8078a49f84a76166edfd2b35ac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTopLevelClipper</name>
      <anchor>9f7e55891eb91ee7fac6111d95b59178</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVariableList</name>
      <anchor>83c863eac2f8c0e24ee0fa5807b9cd36</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleMeshes</name>
      <anchor>2bf433a8849ae323601a2c84479ba130</anchor>
      <arglist>(iSector *sector, const csFrustum &amp;frustum)=0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleMeshes</name>
      <anchor>335b11bb523ccc31254a5fe41a3a18cd</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleObjects</name>
      <anchor>e137d4887c931f244a0709d98a468e12</anchor>
      <arglist>(iSector *sector, const csFrustum &amp;frustum)=0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleObjects</name>
      <anchor>a00ebb5a4135f78bc4776ce64e87e127</anchor>
      <arglist>(iSector *sector, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>GetWallRenderPriority</name>
      <anchor>6badc638727f9f7e69071f446fa171b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMeshFactory</name>
      <anchor>0e4ea74b7b6981c346cf87a17a88bde8</anchor>
      <arglist>(const char *name, const char *loaderClassId, iDataBuffer *input)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMeshWrapper</name>
      <anchor>0699d5685b7e2b6d15bcb5b37920a915</anchor>
      <arglist>(const char *name, const char *loaderClassId, iDataBuffer *input, iSector *sector, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>PrecacheDraw</name>
      <anchor>70fcbb6954f3a0dfbb57809ed428723a</anchor>
      <arglist>(iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Prepare</name>
      <anchor>5d090e48bc769dfea356a8c6b24f7af0</anchor>
      <arglist>(iProgressMeter *meter=0)=0</arglist>
    </member>
    <member kind="function">
      <name>PrepareMeshes</name>
      <anchor>8b28458054f36b72ff1a22ec4d5c2651</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PrepareTextures</name>
      <anchor>4cf20006340574af17006c60341253f1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>7fb2d06edb8be40dd2c0d2c663b1fa7c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterRenderPriority</name>
      <anchor>6227b0d1199d778793d512077de96d90</anchor>
      <arglist>(const char *name, long priority, csRenderPrioritySorting rendsort=CS_RENDPRI_SORT_NONE)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDelayedRemoves</name>
      <anchor>5ff70f3d73981b09021c59d8151c35c4</anchor>
      <arglist>(bool remove=false)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveEngineFrameCallback</name>
      <anchor>0a49b6801ed741a04ac291d0db8bffd4</anchor>
      <arglist>(iEngineFrameCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveEngineSectorCallback</name>
      <anchor>afd8134db68980b21b38fc819eb16b5b</anchor>
      <arglist>(iEngineSectorCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveLight</name>
      <anchor>68d815afa7ee2f17cccaa7cbc86f522f</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveObject</name>
      <anchor>0d187114bac0da7a44a771e34ddccdbc</anchor>
      <arglist>(iBase *object)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetWorldSpecificSettings</name>
      <anchor>01a8966a0b5e543ca6b2687b5ded6041</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAmbientLight</name>
      <anchor>36ff2fa42374cca0a1a02c98d233eada</anchor>
      <arglist>(const csColor &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCacheManager</name>
      <anchor>78c827e448c867abf11147cf4f591ccd</anchor>
      <arglist>(iCacheManager *cache_mgr)=0</arglist>
    </member>
    <member kind="function">
      <name>SetClearScreen</name>
      <anchor>568014f686bae1212fa537e32c0512d1</anchor>
      <arglist>(bool yesno)=0</arglist>
    </member>
    <member kind="function">
      <name>SetClearZBuf</name>
      <anchor>cf4f4b503babcf43c99169044129c7dc</anchor>
      <arglist>(bool yesno)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContext</name>
      <anchor>b8a6d70a1b460d7011e1278d1debc6fe</anchor>
      <arglist>(iTextureHandle *ctxt)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCurrentDefaultRenderloop</name>
      <anchor>07a8666ce425201e93009f97fe84dce3</anchor>
      <arglist>(iRenderLoop *loop)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightingCacheMode</name>
      <anchor>8d5d55ade277ce62db7ff4c5805ea38c</anchor>
      <arglist>(int mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaxLightmapSize</name>
      <anchor>1617ec4a83914144e7c3b0d172542016</anchor>
      <arglist>(int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSaveableFlag</name>
      <anchor>1abb71283ec0b04ae4b8437ca8f0ad91</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVFSCacheManager</name>
      <anchor>b8ee2ea3a2c8489b217fe0ab7f9ffaa6</anchor>
      <arglist>(const char *vfspath=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ShineLights</name>
      <anchor>68bc8e6b9928c2d7ec66cbeb822a0c4a</anchor>
      <arglist>(iRegion *region=0, iProgressMeter *meter=0)=0</arglist>
    </member>
    <member kind="function">
      <name>WantToDie</name>
      <anchor>dec584102b18c3a0258176e6dd266cad</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEngineFrameCallback</name>
    <base>iBase</base>
    <filename>structiEngineFrameCallback.html</filename>
    <member kind="function">
      <name>StartFrame</name>
      <anchor>5c11050c22537d179999fb3edf02adcc</anchor>
      <arglist>(iEngine *engine, iRenderView *rview)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEngineSectorCallback</name>
    <base>iBase</base>
    <filename>structiEngineSectorCallback.html</filename>
    <member kind="function">
      <name>NewSector</name>
      <anchor>76e351c2a3e8ae09a27d6553490e3aa7</anchor>
      <arglist>(iEngine *engine, iSector *sector)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSector</name>
      <anchor>8f9d3b713a13cecfaf16190a7ea5e182</anchor>
      <arglist>(iEngine *engine, iSector *sector)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEngineSequenceManager</name>
    <base>iBase</base>
    <filename>structiEngineSequenceManager.html</filename>
    <member kind="function">
      <name>CreateParameterESM</name>
      <anchor>950871939a0c8aa0fdcb2fb2648fa717</anchor>
      <arglist>(iBase *value)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSequence</name>
      <anchor>55f417f362bb0892f7e42d95a5c43475</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateTrigger</name>
      <anchor>06d38b204b3c690bfd32094b3d2a5756</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyTimedOperations</name>
      <anchor>6b9b9c88f0404e554119ca7d229a951f</anchor>
      <arglist>(uint sequence_id)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSequenceByName</name>
      <anchor>e72c282cecfd9273eef43330fe60d750</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindTriggerByName</name>
      <anchor>1ac4729f308b0543a51ac3bbeba035d9</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>FireTimedOperation</name>
      <anchor>8c19ac62ce10486dbd743866d56fae9f</anchor>
      <arglist>(csTicks delta, csTicks duration, iSequenceTimedOperation *op, iBase *params=0, uint sequence_id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FireTriggerByName</name>
      <anchor>e3e49c74fc9edb88c6afedee7e759b06</anchor>
      <arglist>(const char *name, bool now=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSequence</name>
      <anchor>33394a62381548a6d5330d08043926d7</anchor>
      <arglist>(size_t idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSequenceCount</name>
      <anchor>f179cc2845171aa04ce3ba4191419507</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSequenceManager</name>
      <anchor>326af2e5499250b4eba0072da2c18e21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTrigger</name>
      <anchor>690460b8705f56781a8979b9d18eae4c</anchor>
      <arglist>(size_t idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriggerCount</name>
      <anchor>cd21d8ea3d1f56ebfdb21c4ef466fd6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSequence</name>
      <anchor>e8327e04a7f511232881ec409dbf83e0</anchor>
      <arglist>(iSequenceWrapper *seq)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSequences</name>
      <anchor>84d4f150f8cc3561adc646e1d107fee7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveTrigger</name>
      <anchor>df8cd2e952593e2a46afc209b3ca473a</anchor>
      <arglist>(iSequenceTrigger *trigger)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveTriggers</name>
      <anchor>91314ba1b05384b6ea3a1952a01dbed4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RunSequenceByName</name>
      <anchor>91a0dc4020052ae2651ce194bd120bf6</anchor>
      <arglist>(const char *name, int delay) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEngineSequenceParameters</name>
    <base>iBase</base>
    <filename>structiEngineSequenceParameters.html</filename>
    <member kind="function">
      <name>AddParameter</name>
      <anchor>e26f1aa45f927f8492f6b7a321b9b55c</anchor>
      <arglist>(const char *name, iBase *def_value=0)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateParameterESM</name>
      <anchor>246c21f31ea74e258f12f2abd03944cb</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParameter</name>
      <anchor>5fab7af1efd295a55e28f86bc03b75a5</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParameter</name>
      <anchor>34a84fb3165add72d72ccc3c0c001e30</anchor>
      <arglist>(size_t idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParameterCount</name>
      <anchor>932487979280754db0ced4c907ad0494</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParameterIdx</name>
      <anchor>2eabd7310d7f43cb01c6fa7032afab78</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParameterName</name>
      <anchor>0e4d6b37594d4aece745698c7eaa3457</anchor>
      <arglist>(size_t idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>SetParameter</name>
      <anchor>5fe3620ccda7f12a5854a02583d437d6</anchor>
      <arglist>(const char *name, iBase *value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParameter</name>
      <anchor>91b3f964f84fc82eed3e5cbf9343b90b</anchor>
      <arglist>(size_t idx, iBase *value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEvent</name>
    <base>iBase</base>
    <filename>structiEvent.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>40900b1570d2954b58a16b2de9e9d624</anchor>
      <arglist>(const char *name, int8 v)=0</arglist>
    </member>
    <member kind="function">
      <name>AttributeExists</name>
      <anchor>2590526b6c812964a0c9976a932f9a2d</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeIterator</name>
      <anchor>a972b09d23753f74550cf36bca4e1170</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttributeType</name>
      <anchor>837d5af3fddbabd5af623867074934ad</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>4c72c5b000eca40e780cb506aa506020</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>9c439111cd078826c5d194f59247dd3f</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>7ff5a7d54a4937d42554c61e7d11ccb0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>ff99b411e3182efadd17e68c8398ca53</anchor>
      <arglist>(const char *name, int8 &amp;v) const =0</arglist>
    </member>
    <member kind="function">
      <name>Broadcast</name>
      <anchor>09837bd8cfe86fdd34f40b89917d94d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Name</name>
      <anchor>d4512bfeebc30608dfbaf2a77817b416</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Time</name>
      <anchor>dcbc22f91bcdcc7c4bae33b6cc8ea14b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventAttributeIterator</name>
    <base>iBase</base>
    <filename>structiEventAttributeIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>d46356e740aa349c9450609be3a5363f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>9d0065423fe171f2e068be0a19cb4092</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>3375070e340b0c554444d58337b60724</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventCord</name>
    <base>iBase</base>
    <filename>structiEventCord.html</filename>
    <member kind="function">
      <name>GetName</name>
      <anchor>9bd70bb36b0a2d2c344f18966c5505f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPass</name>
      <anchor>81576bf562f2d4bc97c4964cae9738ae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>d9b80ee319756877bc8f191310a84ca4</anchor>
      <arglist>(iEventHandler *, int priority)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>d502185aaa91ee5cb0904006e9d0ec7a</anchor>
      <arglist>(iEventHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPass</name>
      <anchor>c8b1125f36dc5e5e518d56d82eea0699</anchor>
      <arglist>(bool)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventHandler</name>
    <base>iBase</base>
    <filename>structiEventHandler.html</filename>
    <member kind="function">
      <name>GenericID</name>
      <anchor>5770ffedf51bb5b1d203ac2b1c1b9e40</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <name>GenericName</name>
      <anchor>7880f6a777bc255ec58c42e4292e5071</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GenericPrec</name>
      <anchor>553f18803da012da45ce762ef029ee21</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const =0</arglist>
    </member>
    <member kind="function">
      <name>GenericSucc</name>
      <anchor>c0e742aaaf86a619966bd30c0751e94d</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const =0</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>4b3885c2c5dc59fc4ecf32c089f0973a</anchor>
      <arglist>(iEvent &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>InstancePrec</name>
      <anchor>7e05b4d4abf9c9d90f6cd665fabd4f2c</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const =0</arglist>
    </member>
    <member kind="function">
      <name>InstanceSucc</name>
      <anchor>9df347d0041fcc47255ae27089da245b</anchor>
      <arglist>(csRef&lt; iEventHandlerRegistry &gt; &amp;, csRef&lt; iEventNameRegistry &gt; &amp;, csEventID) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventHandlerRegistry</name>
    <base>iBase</base>
    <filename>structiEventHandlerRegistry.html</filename>
    <member kind="function">
      <name>GetGeneric</name>
      <anchor>434acdbf4ec1c643d0a4dc7327fbe45e</anchor>
      <arglist>(csHandlerID id)=0</arglist>
    </member>
    <member kind="function">
      <name>GetGenericID</name>
      <anchor>a21b5745e5ac66739232d8968cfaeec1</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
    <member kind="function">
      <name>GetHandler</name>
      <anchor>362d1aea18b8b62acdad5f03fc8775cb</anchor>
      <arglist>(csHandlerID id)=0</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>dcc43f92420a5cc0e0873f2edc917e08</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>513859c14a149c88f755b24c1aa297cd</anchor>
      <arglist>(iEventHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>c47077eab375df1c6876d652671f41fa</anchor>
      <arglist>(csHandlerID id)=0</arglist>
    </member>
    <member kind="function">
      <name>IsInstance</name>
      <anchor>809449b16476a08f1a979af2dee46f5f</anchor>
      <arglist>(csHandlerID id)=0</arglist>
    </member>
    <member kind="function">
      <name>IsInstanceOf</name>
      <anchor>a9ba543b263b24842e4741e676c292bf</anchor>
      <arglist>(csHandlerID instanceid, csHandlerID genericid)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterID</name>
      <anchor>37489d90f8d0f9fea855150236253109</anchor>
      <arglist>(iEventHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>ReleaseID</name>
      <anchor>3ceb78db4f88a043a72dabce8830d298</anchor>
      <arglist>(iEventHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>ReleaseID</name>
      <anchor>2bc501367b96d67a578fe0b88706bbf7</anchor>
      <arglist>(csHandlerID id)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventNameRegistry</name>
    <base>iBase</base>
    <filename>structiEventNameRegistry.html</filename>
    <member kind="function">
      <name>GetID</name>
      <anchor>f33928398843a0a1039f678bd356fafc</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParentID</name>
      <anchor>326cbb47201e4084f00a281d3264ccf7</anchor>
      <arglist>(const csEventID id)=0</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>e00e8296d4b7f433f90a3f0cd6f4d597</anchor>
      <arglist>(const csEventID id)=0</arglist>
    </member>
    <member kind="function">
      <name>IsImmediateChildOf</name>
      <anchor>2b23221e3f3423ae9891616a305e6d87</anchor>
      <arglist>(const csEventID child, const csEventID parent)=0</arglist>
    </member>
    <member kind="function">
      <name>IsKindOf</name>
      <anchor>0dcf8d2375db1a8f3905b775cfac0814</anchor>
      <arglist>(const csEventID child, const csEventID parent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventOutlet</name>
    <base>iBase</base>
    <filename>structiEventOutlet.html</filename>
    <member kind="function">
      <name>Broadcast</name>
      <anchor>c5b91758afe5ca9f9c69f10c8a3a2bad</anchor>
      <arglist>(csEventID iName, intptr_t iInfo=0)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateEvent</name>
      <anchor>61b7467d8965d83de5725e693f258324</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ImmediateBroadcast</name>
      <anchor>50f99d2fd2f1d8e8eccefa635758b1f9</anchor>
      <arglist>(csEventID iName, intptr_t iInfo)=0</arglist>
    </member>
    <member kind="function">
      <name>Joystick</name>
      <anchor>fed7b62837a941ca0d2649d1e9e9b66b</anchor>
      <arglist>(uint iNumber, int iButton, bool iDown, const int32 *axes, uint numAxes)=0</arglist>
    </member>
    <member kind="function">
      <name>Key</name>
      <anchor>8e3348ffe402594d043ad4e4fd0454d7</anchor>
      <arglist>(utf32_char codeRaw, utf32_char codeCooked, bool iDown, bool autorep=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Mouse</name>
      <anchor>4998a2b765ff1a411817358d154bb317</anchor>
      <arglist>(int iButton, bool iDown, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>Post</name>
      <anchor>ce0c4dfa15d7737811ae2e3e495b02c7</anchor>
      <arglist>(iEvent *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventPlug</name>
    <base>iBase</base>
    <filename>structiEventPlug.html</filename>
    <member kind="function">
      <name>EnableEvents</name>
      <anchor>f1f155b3f8fdf0048579e24bc108cb3d</anchor>
      <arglist>(unsigned, bool)</arglist>
    </member>
    <member kind="function">
      <name>GetPotentiallyConflictingEvents</name>
      <anchor>47e845ccef883a99835340f955f3fcae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryEventPriority</name>
      <anchor>7564d911fd4ea209dd6fa948aed97bfd</anchor>
      <arglist>(unsigned iType)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventQueue</name>
    <base>iBase</base>
    <filename>structiEventQueue.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>128a32708ca9b2dcf62f2451c12e7f25</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateBroadcastEvent</name>
      <anchor>9bb1643bd96d5a213d45cffd95c4e1c8</anchor>
      <arglist>(const csEventID &amp;name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateEvent</name>
      <anchor>4205ef82fb3cdce7aa69ddaecf87c06d</anchor>
      <arglist>(const csEventID &amp;name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateEventOutlet</name>
      <anchor>3d38841db6bf69ffd2324b7afb60a094</anchor>
      <arglist>(iEventPlug *)=0</arglist>
    </member>
    <member kind="function">
      <name>Dispatch</name>
      <anchor>975d0dccbb093805f1f0cbb6e4555b72</anchor>
      <arglist>(iEvent &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>9aee3158b02f8a83b9ded3e05bf9c638</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetEventCord</name>
      <anchor>bf2d807805fd7946a1a8b116a8d6a522</anchor>
      <arglist>(const csEventID &amp;name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetEventOutlet</name>
      <anchor>cfe5bac1771691f750834ef83687cc55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>58bda21afddedb84a55ec2066c8b2563</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Post</name>
      <anchor>ad3e8be23e919c3bccd2ea90f16bcd52</anchor>
      <arglist>(iEvent *)=0</arglist>
    </member>
    <member kind="function">
      <name>Process</name>
      <anchor>f577ff11e5a6c4b0891f13ddf451666a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterListener</name>
      <anchor>d96ba035df110b38fff5818dc573bed1</anchor>
      <arglist>(iEventHandler *, const csEventID ename[])=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterListener</name>
      <anchor>5feb540f523c6feb7b99db5976a70ca0</anchor>
      <arglist>(iEventHandler *, const csEventID &amp;ename)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterListener</name>
      <anchor>60116ec12210ce66f7aa65f9c5677321</anchor>
      <arglist>(iEventHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllListeners</name>
      <anchor>88aa9fc1d79547e551f28701a601b2c6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>8f519aa16cb1cb16a1d31dc5e4c6274a</anchor>
      <arglist>(iEventHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>Subscribe</name>
      <anchor>d01e01c3575f545deb3a015ced63d5fd</anchor>
      <arglist>(iEventHandler *, const csEventID ename[])=0</arglist>
    </member>
    <member kind="function">
      <name>Subscribe</name>
      <anchor>d3e206126333538024bdd9587a7bd221</anchor>
      <arglist>(iEventHandler *, const csEventID &amp;ename)=0</arglist>
    </member>
    <member kind="function">
      <name>Unsubscribe</name>
      <anchor>207d420ec1f30ba4e8dc3a17ff94b2b7</anchor>
      <arglist>(iEventHandler *, const csEventID &amp;)=0</arglist>
    </member>
    <member kind="function">
      <name>Unsubscribe</name>
      <anchor>b876060e241bd117ebdad426ba0135c5</anchor>
      <arglist>(iEventHandler *, const csEventID[])=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iEventTimer</name>
    <base>iBase</base>
    <filename>structiEventTimer.html</filename>
    <member kind="function">
      <name>AddTimerEvent</name>
      <anchor>689d3bb68f963d5b46f4dc792b6aab8c</anchor>
      <arglist>(iTimerEvent *ev, csTicks delay)=0</arglist>
    </member>
    <member kind="function">
      <name>GetEventCount</name>
      <anchor>fbf95af9a411c1619c1e5621d5874031</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTimeLeft</name>
      <anchor>bf08937e06ff5cd93776d17695917035</anchor>
      <arglist>(size_t idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllTimerEvents</name>
      <anchor>e991d51aefa5393acac16471a207ba60</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveTimerEvent</name>
      <anchor>ab1a6f17c931a1dbcc0926a3ff70a8ab</anchor>
      <arglist>(iTimerEvent *ev)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFactory</name>
    <base>iBase</base>
    <filename>structiFactory.html</filename>
    <member kind="function">
      <name>CreateInstance</name>
      <anchor>bc5d7a83e4e34cebdb2887be1240cefa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryClassID</name>
      <anchor>f253d81455e7e06e20944d6d8f0fb893</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryDependencies</name>
      <anchor>c6f6015bab14e1e52b70eacd2c8c9ff5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryDescription</name>
      <anchor>ba15a898966c3845f127f62b1c5aaec4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryModuleName</name>
      <anchor>85984393a9c5922a029cfb1f5ebd2fe0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>TryUnload</name>
      <anchor>8c75e4065f6dbafb09004af7a987a4a2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFile</name>
    <base>iBase</base>
    <filename>structiFile.html</filename>
    <member kind="function">
      <name>AtEOF</name>
      <anchor>f1da4c6ef65ca75360d134b0cd047dc9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Flush</name>
      <anchor>eae974e73b0c49bf22d6c11c4c4f5eb2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAllData</name>
      <anchor>8b4612b4492382cf2d4f17dd4bbf364e</anchor>
      <arglist>(bool nullterm=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>0d39996448ca1794faa2bdf58d6b186b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPos</name>
      <anchor>63192d4c90e269feef6075d8c7f81efb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>184c528adfec25f53545fe9271ff374b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStatus</name>
      <anchor>a0f33b299c54426c60d5ce7d9f1db8de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Read</name>
      <anchor>23a8ceeaf85b15241acd3ef2f98b78d4</anchor>
      <arglist>(char *Data, size_t DataSize)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPos</name>
      <anchor>411c083eb2f6745a7fa0fe15f598ad0b</anchor>
      <arglist>(size_t newpos)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>73a0d4bf182d42deb70e9982c3b17af7</anchor>
      <arglist>(const char *Data, size_t DataSize)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFireTexture</name>
    <base>iBase</base>
    <filename>structiFireTexture.html</filename>
    <member kind="function">
      <name>GetAdditionalBurn</name>
      <anchor>cf81d3c98077bbfdb167e3e65029b3f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetContinuedBurn</name>
      <anchor>8b7f9c46d6269258063017ac31fda00c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetExtinguish</name>
      <anchor>e4fd10bca0c64bc5840b22783e0b6cbe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHalfBase</name>
      <anchor>24888fc09641ab6f22fd7c0d55ff51dd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPossibleBurn</name>
      <anchor>f831d4d82d65cbd5ac1900afcd271d57</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPostSmoothing</name>
      <anchor>f0cc484741fbd94e66b743b71b6d2bc3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSingleFlameMode</name>
      <anchor>6c8687e0179d11018cba3594d5edf4cc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSmoothing</name>
      <anchor>2242c7cc3161ddb60530d1a474b2d55c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAdditionalBurn</name>
      <anchor>af2a5a834c95514598b03a43e8e553e7</anchor>
      <arglist>(int addburn)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContinuedBurn</name>
      <anchor>364ed23dbb0720e3d108de47f4c9d8c4</anchor>
      <arglist>(int contburn)=0</arglist>
    </member>
    <member kind="function">
      <name>SetExtinguish</name>
      <anchor>4b2b24e5c93a7ab67d965cbea8040269</anchor>
      <arglist>(int extinguish)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHalfBase</name>
      <anchor>4326b2cf9d92dceeeac2a604a3bbc297</anchor>
      <arglist>(int halfbase)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPalette</name>
      <anchor>97ec331c0b137d8d87763676fa7e7738</anchor>
      <arglist>(iGradient *gradient)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPossibleBurn</name>
      <anchor>d9bd5c2207eedf231aa39f6db423b567</anchor>
      <arglist>(int possburn)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPostSmoothing</name>
      <anchor>2a4c7ed619db1ba46503bf041b35921e</anchor>
      <arglist>(int amount)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSingleFlameMode</name>
      <anchor>ebda2126c68d8d03b3c89e0bd4723a34</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSmoothing</name>
      <anchor>aad78d5f0226969602057fc3d2405c7e</anchor>
      <arglist>(int smoothing)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFlareHalo</name>
    <base>iBase</base>
    <filename>structiFlareHalo.html</filename>
    <member kind="function">
      <name>AddComponent</name>
      <anchor>6794a95f4f4ab0ea98a6a0cb2d3bf28f</anchor>
      <arglist>(float pos, float w, float h, uint mode, iMaterialWrapper *image)=0</arglist>
    </member>
    <member kind="function">
      <name>SetComponentColor</name>
      <anchor>70bbed9f5845423bee23f4215aa38a73</anchor>
      <arglist>(uint component, const csVector4 &amp;color)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFont</name>
    <base>iBase</base>
    <filename>structiFont.html</filename>
    <member kind="function">
      <name>AddDeleteCallback</name>
      <anchor>f9c910f8ebbce7f38564f95e35ca3f3a</anchor>
      <arglist>(iFontDeleteNotify *func)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAscent</name>
      <anchor>4bbbbf7fac4f9eaa28e1bfaa7c30cdaf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDescent</name>
      <anchor>b00c29d4ed0a66d85ee8d0768b7e24ec</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDimensions</name>
      <anchor>a128fdd153e45aba7e160074805c7529</anchor>
      <arglist>(const char *text, int &amp;oW, int &amp;oH, int &amp;desc)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDimensions</name>
      <anchor>e3e9dc994230ef8cf801812393af9dbe</anchor>
      <arglist>(const char *text, int &amp;oW, int &amp;oH)=0</arglist>
    </member>
    <member kind="function">
      <name>GetGlyphAlphaBitmap</name>
      <anchor>2069806518c2a4147dd69e6762984ebf</anchor>
      <arglist>(utf32_char c, csBitmapMetrics &amp;metrics)=0</arglist>
    </member>
    <member kind="function">
      <name>GetGlyphBitmap</name>
      <anchor>dcb081947e8bb9ae67d9d005f5a3010b</anchor>
      <arglist>(utf32_char c, csBitmapMetrics &amp;metrics)=0</arglist>
    </member>
    <member kind="function">
      <name>GetGlyphMetrics</name>
      <anchor>fb2c2497e228d4275e020adec482295d</anchor>
      <arglist>(utf32_char c, csGlyphMetrics &amp;metrics)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLength</name>
      <anchor>9363065c91027f6d5d290f45e1e050ba</anchor>
      <arglist>(const char *text, int maxwidth)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaxSize</name>
      <anchor>56460a940e03eefa9e35f945674be3f1</anchor>
      <arglist>(int &amp;oW, int &amp;oH)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>b90049387efb00e209f55b7cb80c9acc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextHeight</name>
      <anchor>b2b0fce727edc86c57fed4e78e9c88fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUnderlinePosition</name>
      <anchor>e2a8c21b9c330cb73bd9b9946106cb64</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUnderlineThickness</name>
      <anchor>b4d0f52ab37e5f43bb71e833b8ebfc0a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasGlyph</name>
      <anchor>9775d91486a124cca446428aa4db4f3a</anchor>
      <arglist>(utf32_char c)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDeleteCallback</name>
      <anchor>bd5661f5d0bc73d1bdc74b4c9203e151</anchor>
      <arglist>(iFontDeleteNotify *func)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFontDeleteNotify</name>
    <base>iBase</base>
    <filename>structiFontDeleteNotify.html</filename>
    <member kind="function">
      <name>BeforeDelete</name>
      <anchor>c050f492547ac6ddadc38789598f8ee3</anchor>
      <arglist>(iFont *font)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFontServer</name>
    <base>iBase</base>
    <filename>structiFontServer.html</filename>
    <member kind="function">
      <name>GetWarnOnError</name>
      <anchor>e41c6bde18c36aa676cd13685129f8a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LoadFont</name>
      <anchor>05eee2a2a263d32ac5977eb5890fab6e</anchor>
      <arglist>(const char *filename, float size=10.0f)=0</arglist>
    </member>
    <member kind="function">
      <name>SetWarnOnError</name>
      <anchor>2b21ea889a9945d7014803b694ffab33</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFrameEventSignpost</name>
    <base>iEventHandler</base>
    <filename>structiFrameEventSignpost.html</filename>
    <member kind="function">
      <name>iFrameEventSignpost</name>
      <anchor>b7f0f39c012699963ef5a29548b851ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>~iFrameEventSignpost</name>
      <anchor>2f0a08f00e2532770559c90cbf2dc1fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>HandleEvent</name>
      <anchor>d6e9e55d4646b681118ce1a35fa2cb8e</anchor>
      <arglist>(iEvent &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFrustumView</name>
    <base>iBase</base>
    <filename>structiFrustumView.html</filename>
    <member kind="function">
      <name>CallObjectFunction</name>
      <anchor>f1b1f8bba712d43be132db66f9b5a7de</anchor>
      <arglist>(iMeshWrapper *mesh, bool vis)=0</arglist>
    </member>
    <member kind="function">
      <name>CheckProcessMask</name>
      <anchor>ac19f83e50c23632c2075c3ec9893667</anchor>
      <arglist>(unsigned int mask)=0</arglist>
    </member>
    <member kind="function">
      <name>CheckShadowMask</name>
      <anchor>843ed034923c327a1d64c481546824bc</anchor>
      <arglist>(unsigned int mask)=0</arglist>
    </member>
    <member kind="function">
      <name>CopyFrustumContext</name>
      <anchor>634eae886e7e131e05433bd13048592f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateFrustumContext</name>
      <anchor>ae785aa003ad26401baf7a3d321e54ab</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrustumContext</name>
      <anchor>58c7db1993db95e27cd2ac1ff6b6f06a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>fcb7f6c23175cfa02a64356d8f8e9e6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSquaredRadius</name>
      <anchor>0ac5018878a93e03bb984f02a796f0eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUserdata</name>
      <anchor>636602cfb5f6558cdc838ce8457604b1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RestoreFrustumContext</name>
      <anchor>d110bc29ca6bac274f26d6de5dc3404e</anchor>
      <arglist>(csFrustumContext *original)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFrustumContext</name>
      <anchor>5e89b4e845c744aa6b4cd6a7b48dd3d9</anchor>
      <arglist>(csFrustumContext *ctxt)=0</arglist>
    </member>
    <member kind="function">
      <name>SetObjectFunction</name>
      <anchor>1f7bfdaf280d359f5df7ff8ff66bd2a1</anchor>
      <arglist>(csFrustumViewObjectFunc *func)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUserdata</name>
      <anchor>c2199eb781071e976c520a910c5d5260</anchor>
      <arglist>(iFrustumViewUserdata *data)=0</arglist>
    </member>
    <member kind="function">
      <name>StartNewShadowBlock</name>
      <anchor>7e182077ea289b68b04419b669ce12fa</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iFrustumViewUserdata</name>
    <base>iBase</base>
    <filename>structiFrustumViewUserdata.html</filename>
  </compound>
  <compound kind="class">
    <name>iGeneralFactoryState</name>
    <base>iGeneralMeshCommonState</base>
    <filename>structiGeneralFactoryState.html</filename>
    <member kind="function">
      <name>AddSubMesh</name>
      <anchor>5927c4d7683cb5a234c8910dbf79844a</anchor>
      <arglist>(iRenderBuffer *indices, iMaterialWrapper *material, const char *name, uint mixmode=(uint)~0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddTriangle</name>
      <anchor>07ed6b51253e401e8aaf03054681f06c</anchor>
      <arglist>(const csTriangle &amp;tri)=0</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>f1d59f2767a88df15fc7bb9d6a5a7d08</anchor>
      <arglist>(const csVector3 &amp;v, const csVector2 &amp;uv, const csVector3 &amp;normal, const csColor4 &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>CalculateNormals</name>
      <anchor>24c22ca26abb0350fb8111b2dbeea72e</anchor>
      <arglist>(bool compress=true)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearSubMeshes</name>
      <anchor>7575c2a956d966820231ef65405782ef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Compress</name>
      <anchor>7c4c14cc841e96cb8121eb26332d2ad0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteSubMesh</name>
      <anchor>cc21ea749a7676d90f0daf3e9052d658</anchor>
      <arglist>(iGeneralMeshSubMesh *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>DisableAutoNormals</name>
      <anchor>b33a538a788f3cc4c6fa9e81222a735d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindSubMesh</name>
      <anchor>f502cb201d3b4b51c45e6f9000a858dd</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GenerateBox</name>
      <anchor>dc7dabe077ed2b6f9ca5940cd297f564</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>GenerateSphere</name>
      <anchor>c00aae05ef047142e9adc9fb3a76ed1a</anchor>
      <arglist>(const csEllipsoid &amp;ellips, int rim_vertices, bool cyl_mapping=false, bool toponly=false, bool reversed=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimationControlFactory</name>
      <anchor>6fee83501d8f80e1bf01367a0ff8afb1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>4b6a8bb23abcda5d123ada0c0a7bf191</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetColors</name>
      <anchor>2ed8f47fb4be5389b90c91734c82ff98</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetNormals</name>
      <anchor>1cdb8cba2b1c1496d693f8920d02bbe2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSubMesh</name>
      <anchor>e2d268e51db06e4aae67abc6310143a9</anchor>
      <arglist>(size_t index) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSubMeshCount</name>
      <anchor>fcadce1416087105e17eb93395e2184c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTexels</name>
      <anchor>e44ce6f1c298bdbd62422072c156b470</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>d4c747cd06b799543a0118574b67516e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>7e67c7927eb951bc777a2d4c207176fb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>a6a08e6418f362d8796a9f42b0fa7913</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>0e52390be30c650f2703af4cc0ce69a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>c21f2170356904a246a36ca460266e27</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsAutoNormals</name>
      <anchor>c1e4736a1b4702342a5852707052556b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsBack2Front</name>
      <anchor>bbd32c0f17f29fe1bacd57ecc2df3d13</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimationControlFactory</name>
      <anchor>22bae36765dd9a702d2c11a5499a0bf5</anchor>
      <arglist>(iGenMeshAnimationControlFactory *anim_ctrl)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBack2Front</name>
      <anchor>b1c5e09307088b913ce97875c7b2f3a1</anchor>
      <arglist>(bool b2f)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>17e33efd640c90474bbe9de44e5ccdfd</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTriangleCount</name>
      <anchor>03437302cb0a19d7fc1537943856830a</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVertexCount</name>
      <anchor>a31991485ffcd2e46cf8816b25aae85f</anchor>
      <arglist>(int n)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGeneralMeshCommonState</name>
    <base>iBase</base>
    <filename>structiGeneralMeshCommonState.html</filename>
    <member kind="function">
      <name>AddRenderBuffer</name>
      <anchor>d917dcfeb4b8da544f69f074d8298466</anchor>
      <arglist>(const char *name, iRenderBuffer *buffer)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderBuffer</name>
      <anchor>70eba38b120888fb5dd73bac901966c5</anchor>
      <arglist>(int index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderBufferCount</name>
      <anchor>7e2790c2842f7d5d6a66253aa8544de6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderBufferName</name>
      <anchor>f29785248b8abfdc90e6280d4d06a539</anchor>
      <arglist>(int index) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsLighting</name>
      <anchor>4cab18d08025f80292eb985611391544</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsManualColors</name>
      <anchor>84e742865099cd03c14f9ffbb28e8d61</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsShadowCasting</name>
      <anchor>9f06cd3a9a38a267c645dbdf686fd862</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsShadowReceiving</name>
      <anchor>b3c8ee2892626b2fbfb3eeed2a412050</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveRenderBuffer</name>
      <anchor>d7d92dba79df1297adc1fc6bfeb7a02f</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLighting</name>
      <anchor>21b42cbe14e7cca1928062b26c065e7b</anchor>
      <arglist>(bool l)=0</arglist>
    </member>
    <member kind="function">
      <name>SetManualColors</name>
      <anchor>e7076663fc0f1bcc77af5c8cbff790f3</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShadowCasting</name>
      <anchor>a762096c23d6ac921b7edac520be0fdd</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShadowReceiving</name>
      <anchor>a0acdb2a7a5266016ced1cc6ec7036e0</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGeneralMeshState</name>
    <base>iGeneralMeshCommonState</base>
    <filename>structiGeneralMeshState.html</filename>
    <member kind="function">
      <name>AddSubMesh</name>
      <anchor>a7027c960f3769b56902c39d6969eea7</anchor>
      <arglist>(unsigned int *triangles, int tricount, iMaterialWrapper *material, uint mixmode)=0</arglist>
    </member>
    <member kind="function">
      <name>AddSubMesh</name>
      <anchor>80e63fca9db3d46bf1a58376d1a94206</anchor>
      <arglist>(unsigned int *triangles, int tricount, iMaterialWrapper *material)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSubMesh</name>
      <anchor>ec04f25abbea1d1eac9048d5ecb99ab6</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimationControl</name>
      <anchor>9f457ff313594fb0c41c368f1fae0432</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimationControl</name>
      <anchor>7f19f18d4223b460c70f0ced898fd86b</anchor>
      <arglist>(iGenMeshAnimationControl *anim_ctrl)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGeneralMeshSubMesh</name>
    <base>iBase</base>
    <filename>structiGeneralMeshSubMesh.html</filename>
    <member kind="function">
      <name>GetIndices</name>
      <anchor>eaecbe88cc4614f6ddff88ea9bb267bf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterial</name>
      <anchor>321b3feca8edd5ba44eab723bbb73181</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMixmode</name>
      <anchor>f8a04345657aee7bb2347d0b000f1aba</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>80110e2af2aee037a859da6635012ace</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterial</name>
      <anchor>ea4657687fb565386a7a5ea559dedb4f</anchor>
      <arglist>(iMaterialWrapper *material)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenerateImageFunction</name>
    <base>iBase</base>
    <filename>structiGenerateImageFunction.html</filename>
    <member kind="function">
      <name>GetValue</name>
      <anchor>723b72f28f1cb87367e3c0b3ab42e16f</anchor>
      <arglist>(float dx, float dy)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenericRenderStep</name>
    <base>iBase</base>
    <filename>structiGenericRenderStep.html</filename>
    <member kind="function">
      <name>AddDisableDefaultTriggerType</name>
      <anchor>456c0332d07a5c0d933bba832fe778ec</anchor>
      <arglist>(const char *type)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultShader</name>
      <anchor>46d66bd841526f239cd2d78bb9a1157b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalTraversal</name>
      <anchor>bd21998917a1ca47ddd73b25a919adb7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetShaderType</name>
      <anchor>f5e3d4200d1f54a27437bb60d82db5ec</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetZBufMode</name>
      <anchor>06e515b9d5c50266945a42822ffff552</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetZOffset</name>
      <anchor>1b5d84da433270b9add75b09d4b040da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDisableDefaultTriggerType</name>
      <anchor>aeea3ea03d886d286a5d97467ef0c4a5</anchor>
      <arglist>(const char *type)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDefaultShader</name>
      <anchor>08656fe1d3c7858ab40c724747ac38b9</anchor>
      <arglist>(iShader *shader)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPortalTraversal</name>
      <anchor>4a5f8c8088ae3da5113fc3e6284c77a9</anchor>
      <arglist>(bool p)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShaderType</name>
      <anchor>0093599b21e35fa1befe7c5831ea8069</anchor>
      <arglist>(const char *type)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZBufMode</name>
      <anchor>99df0190ac612e7c6cefea025f8d3d67</anchor>
      <arglist>(csZBufMode zmode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZOffset</name>
      <anchor>6dff39603684aad6b655cc5919be5a6c</anchor>
      <arglist>(bool zOffset)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenMeshAnimationControl</name>
    <base>iBase</base>
    <filename>structiGenMeshAnimationControl.html</filename>
    <member kind="function">
      <name>AnimatesColors</name>
      <anchor>c17cf7ba6aab0afe221b200d8d3c4a97</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>AnimatesNormals</name>
      <anchor>f6949dff00af60d5de29cf5c85d50d36</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>AnimatesTexels</name>
      <anchor>81f57fd67ca742edcfd60e4b6b5f20fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>AnimatesVertices</name>
      <anchor>b7d6b9182e701eb90d589e695f7d4656</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Update</name>
      <anchor>ce8f78bfe657d83a549a6fba5b945b9c</anchor>
      <arglist>(csTicks current)=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateColors</name>
      <anchor>6def13a0129a701d7ae4faab3832bf3c</anchor>
      <arglist>(csTicks current, const csColor4 *colors, int num_colors, uint32 version_id)=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateNormals</name>
      <anchor>d7902ec8aa14ea7e6e0db138f1306b25</anchor>
      <arglist>(csTicks current, const csVector3 *normals, int num_normals, uint32 version_id)=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateTexels</name>
      <anchor>88dade98f439749d078ec5c9c639ba07</anchor>
      <arglist>(csTicks current, const csVector2 *texels, int num_texels, uint32 version_id)=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateVertices</name>
      <anchor>fa7b562ab40aa3d756982fb8e1aaea72</anchor>
      <arglist>(csTicks current, const csVector3 *verts, int num_verts, uint32 version_id)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenMeshAnimationControlFactory</name>
    <base>iBase</base>
    <filename>structiGenMeshAnimationControlFactory.html</filename>
    <member kind="function">
      <name>CreateAnimationControl</name>
      <anchor>f8279254072b84dc3d6e2ee901472da8</anchor>
      <arglist>(iMeshObject *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>7283da43e7ab3fb08a3eaf308a10f503</anchor>
      <arglist>(iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>608f6137c9a347a9e0063b120f59313f</anchor>
      <arglist>(iDocumentNode *parent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenMeshAnimationControlState</name>
    <base>iBase</base>
    <filename>structiGenMeshAnimationControlState.html</filename>
    <member kind="function">
      <name>Execute</name>
      <anchor>4101fbeae659c56ce2d3890c2143313d</anchor>
      <arglist>(const char *scriptname)=0</arglist>
    </member>
    <member kind="function">
      <name>Stop</name>
      <anchor>32181564c7fe36484fd79c3f55367398</anchor>
      <arglist>(const char *scriptname)=0</arglist>
    </member>
    <member kind="function">
      <name>Stop</name>
      <anchor>bdd51e76fe32497b8c94bfeb6099fc77</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenMeshAnimationControlType</name>
    <base>iBase</base>
    <filename>structiGenMeshAnimationControlType.html</filename>
    <member kind="function">
      <name>CreateAnimationControlFactory</name>
      <anchor>5d3dc8c6460c41f197fa3366cac0fb1e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGenMeshSkeletonControlState</name>
    <base>iBase</base>
    <filename>structiGenMeshSkeletonControlState.html</filename>
    <member kind="function">
      <name>GetAnimatedFaceNormals</name>
      <anchor>e19e123bb7238e84ad3000b2080962cb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimatedFaceNormalsCount</name>
      <anchor>01874d7ec3b81610bfb28ea7a7f31228</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimatedVertices</name>
      <anchor>0aaab77b6781e8cb8667b38664e1b114</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimatedVerticesCount</name>
      <anchor>2526afee2d0647f097c1909135c84b3d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimatedVertNormals</name>
      <anchor>733e8efff635789702d1ec336b4d68b8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimatedVertNormalsCount</name>
      <anchor>0e54807525976de77b98e2b0b1c693cc</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGradient</name>
    <base>iBase</base>
    <filename>structiGradient.html</filename>
    <member kind="function">
      <name>AddShade</name>
      <anchor>bafb739cac7eaf209c1a78ae5c62247b</anchor>
      <arglist>(const csGradientShade &amp;shade)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>9b881571bc707e5cd4f57d2f18d72880</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetShades</name>
      <anchor>ce86492d535820fadca55ceed2763cce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Render</name>
      <anchor>530367f8b90fae83bdda036474c17c54</anchor>
      <arglist>(csRGBpixel *pal, size_t count, float begin=0.0f, float end=1.0f) const =0</arglist>
    </member>
    <member kind="function">
      <name>Render</name>
      <anchor>8ebb11c93c33f6ff51d5f50109559903</anchor>
      <arglist>(csRGBcolor *pal, size_t count, float begin=0.0f, float end=1.0f) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGradientShades</name>
    <base>iArrayReadOnly&lt; csGradientShade &gt;</base>
    <filename>structiGradientShades.html</filename>
  </compound>
  <compound kind="class">
    <name>iGraphics2D</name>
    <base>iBase</base>
    <filename>structiGraphics2D.html</filename>
    <member kind="function">
      <name>AllowResize</name>
      <anchor>222a464617b214ac3d58635794e96b9e</anchor>
      <arglist>(bool iAllow)=0</arglist>
    </member>
    <member kind="function">
      <name>BeginDraw</name>
      <anchor>7901d5c26aaf8fddc078b1d5e9d3ba24</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Blit</name>
      <anchor>dee6b567cb1aa39ded1ae4bc1abb9128</anchor>
      <arglist>(int x, int y, int width, int height, unsigned char const *data)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>e65d69ddf39f387adb9eb4e2ba61c1cc</anchor>
      <arglist>(int color)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearAll</name>
      <anchor>62dd52c9b2bd80e33071687cfbb9cb92</anchor>
      <arglist>(int color)=0</arglist>
    </member>
    <member kind="function">
      <name>ClipLine</name>
      <anchor>f4faa8bec7b86a03464cabbe65723adc</anchor>
      <arglist>(float &amp;x1, float &amp;y1, float &amp;x2, float &amp;y2, int xmin, int ymin, int xmax, int ymax)=0</arglist>
    </member>
    <member kind="function">
      <name>Close</name>
      <anchor>cf24016625b4539853fe23155b836433</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateOffscreenCanvas</name>
      <anchor>a3446546f71865b831d3f93f82bc73f9</anchor>
      <arglist>(void *memory, int width, int height, int depth, iOffscreenCanvasCallback *ofscb)=0</arglist>
    </member>
    <member kind="function">
      <name>DoubleBuffer</name>
      <anchor>6d875cd16cbcb64a3024b3bef79afe47</anchor>
      <arglist>(bool Enable)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawBox</name>
      <anchor>d6abb6d4a418ad240d83675d6c3cf6c3</anchor>
      <arglist>(int x, int y, int w, int h, int color)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>3b86658dbcea0a9cfb7e6b19483a4bc7</anchor>
      <arglist>(float x1, float y1, float x2, float y2, int color)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawPixel</name>
      <anchor>2609b30b3aab7792da8e60a3553316ec</anchor>
      <arglist>(int x, int y, int color)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawPixels</name>
      <anchor>09e7db6102e0327c14a5589255d1da4d</anchor>
      <arglist>(csPixelCoord const *pixels, int num_pixels, int color)=0</arglist>
    </member>
    <member kind="function">
      <name>FindRGB</name>
      <anchor>60b21bab24b2e9e20062a610b0f8fc8e</anchor>
      <arglist>(int r, int g, int b, int a=255)=0</arglist>
    </member>
    <member kind="function">
      <name>FinishDraw</name>
      <anchor>58e0448afd981ebe5b402a3151c7bb9e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FreeArea</name>
      <anchor>e221be199450186edecc2fa5cd63ebb7</anchor>
      <arglist>(csImageArea *Area)=0</arglist>
    </member>
    <member kind="function">
      <name>GetClipRect</name>
      <anchor>661e73275c951a9871ba8ac40170bbd3</anchor>
      <arglist>(int &amp;nMinX, int &amp;nMinY, int &amp;nMaxX, int &amp;nMaxY)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDoubleBufferState</name>
      <anchor>8fbdea73dbd3bedda5b450f057ecaee8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFontServer</name>
      <anchor>dcd4e89ff570605a377946f1ee37ce74</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullScreen</name>
      <anchor>3c2411ae31cabeb4721fa4d8b24a4017</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetGamma</name>
      <anchor>f6e94f5e9c6a321eadddaff7842ade83</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>02ffd3328c7d0389f7e2d4008d3e7831</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>adcd35bd3fa0371b088252a55eff9ac0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNativeWindow</name>
      <anchor>2dcff33536b46a742cbeb22ee8aea07f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPage</name>
      <anchor>0c5c7675d25c35faad8664787d68f3f2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPalEntryCount</name>
      <anchor>3d72e1b805625ce1e86a941931ffb91d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>db2ede0cb8859bac4da2858ff230a50a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPixel</name>
      <anchor>4fc7d8f725bc3b48499b1d16289f2cd0</anchor>
      <arglist>(int x, int y, uint8 &amp;oR, uint8 &amp;oG, uint8 &amp;oB, uint8 &amp;oA)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPixel</name>
      <anchor>4b6b04ba42306f59f17743693c800128</anchor>
      <arglist>(int x, int y, uint8 &amp;oR, uint8 &amp;oG, uint8 &amp;oB)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPixelAt</name>
      <anchor>f870653e98aeae7555208ad9e0e793a2</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPixelBytes</name>
      <anchor>1c0c628776e00d3a11c6d78d2d432a78</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPixelFormat</name>
      <anchor>3c434c0095d5efa50f8acdefe7cdd283</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>8b323510cca4bb0383a50d8fec0d3a9f</anchor>
      <arglist>(int color, int &amp;r, int &amp;g, int &amp;b, int &amp;a)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRGB</name>
      <anchor>31b837f87f3108c4e23d5e18d73137d0</anchor>
      <arglist>(int color, int &amp;r, int &amp;g, int &amp;b)=0</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>098d872db308fcaa0e90c67ff26b85de</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>dbf60a925a17f7b43298d6d2bf1ff649</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PerformExtension</name>
      <anchor>cc9fc5776286ea8444a505e478d3c3e5</anchor>
      <arglist>(char const *command,...)=0</arglist>
    </member>
    <member kind="function">
      <name>PerformExtensionV</name>
      <anchor>151f96b4f7fc9cbc1404101a755f3569</anchor>
      <arglist>(char const *command, va_list)=0</arglist>
    </member>
    <member kind="function">
      <name>Print</name>
      <anchor>b3c704775a395a752e80d56c391f7842</anchor>
      <arglist>(csRect const *pArea)=0</arglist>
    </member>
    <member kind="function">
      <name>Resize</name>
      <anchor>22b0cd2c6781aaeb807f7dd3bc2bd9b0</anchor>
      <arglist>(int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>RestoreArea</name>
      <anchor>7eaecf7842b7527bf515f03cb4773959</anchor>
      <arglist>(csImageArea *Area, bool Free)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveArea</name>
      <anchor>fdcb1f0264b4a2b3fb4de931bfdb1498</anchor>
      <arglist>(int x, int y, int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>ScreenShot</name>
      <anchor>e513a9eb40766835c8f286a7c80f8ccb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetClipRect</name>
      <anchor>0e1cdb21f816bf59fb6f8f89e7487149</anchor>
      <arglist>(int nMinX, int nMinY, int nMaxX, int nMaxY)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFullScreen</name>
      <anchor>03febf8d32180894b096d21646797a77</anchor>
      <arglist>(bool b)=0</arglist>
    </member>
    <member kind="function">
      <name>SetGamma</name>
      <anchor>05f159c380f21217eb09bbfe69b9e516</anchor>
      <arglist>(float gamma)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMouseCursor</name>
      <anchor>a785b3c9ca0b1477b1a7f85d80a80d41</anchor>
      <arglist>(iImage *image, const csRGBcolor *keycolor=0, int hotspot_x=0, int hotspot_y=0, csRGBcolor fg=csRGBcolor(255, 255, 255), csRGBcolor bg=csRGBcolor(0, 0, 0))=0</arglist>
    </member>
    <member kind="function">
      <name>SetMouseCursor</name>
      <anchor>5737a954061ed0ec3da31315b66adedf</anchor>
      <arglist>(csMouseCursorID iShape)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMousePosition</name>
      <anchor>1a5e95fd5b2ceabb2d60a1446c3e471b</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRGB</name>
      <anchor>902e20c4f1aaaf8f78d6064aa98161b6</anchor>
      <arglist>(int i, int r, int g, int b)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>d823619633687d78de4917f66efb96a5</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const wchar_t *str, uint flags=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>7d50f77432f14ba009fac56f673c0023</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const char *str, uint flags=0)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteBaseline</name>
      <anchor>c8d3db165c49173a24753db5e7693672</anchor>
      <arglist>(iFont *font, int x, int y, int fg, int bg, const char *str)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGraphics3D</name>
    <base>iBase</base>
    <filename>structiGraphics3D.html</filename>
    <member kind="function">
      <name>ActivateBuffers</name>
      <anchor>ad7c604f83304f0769b7d8f7b1769fcb</anchor>
      <arglist>(csVertexAttrib *attribs, iRenderBuffer **buffers, unsigned int count)=0</arglist>
    </member>
    <member kind="function">
      <name>ActivateBuffers</name>
      <anchor>62eba283c41e16ee10e6c27e9421f73b</anchor>
      <arglist>(csRenderBufferHolder *holder, csRenderBufferName mapping[CS_VATTRIB_SPECIFIC_LAST+1])=0</arglist>
    </member>
    <member kind="function">
      <name>BeginDraw</name>
      <anchor>a1f60ad7d78587051d15e3375e2c6275</anchor>
      <arglist>(int DrawFlags)=0</arglist>
    </member>
    <member kind="function">
      <name>Close</name>
      <anchor>12027541f4d46572e8bd7e3f6c72efc6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ClosePortal</name>
      <anchor>decc9dfd129e09c459ce9a47d1029e96</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateHalo</name>
      <anchor>cb3cc0bc4792606ea6f51bf650e74567</anchor>
      <arglist>(float iR, float iG, float iB, unsigned char *iAlpha, int iWidth, int iHeight)=0</arglist>
    </member>
    <member kind="function">
      <name>DeactivateBuffers</name>
      <anchor>0df7b6bb9d595c1c59503ac6034c42a8</anchor>
      <arglist>(csVertexAttrib *attribs, unsigned int count)=0</arglist>
    </member>
    <member kind="function">
      <name>DisableZOffset</name>
      <anchor>49a535f60231f8b5a5c2bdc98b4d3e69</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>041485a92ecd6ee7120468775f2d41e8</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, float fov, int color)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawMesh</name>
      <anchor>9970c9788a2341ea5977441a2e2a8b9e</anchor>
      <arglist>(const csCoreRenderMesh *mymesh, const csRenderMeshModes &amp;modes, const iShaderVarStack *stacks)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawPixmap</name>
      <anchor>02901dad92a738597617018af17b86be</anchor>
      <arglist>(iTextureHandle *hTex, int sx, int sy, int sw, int sh, int tx, int ty, int tw, int th, uint8 Alpha=0)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawSimpleMesh</name>
      <anchor>0f6193251c81945eda7e627850bc4bd5</anchor>
      <arglist>(const csSimpleRenderMesh &amp;mesh, uint flags=0)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableZOffset</name>
      <anchor>4ffbafd0d1116d40a64b11dc1f053cd5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FinishDraw</name>
      <anchor>d4ec53d1e6f187bad2775dd8a69c1aeb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCaps</name>
      <anchor>89bb5994c05f2b9d3d0e6d8ea48125f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetClipper</name>
      <anchor>a63e449efac50e9ef216a0f0099cdf85</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetClipType</name>
      <anchor>e5d9e08483f9bd0885e7f7a69ecb4102</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDriver2D</name>
      <anchor>0969eabc9030cdd27fc07d70387107ae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>b725ffa96e5771de66891f8c84ae3310</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNearPlane</name>
      <anchor>1a63ecbe35674970e795d7e79dbb005a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPerspectiveAspect</name>
      <anchor>b7d81b919c044edf248a56ebe025fd43</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPerspectiveCenter</name>
      <anchor>cab01f5c28f4674ebcfae44e58174ec2</anchor>
      <arglist>(int &amp;x, int &amp;y) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderState</name>
      <anchor>5c9b1191e72a361f0479e0e65dfd5bb1</anchor>
      <arglist>(G3D_RENDERSTATEOPTION op) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderTarget</name>
      <anchor>ddf13b73285a796c1fbe97a4b7749e23</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureManager</name>
      <anchor>ef1348b61f24373625532f2b4c10d8c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>6849627a38f64d3f8a3c5856e7faacfc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWorldToCamera</name>
      <anchor>a61208209163cf5565f7a4fff1814dbb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetWriteMask</name>
      <anchor>03ea99b880df6d32dab9b0673d27cdb5</anchor>
      <arglist>(bool &amp;red, bool &amp;green, bool &amp;blue, bool &amp;alpha) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetZBuffValue</name>
      <anchor>2ead8e3bb2b2b3ddec2654c38aa10ddb</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>GetZMode</name>
      <anchor>7f5005eef330541b6e0fcf62fe5b20d5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasNearPlane</name>
      <anchor>47e5170595941074ed2d9677527212d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>311cd114c447d60c560e3f221e437b8b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>OpenPortal</name>
      <anchor>949acc5f73f1219ff7d59eb797e5cab2</anchor>
      <arglist>(size_t numVertices, const csVector2 *vertices, const csPlane3 &amp;normal, csFlags flags)=0</arglist>
    </member>
    <member kind="function">
      <name>PerformExtension</name>
      <anchor>fa6a7b9b4421bedc6f9df706c7ac3240</anchor>
      <arglist>(char const *command,...)=0</arglist>
    </member>
    <member kind="function">
      <name>PerformExtensionV</name>
      <anchor>a676cc819a3230b4673bf0a5883a6172</anchor>
      <arglist>(char const *command, va_list)=0</arglist>
    </member>
    <member kind="function">
      <name>Print</name>
      <anchor>85f47020a3074ba59934fa8c4522f570</anchor>
      <arglist>(csRect const *area)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveFromCache</name>
      <anchor>735ab704ca0005522dbfe0539b4fb451</anchor>
      <arglist>(iRendererLightmap *rlm)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetNearPlane</name>
      <anchor>a3710f859d39b702d00e0ac1bedc856c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetClipper</name>
      <anchor>6ce0b3822a489b374882908a864c0129</anchor>
      <arglist>(iClipper2D *clipper, int cliptype)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDimensions</name>
      <anchor>7724cf3cd4e83688a31e7387a3c62eba</anchor>
      <arglist>(int width, int height)=0</arglist>
    </member>
    <member kind="function">
      <name>SetNearPlane</name>
      <anchor>03c8d538f5b11f01493e5075c97415b9</anchor>
      <arglist>(const csPlane3 &amp;pl)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOption</name>
      <anchor>cfae48d9b0b017db4d0574063c77a078</anchor>
      <arglist>(const char *, const char *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPerspectiveAspect</name>
      <anchor>e5589fa285cbadf260f65faaa1622a66</anchor>
      <arglist>(float aspect)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPerspectiveCenter</name>
      <anchor>a996ffcae7b36cf5b6d7e6c56b13d4d1</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderState</name>
      <anchor>18100c47238241a81415c70742f13aa9</anchor>
      <arglist>(G3D_RENDERSTATEOPTION op, long val)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderTarget</name>
      <anchor>29683aee559a2b287b35d0604ebaae28</anchor>
      <arglist>(iTextureHandle *handle, bool persistent=false, int subtexture=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShadowState</name>
      <anchor>f24e6c40722647326a657d1d44fa2b7b</anchor>
      <arglist>(int state)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTextureState</name>
      <anchor>067f27208e8a4e9d505cbddcf51b61b5</anchor>
      <arglist>(int *units, iTextureHandle **textures, int count)=0</arglist>
    </member>
    <member kind="function">
      <name>SetWorldToCamera</name>
      <anchor>f20896aa0f34f7aafa8dfa9e37bfb836</anchor>
      <arglist>(const csReversibleTransform &amp;w2c)=0</arglist>
    </member>
    <member kind="function">
      <name>SetWriteMask</name>
      <anchor>bc85cd6f9a7a8243379e395e8569a3dc</anchor>
      <arglist>(bool red, bool green, bool blue, bool alpha)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZMode</name>
      <anchor>36361a73cb7553adfc1f120bd1038b3b</anchor>
      <arglist>(csZBufMode mode)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iGraphicsMemory</name>
    <base>iBase</base>
    <filename>structiGraphicsMemory.html</filename>
    <member kind="function">
      <name>GetImage</name>
      <anchor>058245bad8ffbe116d4555272d1f6c61</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHalo</name>
    <base>iBase</base>
    <filename>structiHalo.html</filename>
    <member kind="function">
      <name>Draw</name>
      <anchor>2007fca1d4d043b81de4c0596d1f3925</anchor>
      <arglist>(float x, float y, float w, float h, float iIntensity, csVector2 *iVertices, size_t iVertCount)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>d543a4708d6aa4839ca911c28842a1f3</anchor>
      <arglist>(float &amp;oR, float &amp;oG, float &amp;oB)=0</arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>cd870120c7bd491b9116d808847ecc49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>210bec234106a2ceb5561c76a487da23</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>c7082492c760b3cac22a3e6e212710b7</anchor>
      <arglist>(float &amp;iR, float &amp;iG, float &amp;iB)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHazeFactoryState</name>
    <base>iBase</base>
    <filename>structiHazeFactoryState.html</filename>
    <member kind="function">
      <name>AddLayer</name>
      <anchor>7f2483413d4c67e1a669b815ba7aee5b</anchor>
      <arglist>(iHazeHull *hull, float scale)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDirectional</name>
      <anchor>7f055643eac65b636c4b4cfbe47ee415</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLayerCount</name>
      <anchor>e331a65c0e9c970c4cfe3ceafcb73c86</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLayerHull</name>
      <anchor>1387dca7cc8ff0d13df4768f234df1a6</anchor>
      <arglist>(int layer) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLayerScale</name>
      <anchor>4b6dda04fcd8673ef90d7ed1d1fbe06f</anchor>
      <arglist>(int layer) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOrigin</name>
      <anchor>33e7d119e191d04df5167db3ab44562c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetDirectional</name>
      <anchor>c0f3971442ff07b850813ef0cfaf0823</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLayerHull</name>
      <anchor>7c0b0cbcd8633180030778a137944a7a</anchor>
      <arglist>(int layer, iHazeHull *hull)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLayerScale</name>
      <anchor>3003f7b9252685bd6e5c1fd90ffa8609</anchor>
      <arglist>(int layer, float scale)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>a0ac21c4a3216544b0777fb6078edd4d</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHazeHull</name>
    <base>iBase</base>
    <filename>structiHazeHull.html</filename>
    <member kind="function">
      <name>GetEdge</name>
      <anchor>966b0b5f02fb726155f6014d01fe3e23</anchor>
      <arglist>(int edge_num, int &amp;vertex_idx_1, int &amp;vertex_idx_2) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEdgeCount</name>
      <anchor>5238a7f7096269bc910d49b872781951</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPolEdge</name>
      <anchor>958f983dc5f4cbdb1d9d8943edb1805f</anchor>
      <arglist>(int polygon_num, int vertex_num, int &amp;start_idx, int &amp;end_idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPolVertex</name>
      <anchor>9742facd08285f8061a13bd86c89ff82</anchor>
      <arglist>(int polygon_num, int vertex_num) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPolVerticeCount</name>
      <anchor>681ddbb3eadf9b7ffb31e487d46bd4e6</anchor>
      <arglist>(int polygon_num) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonCount</name>
      <anchor>39ea303811773d04ea084b30d22380d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>22b033a281f90fca11277e29596f0256</anchor>
      <arglist>(csVector3 &amp;res, int vertex_idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVerticeCount</name>
      <anchor>bb277811883a6635a1cb462ca16df58e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHazeHullBox</name>
    <base>iBase</base>
    <filename>structiHazeHullBox.html</filename>
    <member kind="function">
      <name>GetSettings</name>
      <anchor>915be6e04943acf07220b15e987fe8a4</anchor>
      <arglist>(csVector3 &amp;min, csVector3 &amp;max)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHazeHullCone</name>
    <base>iBase</base>
    <filename>structiHazeHullCone.html</filename>
    <member kind="function">
      <name>GetSettings</name>
      <anchor>d2abda5d32cf4a92eec06fd91b3226bf</anchor>
      <arglist>(int &amp;nr, csVector3 &amp;a, csVector3 &amp;b, float &amp;ra, float &amp;rb)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHazeHullCreation</name>
    <base>iBase</base>
    <filename>structiHazeHullCreation.html</filename>
    <member kind="function">
      <name>CreateBox</name>
      <anchor>3e5f1d8d0b7a3efff7fc9c33ba7a514c</anchor>
      <arglist>(const csVector3 &amp;min, const csVector3 &amp;max) const =0</arglist>
    </member>
    <member kind="function">
      <name>CreateCone</name>
      <anchor>daae5c366fe5923e43c064950d38e562</anchor>
      <arglist>(int nr_sides, const csVector3 &amp;start, const csVector3 &amp;end, float srad, float erad) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iHazeState</name>
    <base>iHazeFactoryState</base>
    <filename>structiHazeState.html</filename>
  </compound>
  <compound kind="class">
    <name>iImage</name>
    <base>iBase</base>
    <filename>structiImage.html</filename>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>c8bc18376ddca1d07c3711226739cbd4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDepth</name>
      <anchor>af91c32e0a30f974fdcad3919cb5ba66</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>dcfcf95222b2f49662efaf5aca8033c8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>31a45f12e47bbdca9754117200ce9658</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetImageData</name>
      <anchor>c6ef621537753b4409a003b126d3122c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetImageType</name>
      <anchor>37f6dc9cf212e9cc0ec34eeb93b12c3b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKeycolor</name>
      <anchor>0420005a789ece92aca8103868109b2e</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>eb591dea9353b4afc04d012ca0413277</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMipmap</name>
      <anchor>3b83098f175ff487283643be45da9b38</anchor>
      <arglist>(uint num)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>0ed17a5a05284bcdc7855238d1aceac3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPalette</name>
      <anchor>e068da9b43ba09ac4630e2892ff5b623</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>865140f81cf37db314331efed7ec1d8a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRawFormat</name>
      <anchor>4ce4fb6f4ceac4e0a917e084080f706d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSubImage</name>
      <anchor>51536f99e715892c1906811cb3f1ddd0</anchor>
      <arglist>(uint num)=0</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>e46445da6aa7836ce65a1181b9125835</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasKeycolor</name>
      <anchor>81336153352f49b8df95a0c06389e63d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>3a78d763bd95c2bb63bb3d1fc38153b9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasMipmaps</name>
      <anchor>be0ebf813ef5c14192471df9a82bfecc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasSubImages</name>
      <anchor>83c3d16da129a42d19ce693f28e392e3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>fb6d896c16682e094acad01530ec8e6a</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iImageFileLoader</name>
    <base>iBase</base>
    <filename>structiImageFileLoader.html</filename>
    <member kind="function">
      <name>ApplyTo</name>
      <anchor>94612c230200a708316cb0f6ca4240c2</anchor>
      <arglist>(csImageMemory *image)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDataType</name>
      <anchor>a1f6193ca336a2314d21c07875e72191</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>8e161009cb9179e99642b4b5771d782e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHeight</name>
      <anchor>e28e7ff565677e09d25d9b36e27057ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>9d1e77a9f616e6e061a5926285b7c22d</anchor>
      <arglist>(int &amp;r, int &amp;g, int &amp;b) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRawData</name>
      <anchor>3999780429cafb95cd97676e36b54672</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetWidth</name>
      <anchor>0ba00ae9adaf2dc46825e62121302329</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasKeyColor</name>
      <anchor>a5aaff795ae3173cacd7f8147c3ba450</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>LoadData</name>
      <anchor>4008336c7f539469afb62c951b4a7197</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iImageIO</name>
    <base>iBase</base>
    <filename>structiImageIO.html</filename>
    <member kind="function">
      <name>FileFormatDescription</name>
      <anchor>d1b38b88a311efbecc36f319cc5059e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GetDescription</name>
      <anchor>127cf17dd6298b0fd658fe8a1fb24568</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>36f654bfa84913494cc45f5e0ca3f50f</anchor>
      <arglist>(iDataBuffer *buf, int iFormat)=0</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>5585130c5f81b8a524f4b37b72fb2a61</anchor>
      <arglist>(iImage *image, const char *mime=0, const char *extraoptions=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Save</name>
      <anchor>51941798545ffe384889a16f7cee9c1e</anchor>
      <arglist>(iImage *image, FileFormatDescription *format, const char *extraoptions=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDithering</name>
      <anchor>60fb5f7b069dac4534465ad07eb82efd</anchor>
      <arglist>(bool iEnable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iImposter</name>
    <base>iBase</base>
    <filename>structiImposter.html</filename>
    <member kind="function">
      <name>CreateImposter</name>
      <anchor>94bfcc2db9a1702bcc09c607698a4a50</anchor>
      <arglist>(csReversibleTransform &amp;pov)=0</arglist>
    </member>
    <member kind="function">
      <name>SetImposterActive</name>
      <anchor>2d0f562d34b2567dd29f65e1c90f148a</anchor>
      <arglist>(bool flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinDistance</name>
      <anchor>474a13e16a1d7730041b72aff7a5118f</anchor>
      <arglist>(iSharedVariable *dist)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRotationTolerance</name>
      <anchor>00cc788ea03704b3d2214802395d5d2c</anchor>
      <arglist>(iSharedVariable *angle)=0</arglist>
    </member>
    <member kind="function">
      <name>WouldUseImposter</name>
      <anchor>2cd1cb2049a288132dfb3898b47b9b6d</anchor>
      <arglist>(csReversibleTransform &amp;pov) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iInputBinder</name>
    <base>iBase</base>
    <filename>structiInputBinder.html</filename>
    <member kind="function">
      <name>Axis</name>
      <anchor>f9c22268b61b357eb2982e8e2d163908</anchor>
      <arglist>(unsigned cmd)=0</arglist>
    </member>
    <member kind="function">
      <name>BindAxis</name>
      <anchor>a7649345d9af9eca913ac1cb7e275fea</anchor>
      <arglist>(csInputDefinition const &amp;def, unsigned int cmd, int sensitivity=1)=0</arglist>
    </member>
    <member kind="function">
      <name>BindButton</name>
      <anchor>88e6c7239906339309cd0c7eab82c47f</anchor>
      <arglist>(csInputDefinition const &amp;def, unsigned int cmd, bool toggle=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Button</name>
      <anchor>82ea6bef5f334831c251fb455131665a</anchor>
      <arglist>(unsigned cmd)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadConfig</name>
      <anchor>c6e225b0c0b881ac98ad88d263b576b0</anchor>
      <arglist>(iConfigFile *, const char *subsection=0)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryHandler</name>
      <anchor>c03ddf7eb4385e967bec294d3a9c4d5c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SaveConfig</name>
      <anchor>2e7ad6cdbc829f380e9ab57b944e334f</anchor>
      <arglist>(iConfigFile *, const char *subsection=0)=0</arglist>
    </member>
    <member kind="function">
      <name>UnbindAll</name>
      <anchor>2ec10a42410f088450765b7a8eb704f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnbindAxis</name>
      <anchor>5ade82463225ad4f90f25b7278f11074</anchor>
      <arglist>(unsigned cmd)=0</arglist>
    </member>
    <member kind="function">
      <name>UnbindButton</name>
      <anchor>18e8e97320f442b0fdfa60e3b2c051cf</anchor>
      <arglist>(unsigned cmd)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iInstancingFactoryState</name>
    <base>iInstancingMeshCommonState</base>
    <filename>structiInstancingFactoryState.html</filename>
    <member kind="function">
      <name>AddTriangle</name>
      <anchor>22ea035568a6eb9150c9ea84bce06e73</anchor>
      <arglist>(const csTriangle &amp;tri)=0</arglist>
    </member>
    <member kind="function">
      <name>AddVertex</name>
      <anchor>f0bbc5c39fcc8d0b6d5b1e27e5a88092</anchor>
      <arglist>(const csVector3 &amp;v, const csVector2 &amp;uv, const csVector3 &amp;normal, const csColor4 &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>CalculateNormals</name>
      <anchor>93b5c9faed12bd7a1625d3f5b79a2c0b</anchor>
      <arglist>(bool compress=true)=0</arglist>
    </member>
    <member kind="function">
      <name>Compress</name>
      <anchor>4f5bf6a15aa585948c995dd09d2f2cc1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GenerateBox</name>
      <anchor>ed96473fa1a7740d5fbcf582dc6893bd</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>GenerateQuad</name>
      <anchor>20123b1d2d7604c43b1d77c3ef9249ae</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3, const csVector3 &amp;v4)=0</arglist>
    </member>
    <member kind="function">
      <name>GenerateSphere</name>
      <anchor>c1d94ee9ae430ff13aaa855799718fa8</anchor>
      <arglist>(const csEllipsoid &amp;sphere, int rim_vertices, bool cyl_mapping=false, bool toponly=false, bool reversed=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>bc3449ffdb52d45739186caf2109e6bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetColors</name>
      <anchor>18c692541aca6e22364189f39a7bfe68</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialWrapper</name>
      <anchor>1fb5876eefcdb23dddca80509e46c94b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>c73e74d848bf6c471e6c85890abb9285</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNormals</name>
      <anchor>fad2598d487551f967e84f94feced6a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTexels</name>
      <anchor>608581163016367d80c804d5836b270b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>9cb094a15c93c107fbf12c483e18ca75</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>fc464a2a3fb21902d64679967928e1a2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>210a4bba525eebb1c46e69a844eade3e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>1444eee3ecdfa31d5935218bbdfd3fc8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsAutoNormals</name>
      <anchor>ecf18d021b459dde1db086b7c91352d9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>8d50e88c3833ad47a13dcb0b8856ce3f</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialWrapper</name>
      <anchor>5f619907a5c61644351afcb1674def90</anchor>
      <arglist>(iMaterialWrapper *material)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>15e329b72267ee873b6fe3750367e67d</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iInstancingMeshCommonState</name>
    <base>iBase</base>
    <filename>structiInstancingMeshCommonState.html</filename>
    <member kind="function">
      <name>IsLighting</name>
      <anchor>6bd8d10689ca1cb59a9d1dead114e83e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsManualColors</name>
      <anchor>567142cb14d92f1e66658b89ae365bf4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsShadowCasting</name>
      <anchor>a02d8ccfd03a944fc5f97291218bc8ad</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsShadowReceiving</name>
      <anchor>f3e78defef5ca085c7f0a191025dfe53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetLighting</name>
      <anchor>b6a40331f312bc952389223846bd94ff</anchor>
      <arglist>(bool l)=0</arglist>
    </member>
    <member kind="function">
      <name>SetManualColors</name>
      <anchor>0b25059ad984b3806863d206509c498b</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShadowCasting</name>
      <anchor>77e5f3cf85ddfeea6530100944f27653</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShadowReceiving</name>
      <anchor>1ec9c8ec57dce78c645180e8ababf446</anchor>
      <arglist>(bool m)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iInstancingMeshState</name>
    <base>iInstancingMeshCommonState</base>
    <filename>structiInstancingMeshState.html</filename>
    <member kind="function">
      <name>AddInstance</name>
      <anchor>4df2802ad1d5260ea43796dd76525187</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>AddInstancesVariable</name>
      <anchor>487c4905f14c7804760e996f19e90ca0</anchor>
      <arglist>(const csShaderVariable &amp;parameter)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInstancesCount</name>
      <anchor>f76644ada0eaf59de41993b47707c54c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetInstanceVariable</name>
      <anchor>42cacd4a1fba9d474a538be79190a208</anchor>
      <arglist>(size_t instance_id, size_t variable_id)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAllInstances</name>
      <anchor>d2417028da5733f5fe9a7ec76d9a92a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveInstance</name>
      <anchor>dbd53ab85e5af4ffe20f7284acb3e183</anchor>
      <arglist>(size_t id)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAutomaticBoundingBoxCreation</name>
      <anchor>f3c7695a4084fe94cf6f1ce6b7e047b7</anchor>
      <arglist>(bool flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBoundingBox</name>
      <anchor>f913b4180ae50024b611518629e8655d</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>SetInstanceVariable</name>
      <anchor>962ba1d79a82c9eb269049c336da91d8</anchor>
      <arglist>(size_t instance_id, size_t variable_id, const csVector3 &amp;variable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetInstanceVariable</name>
      <anchor>b144abd0311909738a3a512d04eeb13a</anchor>
      <arglist>(size_t instance_id, csShaderVariable variable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iJob</name>
    <base>iBase</base>
    <filename>structiJob.html</filename>
    <member kind="function">
      <name>Run</name>
      <anchor>fc8b893a6bd9dd809f92db7b999910b4</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iJobQueue</name>
    <base>iBase</base>
    <filename>structiJobQueue.html</filename>
    <member kind="function">
      <name>Enqueue</name>
      <anchor>1e237d32f35b7a637f8185a731ae58fb</anchor>
      <arglist>(iJob *job)=0</arglist>
    </member>
    <member kind="function">
      <name>PullAndRun</name>
      <anchor>f6fbf1ed078443691c8e8f9a0e2d3f21</anchor>
      <arglist>(iJob *job)=0</arglist>
    </member>
    <member kind="function">
      <name>Unqueue</name>
      <anchor>5c6bfc504785f4abfa067333f5efaf46</anchor>
      <arglist>(iJob *job, bool waitIfCurrent=true)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iJoint</name>
    <base>iBase</base>
    <filename>structiJoint.html</filename>
    <member kind="function">
      <name>Attach</name>
      <anchor>5fcbc271633f21168aa2042c3fd7d8f7</anchor>
      <arglist>(iRigidBody *body1, iRigidBody *body2)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAngularConstraintAxis</name>
      <anchor>a7c505a5fdcf3f7c7790e3dfd790e281</anchor>
      <arglist>(int body)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttachedBody</name>
      <anchor>b1758e428a102b35bce85b6b41c76cb5</anchor>
      <arglist>(int body)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBounce</name>
      <anchor>a3eee8785f8053149fe7f70e843aed4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumAngle</name>
      <anchor>894f156c90175c689ac48f61eee468fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumDistance</name>
      <anchor>98abf0c68dedaa47ecc0f2d8ed61627f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMinimumAngle</name>
      <anchor>851d1386fe3876f7fcc30fbfaa714571</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMinimumDistance</name>
      <anchor>09627de78546ded86a04c3d513726ad6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>05d646b2362a58b4ab27300bb960f804</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsXRotConstrained</name>
      <anchor>edc28d1d37fc5720933ab1237103bb88</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsXTransConstrained</name>
      <anchor>b96a94d70592275415c0adb114a5b69a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsYRotConstrained</name>
      <anchor>fd45f0d157f5f127fdeb09c8d5ab42b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsYTransConstrained</name>
      <anchor>0dad099fa1f6ffe7ad6f545834c6b8d4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsZRotConstrained</name>
      <anchor>eeef267bbc22289cabbf0d0062b7e1e4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsZTransConstrained</name>
      <anchor>e3cdd912f1cdfc9cdb510e8921e20870</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAngularConstraintAxis</name>
      <anchor>64b1fc4ed7e27507609a240e0060059d</anchor>
      <arglist>(const csVector3 &amp;axis, int body)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBounce</name>
      <anchor>11063d0cb77cf6ea82ae6a66ce3b4dd0</anchor>
      <arglist>(const csVector3 &amp;bounce)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDesiredVelocity</name>
      <anchor>64f4df79b6b44a213f0ad21d14da7c81</anchor>
      <arglist>(const csVector3 &amp;velocity)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaxForce</name>
      <anchor>629bc3e5b2dd6d5b906cbed904ee3a53</anchor>
      <arglist>(const csVector3 &amp;maxForce)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaximumAngle</name>
      <anchor>09bb21db68be06162d15ffd81eb6bcf8</anchor>
      <arglist>(const csVector3 &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaximumDistance</name>
      <anchor>a7ff3d9aa0a171da74d6d42eb2b0b860</anchor>
      <arglist>(const csVector3 &amp;max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinimumAngle</name>
      <anchor>ea85f8878c44951938c94b5cac08fc84</anchor>
      <arglist>(const csVector3 &amp;min)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinimumDistance</name>
      <anchor>91272b66b239ee4f5bd2570363c4a47d</anchor>
      <arglist>(const csVector3 &amp;min)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRotConstraints</name>
      <anchor>393f0816b972b75c35476799f80d6d5c</anchor>
      <arglist>(bool X, bool Y, bool Z)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransConstraints</name>
      <anchor>36de653308dc575d5ff75b00125aa21a</anchor>
      <arglist>(bool X, bool Y, bool Z)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>aabc407b1ad7eb6481f43d4df92c26ef</anchor>
      <arglist>(const csOrthoTransform &amp;trans)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iJoystickDriver</name>
    <base>iBase</base>
    <filename>structiJoystickDriver.html</filename>
    <member kind="function">
      <name>DoButton</name>
      <anchor>36025e5c008a017f8240c97a38cf8867</anchor>
      <arglist>(uint number, int button, bool down, const int32 *axes, uint numAxes)=0</arglist>
    </member>
    <member kind="function">
      <name>DoMotion</name>
      <anchor>1cb2ae4a46248a2fa93b2137d965f3d2</anchor>
      <arglist>(uint number, const int32 *axes, uint nunmAxes)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>27d6dd466895d22add38034044334945</anchor>
      <arglist>(uint number, uint axis) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>9285852d8bd52a7a14956dacc3c44001</anchor>
      <arglist>(uint number) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastButton</name>
      <anchor>f72601db96e751e580dc7c3ec0558dcc</anchor>
      <arglist>(uint number, int button) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastX</name>
      <anchor>eea2372389c6817e569becc960c66f77</anchor>
      <arglist>(uint number) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastY</name>
      <anchor>8800b88780152425708e2b7e12ab2b8b</anchor>
      <arglist>(uint number) const =0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>e025402a12afa8a7360ffd920e7f96c7</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iKDTreeObjectDescriptor</name>
    <base>iBase</base>
    <filename>structiKDTreeObjectDescriptor.html</filename>
  </compound>
  <compound kind="class">
    <name>iKDTreeUserData</name>
    <base>iBase</base>
    <filename>structiKDTreeUserData.html</filename>
  </compound>
  <compound kind="class">
    <name>iKeyboardDriver</name>
    <base>iBase</base>
    <filename>structiKeyboardDriver.html</filename>
    <member kind="function">
      <name>CreateKeyComposer</name>
      <anchor>cfe7d1d4c2561a96062c2cf50da191f0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DoKey</name>
      <anchor>3cb6228eb1bcc9818fcb8ee56b4bb2fa</anchor>
      <arglist>(utf32_char codeRaw, utf32_char codeCooked, bool iDown, bool autoRepeat=false, csKeyCharType charType=csKeyCharTypeNormal)=0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyState</name>
      <anchor>bd37e138c68f54dde886727dc5765dd6</anchor>
      <arglist>(utf32_char codeRaw) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetModifierState</name>
      <anchor>82678ca934668e1ac492c32883b87411</anchor>
      <arglist>(utf32_char codeRaw) const =0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>a24cb7558916f892d8dfa2919a70ed7d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SynthesizeCooked</name>
      <anchor>5837d4e5170500cd86524f196d6baeec</anchor>
      <arglist>(iEvent *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iKeyComposer</name>
    <base>iBase</base>
    <filename>structiKeyComposer.html</filename>
    <member kind="function">
      <name>HandleKey</name>
      <anchor>46ae35a0731677b1a8c09ef07f618fe6</anchor>
      <arglist>(const csKeyEventData &amp;keyEventData, utf32_char *buf, size_t bufChars, int *resultChars=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetState</name>
      <anchor>8f3dc20ecf693d840e40c4f60413db4c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iKeyValuePair</name>
    <base>iBase</base>
    <filename>structiKeyValuePair.html</filename>
    <member kind="function">
      <name>GetEditorOnly</name>
      <anchor>3efad4849a1f349d3a6995bd45e7e270</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKey</name>
      <anchor>aa6d2a0564f5d6b3802f75c43e6b662b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>cb5f4f3cc84bb54129e72d9d1743eb6c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetValue</name>
      <anchor>0f843e6301c2e80abed3fe791c940c39</anchor>
      <arglist>(const char *vname) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetValueNames</name>
      <anchor>d2e39e32d30965df98c56ed78a3146d1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>fff0d7e2853c2eb3bcbee6363aa2827a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetKey</name>
      <anchor>7cf660ac5a94d7f50789a26871721cc3</anchor>
      <arglist>(const char *key)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>2130cf1099c1a29bb74962efde34e5d7</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetValue</name>
      <anchor>3da81793a1dc3a2b5ff79a6ec6966045</anchor>
      <arglist>(const char *vname, const char *value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iKitchenSink</name>
    <base>iBase</base>
    <filename>structiKitchenSink.html</filename>
    <member kind="function">
      <name>Drain</name>
      <anchor>d3cf09e17814850e252b4e1f25b12211</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Fill</name>
      <anchor>511fb50016284e5416fb028af529c530</anchor>
      <arglist>(float amount)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShredderActive</name>
      <anchor>bb562cd21c2e96e5766bb56736155a16</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>15b3b91af1ec1706c3093f04a94b017f</anchor>
      <arglist>(iBase *object)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>257483acb4c959319f42d3e7729c95fa</anchor>
      <arglist>(iBase *object)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShredderActive</name>
      <anchor>e60e55a9deeca634c358ffc1f01618c5</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLibraryReference</name>
    <base>iBase</base>
    <filename>structiLibraryReference.html</filename>
    <member kind="function">
      <name>GetCheckDupes</name>
      <anchor>a7f4a2188adaf38829a0db0a67e989fd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFile</name>
      <anchor>39cc196d4585b64696d56526c758fc33</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPath</name>
      <anchor>fbc40185ab13da839e22572bc65c2c4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>07fda4b84ea210815f41d765043d5b2b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLight</name>
    <base>iBase</base>
    <filename>structiLight.html</filename>
    <member kind="function">
      <name>AddAffectedLightingInfo</name>
      <anchor>6fba55d11b36aa5a4e34c29e7d29c34c</anchor>
      <arglist>(iLightingInfo *li)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCrossHalo</name>
      <anchor>7b0a965442c072d3c38c55b8fcb1677d</anchor>
      <arglist>(float intensity, float cross)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateFlareHalo</name>
      <anchor>40daa4717935b67f21689b77a79ce8af</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateNovaHalo</name>
      <anchor>318ad770cb38c8f2eaa7ab9ccb86431d</anchor>
      <arglist>(int seed, int num_spokes, float roundness)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttenuationConstants</name>
      <anchor>94727bcb92ab6f0fb5cb91d6a9fea3b2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAttenuationMode</name>
      <anchor>97d948868d7501f3ba3c5aa36cc2942d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetBrightnessAtDistance</name>
      <anchor>9592940f8eb427f0bb832adc22483d3e</anchor>
      <arglist>(float d) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>8128155e00af16005434bb3754302415</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>77fb5e29ce2222ca2f81fd17cf24e865</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCutoffDistance</name>
      <anchor>a76e798aa9fdbd32d219638981d2d2c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDirectionalCutoffRadius</name>
      <anchor>564e3004f835323698f1b2576ac3954e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDynamicType</name>
      <anchor>dd0ef69cccc5ecf03c9ac55a65736f40</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>aec674ec3b973991cdf9c8d5fa41d4b8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullCenter</name>
      <anchor>1b5ab298a73d752456b4ba116dc3936f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetHalo</name>
      <anchor>2605337f152470b28aca23e72f349234</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightCallback</name>
      <anchor>cd34a2c891c4f597d516f966909b9b90</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightCallbackCount</name>
      <anchor>34d999cb6f4955abd156356a7d1efa2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightID</name>
      <anchor>1fbc8a0bd8aae9f5d4bab8dfbec34057</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLightNumber</name>
      <anchor>74db28979d353c53bfa1ceb0dd26173b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMovable</name>
      <anchor>6ad70e7c68c0adbf0f7da50d5fa6e937</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>d92afb28c0be8dfebd5f7f1c2df4b61a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSpecularColor</name>
      <anchor>c33a9409847483d3e4bb05798b1abc37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSpotLightFalloff</name>
      <anchor>ea9928e5d2b077a1c84eb87c3c7a7652</anchor>
      <arglist>(float &amp;inner, float &amp;outer) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSVContext</name>
      <anchor>89dcf8ff701aabf508ce2bb4aa97804e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>748df08f3a0843bde5a9ef5da6bc400d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>8e1fbeac15ab5186181057b992979711</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QuerySceneNode</name>
      <anchor>8a30a1abe6d01660d6a4f2e4fde35ca5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAffectedLightingInfo</name>
      <anchor>e15d37f25022c27f37c78b673dc87f87</anchor>
      <arglist>(iLightingInfo *li)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveLightCallback</name>
      <anchor>ea27011354cce92ed56bf5228201af7f</anchor>
      <arglist>(iLightCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttenuationConstants</name>
      <anchor>e6786b015faae6042b379c48df8a1364</anchor>
      <arglist>(const csVector3 &amp;constants)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAttenuationMode</name>
      <anchor>5090282ba495a664a990e91323d698cf</anchor>
      <arglist>(csLightAttenuationMode a)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCenter</name>
      <anchor>627fb693493472574fc98905a34a2065</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>d2f8a660d38c48cd06d0993f86959eaf</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCutoffDistance</name>
      <anchor>9dfa963537d9f0eb1ac787bba49453ed</anchor>
      <arglist>(float distance)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDirectionalCutoffRadius</name>
      <anchor>918b1a75d0c515a563ff1c15a1011654</anchor>
      <arglist>(float radius)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightCallback</name>
      <anchor>b565f39e0f1fcff515dce9bbec180a33</anchor>
      <arglist>(iLightCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSpecularColor</name>
      <anchor>4c428eb4e6936b728687914e1beaf180</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSpotLightFalloff</name>
      <anchor>efb36d3a82ae8b0d9f724548fc133755</anchor>
      <arglist>(float inner, float outer)=0</arglist>
    </member>
    <member kind="function">
      <name>SetType</name>
      <anchor>824914dc3d04b8ef26d6673c676efdf7</anchor>
      <arglist>(csLightType type)=0</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>d43dbef5c28560a3a15333e1bbbe338f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightCallback</name>
    <base>iBase</base>
    <filename>structiLightCallback.html</filename>
    <member kind="function">
      <name>OnAttenuationChange</name>
      <anchor>8dda5759356b957b809a64ebf265d90b</anchor>
      <arglist>(iLight *light, int newatt)=0</arglist>
    </member>
    <member kind="function">
      <name>OnColorChange</name>
      <anchor>5d23046d08c75f0ada3645b88f0ee4df</anchor>
      <arglist>(iLight *light, const csColor &amp;newcolor)=0</arglist>
    </member>
    <member kind="function">
      <name>OnDestroy</name>
      <anchor>cbfd8c06700bfda6452b4c34e46af7ad</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>OnPositionChange</name>
      <anchor>6c1b0de1ee49e6593f6ae0a723c7f7e9</anchor>
      <arglist>(iLight *light, const csVector3 &amp;newpos)=0</arglist>
    </member>
    <member kind="function">
      <name>OnRadiusChange</name>
      <anchor>1a930f010a89e7453fb68f910dc3416f</anchor>
      <arglist>(iLight *light, float newradius)=0</arglist>
    </member>
    <member kind="function">
      <name>OnSectorChange</name>
      <anchor>b543f84bd4985a6bbd6f3308c1972cf1</anchor>
      <arglist>(iLight *light, iSector *newsector)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightingInfo</name>
    <base>iBase</base>
    <filename>structiLightingInfo.html</filename>
    <member kind="function">
      <name>DisconnectAllLights</name>
      <anchor>e8f0a8b8accd988c38d5522b1e1adec6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>InitializeDefault</name>
      <anchor>b9a91df02db102ecc5fa9249934da873</anchor>
      <arglist>(bool clear)=0</arglist>
    </member>
    <member kind="function">
      <name>LightChanged</name>
      <anchor>81f66fc42c548efea67f09e4ff1d430b</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>LightDisconnect</name>
      <anchor>7dc177daa075d673b2742ef8a6351899</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>PrepareLighting</name>
      <anchor>63c349522add4e06b63130d643bbea4a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ReadFromCache</name>
      <anchor>c3fdc6a3409958b878fabaddb09eac81</anchor>
      <arglist>(iCacheManager *cache_mgr)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteToCache</name>
      <anchor>068b13edd6d4b917791a2320e6e0c015</anchor>
      <arglist>(iCacheManager *cache_mgr)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightingManager</name>
    <base>iBase</base>
    <filename>structiLightingManager.html</filename>
  </compound>
  <compound kind="class">
    <name>iLightingProcessData</name>
    <base>iBase</base>
    <filename>structiLightingProcessData.html</filename>
    <member kind="function">
      <name>FinalizeLighting</name>
      <anchor>ebc9b72e37bce14784c82abf6b2d91a5</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightingProcessInfo</name>
    <base>iFrustumViewUserdata</base>
    <filename>structiLightingProcessInfo.html</filename>
    <member kind="function">
      <name>AttachUserdata</name>
      <anchor>4e3201bb36b47ee2948779f7dd75a31a</anchor>
      <arglist>(iLightingProcessData *userdata)=0</arglist>
    </member>
    <member kind="function">
      <name>FinalizeLighting</name>
      <anchor>b8bf55a73cb9495b18034285647342c7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>f32e1a3f3763ff7832d805bc2d87c197</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLight</name>
      <anchor>622fb22c5355ecc46676a69730550501</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsDynamic</name>
      <anchor>502bb78126f46ae8dfa2a35dd1034366</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryUserdata</name>
      <anchor>c6c207be3fa79b1a256155c5537feebf</anchor>
      <arglist>(scfInterfaceID id, int version)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>1d81d35ca1084d53a95c4dec904d92a9</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightIterator</name>
    <base>iBase</base>
    <filename>structiLightIterator.html</filename>
    <member kind="function">
      <name>GetLastSector</name>
      <anchor>c2f7d9118723f2f40f8ccda6dc14b547</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>ec162179920a2409f45453e850068675</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>21ec8842a268adb480ffc06106b3854a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>3862094058dc45d7ecebcb3a04d30fa1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightIterRenderStep</name>
    <base>iBase</base>
    <filename>structiLightIterRenderStep.html</filename>
  </compound>
  <compound kind="class">
    <name>iLightList</name>
    <base>iBase</base>
    <filename>structiLightList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>fd33dee443a911ad6925c89a98504a4d</anchor>
      <arglist>(iLight *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>f746f2affffdfe64bef7a524437eee49</anchor>
      <arglist>(iLight *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByID</name>
      <anchor>baa54383803df4d10fbffe6bde01e083</anchor>
      <arglist>(const char *id) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>2aa7a4ce6e8875562f58006014eb1028</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>e41513babb272603006e792ef2179298</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>dcbf6adf171370abd54b1988d93a10b2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>d95fa0a7515d7a3808ee8b2f00159515</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>dce9caadeb8f791d8a80838d5ce751ad</anchor>
      <arglist>(iLight *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>d85cc15ab4bea27f2e000eac0f43cef1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightManager</name>
    <base>iBase</base>
    <filename>structiLightManager.html</filename>
    <member kind="function">
      <name>GetRelevantLights</name>
      <anchor>154e6f2f83a569a6122cfc14914d41c5</anchor>
      <arglist>(iMeshWrapper *logObject, int maxLights, bool desireSorting)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightningFactoryState</name>
    <base>iBase</base>
    <filename>structiLightningFactoryState.html</filename>
    <member kind="function">
      <name>GetOrigin</name>
      <anchor>6edc964e697af2666180d460f99e5925</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>d85a32ca8af5ef9514adc6f80026af36</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightningState</name>
    <base>iLightningFactoryState</base>
    <filename>structiLightningState.html</filename>
  </compound>
  <compound kind="class">
    <name>iLightRenderStep</name>
    <base>iBase</base>
    <filename>structiLightRenderStep.html</filename>
  </compound>
  <compound kind="class">
    <name>iLightSectorInfluence</name>
    <base>iBase</base>
    <filename>structiLightSectorInfluence.html</filename>
    <member kind="function">
      <name>GetFrustum</name>
      <anchor>8072c10e55aa17811843f136c1357e77</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLight</name>
      <anchor>d974906a8fb2e918dc39ac827ce0a9b9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>e0301186e00d86e43761d0272c2a22f9</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLightVisibleCallback</name>
    <base>iBase</base>
    <filename>structiLightVisibleCallback.html</filename>
    <member kind="function">
      <name>LightVisible</name>
      <anchor>405ca7bb6f3e3b5177d353ec5d4a98c3</anchor>
      <arglist>(iSector *sector, iLight *light)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLoader</name>
    <base>iBase</base>
    <filename>structiLoader.html</filename>
    <member kind="function">
      <name>GetAutoRegions</name>
      <anchor>95de906097164aa4a3225be9e7263950</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>152de6ef62ea29dd61fabffbcfcb8897</anchor>
      <arglist>(iDocumentNode *node, iBase *&amp;result, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, const char *override_name=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>e56eb3d7aa99c58718ffb8994ef4a668</anchor>
      <arglist>(iDataBuffer *buffer, iBase *&amp;result, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, const char *override_name=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>31ccbc5be98f838a750460bda42c6e82</anchor>
      <arglist>(const char *fname, iBase *&amp;result, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, const char *override_name=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadImage</name>
      <anchor>4fa8f54e70282d22352f1b535a65492d</anchor>
      <arglist>(iDataBuffer *buf, int Format=CS_IMGFMT_INVALID)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadImage</name>
      <anchor>6c091a174c58d5462692a5691ccf8787</anchor>
      <arglist>(const char *Filename, int Format=CS_IMGFMT_INVALID)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadLibrary</name>
      <anchor>05348f3af41b28d42a8cd00a3c8058c9</anchor>
      <arglist>(iDocumentNode *lib_node, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadLibraryFile</name>
      <anchor>cad78e78f07c8c8df773e1917bcdd6ee</anchor>
      <arglist>(const char *filename, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMap</name>
      <anchor>0a7d56dd08412df83a03d3640a9e9f9b</anchor>
      <arglist>(iDocumentNode *world_node, bool clearEngine=true, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMapFile</name>
      <anchor>557a480a427a81faa02a852af2ce39ef</anchor>
      <arglist>(const char *filename, bool clearEngine=true, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false, iStreamSource *ssource=0, iMissingLoaderData *missingdata=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMeshObject</name>
      <anchor>cc2812f64d70243101337ee3c0f18245</anchor>
      <arglist>(const char *fname, iStreamSource *ssource=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMeshObjectFactory</name>
      <anchor>4ce2d92ff723f14113e7dd24f8c2c570</anchor>
      <arglist>(const char *fname, iStreamSource *ssource=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadShader</name>
      <anchor>be7cfd9e07eef005f67a069fb7688161</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadSoundStream</name>
      <anchor>8f678ab69770ddc3a47ebdd33bfe898d</anchor>
      <arglist>(const char *fname, int mode3d)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadSoundSysData</name>
      <anchor>7179c939b8a5d2a7ee033fd8fe34577b</anchor>
      <arglist>(const char *fname)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadSoundWrapper</name>
      <anchor>71dd62b010b5abe89c546edaa788835b</anchor>
      <arglist>(const char *name, const char *fname)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadSoundWrapper</name>
      <anchor>7e029a41292736c48cc3233bfba74f8e</anchor>
      <arglist>(const char *name, const char *fname, int mode3d)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadTexture</name>
      <anchor>6246eba302b5ccf54a5a7e32b817f275</anchor>
      <arglist>(const char *Name, iDataBuffer *buf, int Flags=CS_TEXTURE_3D, iTextureManager *tm=0, bool reg=true, bool create_material=true, bool free_image=true)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadTexture</name>
      <anchor>f2bfbb9bffb29695638e37467866e7be</anchor>
      <arglist>(iDataBuffer *buf, int Flags=CS_TEXTURE_3D, iTextureManager *tm=0, csRef&lt; iImage &gt; *image=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadTexture</name>
      <anchor>f2d45576020b015dc6840b66ae08e8a6</anchor>
      <arglist>(const char *Name, const char *FileName, int Flags=CS_TEXTURE_3D, iTextureManager *tm=0, bool reg=true, bool create_material=true, bool free_image=true, iRegion *region=0)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadTexture</name>
      <anchor>1afcf00035813fe7b89971abee5b3495</anchor>
      <arglist>(const char *Filename, int Flags=CS_TEXTURE_3D, iTextureManager *tm=0, csRef&lt; iImage &gt; *image=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAutoRegions</name>
      <anchor>b19ac76211afaa3913752d49b994bb81</anchor>
      <arglist>(bool autoRegions)=0</arglist>
    </member>
    <member kind="function">
      <name>ThreadedLoadMapFile</name>
      <anchor>8ab6250444cb20c242132cdf447f6815</anchor>
      <arglist>(const char *filename, iRegion *region=0, bool curRegOnly=true, bool checkDupes=false)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLoaderContext</name>
    <base>iBase</base>
    <filename>structiLoaderContext.html</filename>
    <member kind="function">
      <name>CheckDupes</name>
      <anchor>b6407ba4d788628887e5165691891fc9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>CurrentRegionOnly</name>
      <anchor>daa3b0c5384ac8780fe34a1d305a93eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>FindLight</name>
      <anchor>8516b68e9d929d206d9b40cd2cf66b54</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMaterial</name>
      <anchor>d9832ad2fd002b3ebb940b266afe912a</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshFactory</name>
      <anchor>027bc4734aac5b3b8fa43f42d614b642</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshObject</name>
      <anchor>714d2d5818e34e03e54b173712aeb9e3</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindNamedMaterial</name>
      <anchor>f9107176ef79d6290ff0b4f5fe3c922e</anchor>
      <arglist>(const char *name, const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>FindNamedTexture</name>
      <anchor>3ff2cc0c4adf1562daa32b2828efc21c</anchor>
      <arglist>(const char *name, const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSector</name>
      <anchor>dafbd84b11845b7884dba5c21b4bf906</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindShader</name>
      <anchor>e1825f2761de1bd53819a89db50ba6bd</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindTexture</name>
      <anchor>564416c892f3c7ce44c8478d90caf9f0</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRegion</name>
      <anchor>2a2e733bafa822a5beb0e316e036cce5</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLoaderPlugin</name>
    <base>iBase</base>
    <filename>structiLoaderPlugin.html</filename>
    <member kind="function">
      <name>Parse</name>
      <anchor>ff376915e15a6509eab7a4bdeed639ee</anchor>
      <arglist>(iDocumentNode *node, iStreamSource *ssource, iLoaderContext *ldr_context, iBase *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLoaderStatus</name>
    <base>iBase</base>
    <filename>structiLoaderStatus.html</filename>
    <member kind="function">
      <name>IsError</name>
      <anchor>4db546eef0457a83e4c9b48e87dd3207</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsReady</name>
      <anchor>029e92716080d54f4fcc1f3a2641bfb4</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iLODControl</name>
    <base>iBase</base>
    <filename>structiLODControl.html</filename>
    <member kind="function">
      <name>GetLOD</name>
      <anchor>3bee51f7795fba996a5bb749d1d69504</anchor>
      <arglist>(iSharedVariable *&amp;varm, iSharedVariable *&amp;vara) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLOD</name>
      <anchor>f373670ccfe79b81ae1fbc17fd22c10d</anchor>
      <arglist>(float &amp;m, float &amp;a) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLODPolygonCount</name>
      <anchor>ed8bc23a5f03d45160f3952f5e52c732</anchor>
      <arglist>(float lod) const =0</arglist>
    </member>
    <member kind="function">
      <name>SetLOD</name>
      <anchor>02776bb843fec23b5f4a6e26c771fb93</anchor>
      <arglist>(iSharedVariable *varm, iSharedVariable *vara)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLOD</name>
      <anchor>c444f50d2a0df9b032f7fe056de9d1cf</anchor>
      <arglist>(float m, float a)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMAGEHLP_LINE64</name>
    <filename>structIMAGEHLP__LINE64.html</filename>
    <member kind="function">
      <name>Address</name>
      <anchor>79ef8c0a13fca645e7b738bf8b13777d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileName</name>
      <anchor>291e72f15c3c83fea4bd3781e0665089</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Key</name>
      <anchor>ae70159f289aab641d5556964909f230</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LineNumber</name>
      <anchor>6f11d4138db257c6f2c19dfcb6ef011d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfStruct</name>
      <anchor>414698ff987c55443230602f96608a4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMAGEHLP_LINEW64</name>
    <filename>structIMAGEHLP__LINEW64.html</filename>
    <member kind="function">
      <name>Address</name>
      <anchor>4f6d00cab12fe387f260a1a1c44c9256</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FileName</name>
      <anchor>1e895d5936d04b12f946cfc107ec027d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Key</name>
      <anchor>0c5bfed9e1724b857945bc2d71ab6b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LineNumber</name>
      <anchor>f4be0e172d711e5c62adce956bf3bd0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfStruct</name>
      <anchor>a36aabe25d298e650888be9717a6cfc2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMAGEHLP_MODULE64</name>
    <filename>structIMAGEHLP__MODULE64.html</filename>
    <member kind="function">
      <name>BaseOfImage</name>
      <anchor>9ff73e83539150568940309cba9ce509</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CheckSum</name>
      <anchor>5e5e99ca7c67cff97ee5a2a64d8c3701</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CVData</name>
      <anchor>e268d6b756ef29ef5caeec8cd6c2bb37</anchor>
      <arglist>[MAX_PATH *3]</arglist>
    </member>
    <member kind="function">
      <name>CVSig</name>
      <anchor>0fa4290b4fc529084ae534fe528c9184</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DbgUnmatched</name>
      <anchor>a9a8b90f701ff315b0d2028ffcc7ea2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalSymbols</name>
      <anchor>70f149dc6ed11eaf25c4e41f5ebbc0df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImageName</name>
      <anchor>e7678a7193191e23fdd0bdd00b46451d</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>ImageSize</name>
      <anchor>0eb56fd4f789661924f985af26417249</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LineNumbers</name>
      <anchor>721ef57a08c64d4e433ad39d2613a387</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LoadedImageName</name>
      <anchor>5c5aaa92d7bedaa3de4a1d31cf3a2b54</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>LoadedPdbName</name>
      <anchor>d80d3151705481604207bb8105a2f9d9</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>ModuleName</name>
      <anchor>aa4b41ebe7b7d6194293d796af9fc5f9</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="function">
      <name>NumSyms</name>
      <anchor>2a0637c55da9fc0b3eef217b42c5874d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbAge</name>
      <anchor>14add20ba45c878d2174357ea559e663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbSig</name>
      <anchor>04f40fa9c85d2c912fb1ea43ffddb4da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbSig70</name>
      <anchor>aec9b74ca13156c310119313ea622cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbUnmatched</name>
      <anchor>a5016faa4fed5c5d085d299d4ff684df</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfStruct</name>
      <anchor>013eb75137754a97cff14c61e7b211a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SymType</name>
      <anchor>7d8ead75c7ab4962200220faa9f02d4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TimeDateStamp</name>
      <anchor>4e22e3df78189ebe9b8952b95c9542cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeInfo</name>
      <anchor>27250a9a5986b41827840e31c5752fba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMAGEHLP_MODULEW64</name>
    <filename>structIMAGEHLP__MODULEW64.html</filename>
    <member kind="function">
      <name>BaseOfImage</name>
      <anchor>1ab06dac6a778237945792a53cce9ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CheckSum</name>
      <anchor>4fcd53db480c90cca35786e09bb71f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CVData</name>
      <anchor>421d35e1442d6c624476a9bd57952ce8</anchor>
      <arglist>[MAX_PATH *3]</arglist>
    </member>
    <member kind="function">
      <name>CVSig</name>
      <anchor>7f49d0064f79be117feea71461e75b21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DbgUnmatched</name>
      <anchor>684a18601a3283e8c1252e105eacd410</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GlobalSymbols</name>
      <anchor>c5fe85dc3da51610c146748b850775f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ImageName</name>
      <anchor>f48384949b420209f957a0ca9d1d3140</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>ImageSize</name>
      <anchor>ed228c988db368a6e19c24a20699ea45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LineNumbers</name>
      <anchor>a5bb10abc7c1295235deeac8797caa2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LoadedImageName</name>
      <anchor>3d4fde944df1de4334b70393534b8911</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>LoadedPdbName</name>
      <anchor>8d3a516da2c278496b74dd400d3e1df8</anchor>
      <arglist>[256]</arglist>
    </member>
    <member kind="function">
      <name>ModuleName</name>
      <anchor>888b4b8067e63e02e747b9b00b8f5578</anchor>
      <arglist>[32]</arglist>
    </member>
    <member kind="function">
      <name>NumSyms</name>
      <anchor>6d9f078b1cc648499cfd007ab1c821e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbAge</name>
      <anchor>62d635a3d0e6b2953186112e79a55fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbSig</name>
      <anchor>28ac336745c994e32356f966bba08cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbSig70</name>
      <anchor>6d9b34ea35adf7c20f9910e2ae686754</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>PdbUnmatched</name>
      <anchor>c96c11e5d2caf46251946e386b01418b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfStruct</name>
      <anchor>96b729c8d134910ca69a0838d2e11d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SymType</name>
      <anchor>ffa419a7f9f053db27fd289847cef443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TimeDateStamp</name>
      <anchor>a18e53cbb983cf1435298778ca2c5987</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeInfo</name>
      <anchor>2f65e44d34e374a3d1b2edac2a83b9f6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IMAGEHLP_STACK_FRAME</name>
    <filename>structIMAGEHLP__STACK__FRAME.html</filename>
    <member kind="function">
      <name>BackingStoreOffset</name>
      <anchor>81da8b504a9736b067957bbc3c1a2a7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FrameOffset</name>
      <anchor>9f04670cfc7cd908684131b7025398e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FuncTableEntry</name>
      <anchor>0b50d4ba0de7c852bc70cb5779ff79c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InstructionOffset</name>
      <anchor>d16751d99210d85f8012bacffbcd36d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Params</name>
      <anchor>ba887b783d5c9d3c4c5f70186a1b8d8d</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>Reserved</name>
      <anchor>a9595fa82036fa7af604fd2d5a65f277</anchor>
      <arglist>[5]</arglist>
    </member>
    <member kind="function">
      <name>Reserved2</name>
      <anchor>a488a34c3f122abcbcb927b3fd8ee164</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ReturnOffset</name>
      <anchor>42c523ec600741ef7e1a47b242b5fcdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StackOffset</name>
      <anchor>d17cbfd2a424b3aef96cd33ac8bfcbbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Virtual</name>
      <anchor>f24358db488146259bedf2ab85a618a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMapNode</name>
    <base>iBase</base>
    <filename>structiMapNode.html</filename>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>1842a1272dc10806b9a0f18dfbdcc0de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>5c60128c94580cb62563eb17d6a6825a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetXVector</name>
      <anchor>367c54b2d0a8cc61557750a0afd72754</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetYVector</name>
      <anchor>dee115f3f24a322932ab41766cb68a93</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetZVector</name>
      <anchor>3c4bbcfd50c116537469752f10dd6e9b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>b857ca299b076df1aa20c68ff08a70b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>5f392190f15710cbb50793ea68ed6928</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSector</name>
      <anchor>cea211be10e49c3e40b23fc8ca119e34</anchor>
      <arglist>(iSector *pSector)=0</arglist>
    </member>
    <member kind="function">
      <name>SetXVector</name>
      <anchor>6533fc688da094a8e13c8e2a3dfde950</anchor>
      <arglist>(const csVector3 &amp;vec)=0</arglist>
    </member>
    <member kind="function">
      <name>SetYVector</name>
      <anchor>054a6b5cb25950156e76abeed3507410</anchor>
      <arglist>(const csVector3 &amp;vec)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZVector</name>
      <anchor>2135076e2dbc599f94102b74311560f8</anchor>
      <arglist>(const csVector3 &amp;vec)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMaterial</name>
    <base>iShaderVariableContext</base>
    <filename>structiMaterial.html</filename>
    <member kind="function">
      <name>GetFlatColor</name>
      <anchor>f4d98b949d9611dd9256aa330c8a4f9c</anchor>
      <arglist>(csRGBpixel &amp;oColor, bool useTextureMean=true)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShader</name>
      <anchor>f6ee57ee9e7d94be1cb5b51a954a8f49</anchor>
      <arglist>(csStringID type)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShaders</name>
      <anchor>563ae6005794891a39a9cff1d2d8fc00</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTexture</name>
      <anchor>eb47c8de1aba19e372fa47fd03df14ac</anchor>
      <arglist>(csStringID name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTexture</name>
      <anchor>200fa30b7715534920b0dec53cb3f92e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetFlatColor</name>
      <anchor>2dd086e7fae3628207d9b151bf1bec1d</anchor>
      <arglist>(const csRGBcolor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>SetShader</name>
      <anchor>6103e8eeb332277a095300bac543197f</anchor>
      <arglist>(csStringID type, iShader *shader)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMaterialEngine</name>
    <base>iBase</base>
    <filename>structiMaterialEngine.html</filename>
    <member kind="function">
      <name>GetTextureWrapper</name>
      <anchor>27dca50da6da138f943b3da1d7a78fad</anchor>
      <arglist>(csStringID name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureWrapper</name>
      <anchor>749e53e2103fe9c1fc3fad27d7043e0a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsVisitRequired</name>
      <anchor>ad9b514f5258ba0d878b379d1e6ec97c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Visit</name>
      <anchor>8edc7eccf3e2de54aa56c75d73c2430e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMaterialList</name>
    <base>iBase</base>
    <filename>structiMaterialList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>8c1e8a9e5a314d2ef4f3fff9ebd90db1</anchor>
      <arglist>(iMaterialWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>df83649de2435c02f186c150fdcfb5de</anchor>
      <arglist>(iMaterialWrapper *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>ddb826b007019fd202fb8aad54ee20ac</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>264d08b1085d05e71d8e7279b7ff25ff</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>42ccf148d987f3cb18f19fd8aa35f1a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>NewMaterial</name>
      <anchor>1bb7303a5e810ec3e856d008a4fc32e4</anchor>
      <arglist>(iMaterial *material, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>22591a0b37525df36ef776ce26b90dc8</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>3119dcabd4cfb5d7ba9f1ab9e5785fca</anchor>
      <arglist>(iMaterialWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>4d33ecb77eee7f4caae5c7d76528c0c1</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMaterialWrapper</name>
    <base>iBase</base>
    <filename>structiMaterialWrapper.html</filename>
    <member kind="function">
      <name>GetMaterial</name>
      <anchor>bef1b083ee25e6ba31b945366e06513f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsVisitRequired</name>
      <anchor>2de0de7e3ee4568ad568db86e889d28b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>dcf47967257f491114d2ca9e29dc1b3b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterial</name>
      <anchor>a2c1b9f35cfa42f705098cbdcfd4e963</anchor>
      <arglist>(iMaterial *material)=0</arglist>
    </member>
    <member kind="function">
      <name>Visit</name>
      <anchor>4e8fa88d1594561da14344157b6da854</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMemoryTracker</name>
    <base>iBase</base>
    <filename>structiMemoryTracker.html</filename>
    <member kind="function">
      <name>Dump</name>
      <anchor>59bd95982619bf11be002a16197af4d9</anchor>
      <arglist>(bool summary_only)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshDrawCallback</name>
    <base>iBase</base>
    <filename>structiMeshDrawCallback.html</filename>
    <member kind="function">
      <name>BeforeDrawing</name>
      <anchor>187e340575fe7100fb340b40c5786021</anchor>
      <arglist>(iMeshWrapper *spr, iRenderView *rview)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshFactoryList</name>
    <base>iBase</base>
    <filename>structiMeshFactoryList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>990eb6387eeae7e91c07df9c857ede67</anchor>
      <arglist>(iMeshFactoryWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>6d3f3d496aebf37b74d9b00b4a7e4bc9</anchor>
      <arglist>(iMeshFactoryWrapper *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>f6043d6efddfeca7ea38c44afe7fd943</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>11f48348e2ff3e54a579d315cfd5338d</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>76470923638b6fae528778f92665fb2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>21c6f416342a8226bee141b39ac69492</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>db39bf3ac1694635979843af1ef4e7a9</anchor>
      <arglist>(iMeshFactoryWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>1fe596e5538bf16aef18c7fbc0964076</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshFactoryWrapper</name>
    <base>iBase</base>
    <filename>structiMeshFactoryWrapper.html</filename>
    <member kind="function">
      <name>AddFactoryToStaticLOD</name>
      <anchor>501a09cb71871c4d93fdc3f037e85b3d</anchor>
      <arglist>(int lod, iMeshFactoryWrapper *fact)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshWrapper</name>
      <anchor>dd53955c8e686c1e39081bf84064c0a9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateStaticLOD</name>
      <anchor>f8439159d724d12029295127b749d2e7</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyStaticLOD</name>
      <anchor>c2083dc824205728e39b44e4dbf2f267</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetChildren</name>
      <anchor>54ffa9f5b41db46eb336a3647e5e7659</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>14a223ad4e8427aa57d54c740e4ffaf9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshObjectFactory</name>
      <anchor>f21ca8291b566e9cf3722ea3067b5c5e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParentContainer</name>
      <anchor>6341b20ac54a2ee82bb558c44da93a28</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPriority</name>
      <anchor>5011165a54f0027ca8cc9a943033f80a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStaticLOD</name>
      <anchor>d86f36f40c2056a273acd36fa1ef7c54</anchor>
      <arglist>(float &amp;m, float &amp;a) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStaticLOD</name>
      <anchor>54b68bc63093df2633700fbb847c3ac8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSVContext</name>
      <anchor>1d50c1835748b763839e1094fc78c881</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>f299d25b03a318019ddf868af14e27ad</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetZBufMode</name>
      <anchor>df9c4a6e1f7454aba9c44928fc154f81</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>6b691310177b4cab148a947ab4bea531</anchor>
      <arglist>(const csReversibleTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>84cdcc607db3cb245c3ff39837732a8e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveFactoryFromStaticLOD</name>
      <anchor>aa844634b363ab8cec4976626342e051</anchor>
      <arglist>(iMeshFactoryWrapper *fact)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMeshObjectFactory</name>
      <anchor>444b56d1933912598dffd3385c0740a7</anchor>
      <arglist>(iMeshObjectFactory *fact)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParentContainer</name>
      <anchor>7b1cee4bc266ead166aa467c505a3d50</anchor>
      <arglist>(iMeshFactoryWrapper *p)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderPriority</name>
      <anchor>4c11ee7ff112bc7ea2653e51258efd37</anchor>
      <arglist>(long rp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderPriorityRecursive</name>
      <anchor>9c7c65e11e850f3f9b024a9e25f0a529</anchor>
      <arglist>(long rp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStaticLOD</name>
      <anchor>5d94d64bb8b0dbc09ec74122a9c7807b</anchor>
      <arglist>(float m, float a)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>05feabfcfc058955c28e7509b226819a</anchor>
      <arglist>(const csReversibleTransform &amp;tr)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZBufMode</name>
      <anchor>841935f5106cfc95dd85426e929eb6e2</anchor>
      <arglist>(csZBufMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZBufModeRecursive</name>
      <anchor>f60b6d624bb79b1e2f6fae6a844b2e81</anchor>
      <arglist>(csZBufMode mode)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshGenerator</name>
    <base>iBase</base>
    <filename>structiMeshGenerator.html</filename>
    <member kind="function">
      <name>AddMesh</name>
      <anchor>3ef73b5717adf95e5442a8a13d1c54b7</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateGeometry</name>
      <anchor>2f7491f446b357854b6d457cfcc6fc6a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBlockCount</name>
      <anchor>4897114571b34629fd848ab1f0259891</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCellCount</name>
      <anchor>9216f63da3f2dff4d79948581a9f8c3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetGeometry</name>
      <anchor>1563770807c8c7d4444cc3aebca98b55</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetGeometryCount</name>
      <anchor>8e91ae9adca998ee289d35d82fc55f05</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMesh</name>
      <anchor>7980404b8de6d944f426a0109e6e0611</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshCount</name>
      <anchor>1f5593a8f6c9a8df1accf835f16d0ed4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSampleBox</name>
      <anchor>085b14b5c93094840c5e537bbcf4cef0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>ae079dec35bbbfb766b692bd5551182b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveGeometry</name>
      <anchor>382e996fa036c7c383d5ef57c99f05f9</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMesh</name>
      <anchor>190b1010fbf1341bf96d1e8e91160008</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAlphaScale</name>
      <anchor>607913e1be19c022f24d1bd2a0e07169</anchor>
      <arglist>(float mindist, float maxdist)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBlockCount</name>
      <anchor>94912dad05371213a4e46330df1dc7a5</anchor>
      <arglist>(int number)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCellCount</name>
      <anchor>95ff89cfcd865000cb491f081b1aefdb</anchor>
      <arglist>(int number)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDensityScale</name>
      <anchor>cd8d55ad15138350da67ff4f6f605a68</anchor>
      <arglist>(float mindist, float maxdist, float maxdensityfactor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSampleBox</name>
      <anchor>41fdae6703574a482ece996e6436fa6c</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshGeneratorGeometry</name>
    <base>iBase</base>
    <filename>structiMeshGeneratorGeometry.html</filename>
    <member kind="function">
      <name>AddDensityMaterialFactor</name>
      <anchor>0aef7e1d81386582ae2bacddc08f9c31</anchor>
      <arglist>(iMaterialWrapper *material, float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>AddFactory</name>
      <anchor>832731106d0c0c4c3b72dd1710be0fcf</anchor>
      <arglist>(iMeshFactoryWrapper *factory, float maxdist)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPosition</name>
      <anchor>22a49631cbb0270847773a6f47db5344</anchor>
      <arglist>(const csVector2 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDensity</name>
      <anchor>b78ad6b7493c7e0d5902e42c93704bd8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>3a3aa2cc066cc7cd3fc5bc760f44875c</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFactoryCount</name>
      <anchor>c99fc5abc9b81611b0cb77b572afb37d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumDistance</name>
      <anchor>7b370e8d1dc3b2034da5ee12e709ed94</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>760a52e5b206c1ef08bbffaa018bf684</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveFactory</name>
      <anchor>dce7fe42cd635e6ece65468a0dc07101</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDefaultDensityMaterialFactor</name>
      <anchor>1cefdf489fdf6be703355d95e9a2d1a2</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDensity</name>
      <anchor>d16b99bdac3b2d9d83627ceed3c644fa</anchor>
      <arglist>(float density)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDensityMap</name>
      <anchor>98ed2b83fc83a236737143cad1a5412d</anchor>
      <arglist>(iTerraFormer *map, float factor, const csStringID &amp;type)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRadius</name>
      <anchor>2e45eaa76e6287ba3f8ee77bd130f50f</anchor>
      <arglist>(float radius)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshList</name>
    <base>iBase</base>
    <filename>structiMeshList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>d64c227db7bdf3e77f9cf7cb009d9046</anchor>
      <arglist>(iMeshWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>bafa52787837eb42f24af4c1067d8656</anchor>
      <arglist>(iMeshWrapper *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>55e25abf342fbef8d2b4e294bda2adfe</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>b735893f66659f6bf9390b65e5af0665</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>08a67c6e8e69b6ac51656faf0d80a652</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>3be792883e18af871f2d7f37076d9939</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>34ee3dade53693f9272104c6c577591d</anchor>
      <arglist>(iMeshWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>15129d8813a2afb2d5e109cf7d5e0a9f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshObject</name>
    <base>iBase</base>
    <filename>structiMeshObject.html</filename>
    <member kind="function">
      <name>Clone</name>
      <anchor>f53886ae52e6a94a741e1481f6ebf281</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>0822835a232c9e3dee44c6403ed07e91</anchor>
      <arglist>(csColor &amp;color) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>4c5ac09b770173c1e31ca45b5a99d10f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>b252bb85e845a9c03522395d2377258d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialWrapper</name>
      <anchor>566e1f5e7ced08916b2d107e6bfcf560</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshWrapper</name>
      <anchor>f1962ca596487f6701fc78acefca04b3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>e2be0da94727ab789cf1d1569f0e1e06</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectModel</name>
      <anchor>6d9cdc0093694cf3977740d72168b6cc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderMeshes</name>
      <anchor>be10e3c39a941ffdb51ee14998e6a02c</anchor>
      <arglist>(int &amp;num, iRenderView *rview, iMovable *movable, uint32 frustum_mask)=0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleCallback</name>
      <anchor>2d9e58895ab6b2b049d9511da906ec6e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>d86b9fa26b3338779deefa8ab2952dd3</anchor>
      <arglist>(const csReversibleTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamObject</name>
      <anchor>11f23a1e8e26b8a48de7d3b991bab5a9</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr, int *polygon_idx=0, iMaterialWrapper **material=0)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamOutline</name>
      <anchor>8c8e970d67c2cdc5acbe106a12cfcbf4</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr)=0</arglist>
    </member>
    <member kind="function">
      <name>InvalidateMaterialHandles</name>
      <anchor>5e6a81d2a6667dc224529892ad94411e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>NextFrame</name>
      <anchor>5c43a5f3c88f5d9d3cb40e7376ce8337</anchor>
      <arglist>(csTicks current_time, const csVector3 &amp;pos, uint currentFrame)=0</arglist>
    </member>
    <member kind="function">
      <name>PositionChild</name>
      <anchor>dbb570428356c6ec6afa144c549d859b</anchor>
      <arglist>(iMeshObject *child, csTicks current_time)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>3e34007c6472db5e2363e8740650ab4e</anchor>
      <arglist>(const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialWrapper</name>
      <anchor>1ca174351028acb8ffb1c49284407566</anchor>
      <arglist>(iMaterialWrapper *material)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMeshWrapper</name>
      <anchor>f288c9ecd53bbbee752c85e0a66901c9</anchor>
      <arglist>(iMeshWrapper *logparent)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>ac39de11a28f461024207dd86c61e245</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVisibleCallback</name>
      <anchor>86ced7e2cd64c8b543c3e709d67e8518</anchor>
      <arglist>(iMeshObjectDrawCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SupportsHardTransform</name>
      <anchor>a472c50dbddf2eedbad7c37bb34e8089</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshObjectDrawCallback</name>
    <base>iBase</base>
    <filename>structiMeshObjectDrawCallback.html</filename>
    <member kind="function">
      <name>BeforeDrawing</name>
      <anchor>cc277cc9a46d198a7b9f8c74c9a669ad</anchor>
      <arglist>(iMeshObject *spr, iRenderView *rview)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshObjectFactory</name>
    <base>iBase</base>
    <filename>structiMeshObjectFactory.html</filename>
    <member kind="function">
      <name>Clone</name>
      <anchor>5d482ed300fd449ff7d98f920d223e05</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>53bcb8d2f5c355b7ebd9076558a548e4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialWrapper</name>
      <anchor>9fdab9bebf6813c963efca36aa510a87</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshFactoryWrapper</name>
      <anchor>775068b34c293992afd7d9738f45a2d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshObjectType</name>
      <anchor>ee185f43a8076d2699c0944e4bf07e80</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>caef53e5ffecc6ef0dd4bb7c050620a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectModel</name>
      <anchor>673f9d5ef6930be8bddb228122e66826</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>d74302c965ec544536ca2b0ffe1f4136</anchor>
      <arglist>(const csReversibleTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>NewInstance</name>
      <anchor>82872458683c8e520026e59111f249ce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialWrapper</name>
      <anchor>2d5fc31c18adc5e504730a006938ee3a</anchor>
      <arglist>(iMaterialWrapper *material)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMeshFactoryWrapper</name>
      <anchor>f56cbb51b9419ec109ffe988bcc91ddb</anchor>
      <arglist>(iMeshFactoryWrapper *logparent)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>1d32dae8caa1c255804a37765c34d43b</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SupportsHardTransform</name>
      <anchor>5268c247227a996e48e9b09908de61b1</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshObjectType</name>
    <base>iBase</base>
    <filename>structiMeshObjectType.html</filename>
    <member kind="function">
      <name>NewFactory</name>
      <anchor>3d291b628b55f77343dfbc948ee757a0</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshWrapper</name>
    <base>iBase</base>
    <filename>structiMeshWrapper.html</filename>
    <member kind="function">
      <name>AddMeshToStaticLOD</name>
      <anchor>24c741c969503de6ef6a69554ab91b6d</anchor>
      <arglist>(int lod, iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateStaticLOD</name>
      <anchor>a8982f604cd3858a17aadcfa6dbf9804</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyStaticLOD</name>
      <anchor>5058b807f744b0f6d69e0a1f0e5a7ee6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindChildByName</name>
      <anchor>fdfdc758653dec7a0f7563e7a8295a3c</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDrawCallback</name>
      <anchor>ba09c505c41dc5fa81b78b367a92db55</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDrawCallbackCount</name>
      <anchor>041594586dab81b736766a86c9bedffd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>dd1ff9119046dbff3683492232001ee9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>71675a858d19e109944dcaa98355d310</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLightingInfo</name>
      <anchor>cf689c6cb3d6964c83fb21dc788cbc4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumRenderDistance</name>
      <anchor>267c36e1af97643deb934a23095a17ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumRenderDistanceVar</name>
      <anchor>7dd70379a77a82105de3275dddfdb2f4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshObject</name>
      <anchor>941b6ca24a1560e9c7d54b317c743316</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMinimumRenderDistance</name>
      <anchor>e01f0c53a675f62d730ffc384edadcf4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMinimumRenderDistanceVar</name>
      <anchor>08774d43c29b4b9efd0be5d8859df192</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMovable</name>
      <anchor>be24a82741ed41c16658b8542fd4ca64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalContainer</name>
      <anchor>14fbaa0112165da766d9942b91c52994</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>5d2687b29c5ac161ad0ea8380dba5218</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>7f94470a03b46ec2df16fd52d77bb05f</anchor>
      <arglist>(float &amp;rad, csVector3 &amp;cent) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderPriority</name>
      <anchor>4bb76e465d11e84545fe36042e57a189</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetScreenBoundingBox</name>
      <anchor>cd12949cddfc69b9f1abc6d03c6090f9</anchor>
      <arglist>(iCamera *camera)=0</arglist>
    </member>
    <member kind="function">
      <name>GetScreenBoundingBox</name>
      <anchor>f93a1ecb041d12f94fe0e97c137ae478</anchor>
      <arglist>(iCamera *camera, csBox2 &amp;sbox, csBox3 &amp;cbox)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadowCaster</name>
      <anchor>5cde052eb06634a18e7306bc553e4f67</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadowReceiver</name>
      <anchor>5c69bc0f9fcb5db03b540fbbbfbfba2f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStaticLOD</name>
      <anchor>e8749e2f870320ba01ae800a6f013265</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSVContext</name>
      <anchor>487f3fb7d15f242526dc6f22873a9a22</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransformedBoundingBox</name>
      <anchor>4002caecc14cbc91f192ff10ce76e1e1</anchor>
      <arglist>(const csReversibleTransform &amp;trans)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransformedBoundingBox</name>
      <anchor>1f537c1531730b4541e2d3c8e4088f7e</anchor>
      <arglist>(const csReversibleTransform &amp;trans, csBox3 &amp;cbox)=0</arglist>
    </member>
    <member kind="function">
      <name>GetWorldBoundingBox</name>
      <anchor>c85dc49014ed35c8792c5cca25a5e028</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetWorldBoundingBox</name>
      <anchor>84bacd7492398171a2aa6516cbeb530e</anchor>
      <arglist>(csBox3 &amp;cbox)=0</arglist>
    </member>
    <member kind="function">
      <name>GetZBufMode</name>
      <anchor>144522dd067e56b98a68a6a25194f5ac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>bf19f5a4bdbe7a6f3eb6ab7e87ef1f10</anchor>
      <arglist>(const csReversibleTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeam</name>
      <anchor>64f423079b21ccd61e3b8b5ccda8e027</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, bool do_material=false)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeam</name>
      <anchor>d376018a05cfe8a17d1def5a39e19208</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr, iMaterialWrapper **material=0)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamBBox</name>
      <anchor>8d6fd047d7de1a9e012506a28d8de201</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamBBox</name>
      <anchor>0f84c5c7dffe6f2154cc8c6204f5ceeb</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamObject</name>
      <anchor>f228a9e920829e92bb3d0f4ef8bdfbb0</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, bool do_material=false)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamObject</name>
      <anchor>ce849993d1db9de3f1ee53e45b5f348f</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr, int *polygon_idx=0)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamOutline</name>
      <anchor>d53f9a354edfaef38d9f96ea8f2959dc</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamOutline</name>
      <anchor>cf431db135b1d7094f6a439b8581c3cb</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr)=0</arglist>
    </member>
    <member kind="function">
      <name>PlaceMesh</name>
      <anchor>3fe38af938d8e712f04dfdfab928080c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>3c03370a1a95e5f19326dfb7464cd5c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QuerySceneNode</name>
      <anchor>eb7e6250d1212132215b2bc22e88a63b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveDrawCallback</name>
      <anchor>a596276cba50ac076f57f61b8a8fc363</anchor>
      <arglist>(iMeshDrawCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMeshFromStaticLOD</name>
      <anchor>0d926e6e53fa32a14e08136166c5fd89</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetMinMaxRenderDistance</name>
      <anchor>58292c30944252bcc4a698cbff943e2c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetDrawCallback</name>
      <anchor>0c2d95aae5b52b729691f450e1f9d065</anchor>
      <arglist>(iMeshDrawCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFactory</name>
      <anchor>c0e801dfedf106b29d42ecbdf0f9b1c1</anchor>
      <arglist>(iMeshFactoryWrapper *factory)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFlagsRecursive</name>
      <anchor>37be83c35cc3acde417f0e287903cda9</anchor>
      <arglist>(uint32 mask, uint32 flags=~0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightingUpdate</name>
      <anchor>3d8d4f93c270056485e9d5ce9bbb736c</anchor>
      <arglist>(int flags, int num_lights)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaximumRenderDistance</name>
      <anchor>1e67a8e8330726ea09d092411d60d959</anchor>
      <arglist>(float min)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaximumRenderDistanceVar</name>
      <anchor>75768cf05f79e11790585665bb8b2306</anchor>
      <arglist>(iSharedVariable *min)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMeshObject</name>
      <anchor>8f5dc9e0e94ada4c5e3fb5759261c462</anchor>
      <arglist>(iMeshObject *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinimumRenderDistance</name>
      <anchor>1924be3e9b435665f2a67e12478d4639</anchor>
      <arglist>(float min)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinimumRenderDistanceVar</name>
      <anchor>acc7943c73efa69875421160ba71debb</anchor>
      <arglist>(iSharedVariable *min)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderPriority</name>
      <anchor>49317bed70ed0ab118bde6e9cfd03988</anchor>
      <arglist>(long rp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderPriorityRecursive</name>
      <anchor>5a1317766ed59fa8e6361b0713d46c45</anchor>
      <arglist>(long rp)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZBufMode</name>
      <anchor>6e99c9eec4682b3e89a51fcb3b777a98</anchor>
      <arglist>(csZBufMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetZBufModeRecursive</name>
      <anchor>8fc03d28b092a33286c3261a50a7f75c</anchor>
      <arglist>(csZBufMode mode)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMeshWrapperIterator</name>
    <base>iBase</base>
    <filename>structiMeshWrapperIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>d17fd6c889648f67d80189e827df76c6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>8293198f972d8ae917de654d2873c074</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>01c57e4c65a6578a49f52a8a8cfb1c21</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMissingLoaderData</name>
    <base>iBase</base>
    <filename>structiMissingLoaderData.html</filename>
    <member kind="function">
      <name>MissingFactory</name>
      <anchor>0b92f6cfc1bb4f345f16005404beae19</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>MissingLight</name>
      <anchor>6eef44456fe728a8f835283b3d05c450</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>MissingMaterial</name>
      <anchor>efa055be3d9141356655781a06c15411</anchor>
      <arglist>(const char *name, const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>MissingMesh</name>
      <anchor>b3250dfcc76a5af06888e08ea254712a</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>MissingSector</name>
      <anchor>98fc6afb6aada49c205078b2c6e6a8be</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>MissingShader</name>
      <anchor>ed201bc4a9ded9e55901448c8c6235fa</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>MissingTexture</name>
      <anchor>564aff992e50c398b5f88d7310848dc1</anchor>
      <arglist>(const char *name, const char *filename)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iModelLoader</name>
    <base>iBase</base>
    <filename>structiModelLoader.html</filename>
    <member kind="function">
      <name>IsRecognized</name>
      <anchor>b09793396f557a7d1574806a44436057</anchor>
      <arglist>(iDataBuffer *buffer)=0</arglist>
    </member>
    <member kind="function">
      <name>IsRecognized</name>
      <anchor>f742ccf8747d3cedfea0f35233d58bf2</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>2db59440943609726c56f2acaf811f4e</anchor>
      <arglist>(const char *factname, iDataBuffer *buffer)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>6805a0f80dc5db0b9f0aea4b6bce950f</anchor>
      <arglist>(const char *factname, const char *filename)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMouseDriver</name>
    <base>iBase</base>
    <filename>structiMouseDriver.html</filename>
    <member kind="function">
      <name>DoButton</name>
      <anchor>7709a95847f74182af8d1118418305c8</anchor>
      <arglist>(uint number, int button, bool down, const int32 *axes, uint numAxes)=0</arglist>
    </member>
    <member kind="function">
      <name>DoMotion</name>
      <anchor>f858039a038f284e39c878b094364a88</anchor>
      <arglist>(uint number, const int32 *axes, uint numAxes)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>0c1cffacf437a8699a3e9dbaf027a799</anchor>
      <arglist>(uint n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLast</name>
      <anchor>902cb49fe6ab8f174cc19c5766617db7</anchor>
      <arglist>(uint n, uint a) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastButton</name>
      <anchor>9b18ec2cf21cd6abe65c94744ae06547</anchor>
      <arglist>(uint number, int button) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastX</name>
      <anchor>1d6bac7e97138e635a08b6498b6c8868</anchor>
      <arglist>(uint number=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastY</name>
      <anchor>2de40d848450e8f843fb0847e55664d0</anchor>
      <arglist>(uint number=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>aafa0493f1993238b4cf41be0fd81c80</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetDoubleClickTime</name>
      <anchor>0f530f89136dc254d6f9d5231ac7ff4f</anchor>
      <arglist>(int iTime, size_t iDist)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMovable</name>
    <base>iBase</base>
    <filename>structiMovable.html</filename>
    <member kind="function">
      <name>AddListener</name>
      <anchor>cc1f53d0610d63be900bc8e36f3318f0</anchor>
      <arglist>(iMovableListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearSectors</name>
      <anchor>f1f7b01a9b926ac6fdfdbd69bde35209</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullPosition</name>
      <anchor>ff2e012ab706cf147bbc7c345c1773e8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFullTransform</name>
      <anchor>71031bca8f0b1f6a2b69eb16afe0bd3f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>23b790289b7bcf5ba2c2ea29813af55b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSceneNode</name>
      <anchor>143c8f53fdcb9d6fa3e8ae52af4c44ac</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSectors</name>
      <anchor>5bb2f5f74320a6d075f0b5eb4089c542</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>df725ce95c804fef5fefe25fbd3e6514</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUpdateNumber</name>
      <anchor>07109bafd4485c1ecf5dc98f2c1c9c37</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>InSector</name>
      <anchor>5b60bc0b6c33cd3c28bf88b2ae571e7d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsFullTransformIdentity</name>
      <anchor>fbe4e4cc05e8bef83b5a87cbe70e925c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsTransformIdentity</name>
      <anchor>b11f37e2563c48eaa2f91fe27e1fd13d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>MovePosition</name>
      <anchor>26d2b27c3bbb4093d0bad2dd7b9a0fad</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>6f9bfea3cc2015e602ddc4eb073151eb</anchor>
      <arglist>(iMovableListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>dd59bf7008e10e9ea243e10b3f3adfca</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>bd0daa3b5e46488ecc7704d5d270200c</anchor>
      <arglist>(iSector *home, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSector</name>
      <anchor>05bbc2bbc84e0e2ca086af0d06505601</anchor>
      <arglist>(iSector *sector)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>ee2397567d1d08882d82a9c2d9f8ab5d</anchor>
      <arglist>(const csReversibleTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>20419948d260275da29b87eacaab0b84</anchor>
      <arglist>(const csMatrix3 &amp;matrix)=0</arglist>
    </member>
    <member kind="function">
      <name>Transform</name>
      <anchor>c7f00808f85975bbe4cae1d830b52714</anchor>
      <arglist>(const csMatrix3 &amp;matrix)=0</arglist>
    </member>
    <member kind="function">
      <name>TransformIdentity</name>
      <anchor>ad01f94380193c0bf360c1e7d86a57cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateMove</name>
      <anchor>70cc7fd24b69c74de210677d75e97544</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMovableListener</name>
    <base>iBase</base>
    <filename>structiMovableListener.html</filename>
    <member kind="function">
      <name>MovableChanged</name>
      <anchor>cde4a56b8209db1b1f021dbbff32244f</anchor>
      <arglist>(iMovable *movable)=0</arglist>
    </member>
    <member kind="function">
      <name>MovableDestroyed</name>
      <anchor>0daad80cdbe26cdf6a67ca60a98819d9</anchor>
      <arglist>(iMovable *movable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iMovieRecorder</name>
    <base>iBase</base>
    <filename>structiMovieRecorder.html</filename>
    <member kind="function">
      <name>IsPaused</name>
      <anchor>41ab94d67f113b95ff73846324768895</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsRecording</name>
      <anchor>4feec5d077c0da9e3aaa5f7628f1a285</anchor>
      <arglist>(void) const =0</arglist>
    </member>
    <member kind="function">
      <name>Pause</name>
      <anchor>cff97abca33b50e2f32e97fdfc2f024f</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>Start</name>
      <anchor>8f9780f1cd6efbc2dc60b8833483c9e7</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>Stop</name>
      <anchor>2a07e9cf7924010f4c444beab60fbbe1</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>UnPause</name>
      <anchor>89ef895396758d3b997010459a1b686f</anchor>
      <arglist>(void)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iNativeWindow</name>
    <base>iBase</base>
    <filename>structiNativeWindow.html</filename>
    <member kind="function">
      <name>SetTitle</name>
      <anchor>0b51739a3eb2b512c1fa3fd982750e90</anchor>
      <arglist>(const wchar_t *title)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTitle</name>
      <anchor>dca3a8eab6088628f51d68e6487f8092</anchor>
      <arglist>(const char *title)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iNativeWindowManager</name>
    <base>iBase</base>
    <filename>structiNativeWindowManager.html</filename>
    <member kind="function">
      <name>Alert</name>
      <anchor>f40ec3f2f92237dc7b9fa6ca8ac43f4e</anchor>
      <arglist>(int type, const wchar_t *title, const wchar_t *okMsg, const wchar_t *msg,...) CS_GNUC_WPRINTF(5</arglist>
    </member>
    <member kind="function">
      <name>Alert</name>
      <anchor>06e217be4bfa5a33311c4b3c850d00cc</anchor>
      <arglist>(int type, const char *title, const char *okMsg, const char *msg,...)=0</arglist>
    </member>
    <member kind="function">
      <name>AlertV</name>
      <anchor>662d74ac5ff3150ab20ec6055d2bd218</anchor>
      <arglist>(int type, const wchar_t *title, const wchar_t *okMsg, const wchar_t *msg, va_list arg) CS_GNUC_WPRINTF(5</arglist>
    </member>
    <member kind="function">
      <name>AlertV</name>
      <anchor>4234c723608a28704f6903689bb2c32d</anchor>
      <arglist>(int type, const char *title, const char *okMsg, const char *msg, va_list arg)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iNovaHalo</name>
    <base>iBase</base>
    <filename>structiNovaHalo.html</filename>
    <member kind="function">
      <name>GetRandomSeed</name>
      <anchor>9ba1e340e043eb77d175ea1551976ea5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRoundnessFactor</name>
      <anchor>ada7d93b287cbcd43f4a84893024d627</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSpokeCount</name>
      <anchor>5e1e63a97c38d0132b47ba76c363c99b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetRandomSeed</name>
      <anchor>75178bc04e9d1f19ecc9007e46a7b8c8</anchor>
      <arglist>(int s)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRoundnessFactor</name>
      <anchor>a0e3b377230e498eecad077420302c7d</anchor>
      <arglist>(float r)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSpokeCount</name>
      <anchor>e8974e7e01a3b031b3f89430d74a77cb</anchor>
      <arglist>(int s)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iNullFactoryState</name>
    <base>iNullMeshState</base>
    <filename>structiNullFactoryState.html</filename>
  </compound>
  <compound kind="class">
    <name>iNullMeshState</name>
    <base>iBase</base>
    <filename>structiNullMeshState.html</filename>
    <member kind="function">
      <name>GetBoundingBox</name>
      <anchor>7bad60bb2ba6e617342856578499a7e4</anchor>
      <arglist>(csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>89ff9bb03029cd9bee93b48dcaedce77</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetBoundingBox</name>
      <anchor>0e37e8dc6acb8144bc26d6c65aa82b1d</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRadius</name>
      <anchor>70a4ecfd9548f0add86de53ad2513037</anchor>
      <arglist>(float radius)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObject</name>
    <base>iBase</base>
    <filename>structiObject.html</filename>
    <member kind="function">
      <name>AddNameChangeListener</name>
      <anchor>aa27e930cc8f0e8be946a6f7f0b730be</anchor>
      <arglist>(iObjectNameChangeListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>GetChild</name>
      <anchor>b227c647f04d299327b05263b707a024</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetChild</name>
      <anchor>6f2cc06a839a8c986442c286de0cd881</anchor>
      <arglist>(int iInterfaceID, int iVersion, const char *Name=0, bool FirstName=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetID</name>
      <anchor>5c449ebb9a7dd534c2910f74f3e4d6ec</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetIterator</name>
      <anchor>7d556c40d0c2f474559145bd257660e6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>d4cdf16eca8ffd5e03cf592985cd5705</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectParent</name>
      <anchor>3814d9cf1ac4e6555d0483bd8e1c6146</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>ObjAdd</name>
      <anchor>1b43d0eb676349569efb8a7b3f7c9df5</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjAddChildren</name>
      <anchor>1db7ce1134a0e32c7f1c526e2374e5bf</anchor>
      <arglist>(iObject *Parent)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjReleaseOld</name>
      <anchor>386a28090c222bbcd522a6a986d83faf</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjRemove</name>
      <anchor>7ce9b15955777c50e656ec8551d38de9</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjRemoveAll</name>
      <anchor>512f4e205cc05d34d99c46537f389df1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveNameChangeListener</name>
      <anchor>d595caccee23cd4934472ff6f3402856</anchor>
      <arglist>(iObjectNameChangeListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>2afb56c8850acef9c640d7d152b84a55</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>SetObjectParent</name>
      <anchor>fdf5db6ec78d5ba13e591eebf3dae730</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectIterator</name>
    <base>iBase</base>
    <filename>structiObjectIterator.html</filename>
    <member kind="function">
      <name>FindName</name>
      <anchor>f715d4aef414361ce2c117aa5d24ba78</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParentObj</name>
      <anchor>7d6db37bbc3af0074faf15657ece7aea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>03bc80094bd3f11b30fe2b5a2976ae86</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>2a1175e182c98f29ceba58b3e23f3a00</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>d9d505e11f0c45884baa007e0d955a9f</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectModel</name>
    <base>iBase</base>
    <filename>structiObjectModel.html</filename>
    <member kind="function">
      <name>AddListener</name>
      <anchor>461d6857b46d7112c0a91a802255da35</anchor>
      <arglist>(iObjectModelListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateLowerDetailPolygonMesh</name>
      <anchor>221eb0db0e001c4f29c3495e83bb8f24</anchor>
      <arglist>(float detail)=0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectBoundingBox</name>
      <anchor>78960c01493abf081e0b8257405138c2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectBoundingBox</name>
      <anchor>3cda3f14f08428ecc897134f3b27f80a</anchor>
      <arglist>(csBox3 &amp;bbox)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshBase</name>
      <anchor>c05db2d15b7eeb3d894d946ab8e524a8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshColldet</name>
      <anchor>b02851d83412748cde4dfc60d510b455</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshShadows</name>
      <anchor>c7f54b7459f6ffa648951b76e832ddf8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMeshViscull</name>
      <anchor>5528fd7528ecc252ce64b3a660fe6f26</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>3464f62b8d1efdedf06456adacabf008</anchor>
      <arglist>(float &amp;radius, csVector3 &amp;center)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShapeNumber</name>
      <anchor>8d196b0037222cc8681ed8e3a8ce521e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTerraFormerColldet</name>
      <anchor>b61f3ce7ac7c7cc03df5a44ede426e89</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>2e3bd16e0501cf6657f7da4c9af6159a</anchor>
      <arglist>(iObjectModelListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>SetObjectBoundingBox</name>
      <anchor>0fbd58df3a157434eca28b045d15cde8</anchor>
      <arglist>(const csBox3 &amp;bbox)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshColldet</name>
      <anchor>291883b516d389d11fa38ffa07770d64</anchor>
      <arglist>(iPolygonMesh *polymesh)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshShadows</name>
      <anchor>2d344f39d9825d06b020cbb36c94fd19</anchor>
      <arglist>(iPolygonMesh *polymesh)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMeshViscull</name>
      <anchor>7cda7638f30c6f8140ecb5f773e930a6</anchor>
      <arglist>(iPolygonMesh *polymesh)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectModelListener</name>
    <base>iBase</base>
    <filename>structiObjectModelListener.html</filename>
    <member kind="function">
      <name>ObjectModelChanged</name>
      <anchor>5058e258c095724ebee35988f53efa44</anchor>
      <arglist>(iObjectModel *model)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectNameChangeListener</name>
    <base>iBase</base>
    <filename>structiObjectNameChangeListener.html</filename>
    <member kind="function">
      <name>NameChanged</name>
      <anchor>7373b34fc9ca459661ae000d06f48994</anchor>
      <arglist>(iObject *obj, const char *oldname, const char *newname)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectRegistry</name>
    <base>iBase</base>
    <filename>structiObjectRegistry.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>41cbf0c1bba0b09fe138558796fd07d1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>159572bd26f6107918820b7eec8090e6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>586c62d9b2c50f2f7b200a64693228d9</anchor>
      <arglist>(scfInterfaceID id, int version)=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>6669b525a825104c70276f7b4ab69de7</anchor>
      <arglist>(char const *tag, scfInterfaceID id, int version)=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>ba569f17b4f8b4a5201fa36e0793e77e</anchor>
      <arglist>(char const *tag)=0</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>95698fc00d47a53d011c10c75fefce2e</anchor>
      <arglist>(iBase *obj, char const *tag=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Unregister</name>
      <anchor>071a311e10733e187f4e77b1042a0fde</anchor>
      <arglist>(iBase *obj, char const *tag=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectRegistryIterator</name>
    <base>iBase</base>
    <filename>structiObjectRegistryIterator.html</filename>
    <member kind="function">
      <name>GetCurrentTag</name>
      <anchor>ca4ade9ad4e0ec2709a24d19403edfb4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>35b92e3e8615bb700e334940eb36ec01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>be23185d36ea130312f095e86fe7ab00</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>57127ff37041d759b2b49db7ce13885c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectWatcher</name>
    <base>iBase</base>
    <filename>structiObjectWatcher.html</filename>
    <member kind="function">
      <name>AddListener</name>
      <anchor>f7b0e0790f4b517be39d1cadb90b8fd0</anchor>
      <arglist>(iObjectWatcherListener *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLastLight</name>
      <anchor>822352207475c765193e735551f4a8b2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastMeshWrapper</name>
      <anchor>75f0ec5076ee47fbdc9f886b339296f9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastMovable</name>
      <anchor>a8a191faab68d6a3095bce56c1936dae</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastOperation</name>
      <anchor>2bdd6033cc33981d51c1102cb45383ea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLastSector</name>
      <anchor>b507508d452eca55b59ea4ab3ee623e6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLight</name>
      <anchor>0587e23565ee7f073d39d98369aa2b7a</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMovable</name>
      <anchor>8ac86b2ac17536b0820a13a9092e5580</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>5cf896e360989a178e5a085d9424681d</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetWatchedLightCount</name>
      <anchor>bb3f241e0d5821dff80aa72bf9daaef3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWatchedMovableCount</name>
      <anchor>a60a137cf1ac7cedd313e95d5a588902</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWatchedSectorCount</name>
      <anchor>52f626ec9a4801f517af42d4c4cdb3eb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWatchNumber</name>
      <anchor>3d1ad7499e46845888c44ccdd65698d0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveLight</name>
      <anchor>d10ccf97d44623cdfc60f3a0e9c56602</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>9251fdd7322c0e724c575d4393577711</anchor>
      <arglist>(iObjectWatcherListener *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMovable</name>
      <anchor>65b44701723574b4f7715bbb5df1bad1</anchor>
      <arglist>(iMovable *movable)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSector</name>
      <anchor>882c7d29c0610b8681482f6a3345ba15</anchor>
      <arglist>(iSector *sector)=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>936590f0db311c3c2ca3a89b48bd6f5d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>WatchLight</name>
      <anchor>40c88ef44bc3c23dabda55710ed5b22c</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>WatchMovable</name>
      <anchor>70912a07b6ad43129145f9a10fc4a68d</anchor>
      <arglist>(iMovable *movable)=0</arglist>
    </member>
    <member kind="function">
      <name>WatchSector</name>
      <anchor>c36010da8292e3354896911a48f658fb</anchor>
      <arglist>(iSector *sector)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iObjectWatcherListener</name>
    <base>iBase</base>
    <filename>structiObjectWatcherListener.html</filename>
    <member kind="function">
      <name>ObjectChanged</name>
      <anchor>725b54fa2e491219c41e1d661fd4aa4f</anchor>
      <arglist>(int op, iSector *sector, iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjectChanged</name>
      <anchor>274506b144dc82af29bfab77d5952701</anchor>
      <arglist>(int op, iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjectChanged</name>
      <anchor>1d91d6f7fe1232e744f7b33ab215b843</anchor>
      <arglist>(int op, iMovable *movable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEAMotorJoint</name>
    <base>iODEGeneralJointState</base>
    <filename>structiODEAMotorJoint.html</filename>
    <member kind="function">
      <name>GetAMotorAngle</name>
      <anchor>552334f811c9aa35f112e2885656d03e</anchor>
      <arglist>(int axis_num)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAMotorAngleRate</name>
      <anchor>25c5df56cea29d97f62e62bfc327463c</anchor>
      <arglist>(int axis_num)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAMotorAxis</name>
      <anchor>400994ef71ee36a99e111dfa13781295</anchor>
      <arglist>(int axis_num)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAMotorAxisRelOrientation</name>
      <anchor>64b0aca3dc37deb1abe8f19856dc5d6f</anchor>
      <arglist>(int axis_num)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAMotorMode</name>
      <anchor>caf2eac0eaaa5b50fb4bc9b1bb928962</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAMotorNumAxes</name>
      <anchor>a5f2c1b31481d398f3bf4e339609fe1b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAMotorAngle</name>
      <anchor>2f956297d34056adc34b095682157f6a</anchor>
      <arglist>(int axis_num, float angle)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAMotorAxis</name>
      <anchor>0ff8bfa0ec6c0ef6ac32c1f01aadd9e5</anchor>
      <arglist>(int axis_num, int rel_orient, const csVector3 &amp;axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAMotorAxis</name>
      <anchor>cdd62f968edef8aca8e1f68093846711</anchor>
      <arglist>(int axis_num, int rel_orient, float x, float y, float z)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAMotorMode</name>
      <anchor>ce0e01cd252c350db14d2b8a6e9c078a</anchor>
      <arglist>(ODEAMotorMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAMotorNumAxes</name>
      <anchor>bf237d9ce142049800a84c4b3907267e</anchor>
      <arglist>(int axis_num)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEBallJoint</name>
    <base>iBase</base>
    <filename>structiODEBallJoint.html</filename>
    <member kind="function">
      <name>Attach</name>
      <anchor>e7a066b2eff8ca5ed608f92de25ee3bc</anchor>
      <arglist>(iRigidBody *body1, iRigidBody *body2)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnchorError</name>
      <anchor>6e140c6e6fd4a5fa16cc7e29dfa6f6ec</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttachedBody</name>
      <anchor>7cf7a83205ce68464fda6fb4c5c331d3</anchor>
      <arglist>(int body)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBallAnchor1</name>
      <anchor>888c136d2a5fe211b739b1cf83b712f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBallAnchor2</name>
      <anchor>b9f762b425d2ff0e21f173ded2f9ae25</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackForce1</name>
      <anchor>55b6e23211225f880c106d9b94590831</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackForce2</name>
      <anchor>fa195fd4bf278a9e4684d0b1eb98d94b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackTorque1</name>
      <anchor>2fade4690e36c6b0a2013676e71127b2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackTorque2</name>
      <anchor>69f711d1f0bdd48a86d78fd2dbc1aa13</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetBallAnchor</name>
      <anchor>a83351bd3c98897f80ef7d117fac61e7</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEDynamicState</name>
    <base>iBase</base>
    <filename>structiODEDynamicState.html</filename>
    <member kind="function">
      <name>EnableEventProcessing</name>
      <anchor>41169162a661f217d6be229756c3e35c</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableFastObjects</name>
      <anchor>890c8ec163ec9e052a49393354c080a0</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableFrameRate</name>
      <anchor>f11be49834acd3e6f443b02dd45b4a3b</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableStepFast</name>
      <anchor>7219d10c5e83e672015751cc961df6f3</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetGlobalCFM</name>
      <anchor>6772f5b405c746bbf7c7345bf2883231</anchor>
      <arglist>(float cfm)=0</arglist>
    </member>
    <member kind="function">
      <name>SetGlobalERP</name>
      <anchor>8fa2f18cffcf44ad930f60b21e0ee73f</anchor>
      <arglist>(float erp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEDynamicSystemState</name>
    <base>iBase</base>
    <filename>structiODEDynamicSystemState.html</filename>
    <member kind="function">
      <name>CreateAMotorJoint</name>
      <anchor>ebb002065ce0eb6be4103dfd7d16ad32</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateBallJoint</name>
      <anchor>f38943df4d07f8c5a264d306d3e5886d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateHinge2Joint</name>
      <anchor>16d10f88bcdf864e2180b20634601d7d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateHingeJoint</name>
      <anchor>e832cd841bcd75a5b90d93c114031727</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSliderJoint</name>
      <anchor>c95adeeb91a3268ae81f59152f7a1f3c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateUniversalJoint</name>
      <anchor>55bea73735642cdac9ed4dc4232d8aeb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>EnableAutoDisable</name>
      <anchor>2babe5155536137ce2b682235e6a094a</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableFastObjects</name>
      <anchor>4d87b8891d0b2f6ec9b755274e146e44</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableFrameRate</name>
      <anchor>8839745963884b4d934be1dc403984ba</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableStepFast</name>
      <anchor>bd4bb53305a6bc9815590477658b6447</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>GetContactMaxCorrectingVel</name>
      <anchor>99f849ef0ccccadd6f203e4973d16f41</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetContactSurfaceLayer</name>
      <anchor>e5670a727bb45592dd93ed2d20c4340c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>ebfcc3096d312ba2f5e5503fa17e7308</anchor>
      <arglist>(iODEHinge2Joint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>da0abbbc3556d5b401495f81f470483d</anchor>
      <arglist>(iODESliderJoint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>621862b3c74396c25ee55535e670b341</anchor>
      <arglist>(iODEUniversalJoint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>49432634869cb28c7ca6f0684bdcb4fb</anchor>
      <arglist>(iODEAMotorJoint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>cc3364c5df0d83b9dee15356df72218f</anchor>
      <arglist>(iODEHingeJoint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveJoint</name>
      <anchor>06540dee1f7aca36a098cc6c53dc8d79</anchor>
      <arglist>(iODEBallJoint *joint)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAutoDisableParams</name>
      <anchor>b55657155569dc349b07daf2a67db06f</anchor>
      <arglist>(float linear, float angular, int steps, float time)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCFM</name>
      <anchor>cfca828d67911b367189ba7982f11f1b</anchor>
      <arglist>(float cfm)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContactMaxCorrectingVel</name>
      <anchor>6fae06337c5ae244e875750f27b69c66</anchor>
      <arglist>(float v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContactSurfaceLayer</name>
      <anchor>f19ead227d0483ed919c1d134c502d2f</anchor>
      <arglist>(float depth)=0</arglist>
    </member>
    <member kind="function">
      <name>SetERP</name>
      <anchor>2d7bea727964889212dfd50d23879d03</anchor>
      <arglist>(float erp)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEFrameUpdateCallback</name>
    <base>iBase</base>
    <filename>structiODEFrameUpdateCallback.html</filename>
    <member kind="function">
      <name>Execute</name>
      <anchor>aa53a4f44ace880f8da010d08caf999e</anchor>
      <arglist>(float stepsize)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEGeneralJointState</name>
    <base>iBase</base>
    <filename>structiODEGeneralJointState.html</filename>
    <member kind="function">
      <name>Attach</name>
      <anchor>de3d4ce5ed2a5ec5c8f04875b945beb2</anchor>
      <arglist>(iRigidBody *body1, iRigidBody *body2)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttachedBody</name>
      <anchor>e8ab340e900e3eb4e521a8f88a67476f</anchor>
      <arglist>(int body)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBounce</name>
      <anchor>1b1c00d9ab5f1a81667f086321582f68</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCFM</name>
      <anchor>22dcab9126b85c195fb0f5aed164124a</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackForce1</name>
      <anchor>1aa0dccbe0d7fc3c979c45e3bc23e3a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackForce2</name>
      <anchor>61b3ef123dea6770e1be71fd0e2b01bc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackTorque1</name>
      <anchor>a2a507f7887a246cc1a0bb193e58ce12</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFeedbackTorque2</name>
      <anchor>5d3135a4dd6121bc8e868343ce625f07</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFMax</name>
      <anchor>e5c6db2ad00f7bcbd3a78958a2bc73a4</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFudgeFactor</name>
      <anchor>a2150a1ab15db45fdc80134e05b3b22b</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetHiStop</name>
      <anchor>c73bc1d5f997d8f786a8166b11902dbc</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetLoStop</name>
      <anchor>ce045560d89f15409d2955059919e801</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetStopCFM</name>
      <anchor>7af03a6c66413b8acd00b19bb4f66b4e</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetStopERP</name>
      <anchor>2859bcb58d1fd3d32f8730a5a8c7c2d5</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSuspensionCFM</name>
      <anchor>7c5e73c4db552bb4dd5ebd8778b8c16b</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSuspensionERP</name>
      <anchor>4e9e55d27bf91d14b22d017c8e06ccad</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>GetVel</name>
      <anchor>1ebe144954f9b0d6777119f01cc7f861</anchor>
      <arglist>(int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBounce</name>
      <anchor>2d328ceacebd2accc38be00f0de948b5</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCFM</name>
      <anchor>70d70f341ce16011db5496b7cf139c9d</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFMax</name>
      <anchor>96dfef62c648505eb42919e1d362996a</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFudgeFactor</name>
      <anchor>08f7eaa7acd2dd8613943e40c31e909b</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHiStop</name>
      <anchor>36ea8de699af858a3f010c5b79da336b</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLoStop</name>
      <anchor>8d79c46322cd66b02757f8641c38e715</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStopCFM</name>
      <anchor>f3741cb6a9f51dd04d592038e5c5a72b</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStopERP</name>
      <anchor>7de2e0fb394507c792b483d481ffa6a5</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSuspensionCFM</name>
      <anchor>c97d83c5270fe309b7216b15eb797314</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSuspensionERP</name>
      <anchor>81b20177e69aef1f3a0d4087579eae5b</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVel</name>
      <anchor>c92afe706f62ff3db70eab63279dced3</anchor>
      <arglist>(float value, int axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEHinge2Joint</name>
    <base>iODEGeneralJointState</base>
    <filename>structiODEHinge2Joint.html</filename>
    <member kind="function">
      <name>GetAnchorError</name>
      <anchor>55cd43a07f545fb8bb9d628044d5830e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAnchor1</name>
      <anchor>569a8037019bc631e5a29b82248fa30d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAnchor2</name>
      <anchor>9c0710901ba4d8155512d17a5cf549da</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAngle</name>
      <anchor>0e0f62f9837bca5b4e1c4a2f507f473e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAngleRate1</name>
      <anchor>160819a328fa9b87788e9e4e791d823c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAngleRate2</name>
      <anchor>a290b21b829e599c04df35c8b70fe772</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAxis1</name>
      <anchor>42ef23cfa7b49b52487ba98198cf2f3f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAxis2</name>
      <anchor>8c094e34d30291f625b55ddeaabb1606</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetHingeAnchor</name>
      <anchor>8f9d0ed8d011ced2685c9a9fed398188</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHingeAxis1</name>
      <anchor>4a3c36cfbf3b782e6a9b8ac09440ebbd</anchor>
      <arglist>(const csVector3 &amp;axis)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHingeAxis2</name>
      <anchor>e8d1c856d9188200b98fe1e7ad987703</anchor>
      <arglist>(const csVector3 &amp;axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEHingeJoint</name>
    <base>iODEGeneralJointState</base>
    <filename>structiODEHingeJoint.html</filename>
    <member kind="function">
      <name>GetAnchorError</name>
      <anchor>55efec670071c7bcf6d6069668e8b68a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAnchor1</name>
      <anchor>733a4ee7f906a19f0974bd77877bc6b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAnchor2</name>
      <anchor>61d972118ab0ae7272ff49461c72ac69</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAngle</name>
      <anchor>291affa2a54c60440e2bb1414dd1cb6e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAngleRate</name>
      <anchor>a7ce128b4147117838f8f1944ae483ad</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHingeAxis</name>
      <anchor>55233d414d759cd90c042a86ae8341f5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetHingeAnchor</name>
      <anchor>7c7fb1a0a23aecf8f00d3372d298d350</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHingeAxis</name>
      <anchor>48665880f28d309162dc88d04dff0522</anchor>
      <arglist>(const csVector3 &amp;axis)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEJointState</name>
    <base>iBase</base>
    <filename>structiODEJointState.html</filename>
    <member kind="function">
      <name>GetBounce</name>
      <anchor>a66e3cb5ae7238eca93d290f166050ee</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCFM</name>
      <anchor>8d463ea767d8d137af1dc2c9a63032ae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFudgeFactor</name>
      <anchor>171eb5a5020df56f462409dcf74207a4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetHiStop</name>
      <anchor>de894bfc35dba26c3a0acc3bc0f5ad9b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLoStop</name>
      <anchor>fe55b35235fa8157a2d47cdc5dea4611</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaxForce</name>
      <anchor>8c4977e1c11a555a9ad4a8aa77414602</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStopCFM</name>
      <anchor>7ba67856d639ffcfd905e61e6f3305fb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStopERP</name>
      <anchor>d3e53b20baab7e167efe5892ee59580e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSuspensionCFM</name>
      <anchor>50650280550756f5183e9a1c2f7f0b33</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSuspensionERP</name>
      <anchor>b1c698d8526644e03fbff9cded4dd79b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVel</name>
      <anchor>331fdcc77865141cdac109c60e94f16a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetBounce</name>
      <anchor>933839e4e9121d38c87fcb26e148961f</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCFM</name>
      <anchor>711748fbb50668c19aad45b8bd16f156</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFMax</name>
      <anchor>625e12b68b39857640d63485c2b26649</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFudgeFactor</name>
      <anchor>1f8d85bf445c385642d3690f9bb32803</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHiStop</name>
      <anchor>fe38bdd13bbb5e5c18f90f420141a238</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLoStop</name>
      <anchor>4f076320a018daefee5390880c0be0d7</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStopCFM</name>
      <anchor>9d5078f5cd3d6554476f75090c8b8d1c</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStopERP</name>
      <anchor>cbd90f0e33686aa639599996ec5028e5</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSuspensionCFM</name>
      <anchor>6a87c7a17e1499bd379780ae27fa19f0</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSuspensionERP</name>
      <anchor>c14f369db2c2dfe596916c0b58ab8797</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVel</name>
      <anchor>057a23eb0df4660f8363043be3cc2e56</anchor>
      <arglist>(const csVector3 &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODESliderJoint</name>
    <base>iODEGeneralJointState</base>
    <filename>structiODESliderJoint.html</filename>
    <member kind="function">
      <name>GetSliderAxis</name>
      <anchor>c94f6848270b4690c8f11d945cf73c2b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSliderPosition</name>
      <anchor>43b1ba6a48c049db5cf46d700329e791</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSliderPositionRate</name>
      <anchor>c6dc0dbd6acc0f03feab339dc4dd8b11</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetSliderAxis</name>
      <anchor>dd48a782d4f68acea34b0c3e03a9f107</anchor>
      <arglist>(float x, float y, float z)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iODEUniversalJoint</name>
    <base>iODEGeneralJointState</base>
    <filename>structiODEUniversalJoint.html</filename>
    <member kind="function">
      <name>GetUniversalAnchor1</name>
      <anchor>d4d03191150c2ff0d13069608ca7807a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUniversalAnchor2</name>
      <anchor>16ea61c66ace64f352b3147d2e3ba83f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUniversalAxis1</name>
      <anchor>c45c2fd6e442360b3c8b012f3be39335</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUniversalAxis2</name>
      <anchor>1cc94f896b7688b988c6da937c5bb5b3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetUniversalAnchor</name>
      <anchor>5a27a1da7e2ae6a8596e279bff616c35</anchor>
      <arglist>(float x, float y, float z)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUniversalAxis1</name>
      <anchor>d98a28f1e2ccb9cd4f594d8fe1913090</anchor>
      <arglist>(float x, float y, float z)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUniversalAxis2</name>
      <anchor>b51bad40a679a753ee347436b47c4680</anchor>
      <arglist>(float x, float y, float z)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iOffscreenCanvasCallback</name>
    <base>iBase</base>
    <filename>structiOffscreenCanvasCallback.html</filename>
    <member kind="function">
      <name>FinishDraw</name>
      <anchor>b41a6394a1072e120f1675f668377af9</anchor>
      <arglist>(iGraphics2D *canvas)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRGB</name>
      <anchor>28ab6d56cddb23493da37f2fc7dfa96f</anchor>
      <arglist>(iGraphics2D *canvas, int idx, int r, int g, int b)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iOpenGLDriverDatabase</name>
    <base>iBase</base>
    <filename>structiOpenGLDriverDatabase.html</filename>
    <member kind="function">
      <name>ReadDatabase</name>
      <anchor>e4af55ee934c588363ca7eb57592c3a7</anchor>
      <arglist>(iDocumentNode *dbRoot, int configPriority=iConfigManager::ConfigPriorityPlugin+20, const char *phase=0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iOpenGLInterface</name>
    <base>iBase</base>
    <filename>structiOpenGLInterface.html</filename>
    <member kind="function">
      <name>GetProcAddress</name>
      <anchor>fdef1d3befe1e94adc9b396e04813dcd</anchor>
      <arglist>(const char *funcname)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iOSXAssistant</name>
    <base>iBase</base>
    <filename>structiOSXAssistant.html</filename>
    <member kind="function">
      <name>advance_state</name>
      <anchor>6885b667652b52c0dff98cfca34d5019</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>always_runs</name>
      <anchor>f25d1f757b0b704b9a7ce32afffc1ca8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>application_activated</name>
      <anchor>6ef4cbb49a0d5b8712f6fc50b032a0bd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>application_deactivated</name>
      <anchor>8b409b83bf0eda56222d20bb89bd19b5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>application_hidden</name>
      <anchor>7d8722d0539639767069015490ccad05</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>application_unhidden</name>
      <anchor>0f0b30b61e1a652470b16e406f356127</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>continue_running</name>
      <anchor>1bf06dbabcff996ed5e72040403eea9b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>dispatch_event</name>
      <anchor>0694c18365cc9b1aa35b5e2902be93eb</anchor>
      <arglist>(OSXEvent, OSXView)=0</arglist>
    </member>
    <member kind="function">
      <name>flush_graphics_context</name>
      <anchor>3022d2f162b254617d41ed29423e2fbf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>hide_mouse_pointer</name>
      <anchor>61776e021fc7c5683b273b3fa95cc88d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>key_down</name>
      <anchor>867554849b3826a716fa9eeb6cf52e5c</anchor>
      <arglist>(unsigned int raw, unsigned int cooked)=0</arglist>
    </member>
    <member kind="function">
      <name>key_up</name>
      <anchor>93b4996d59221b3965d5f7a5d361bda5</anchor>
      <arglist>(unsigned int raw, unsigned int cooked)=0</arglist>
    </member>
    <member kind="function">
      <name>mouse_down</name>
      <anchor>4afacb4483541b5136d2f35ffabe63e4</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>mouse_moved</name>
      <anchor>bfa8b7d71dfbc19ae2eef63059905885</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>mouse_up</name>
      <anchor>40d131771ea255b5ff97acb1b5e41f15</anchor>
      <arglist>(int button, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>request_shutdown</name>
      <anchor>ebba9e821b744ebd714900e3efcec552</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>show_mouse_pointer</name>
      <anchor>7ba6be3551b361ae1fd2cdc4a231bc9c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPagingFormerState</name>
    <base>iBase</base>
    <filename>structiPagingFormerState.html</filename>
    <member kind="function">
      <name>SetFloatMap</name>
      <anchor>5242838c2006ba18ff2b4ca5e88df926</anchor>
      <arglist>(csStringID type, iImage *map, float scale=1.0, float offset=0.0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFloatmapDir</name>
      <anchor>446344c26fdf3ed0cfcede60f5e066ad</anchor>
      <arglist>(csStringID type, const char *path)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHeightmapDir</name>
      <anchor>a647c1c38b789ae49f053d937f3cf52d</anchor>
      <arglist>(const char *path, const char *type=&quot;image&quot;)=0</arglist>
    </member>
    <member kind="function">
      <name>SetIntegerMap</name>
      <anchor>6698c23a1eb316342c49e63a1439d06e</anchor>
      <arglist>(csStringID type, iImage *map, int scale=1, int offset=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetIntmapDir</name>
      <anchor>b2e847cc272f69105593fd2d43c6dcc8</anchor>
      <arglist>(csStringID type, const char *path)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOffset</name>
      <anchor>7fb32525790edfc72be9c0c785738e3e</anchor>
      <arglist>(csVector3 scale)=0</arglist>
    </member>
    <member kind="function">
      <name>SetScale</name>
      <anchor>47f233e1a49e627957fa2da667e9de75</anchor>
      <arglist>(csVector3 scale)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParameterESM</name>
    <base>iBase</base>
    <filename>structiParameterESM.html</filename>
    <member kind="function">
      <name>GetValue</name>
      <anchor>e6cf8d0d2301a456862cfc2e0d06dfd4</anchor>
      <arglist>(iBase *params=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsConstant</name>
      <anchor>77199c0fc9eda894cc28d831c0ffaf7d</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticle</name>
    <base>iBase</base>
    <filename>structiParticle.html</filename>
    <member kind="function">
      <name>AddColor</name>
      <anchor>5e9085518167ccdfaafdbc24c89ebab8</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>MovePosition</name>
      <anchor>e8f57df4a2642df35846a917a32586b9</anchor>
      <arglist>(const csVector3 &amp;move)=0</arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>f3b7112bc18df95f203dcbc2f65788fc</anchor>
      <arglist>(float angle)=0</arglist>
    </member>
    <member kind="function">
      <name>ScaleBy</name>
      <anchor>ed700de359095ce0b7540653d765f979</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>2c5702cc5930ccb56b12c287e3a63e88</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateLighting</name>
      <anchor>b2051d05f5538a660c79eb260c69300d</anchor>
      <arglist>(const csArray&lt; iLightSectorInfluence * &gt; &amp;lights, const csReversibleTransform &amp;transform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEffectorFactory</name>
    <base>iBase</base>
    <filename>structiParticleBuiltinEffectorFactory.html</filename>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEffectorForce</name>
    <base>iParticleEffector</base>
    <filename>structiParticleBuiltinEffectorForce.html</filename>
    <member kind="function">
      <name>GetAcceleration</name>
      <anchor>9a1a6d37ed7cc480f0883af8cb6c8930</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetForce</name>
      <anchor>8354b9623bfb95b991d5c99f3d9adae5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRandomAcceleration</name>
      <anchor>3da169653bb620b2bf4ed66e07a7ef78</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetAcceleration</name>
      <anchor>6f8b915d6d9e8e61189ae2647f3de239</anchor>
      <arglist>(const csVector3 &amp;acceleration)=0</arglist>
    </member>
    <member kind="function">
      <name>SetForce</name>
      <anchor>e95f4744ac9c23a7b1ed09c3ca4fab80</anchor>
      <arglist>(const csVector3 &amp;force)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRandomAcceleration</name>
      <anchor>9e595938c85b783e78a10933c2f712e6</anchor>
      <arglist>(const csVector3 &amp;magnitude)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEffectorLinColor</name>
    <base>iParticleEffector</base>
    <filename>structiParticleBuiltinEffectorLinColor.html</filename>
    <member kind="function">
      <name>AddColor</name>
      <anchor>d1443a21fedd12d85c7f11e1c965ba39</anchor>
      <arglist>(const csColor4 &amp;color, float endTTL)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>65ef58026508f6962e852f03f4ab3c31</anchor>
      <arglist>(size_t index, csColor4 &amp;color, float &amp;endTTL) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetColorCount</name>
      <anchor>1f356b3e25832b177c6f19cd49a88242</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>6e4ea9c7cd4bb7e73f6b51797536be63</anchor>
      <arglist>(size_t index, const csColor4 &amp;color)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEffectorVelocityField</name>
    <base>iParticleEffector</base>
    <filename>structiParticleBuiltinEffectorVelocityField.html</filename>
    <member kind="function">
      <name>GetFParameter</name>
      <anchor>e49531865269380744a7f527cefd93db</anchor>
      <arglist>(size_t parameterNumber) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFParameterCount</name>
      <anchor>1ce8285d8c0e4c51ccaca0e098fe084b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>e80742c97740f6aa84a1bbe99bfed0be</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVParameter</name>
      <anchor>434085b0ade1a5dc62d5c0510205213c</anchor>
      <arglist>(size_t parameterNumber) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVParameterCount</name>
      <anchor>84f4e2a49519941143aee0ce54cde16e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetFParameter</name>
      <anchor>80bd9e08c6392611530f7f72c6c63532</anchor>
      <arglist>(size_t parameterNumber, float value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetType</name>
      <anchor>8ce83ccaaca7b5bc80217720810df0d6</anchor>
      <arglist>(csParticleBuiltinEffectorVFType type)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVParameter</name>
      <anchor>a638095ad72281a1126d91a4ec276b8c</anchor>
      <arglist>(size_t parameterNumber, const csVector3 &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEmitterBase</name>
    <base>iParticleEmitter</base>
    <filename>structiParticleBuiltinEmitterBase.html</filename>
    <member kind="function">
      <name>GetInitialVelocity</name>
      <anchor>3578e553ecdfa6aa74e7e99c88fd6eba</anchor>
      <arglist>(csVector3 &amp;linear, csVector3 &amp;angular) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParticlePlacement</name>
      <anchor>a27357301e1f2538cd351201bceb83c0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>51d3156917ef177e47803cc52c20e09f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUniformVelocity</name>
      <anchor>95899105882eaa0c1a357ddef01dd249</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetInitialVelocity</name>
      <anchor>04891451231a333b28163269c5de2562</anchor>
      <arglist>(const csVector3 &amp;linear, const csVector3 &amp;angular)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParticlePlacement</name>
      <anchor>0b341dffe471dd08d53cd76c8aab187f</anchor>
      <arglist>(csParticleBuiltinEmitterPlacement place)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>626ab6780b0327bfc0772c69c41e5d93</anchor>
      <arglist>(const csVector3 &amp;position)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUniformVelocity</name>
      <anchor>b2fe190717ce29dbe5af3621be5af40d</anchor>
      <arglist>(bool uniform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEmitterBox</name>
    <base>iParticleBuiltinEmitterBase</base>
    <filename>structiParticleBuiltinEmitterBox.html</filename>
    <member kind="function">
      <name>GetBox</name>
      <anchor>52521113356eb39270347860bccfa7a4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetBox</name>
      <anchor>4a30ed57bba8bee6b4afb6a7024e05c3</anchor>
      <arglist>(const csOBB &amp;box)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEmitterCone</name>
    <base>iParticleBuiltinEmitterBase</base>
    <filename>structiParticleBuiltinEmitterCone.html</filename>
    <member kind="function">
      <name>GetConeAngle</name>
      <anchor>3e7099ccb5536fac465fd1893ce8dc35</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetExtent</name>
      <anchor>f4b933f91b2e9e8da2b59852048a1536</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetConeAngle</name>
      <anchor>bdcf13333608620d53fafddd84694952</anchor>
      <arglist>(float angle)=0</arglist>
    </member>
    <member kind="function">
      <name>SetExtent</name>
      <anchor>5cc310d9b4c8189564c2713ee26c2c44</anchor>
      <arglist>(const csVector3 &amp;extent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEmitterCylinder</name>
    <base>iParticleBuiltinEmitterBase</base>
    <filename>structiParticleBuiltinEmitterCylinder.html</filename>
    <member kind="function">
      <name>GetExtent</name>
      <anchor>266eacccf75bb271db18ee543722a32f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>dfcc15555b7d2f8a3b0d4e43f81500f8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetExtent</name>
      <anchor>610b8ac5aaf089999722c120732fe986</anchor>
      <arglist>(const csVector3 &amp;extent)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRadius</name>
      <anchor>f3f6829214bb745deaf12f498579460c</anchor>
      <arglist>(float radius)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEmitterFactory</name>
    <base>iBase</base>
    <filename>structiParticleBuiltinEmitterFactory.html</filename>
  </compound>
  <compound kind="class">
    <name>iParticleBuiltinEmitterSphere</name>
    <base>iParticleBuiltinEmitterBase</base>
    <filename>structiParticleBuiltinEmitterSphere.html</filename>
    <member kind="function">
      <name>GetRadius</name>
      <anchor>d94573ccc4f657bca48a861dc8eb4dcf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetRadius</name>
      <anchor>f28bd57be37e0890e6f931d03f7568f3</anchor>
      <arglist>(float radius)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleEffector</name>
    <base>iBase</base>
    <filename>structiParticleEffector.html</filename>
    <member kind="function">
      <name>Clone</name>
      <anchor>f8f2d042bc380dd40924d178ee7fa753</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>EffectParticles</name>
      <anchor>45d41c4e75fa66b7f39c906beb637a8a</anchor>
      <arglist>(iParticleSystemBase *system, const csParticleBuffer &amp;particleBuffer, float dt, float totalTime)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleEmitter</name>
    <base>iBase</base>
    <filename>structiParticleEmitter.html</filename>
    <member kind="function">
      <name>Clone</name>
      <anchor>c6c2af180a9f7ded062a8347676e3af0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>EmitParticles</name>
      <anchor>19e3c7195d81f819710c73123fa08082</anchor>
      <arglist>(iParticleSystemBase *system, const csParticleBuffer &amp;particleBuffer, float dt, float totalTime, const csReversibleTransform *const emitterToParticle=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDuration</name>
      <anchor>64a47d6803d07574cdc2d31bf8f24d2c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEmissionRate</name>
      <anchor>441ae1691bdcfd41376eff0a89c808cd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEnabled</name>
      <anchor>b9af6079603fb88509ed652a12f47560</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInitialMass</name>
      <anchor>84e3c4841dba10cee890f45d9102bce5</anchor>
      <arglist>(float &amp;min, float &amp;max) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInitialTTL</name>
      <anchor>ab61c4a9ad55411db1ce8c4a8760d745</anchor>
      <arglist>(float &amp;min, float &amp;max) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStartTime</name>
      <anchor>6d728f38fcada0d60a88a64c6c1d0679</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>ParticlesToEmit</name>
      <anchor>06b7acad3c165f82b56d563c19e1d830</anchor>
      <arglist>(iParticleSystemBase *system, float dt, float totalTime)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDuration</name>
      <anchor>ca4decfdecd092c6e75dd83ba4699ac8</anchor>
      <arglist>(float time)=0</arglist>
    </member>
    <member kind="function">
      <name>SetEmissionRate</name>
      <anchor>ba4f8eee97e0bde35e1e6f747b8cebb5</anchor>
      <arglist>(float particlesPerSecond)=0</arglist>
    </member>
    <member kind="function">
      <name>SetEnabled</name>
      <anchor>464795670fbad11a2922137088a88cf9</anchor>
      <arglist>(bool enabled)=0</arglist>
    </member>
    <member kind="function">
      <name>SetInitialMass</name>
      <anchor>133ed9ecce4a5b9e1a6b4084606ac437</anchor>
      <arglist>(float min, float max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetInitialTTL</name>
      <anchor>bce5336fe9eed2912b6e0bb9ebac4008</anchor>
      <arglist>(float min, float max)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStartTime</name>
      <anchor>7444a2fc490164387deb7f3a9c0ebcda</anchor>
      <arglist>(float time)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleState</name>
    <base>iBase</base>
    <filename>structiParticleState.html</filename>
    <member kind="function">
      <name>GetAlpha</name>
      <anchor>5d46f7bc0898c676aa832ed34b5cd1da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetChangeAlpha</name>
      <anchor>5ce9c3a8f3cfd71e648dccab0fae9132</anchor>
      <arglist>(float &amp;factor) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetChangeColor</name>
      <anchor>fd4ecf17c070d736b24a62def42a336c</anchor>
      <arglist>(csColor &amp;col) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetChangeRotation</name>
      <anchor>412cad7108fa347e6f0d3cb8a9ea9322</anchor>
      <arglist>(float &amp;angle) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetChangeSize</name>
      <anchor>a258f6bce11a61c015df3aaa9882de3a</anchor>
      <arglist>(float &amp;factor) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>3a75dd29d3b578dc5f9772edff08afcb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetAlpha</name>
      <anchor>659b63c36e703e57c9859e89fccb81c6</anchor>
      <arglist>(float alpha)=0</arglist>
    </member>
    <member kind="function">
      <name>SetChangeAlpha</name>
      <anchor>e4968268ed73fb99c55623dbe97b890a</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetChangeColor</name>
      <anchor>87a7be01253a46cd593ec72111084e07</anchor>
      <arglist>(const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>SetChangeRotation</name>
      <anchor>506b565ca16dd8eed9c481d182a020de</anchor>
      <arglist>(float angle)=0</arglist>
    </member>
    <member kind="function">
      <name>SetChangeSize</name>
      <anchor>71a547359db062d947ae9baac95f18ef</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>0b19b9f5593021e6cffecc67ace89ce8</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSelfDestruct</name>
      <anchor>a98fd478477e702b69ede9708ec1fe32</anchor>
      <arglist>(csTicks t)=0</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeAlpha</name>
      <anchor>7db4fecaaa129c6c47de0132b4cca24d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeColor</name>
      <anchor>32064a25b398053fa8ad231f0fc451ca</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeRotation</name>
      <anchor>c2869f205ec0992d77cdea8b23d61d02</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnsetChangeSize</name>
      <anchor>7d37a69b892cb4000996c0cc5bc10964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnSetSelfDestruct</name>
      <anchor>21201bdd45d39fe7df1dcaa73927af52</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleSystem</name>
    <base>iParticleSystemBase</base>
    <filename>structiParticleSystem.html</filename>
    <member kind="function">
      <name>Advance</name>
      <anchor>3f632d93b1a233e5935d8616b948760e</anchor>
      <arglist>(csTicks time)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParticle</name>
      <anchor>afac40b5401145947b9607939a036a5c</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParticleAux</name>
      <anchor>d6de1fd7516c8518809eb5edc92a0499</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetParticleCount</name>
      <anchor>0f7bb9f4179d3418957e7157cf5d16af</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>LockForExternalControl</name>
      <anchor>b4a9a17c97efb2aadd022ceb561d7373</anchor>
      <arglist>(size_t maxParticles)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleSystemBase</name>
    <base>iBase</base>
    <filename>structiParticleSystemBase.html</filename>
    <member kind="function">
      <name>AddEffector</name>
      <anchor>0ec9d19c3a3930e0e200725467d0bd3d</anchor>
      <arglist>(iParticleEffector *effector)=0</arglist>
    </member>
    <member kind="function">
      <name>AddEmitter</name>
      <anchor>455f32bf7ef516786d34683251b13dc4</anchor>
      <arglist>(iParticleEmitter *emitter)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCommonDirection</name>
      <anchor>c0d93749a9f32696631e829e3f8580b5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEffector</name>
      <anchor>5fb9907d7b707439adca549ecb05d494</anchor>
      <arglist>(size_t index) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEffectorCount</name>
      <anchor>e690d168cbd275e0f970844be9850be3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEmitter</name>
      <anchor>503b80d783256e74ed9e615b5ee8ffec</anchor>
      <arglist>(size_t index) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEmitterCount</name>
      <anchor>e7bc2d89db1be2843281df7265b8a05d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetIntegrationMode</name>
      <anchor>1d7f1acbab92ae1c84cbc246766aca56</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMinBoundingBox</name>
      <anchor>b2bc6536560b4725f77dbdfc61cb4712</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParticleRenderOrientation</name>
      <anchor>197f2394672038257ae1569c444a9e98</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParticleSize</name>
      <anchor>aa747e9ff1ff136a5bb62d97e27811e0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRotationMode</name>
      <anchor>9b32f3226a5c4a6e6c229af4c6753ffc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSortMode</name>
      <anchor>078e73d13213550758117c18be337663</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransformMode</name>
      <anchor>cef3e931aba678dbed18cf5efb228a5a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUseIndividualSize</name>
      <anchor>f47260312c45fbffede335badbc9206c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveEffector</name>
      <anchor>9ea0da1fc641a049af754e956c85ebbb</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveEmitter</name>
      <anchor>9b8105bab4d7fc064c0b2518c83a74eb</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCommonDirection</name>
      <anchor>1a52964c80d787218a0411c60cc46ad5</anchor>
      <arglist>(const csVector3 &amp;direction)=0</arglist>
    </member>
    <member kind="function">
      <name>SetIntegrationMode</name>
      <anchor>e1111f2e5ea8f3aad61042a0818506bb</anchor>
      <arglist>(csParticleIntegrationMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinBoundingBox</name>
      <anchor>6ac8a013bb92d15fdb0269a82b8013b4</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParticleRenderOrientation</name>
      <anchor>be54b0e2b7de40cdbd9df75097fe9fe1</anchor>
      <arglist>(csParticleRenderOrientation o)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParticleSize</name>
      <anchor>fa06f32579bda6b2e2c6fe7c6de28c2a</anchor>
      <arglist>(const csVector2 &amp;size)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRotationMode</name>
      <anchor>221efd0e5a2125adb0862ab9781e4785</anchor>
      <arglist>(csParticleRotationMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSortMode</name>
      <anchor>4c74990226832bd4c732723a3843f398</anchor>
      <arglist>(csParticleSortMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransformMode</name>
      <anchor>ac7cecde88399ad2da1c1b917f7e032f</anchor>
      <arglist>(csParticleTransformMode mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUseIndividualSize</name>
      <anchor>b3d02306e0929cf7c224f331fd9af746</anchor>
      <arglist>(bool individual)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iParticleSystemFactory</name>
    <base>iParticleSystemBase</base>
    <filename>structiParticleSystemFactory.html</filename>
    <member kind="function">
      <name>GetDeepCreation</name>
      <anchor>1af55ddce0c6bd52724fb6394c4e6d9b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetDeepCreation</name>
      <anchor>15e480b29a9f1ef8081d6a0fc5c2e02f</anchor>
      <arglist>(bool deep)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPath</name>
    <base>iBase</base>
    <filename>structiPath.html</filename>
    <member kind="function">
      <name>CalculateAtTime</name>
      <anchor>34bb73a4b272c0202d1ab2d8d785c3b9</anchor>
      <arglist>(float time)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentIndex</name>
      <anchor>8faa6d1805a45562dd09be4f872cd133</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetForwardVector</name>
      <anchor>e0f5d108e2ccd31f897abfeb84256f13</anchor>
      <arglist>(int idx, csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedForward</name>
      <anchor>bfe3c8b37214ed6931bf6e81a1ce3005</anchor>
      <arglist>(csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedPosition</name>
      <anchor>c4ab8ea737cb1ab630bec16e7e02eb29</anchor>
      <arglist>(csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInterpolatedUp</name>
      <anchor>bd89bd11ac67db0798f1cd42af8503df</anchor>
      <arglist>(csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPositionVector</name>
      <anchor>64e4f86bd98bad224c44567ce1a530ad</anchor>
      <arglist>(int idx, csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTime</name>
      <anchor>2b0627388d49885d3f25ea593d4218fc</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetUpVector</name>
      <anchor>c9c8757a7fe0ed8901ccceab1e9e8eed</anchor>
      <arglist>(int idx, csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>6300eb849fac15fb4961585a7072804b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetForwardVector</name>
      <anchor>2ea9a5f725f22a64cf389f8dd6239495</anchor>
      <arglist>(int idx, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetForwardVectors</name>
      <anchor>a421f56bb20c22054aa2243c68636a33</anchor>
      <arglist>(csVector3 *v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPositionVector</name>
      <anchor>ec60e9750fde3c16691269a9d71bc306</anchor>
      <arglist>(int idx, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPositionVectors</name>
      <anchor>6e33aeb34249a3e046096e3dd57ce31c</anchor>
      <arglist>(csVector3 *v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTime</name>
      <anchor>8bf4a8c41adece8674d2b753a6b9fbfc</anchor>
      <arglist>(int idx, float t)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUpVector</name>
      <anchor>b1217cfcf26bbc22883b8d0ffb3b105d</anchor>
      <arglist>(int idx, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUpVectors</name>
      <anchor>b1c80e39f9d0556cc06fd627ed442c9d</anchor>
      <arglist>(csVector3 *v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPen</name>
    <filename>structiPen.html</filename>
    <member kind="function">
      <name>~iPen</name>
      <anchor>65fb45be0f051b8da9c5b150181d5613</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>ClearFlag</name>
      <anchor>596b9b2ce7775466cf4980429b438922</anchor>
      <arglist>(uint flag)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearTransform</name>
      <anchor>de3ad6d218de12e8fad4a53a59a7a17a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DrawArc</name>
      <anchor>0b226cfc0f3a049d5c6827f92fb89b92</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, float start_angle, float end_angle)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawLine</name>
      <anchor>1df52467753f44bf9de33d9ea4ea899d</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawMiteredRect</name>
      <anchor>e3f8d2ad4e79d2041db81bb743dd6f11</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint miter)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawPoint</name>
      <anchor>ec4d5f50a5e8b5211fccc629d21e0c34</anchor>
      <arglist>(uint x1, uint y2)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawRect</name>
      <anchor>2a022e9a6e372867216dec0c31cd05a7</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawRoundedRect</name>
      <anchor>5ca36afe421610f6d607400bed283488</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint roundness)=0</arglist>
    </member>
    <member kind="function">
      <name>DrawTriangle</name>
      <anchor>ef4ce56b1e7411ca5d0cf6065fc8e4a3</anchor>
      <arglist>(uint x1, uint y1, uint x2, uint y2, uint x3, uint y3)=0</arglist>
    </member>
    <member kind="function">
      <name>PopTransform</name>
      <anchor>e332eba7dbea04c84fcc639d6992f582</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PushTransform</name>
      <anchor>3c71401fe20d0fdd1ccb69df82923394</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Rotate</name>
      <anchor>4b4f24f9b020f9840e8088d151843cba</anchor>
      <arglist>(const float &amp;a)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>f5ee30a2b1750af01bc74491931bd785</anchor>
      <arglist>(const csColor4 &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>19e44ed243759a1571e25c94715fadf9</anchor>
      <arglist>(float r, float g, float b, float a)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFlag</name>
      <anchor>49078e4f749d24a64c98c0577116acc1</anchor>
      <arglist>(uint flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>1207d19d0b798154630f9ea789fdb892</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOrigin</name>
      <anchor>15c59cec22f8c6f1cd5b3172caf67545</anchor>
      <arglist>(const csVector3 &amp;o)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPenWidth</name>
      <anchor>9113eb8dda4d64879fe948fcbf42992f</anchor>
      <arglist>(float width)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTexture</name>
      <anchor>9288e79058aa9e2a2d7e243ad22c7530</anchor>
      <arglist>(csRef&lt; iTextureHandle &gt; tex)=0</arglist>
    </member>
    <member kind="function">
      <name>SwapColors</name>
      <anchor>40ec4da86abc0c3d9f0f69c3577a4883</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Translate</name>
      <anchor>e17cefbab4c9f0aab0b376a76db440e7</anchor>
      <arglist>(const csVector3 &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>Write</name>
      <anchor>d2afb470cf2554246bb5e44f2d746897</anchor>
      <arglist>(iFont *font, uint x1, uint y1, char *text)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteBoxed</name>
      <anchor>6d668febbe33e724c7adc5c0a5fbcb65</anchor>
      <arglist>(iFont *font, uint x1, uint y1, uint x2, uint y2, uint h_align, uint v_align, char *text)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPluginConfig</name>
    <base>iBase</base>
    <filename>structiPluginConfig.html</filename>
    <member kind="function">
      <name>GetOption</name>
      <anchor>5b696e4beacd0b33195980b362d720bc</anchor>
      <arglist>(int id, csVariant *value)=0</arglist>
    </member>
    <member kind="function">
      <name>GetOptionDescription</name>
      <anchor>c461a6a85570948f2d92d639a2654857</anchor>
      <arglist>(int idx, csOptionDescription *option)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOption</name>
      <anchor>f80fa679ca28a82f3a8e55a51efc26b0</anchor>
      <arglist>(int id, csVariant *value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPluginIterator</name>
    <base>iBase</base>
    <filename>structiPluginIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>b0f892c6ed343c676f34a585d8779024</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>8dbdff4c5f56f5ba232b428e0ad007c3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPluginManager</name>
    <base>iBase</base>
    <filename>structiPluginManager.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>c5581c3f292637f76b6408320618db15</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPlugins</name>
      <anchor>040b2fd1933404bbcbd5bf6ffd542d97</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LoadPlugin</name>
      <anchor>8b4f2992fe9fc0621becac1dd5161271</anchor>
      <arglist>(const char *classID, bool init=true)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryOptions</name>
      <anchor>1870603a9cea6230abdff8f427514c29</anchor>
      <arglist>(iComponent *object)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryPlugin</name>
      <anchor>76623dae5de0c0ceaabbd678e4ffd382</anchor>
      <arglist>(const char *classID, const char *iInterface, int iVersion)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryPlugin</name>
      <anchor>88974fb098d664b992252bc4019f235d</anchor>
      <arglist>(const char *iInterface, int iVersion)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterPlugin</name>
      <anchor>65dd34e5a1e6363cbdf008cbac0a250f</anchor>
      <arglist>(const char *classID, iComponent *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>UnloadPlugin</name>
      <anchor>4006d49d3bafd0d0868a130a9b007c70</anchor>
      <arglist>(iComponent *obj)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPolygonHandle</name>
    <base>iBase</base>
    <filename>structiPolygonHandle.html</filename>
    <member kind="function">
      <name>GetIndex</name>
      <anchor>60585ad3aa1f0c852d144b9dc0110c8e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshObject</name>
      <anchor>4c030e3fec7efe91423cee5852c28575</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshObjectFactory</name>
      <anchor>b24c27b9390b466b0e4f42d2ad82ad1d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetThingFactoryState</name>
      <anchor>7ff071c0ee24633fc8b1e9789581fb8b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetThingState</name>
      <anchor>1449bea0c51b37261b11bb670cca80d6</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPolygonMesh</name>
    <base>iBase</base>
    <filename>structiPolygonMesh.html</filename>
    <member kind="function">
      <name>GetChangeNumber</name>
      <anchor>685ee356f1701b45565f3a12cfaf0b6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>fc5c61c3f0335342dc62959f246ecda8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonCount</name>
      <anchor>dfc28fe19255bfb7045b4d8aee62206d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygons</name>
      <anchor>62aaacb45736e574e493c3a6eb192581</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>5891bad390dae940403747cc9510dd8a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>e546e20dc76cac4d92e2286c2c367e46</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>b9be0881ef3c249e17fa5e7ec562aa18</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>929a4b77e97ee897bd6fee403aa01b32</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>c56830528370c368f0ba2d182d9ed33a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Unlock</name>
      <anchor>0bc08c30ac522eddc363be6075cdb547</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPortal</name>
    <base>iBase</base>
    <filename>structiPortal.html</filename>
    <member kind="function">
      <name>CheckFrustum</name>
      <anchor>7fb29276fc69559f99be0d5e9d34d41c</anchor>
      <arglist>(iFrustumView *lview, const csReversibleTransform &amp;t, int alpha)=0</arglist>
    </member>
    <member kind="function">
      <name>CompleteSector</name>
      <anchor>432c9cc0aa5f15a6c243d5853ea94575</anchor>
      <arglist>(iBase *context)=0</arglist>
    </member>
    <member kind="function">
      <name>ComputeCameraPlane</name>
      <anchor>26a1550adb9061f493cdf4c8aa1ac0b5</anchor>
      <arglist>(const csReversibleTransform &amp;t, csPlane3 &amp;camplane)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColorFilter</name>
      <anchor>3cd861439a67cc85ceab43c6891cc289</anchor>
      <arglist>(float &amp;r, float &amp;g, float &amp;b) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>33c9e6d751608cbb414ccb69fad94714</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumSectorVisit</name>
      <anchor>5638473099a850602966d780efe1be66</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMissingSectorCallback</name>
      <anchor>44c279147490b0a1a25e00eec76376c8</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMissingSectorCallbackCount</name>
      <anchor>59a66b3f8efecae97c70b5fde73b535d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>bd83ba79b9fc54eaea2fe9a8fdf0cd38</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectPlane</name>
      <anchor>c97d6da9029bec20ac87e75eb85c3927</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalCallback</name>
      <anchor>9f8139350847e18da07de57746b20d22</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalCallbackCount</name>
      <anchor>4909f19c6c3b95079b054203a1026597</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSector</name>
      <anchor>d848a8dfc044cea3880e9b3ea283e230</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureFilter</name>
      <anchor>bbae24d407427a5c5fac0151f6497413</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexIndices</name>
      <anchor>bc5c38ccb259a54bf5850641e9ca9ad9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexIndicesCount</name>
      <anchor>069889394736dc4e10a236cf0384fec8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>d916b4155a4c28d82ff45b3b4bc32f1a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVerticesCount</name>
      <anchor>2e1965ba74d96da311d844db202a2b89</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWarp</name>
      <anchor>762827eead56288cf3496ebadf0be441</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetWorldPlane</name>
      <anchor>2947346e3562ac57154999474ce9e69e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetWorldVertices</name>
      <anchor>72be1d65de8cf45fba8dfd4466be6124</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HardTransform</name>
      <anchor>0da7394d0fed0d97ff49c705cb0c909e</anchor>
      <arglist>(const csReversibleTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamPortals</name>
      <anchor>672431a14ec2b03ae3987a42395075cd</anchor>
      <arglist>(const csReversibleTransform &amp;t, const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, int *polygon_idx, iSector **final_sector=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ObjectToWorld</name>
      <anchor>c2272ba1fb443da4169421858923dcc5</anchor>
      <arglist>(const csReversibleTransform &amp;t, csReversibleTransform &amp;warp_wor) const =0</arglist>
    </member>
    <member kind="function">
      <name>PointOnPolygon</name>
      <anchor>9f773e25ca91b5cd7c7df2a6a715232d</anchor>
      <arglist>(const csVector3 &amp;point)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMissingSectorCallback</name>
      <anchor>6ac911b38966940c4256c89fcdafc7b3</anchor>
      <arglist>(iPortalCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemovePortalCallback</name>
      <anchor>4caa580169c2f2bb4c4d222533c4b198</anchor>
      <arglist>(iPortalCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFilter</name>
      <anchor>cca50eef7a7feab40651da4947f2b389</anchor>
      <arglist>(float r, float g, float b)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFilter</name>
      <anchor>bc8aa87566fb829c70b009a89782758d</anchor>
      <arglist>(iTextureHandle *ft)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaximumSectorVisit</name>
      <anchor>3b4cccb736ae70b4b393ef8c63aa25b7</anchor>
      <arglist>(int msv)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMirror</name>
      <anchor>81d85b7231bda4b25bca77c03d9558f2</anchor>
      <arglist>(const csPlane3 &amp;plane)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMissingSectorCallback</name>
      <anchor>0b3367542a02f8838e7ad748222471aa</anchor>
      <arglist>(iPortalCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>4673fbde7098009cfbe6689709896db5</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPortalCallback</name>
      <anchor>6789c42265ea3ba798ac9b4ce0db7499</anchor>
      <arglist>(iPortalCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSector</name>
      <anchor>d16f7a8caa1323aec8357efff3963ad5</anchor>
      <arglist>(iSector *s)=0</arglist>
    </member>
    <member kind="function">
      <name>SetWarp</name>
      <anchor>965968c4d2f80ceca87e5ce0f08fe3f7</anchor>
      <arglist>(const csTransform &amp;t)=0</arglist>
    </member>
    <member kind="function">
      <name>SetWarp</name>
      <anchor>9bf22fa100c7d4612b690f63488d59d3</anchor>
      <arglist>(const csMatrix3 &amp;m_w, const csVector3 &amp;v_w_before, const csVector3 &amp;v_w_after)=0</arglist>
    </member>
    <member kind="function">
      <name>Warp</name>
      <anchor>213a67a8e12e16232c59d8d1629df2f0</anchor>
      <arglist>(const csReversibleTransform &amp;t, const csVector3 &amp;pos) const =0</arglist>
    </member>
    <member kind="function">
      <name>WarpSpace</name>
      <anchor>49b1c7b1ea2915b7a22e35130d5b2c97</anchor>
      <arglist>(const csReversibleTransform &amp;warp_wor, csReversibleTransform &amp;t, bool &amp;mirror) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPortalCallback</name>
    <base>iBase</base>
    <filename>structiPortalCallback.html</filename>
    <member kind="function">
      <name>Traverse</name>
      <anchor>ab9f0a5403ee0f6b010a4db43270beeb</anchor>
      <arglist>(iPortal *portal, iBase *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iPortalContainer</name>
    <base>iBase</base>
    <filename>structiPortalContainer.html</filename>
    <member kind="function">
      <name>CreatePortal</name>
      <anchor>f0e4cfabc98977664533d487042d9e22</anchor>
      <arglist>(csVector3 *vertices, int num)=0</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>fc188e691c26105f786fc7c898358f73</anchor>
      <arglist>(iRenderView *rview)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPortal</name>
      <anchor>e4fdb1f2ea384a02d69af74c55e00505</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalCount</name>
      <anchor>0464373435981c6fb2103bc364060e3a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemovePortal</name>
      <anchor>dfd7d801f722b3f8785f77db6ce577fb</anchor>
      <arglist>(iPortal *portal)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iProcTexCallback</name>
    <base>iBase</base>
    <filename>structiProcTexCallback.html</filename>
    <member kind="function">
      <name>GetProcTexture</name>
      <anchor>4799df0a32b0ac12df949cebd091272a</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iProcTexture</name>
    <base>iBase</base>
    <filename>structiProcTexture.html</filename>
    <member kind="function">
      <name>GetAlwaysAnimate</name>
      <anchor>a5dfd273ad7cd62856cd70dbff35e1de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>535192cd768900343a63b2cd7a3ef92a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAlwaysAnimate</name>
      <anchor>d07ee5c90b2d6e6ea24469705ae86294</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iProgressMeter</name>
    <base>iBase</base>
    <filename>structiProgressMeter.html</filename>
    <member kind="function">
      <name>Abort</name>
      <anchor>4a409e88518bf95928f38dd7baba4f52</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Finalize</name>
      <anchor>cac4e8a8ebf998fb46652df0def4a90b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrent</name>
      <anchor>089cee3524d2f9ab320b76ce426bf976</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetGranularity</name>
      <anchor>1da874825163dd1a86170373779a790c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTotal</name>
      <anchor>2e43d0128cc1eb26f8fd7f97ee6eac4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>16f05bdb0fd27e7cc3626fb9467d30a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Restart</name>
      <anchor>ff70c47a5a2a108891d1459e28f9ac2d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetGranularity</name>
      <anchor>31f78341fd497aaa707af35e29c7414e</anchor>
      <arglist>(int)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProgressDescription</name>
      <anchor>046c945d4edcd0a86ccb333cdcfbddc3</anchor>
      <arglist>(const char *id, const char *description,...)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProgressDescriptionV</name>
      <anchor>a096f1f49c79723ee5d08944f1914adf</anchor>
      <arglist>(const char *id, const char *description, va_list)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTotal</name>
      <anchor>833a633b836c194ee6d62ffa0da2ecf3</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Step</name>
      <anchor>a8fac9876d95230426a00342e5558b25</anchor>
      <arglist>(unsigned int n=1)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iProtoFactoryState</name>
    <base>iBase</base>
    <filename>structiProtoFactoryState.html</filename>
    <member kind="function">
      <name>GetColors</name>
      <anchor>e36d4f06fc8810931ce0adfb2576c603</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetNormals</name>
      <anchor>0e0ff825a1a5f4b122c93d8e29e07f15</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTexels</name>
      <anchor>89e1f1cc0e07a50adc9701e5475d34df</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>ea954902c8918ee045e2efe08033bcfb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>e2954a348061341402aab60054c6c39c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Invalidate</name>
      <anchor>f8b5ad3159c6be368d73b4a33ad8c4c3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iProtoMeshState</name>
    <base>iBase</base>
    <filename>structiProtoMeshState.html</filename>
    <member kind="function">
      <name>GetFuzzFactor</name>
      <anchor>4a39e8e7893d20c1a91f90ed1ea49032</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetFuzzFactor</name>
      <anchor>fec347bf913dbd013b462243d3a01da8</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRefTracker</name>
    <base>iBase</base>
    <filename>structiRefTracker.html</filename>
    <member kind="function">
      <name>AddAlias</name>
      <anchor>abe7eccf993325f800ac0dbc37c43cb7</anchor>
      <arglist>(void *obj, void *mapTo)=0</arglist>
    </member>
    <member kind="function">
      <name>MatchDecRef</name>
      <anchor>98e0244d1a3b9465355acfce6f9e4c87</anchor>
      <arglist>(void *object, int refCount, void *tag)=0</arglist>
    </member>
    <member kind="function">
      <name>MatchIncRef</name>
      <anchor>975adc0cd1981fba52a3aa33166104e1</anchor>
      <arglist>(void *object, int refCount, void *tag)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAlias</name>
      <anchor>1b23434b12609c43ef7718419240ed54</anchor>
      <arglist>(void *obj, void *mapTo)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDescription</name>
      <anchor>3cb997adb50044ab015a4a8780f0df15</anchor>
      <arglist>(void *obj, const char *description)=0</arglist>
    </member>
    <member kind="function">
      <name>TrackConstruction</name>
      <anchor>d7fc4c5d352344c691167c1911e7c6f3</anchor>
      <arglist>(void *object)=0</arglist>
    </member>
    <member kind="function">
      <name>TrackDecRef</name>
      <anchor>a006f07358d63cced5d8e88d91f91df1</anchor>
      <arglist>(void *object, int refCount)=0</arglist>
    </member>
    <member kind="function">
      <name>TrackDestruction</name>
      <anchor>63e1a22f2ddbb3baf0470e504e51d548</anchor>
      <arglist>(void *object, int refCount)=0</arglist>
    </member>
    <member kind="function">
      <name>TrackIncRef</name>
      <anchor>cee272738406b7c99916f91cac7ad284</anchor>
      <arglist>(void *object, int refCount)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRegion</name>
    <base>iBase</base>
    <filename>structiRegion.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>8ead00c536e895b9316a6c8d9281fab4</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>23cea0f6a46d22747e6348b78ab36c33</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>8af636613b654b9addd6b072c9026361</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FindCameraPosition</name>
      <anchor>cb795221e56d03fc3581ddeb2ee6e937</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindCollection</name>
      <anchor>e393dcc073786561acfa0aa49f6d4144</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMaterial</name>
      <anchor>ba8f6358d59b6d9b48a2af910e6d8630</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshFactory</name>
      <anchor>3dc23ff6e625040c9aa9f576bc4aaa91</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshObject</name>
      <anchor>3bdb88277cc96b8ad834a301d53b631e</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSector</name>
      <anchor>e92e635c013f857196f078b85436b8f4</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindTexture</name>
      <anchor>d8cdd4094036d9c957d6e59d26094ae6</anchor>
      <arglist>(const char *iName)=0</arglist>
    </member>
    <member kind="function">
      <name>IsInRegion</name>
      <anchor>e49c519014c34dee4884dd3cef9919c1</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Prepare</name>
      <anchor>cf0a31210a67628ec28b16c4879978cf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PrepareTextures</name>
      <anchor>c8ac238857b5828f9fc5f55beb000c7b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>75a405bbb29d58d06929280d32d8a0db</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>ca7aaccffd239ad4b31dcdb08113afd9</anchor>
      <arglist>(iObject *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>ShineLights</name>
      <anchor>e3c8d9b4ce4bfc1e6a3cf700ace715f6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRegionList</name>
    <base>iBase</base>
    <filename>structiRegionList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>15202e660f3305d5da89c66ba577dce5</anchor>
      <arglist>(iRegion *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>bbc3b8c8c6088f3dfb3ab516471f5e41</anchor>
      <arglist>(iRegion *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>9ef9ed1d0f4ba1b2c7ce60f9efbbb946</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>87d792ddc27b7f0bdbc19dc5390da0b9</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>437bf8987958ee6f76edbf502f80a2d4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>ab8ec07dfc94567f09990c09d6c70a3e</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>855016ee22f79dc9d6c0a94541af1e3b</anchor>
      <arglist>(iRegion *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>c0960fcd904eadea89bed1584e5d2d7e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderBuffer</name>
    <base>iBase</base>
    <filename>structiRenderBuffer.html</filename>
    <member kind="function">
      <name>CopyInto</name>
      <anchor>2da58b375797619667a7337ec7c95cc3</anchor>
      <arglist>(const void *data, size_t elementCount, size_t elemOffset=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBufferType</name>
      <anchor>18a6e3ed4a1de9784568bffb7ef98f52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetComponentCount</name>
      <anchor>39e622dc64c4acc4a3ed2df051e10598</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetComponentType</name>
      <anchor>23e7848455338c7636d6a97e5a09c7c8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetElementCount</name>
      <anchor>2c43d2f649e4725a8e86abfa5dfbfffe</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetElementDistance</name>
      <anchor>77535f2913a88ee424d4bfe52e8a646d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMasterBuffer</name>
      <anchor>ccd6c11709e7907e31e38ba8b4a060d7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOffset</name>
      <anchor>527e690865e28a5f3fd8963e70a33fde</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRangeEnd</name>
      <anchor>f97a51260833f11509f91617d6fda0de</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRangeStart</name>
      <anchor>acfc7003a6a831431e34dbaf49696563</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>f4ffdccb0f00259d47c117a69522bf53</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStride</name>
      <anchor>af0df851f17cd16b1789a796a35508cf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVersion</name>
      <anchor>a72cd7b6378ba988426ab0a89d125229</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsIndexBuffer</name>
      <anchor>4d5291d9681843605e04e9ce076307a2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Lock</name>
      <anchor>7c03d7a103a3b83597386caf3f3c5c3b</anchor>
      <arglist>(csRenderBufferLockType lockType)=0</arglist>
    </member>
    <member kind="function">
      <name>Release</name>
      <anchor>52455e929de9ca42c4e85be85b9075ae</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderBufferAccessor</name>
    <base>iBase</base>
    <filename>structiRenderBufferAccessor.html</filename>
    <member kind="function">
      <name>PreGetBuffer</name>
      <anchor>105fcaa0bf2f9a13e50546d6de13b054</anchor>
      <arglist>(csRenderBufferHolder *holder, csRenderBufferName buffer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRendererLightmap</name>
    <base>iBase</base>
    <filename>structiRendererLightmap.html</filename>
    <member kind="function">
      <name>GetSLMCoords</name>
      <anchor>a09e4430d0fa0ffc92623450474ab8d0</anchor>
      <arglist>(int &amp;left, int &amp;top, int &amp;width, int &amp;height)=0</arglist>
    </member>
    <member kind="function">
      <name>SetData</name>
      <anchor>1c272b1d3009bf43ddaf3aae33623b5d</anchor>
      <arglist>(csRGBcolor *data)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderLoop</name>
    <base>iRenderStepContainer</base>
    <filename>structiRenderLoop.html</filename>
  </compound>
  <compound kind="class">
    <name>iRenderLoopManager</name>
    <base>iBase</base>
    <filename>structiRenderLoopManager.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>9d7672353a004244a478b8540b242c98</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>15942aa4c39b149eacf9234bf502ec9f</anchor>
      <arglist>(iRenderLoop *loop)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>5581c05f696b8e79b5d82903a9286682</anchor>
      <arglist>(const char *fileName)=0</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>d46b6b4acc35fc59075f66117a0d92d7</anchor>
      <arglist>(const char *name, iRenderLoop *loop)=0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>4288d59cc5732d02f3d17a2312208fdb</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Unregister</name>
      <anchor>18f4e424cae40dca6158074be29b5210</anchor>
      <arglist>(iRenderLoop *loop)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderStep</name>
    <base>iBase</base>
    <filename>structiRenderStep.html</filename>
  </compound>
  <compound kind="class">
    <name>iRenderStepContainer</name>
    <base>iBase</base>
    <filename>structiRenderStepContainer.html</filename>
    <member kind="function">
      <name>AddStep</name>
      <anchor>dd49c394c9cab2778a548bf157ba0a5b</anchor>
      <arglist>(iRenderStep *step)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteStep</name>
      <anchor>25b695ea89d053af8242188070a4a226</anchor>
      <arglist>(iRenderStep *step)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>0dd8f326fc9ecab9b5ed4e2f3ba90645</anchor>
      <arglist>(iRenderStep *step) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStep</name>
      <anchor>b3911c3f5ef04543185ff912e2216e28</anchor>
      <arglist>(size_t n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetStepCount</name>
      <anchor>4b67995f5e6acb67919e3f6c539732f0</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderStepFactory</name>
    <base>iBase</base>
    <filename>structiRenderStepFactory.html</filename>
    <member kind="function">
      <name>Create</name>
      <anchor>8dc47cc09f6168079637411b910fac97</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderStepType</name>
    <base>iBase</base>
    <filename>structiRenderStepType.html</filename>
    <member kind="function">
      <name>NewFactory</name>
      <anchor>243936b7f8c177c8e397d1e7da224388</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRenderView</name>
    <base>iBase</base>
    <filename>structiRenderView.html</filename>
    <member kind="function">
      <name>CalculateClipSettings</name>
      <anchor>fc8ee4275253a2ddad6d3fba5c69ea4c</anchor>
      <arglist>(uint32 frustum_mask, int &amp;clip_portal, int &amp;clip_plane, int &amp;clip_z_plane)=0</arglist>
    </member>
    <member kind="function">
      <name>ClipBBox</name>
      <anchor>4892c36abedad1c658694c3407b6d060</anchor>
      <arglist>(csPlane3 *planes, uint32 &amp;frustum_mask, const csBox3 &amp;obox, int &amp;clip_portal, int &amp;clip_plane, int &amp;clip_z_plane)=0</arglist>
    </member>
    <member kind="function">
      <name>ClipBSphere</name>
      <anchor>438ddb3c526675dec6b9d1ff29329d56</anchor>
      <arglist>(const csSphere &amp;cam_sphere, const csSphere &amp;world_sphere, int &amp;clip_portal, int &amp;clip_plane, int &amp;clip_z_plane)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCamera</name>
      <anchor>2be4c80e41097638fea8ad0c1ee2e905</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetClipper</name>
      <anchor>b0a88a22c39de6c7696d0cd56772fb8a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentFrameNumber</name>
      <anchor>b567565b781ede029016a2413dad7781</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetEngine</name>
      <anchor>c45bcd31412db8ef7102f6d5ec9cfcc1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrustum</name>
      <anchor>f6d0522662ae39d9b05b00aed8097348</anchor>
      <arglist>(float &amp;lx, float &amp;rx, float &amp;ty, float &amp;by)=0</arglist>
    </member>
    <member kind="function">
      <name>GetGraphics2D</name>
      <anchor>f3029dfe9b637d6248089d2619087051</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetGraphics3D</name>
      <anchor>39ebc2c2facb1782bf637c414c86a0fc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLastPortal</name>
      <anchor>90cb540b1d8054b865531f411d165043</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetOriginalCamera</name>
      <anchor>6f4a8479938fb0a710098647f6de0d4a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPreviousSector</name>
      <anchor>ec9d518094f768c33a486da77d6b2059</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderContext</name>
      <anchor>df41f6acfa0d382069c3cd2a1d6ce640</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetThisSector</name>
      <anchor>8d8f47f2b3ca1b2ec6eaaa086953c5c6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetupClipPlanes</name>
      <anchor>cdda54a1976437c46b4798a3da83f8f2</anchor>
      <arglist>(const csReversibleTransform &amp;tr_o2c, csPlane3 *planes, uint32 &amp;frustum_mask)=0</arglist>
    </member>
    <member kind="function">
      <name>TestBSphere</name>
      <anchor>dbb11af13a55c446a3613b5c96c50770</anchor>
      <arglist>(const csReversibleTransform &amp;w2c, const csSphere &amp;sphere)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iReporter</name>
    <base>iBase</base>
    <filename>structiReporter.html</filename>
    <member kind="function">
      <name>AddReporterListener</name>
      <anchor>c6f04751de87b5cd6a13529b1b80861a</anchor>
      <arglist>(iReporterListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>59c0b3203d63d2132ad6433406853961</anchor>
      <arglist>(const char *mask)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>a16ce85b931efdb88ef6ba3a209d6548</anchor>
      <arglist>(int severity=-1)=0</arglist>
    </member>
    <member kind="function">
      <name>FindReporterListener</name>
      <anchor>a8d18b234c6fc5b6af2e3fba348b8d34</anchor>
      <arglist>(iReporterListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMessageIterator</name>
      <anchor>8861dd39863a1f1d1531125198a9055d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveReporterListener</name>
      <anchor>784851566d0a759bfe1e4ca88bf80e51</anchor>
      <arglist>(iReporterListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>Report</name>
      <anchor>c69491145b9f53ade1e115c2e3de27ec</anchor>
      <arglist>(int severity, const char *msgId, const char *description,...)=0</arglist>
    </member>
    <member kind="function">
      <name>ReportV</name>
      <anchor>9e24f850784a35be6d05137b164b8daa</anchor>
      <arglist>(int severity, const char *msgId, const char *description, va_list)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iReporterIterator</name>
    <base>iBase</base>
    <filename>structiReporterIterator.html</filename>
    <member kind="function">
      <name>GetMessageDescription</name>
      <anchor>64c364a7a37b5315a62c54602a4b22e9</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMessageId</name>
      <anchor>6961281fcbd5300900ef98c57f79220f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMessageSeverity</name>
      <anchor>a8eefde3d3515e92dd575c1c8ec7b40d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>c6385fa05b913e34876caac67ddfd249</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>6757694301a6867333a40850f1f9fde6</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iReporterListener</name>
    <base>iBase</base>
    <filename>structiReporterListener.html</filename>
    <member kind="function">
      <name>Report</name>
      <anchor>644d62b264e0cb522de9c13c6374b6c1</anchor>
      <arglist>(iReporter *reporter, int severity, const char *msgId, const char *description)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iRigidBody</name>
    <base>iBase</base>
    <filename>structiRigidBody.html</filename>
    <member kind="function">
      <name>AddForce</name>
      <anchor>7c2a68d8b505a6b8bd3da2c9692eab76</anchor>
      <arglist>(const csVector3 &amp;force)=0</arglist>
    </member>
    <member kind="function">
      <name>AddForceAtPos</name>
      <anchor>983d9ce9e9bd78980f4a5a1994260455</anchor>
      <arglist>(const csVector3 &amp;force, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>AddForceAtRelPos</name>
      <anchor>08e8cf4338f1752447ba1aabedce2c8e</anchor>
      <arglist>(const csVector3 &amp;force, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRelForce</name>
      <anchor>fc4174a6fec4ebcbeb674db04a1d608b</anchor>
      <arglist>(const csVector3 &amp;force)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRelForceAtPos</name>
      <anchor>71252d2dd46d9b454a7a529fc9f73305</anchor>
      <arglist>(const csVector3 &amp;force, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRelForceAtRelPos</name>
      <anchor>6ceb22efe62fe778509a51ab36cdd903</anchor>
      <arglist>(const csVector3 &amp;force, const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRelTorque</name>
      <anchor>4ccce03d1df3ac3d29caa92ab97ab595</anchor>
      <arglist>(const csVector3 &amp;force)=0</arglist>
    </member>
    <member kind="function">
      <name>AddTorque</name>
      <anchor>98ac49f5a395e76e7ab63251f5b18a7b</anchor>
      <arglist>(const csVector3 &amp;force)=0</arglist>
    </member>
    <member kind="function">
      <name>AdjustTotalMass</name>
      <anchor>798f706d7865e44f4eff5647043fdd78</anchor>
      <arglist>(float targetmass)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachCamera</name>
      <anchor>1c76232df9c69f2349be039766933db5</anchor>
      <arglist>(iCamera *camera)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachCollider</name>
      <anchor>0bdc2f98e2a32d86e44cecb639e032f1</anchor>
      <arglist>(iDynamicsSystemCollider *collider)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderBox</name>
      <anchor>36721ffa511162e4275a6709795a39cd</anchor>
      <arglist>(const csVector3 &amp;size, const csOrthoTransform &amp;trans, float friction, float density, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderCylinder</name>
      <anchor>a1fc685559f2845b851324526cfcd6dd</anchor>
      <arglist>(float length, float radius, const csOrthoTransform &amp;trans, float friction, float density, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderMesh</name>
      <anchor>f3fa7e1fdffa90cc1c956d7aad0f3fc9</anchor>
      <arglist>(iMeshWrapper *mesh, const csOrthoTransform &amp;trans, float friction, float density, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderPlane</name>
      <anchor>b7d3c0350d8d1e0dd5a82c9a3096690b</anchor>
      <arglist>(const csPlane3 &amp;plane, float friction, float density, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachColliderSphere</name>
      <anchor>0c4d1d25dd984af1099e66e3acf5f879</anchor>
      <arglist>(float radius, const csVector3 &amp;offset, float friction, float density, float elasticity, float softness=0.01f)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachLight</name>
      <anchor>f21e638fe85b8ea020b32e08a6baf5e1</anchor>
      <arglist>(iLight *light)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachMesh</name>
      <anchor>519d785cfde4add3b010057655a5e1a0</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>Collision</name>
      <anchor>ed50a48483fd780cbb67f956bb3cf8cd</anchor>
      <arglist>(iRigidBody *other, const csVector3 &amp;pos, const csVector3 &amp;normal, float depth)=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyCollider</name>
      <anchor>02c067f100833f14fb72f34db6e50354</anchor>
      <arglist>(iDynamicsSystemCollider *collider)=0</arglist>
    </member>
    <member kind="function">
      <name>DestroyColliders</name>
      <anchor>29a25c25825eb5f641970102f791b707</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Disable</name>
      <anchor>40bd14b54fce76f18efec46878b6e82e</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>Enable</name>
      <anchor>7e9ba50dc2386b13ab295c964dc590bf</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAngularVelocity</name>
      <anchor>e804da1fc623a32e6c4c7efa56f8f9d3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAttachedCamera</name>
      <anchor>5ba2bc9dedd2364b550f15dccc9b04e1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttachedLight</name>
      <anchor>d8e5eaf02b7451e3ca6c84593ac8507d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAttachedMesh</name>
      <anchor>7195434fea4fa7c6f61eff7ce50c2b2b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCenter</name>
      <anchor>445f9156cb4601868d1988f2507e1caa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCollider</name>
      <anchor>314ccd916ef547a9d40475f940486747</anchor>
      <arglist>(unsigned int index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetColliderCount</name>
      <anchor>a685e6f9051c6af001db70bbddd4d14a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetForce</name>
      <anchor>930c32ec7aff9bf78b8761d5259c3a19</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetGroup</name>
      <anchor>1fdea1c1e51dfa11b26a8740fb868cf5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInertia</name>
      <anchor>705986dc39460a7292d8320e93e7969a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLinearVelocity</name>
      <anchor>4daee9b727db816e259cd63fe001d11a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMass</name>
      <anchor>7623b858716f07088293a984a86765e0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetOrientation</name>
      <anchor>9a843e8c8d3e62ae43b288dd5ad61bc2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>1d02c4a10c4a75fdc295b137516f66c2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetProperties</name>
      <anchor>938c8c9fa96c8be28bc7579594c8d20e</anchor>
      <arglist>(float *mass, csVector3 *center, csMatrix3 *inertia)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTorque</name>
      <anchor>f0f5e68eb54bd8d0f19957271a4d12cb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>5e97d4affcec251ea9189a6120e4c1af</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsEnabled</name>
      <anchor>86a56233211a2cc44261b3e771b6c631</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>IsStatic</name>
      <anchor>a33c2f23878073bba2744fc35bb9553e</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>MakeDynamic</name>
      <anchor>b911d0db4162d02a778539fa41926dc3</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>MakeStatic</name>
      <anchor>c4cade2d5db4b51eb48eb9a65afe4ab5</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>7aea07ea3bb4206bccda2233a97b8fac</anchor>
      <arglist>(void)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAngularVelocity</name>
      <anchor>0b6ced1fcb5d830e5df6f7114fbfbc08</anchor>
      <arglist>(const csVector3 &amp;vel)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCollisionCallback</name>
      <anchor>4b5d99b3038c22f57ed6cd18d122a8b0</anchor>
      <arglist>(iDynamicsCollisionCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLinearVelocity</name>
      <anchor>a9bba853fb4c2dff42b4ea695e006c78</anchor>
      <arglist>(const csVector3 &amp;vel)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMoveCallback</name>
      <anchor>9d142e4077ae6874dac9dc2129b33e21</anchor>
      <arglist>(iDynamicsMoveCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOrientation</name>
      <anchor>6c1775ff3784fcb5625db083f83aa18b</anchor>
      <arglist>(const csMatrix3 &amp;trans)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>dbdad427ff30dcf47ec708aaf2dc8f38</anchor>
      <arglist>(const csVector3 &amp;trans)=0</arglist>
    </member>
    <member kind="function">
      <name>SetProperties</name>
      <anchor>c7994ee8d911634e435ab4d675f7ba47</anchor>
      <arglist>(float mass, const csVector3 &amp;center, const csMatrix3 &amp;inertia)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>fa8ec940584458a682ef20d57a8a9199</anchor>
      <arglist>(const csOrthoTransform &amp;trans)=0</arglist>
    </member>
    <member kind="function">
      <name>Update</name>
      <anchor>b301657bf77e098036839bcd01209e73</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSaver</name>
    <base>iBase</base>
    <filename>structiSaver.html</filename>
    <member kind="function">
      <name>SaveAllRegions</name>
      <anchor>325913dbb9fbaa35609151c3008c8542</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SaveMapFile</name>
      <anchor>cd4eb13e235e473329dfab5ec23ed9a3</anchor>
      <arglist>(csRef&lt; iDocumentNode &gt; &amp;root)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveMapFile</name>
      <anchor>8ee9c66fb0ec58d44f51fcab46a0e792</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SaveMapFile</name>
      <anchor>2978bb4c6d11ac2e80f731c09ff0b6bd</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>SavePortal</name>
      <anchor>7e2fd8e7986bd04a0026067416c2c1c3</anchor>
      <arglist>(iPortal *portal, iDocumentNode *parent)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveRegion</name>
      <anchor>b7ac5da709c98bb47959978cb486a00c</anchor>
      <arglist>(iRegion *region, int filetype, csRef&lt; iDocumentNode &gt; &amp;root)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveRegion</name>
      <anchor>a426d73190d3f621ec0fa041f41b96e8</anchor>
      <arglist>(iRegion *region, int filetype)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveRegionFile</name>
      <anchor>ef9d97ffb549dfae1eb5814dfec3243c</anchor>
      <arglist>(iRegion *region, const char *filename, int filetype)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSaverFile</name>
    <base>iBase</base>
    <filename>structiSaverFile.html</filename>
    <member kind="function">
      <name>GetFile</name>
      <anchor>99f9fff1d2c845ac8a7564fde064cfb5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFileType</name>
      <anchor>22f720eae2bbbb29ea8eef5514f85b4d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>bcfc100217de3421a4a1317caa520106</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSaverPlugin</name>
    <base>iBase</base>
    <filename>structiSaverPlugin.html</filename>
    <member kind="function">
      <name>WriteDown</name>
      <anchor>74ee068aa02388ecc4f1b6c36338a0f6</anchor>
      <arglist>(iBase *obj, iDocumentNode *parent, iStreamSource *ssource)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSceneNode</name>
    <base>iBase</base>
    <filename>structiSceneNode.html</filename>
    <member kind="function">
      <name>GetChildren</name>
      <anchor>8766708183db53c92810db7b311ea163</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetChildrenArray</name>
      <anchor>6afac70a5e96a264235456d8ff8c0028</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMovable</name>
      <anchor>2916081f052599ce3e5d9af7994da914</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParent</name>
      <anchor>7aef1c02e66868580f9108bb3ec07d2e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryCamera</name>
      <anchor>3fb7125c1d03bc40d91563f47705059f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryLight</name>
      <anchor>962847d52d9a71d7c75dbf668654da92</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryMesh</name>
      <anchor>8c90a461189cbed9ba858012fe134e49</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>e524be2495c2a22cb019cb8626a56efe</anchor>
      <arglist>(iSceneNode *parent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSceneNodeArray</name>
    <base>iArrayReadOnly&lt; iSceneNode * &gt;</base>
    <filename>structiSceneNodeArray.html</filename>
  </compound>
  <compound kind="class">
    <name>iSCF</name>
    <base>iBase</base>
    <filename>structiSCF.html</filename>
    <member kind="function">
      <name>ClassRegistered</name>
      <anchor>32284044d7402fc47320c44188bf20e8</anchor>
      <arglist>(const char *iClassID)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateInstance</name>
      <anchor>db5085a0ef2207751473e41a1204ef52</anchor>
      <arglist>(const char *iClassID)=0</arglist>
    </member>
    <member kind="function">
      <name>Finish</name>
      <anchor>d5bce325e3db6e382d58adf30550ebec</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetClassDependencies</name>
      <anchor>8e9c86ef246725cb4dfa0aec383d142b</anchor>
      <arglist>(const char *iClassID)=0</arglist>
    </member>
    <member kind="function">
      <name>GetClassDescription</name>
      <anchor>70658a7a858648de291a177b1a35cc0d</anchor>
      <arglist>(const char *iClassID)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInterfaceID</name>
      <anchor>490a51a56ddcd933e18abbe07de75d2f</anchor>
      <arglist>(const char *iInterface)=0</arglist>
    </member>
    <member kind="function">
      <name>GetInterfaceName</name>
      <anchor>728b2bf10d47fe29e1e58c652bb4a78b</anchor>
      <arglist>(scfInterfaceID) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPluginMetadata</name>
      <anchor>bd44481f6a9041984806ae4cc60eed5e</anchor>
      <arglist>(char const *iClassID)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryClassList</name>
      <anchor>d6b111d13242985d49e2ecb4c6164b15</anchor>
      <arglist>(char const *pattern)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterClass</name>
      <anchor>48c480ddd7db233da6b3e4ae7190cf66</anchor>
      <arglist>(scfFactoryFunc, const char *iClassID, const char *Description, const char *Dependencies=0, const char *context=0)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterClass</name>
      <anchor>d5099cf465d1c2a334d8404f06d344f4</anchor>
      <arglist>(const char *iClassID, const char *iLibraryName, const char *iFactoryClass, const char *Description, const char *Dependencies=0, const char *context=0)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterClasses</name>
      <anchor>ceb121c0481b0fc9ca7989b8b02d5871</anchor>
      <arglist>(const char *pluginPath, iDocument *metadata, const char *context=0)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterClasses</name>
      <anchor>db835e7dc57a286ce1ed6b6d21187acf</anchor>
      <arglist>(char const *xml, const char *context=0)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterClasses</name>
      <anchor>cc53a3add726887fc314b7d5290394ff</anchor>
      <arglist>(iDocument *metadata, const char *context=0)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterFactoryFunc</name>
      <anchor>b0a2b4ec8cc139fa693a2818db7bad55</anchor>
      <arglist>(scfFactoryFunc, const char *FactClass)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterPlugin</name>
      <anchor>d6696242e920f84a1bcf99ff5805ece8</anchor>
      <arglist>(const char *path)=0</arglist>
    </member>
    <member kind="function">
      <name>ScanPluginsPath</name>
      <anchor>45a71a18dcd6fdccf91ba2c8185a99cf</anchor>
      <arglist>(const char *path, bool recursive=false, const char *context=0)=0</arglist>
    </member>
    <member kind="function">
      <name>UnloadUnusedModules</name>
      <anchor>de1d23d57bdbdab5ba256c9d684e852d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnregisterClass</name>
      <anchor>12df751751d7c26f6f7671dffb332542</anchor>
      <arglist>(const char *iClassID)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF</name>
      <anchor>64db1d2d25a1eca49ddefe6922c41e8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iScript</name>
    <base>iBase</base>
    <filename>structiScript.html</filename>
    <member kind="function">
      <name>Call</name>
      <anchor>5ce81e7f87a956d3bfc6cd66a8ebd146</anchor>
      <arglist>(const char *name, csRef&lt; iScriptObject &gt; &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>fd61d1eff0f629d4e6682b4a1ad838b5</anchor>
      <arglist>(const char *name, csRef&lt; iString &gt; &amp;, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>cf6a8b6a4d20f61136b63ada9ebd25ba</anchor>
      <arglist>(const char *name, double &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>a3c768c409c032352ca877ab8c87c7cd</anchor>
      <arglist>(const char *name, float &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>ada2946f90454fbf7017323173b52ce2</anchor>
      <arglist>(const char *name, int &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>3de66e6225dd8a9c31afb89c9399b0b6</anchor>
      <arglist>(const char *name, const char *format,...)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTruth</name>
      <anchor>3dee112cd459cd734f954ee6d0117a2e</anchor>
      <arglist>(const char *name, bool &amp;isTrue) const =0</arglist>
    </member>
    <member kind="function">
      <name>Initialize</name>
      <anchor>3d14a24e316523625f2f571d0d0d9f40</anchor>
      <arglist>(iObjectRegistry *object_reg)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadModule</name>
      <anchor>aeb6bc878a3170a179b806febed85165</anchor>
      <arglist>(const char *path, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadModule</name>
      <anchor>cfc787c2c60c86ad5241a128c0368ff7</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>NewObject</name>
      <anchor>ff5e0f3194b53a9a36fb5d47bc6d1517</anchor>
      <arglist>(const char *type, const char *ctorFormat,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>49f7d780a0e935fd173cf9c61846eb95</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>9b73c952edbf6f2768512890c1089790</anchor>
      <arglist>(const char *name, csRef&lt; iScriptObject &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>4dae72d0e257499a01213c76dbec2232</anchor>
      <arglist>(const char *name, csRef&lt; iString &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>270c4f91715dba81ba81df0b9d235515</anchor>
      <arglist>(const char *name, double &amp;data) const =0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>cf9cc7e36d7c97955ffb891eda3d9016</anchor>
      <arglist>(const char *name, float &amp;data) const =0</arglist>
    </member>
    <member kind="function">
      <name>Retrieve</name>
      <anchor>ac2011d19ecc81e02021df3b575f311b</anchor>
      <arglist>(const char *name, int &amp;data) const =0</arglist>
    </member>
    <member kind="function">
      <name>RunText</name>
      <anchor>d297a8c1611b09aa9453835930f6dd8f</anchor>
      <arglist>(const char *text)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTruth</name>
      <anchor>057ef08406f159941c99c2e2851ed59a</anchor>
      <arglist>(const char *name, bool isTrue)=0</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>933061842ac83e88c57370df0ef0fb3a</anchor>
      <arglist>(const char *name, iScriptObject *data)=0</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>82cd900d83748c54a9578711ba53b1ae</anchor>
      <arglist>(const char *name, char const *data)=0</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>b7ccf8cce3a7757b684f10ef44f32867</anchor>
      <arglist>(const char *name, double data)=0</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>1141684cfbf529196a36aaaff3f9088d</anchor>
      <arglist>(const char *name, float data)=0</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>2d5249298f3b61568a128ee83c29e537</anchor>
      <arglist>(const char *name, int data)=0</arglist>
    </member>
    <member kind="function">
      <name>Store</name>
      <anchor>eab8b9cf08f6b3a6580819fa6e94bdeb</anchor>
      <arglist>(const char *name, void *data, void *tag)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iScriptObject</name>
    <base>iBase</base>
    <filename>structiScriptObject.html</filename>
    <member kind="function">
      <name>Call</name>
      <anchor>4c0edb168e9e6b4548ba914d4fe70ded</anchor>
      <arglist>(const char *name, csRef&lt; iScriptObject &gt; &amp;, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>b765d31592d1ad12172ad4e5416a7033</anchor>
      <arglist>(const char *name, csRef&lt; iString &gt; &amp;, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>9112160a64af4fe1c2417ad72abf1bc9</anchor>
      <arglist>(const char *name, double &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>f8d625737d12964928ce7df374bee20f</anchor>
      <arglist>(const char *name, float &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>7a956424a9f892686b29a2861606f502</anchor>
      <arglist>(const char *name, int &amp;ret, const char *fmt,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Call</name>
      <anchor>cdf3739b289bddc0700987d846e017ca</anchor>
      <arglist>(const char *name, const char *format,...)=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>343860aedd95df24be258b42c7e1e17b</anchor>
      <arglist>(const char *name, csRef&lt; iScriptObject &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>186c22fb8ea89bc4707a95a408992d05</anchor>
      <arglist>(const char *name, csRef&lt; iString &gt; &amp;) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>1fb814bfdb9ba6e68f3592dbacfbc956</anchor>
      <arglist>(const char *name, double &amp;data) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>fa321a4b1f2e4f8e78776c69c03a7a1c</anchor>
      <arglist>(const char *name, float &amp;data) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>502e37e122a7551448e8c14ae10580c3</anchor>
      <arglist>(const char *name, int &amp;data) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPointer</name>
      <anchor>8c95a441803d9a3b918b58e651339782</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTruth</name>
      <anchor>97f04ddeb472778aec15a7a8a69b79df</anchor>
      <arglist>(const char *name, bool &amp;isTrue) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsType</name>
      <anchor>cb5eebb45500ca4e7b9d373f59e2d17c</anchor>
      <arglist>(const char *) const =0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>ed1d6787cf785c222cd3d677b133f8bd</anchor>
      <arglist>(const char *name, iScriptObject *data)=0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>14f941ca42e030882e0c139c862e7b05</anchor>
      <arglist>(const char *name, char const *data)=0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>c59386e78b32b312a04a74b7b830b4af</anchor>
      <arglist>(const char *name, double data)=0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>4f1b151c1c400068875070e36e893217</anchor>
      <arglist>(const char *name, float data)=0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>8b667b9b74cc0346c0dc283de2fc3dcc</anchor>
      <arglist>(const char *name, int data)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPointer</name>
      <anchor>5ee04b888c585ad02b56a6b17d54189b</anchor>
      <arglist>(iBase *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTruth</name>
      <anchor>0fe4b619e644127ef872629d2114208b</anchor>
      <arglist>(const char *name, bool isTrue)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSector</name>
    <base>iBase</base>
    <filename>structiSector.html</filename>
    <member kind="function">
      <name>AddLightVisibleCallback</name>
      <anchor>da4d2dbb1b57c31c256f40a1d1c99ecf</anchor>
      <arglist>(iLightVisibleCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>AddSectorMeshCallback</name>
      <anchor>604e622530fe3c4444bb7befab2ee43c</anchor>
      <arglist>(iSectorMeshCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>CalculateSectorBBox</name>
      <anchor>5b55e0e2a0669fb57a287c2a28bca69c</anchor>
      <arglist>(csBox3 &amp;bbox, bool do_meshes) const =0</arglist>
    </member>
    <member kind="function">
      <name>CheckFrustum</name>
      <anchor>799f47128e89730f8e3c712e65a0f6ad</anchor>
      <arglist>(iFrustumView *lview)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateMeshGenerator</name>
      <anchor>4be5f0385b0fa4abe92d5ec42bb1f208</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>DecRecLevel</name>
      <anchor>31693696db7569dba12fa17e91cd0d1f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DisableFog</name>
      <anchor>ca4b06506020fd2af7ecf3088d137b35</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>688880e04de47b4e65b94c8b52602bb0</anchor>
      <arglist>(iRenderView *rview)=0</arglist>
    </member>
    <member kind="function">
      <name>FollowSegment</name>
      <anchor>7892ff0f7a1656f7f585ebde321f5acf</anchor>
      <arglist>(csReversibleTransform &amp;t, csVector3 &amp;new_position, bool &amp;mirror, bool only_portals=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDynamicAmbientLight</name>
      <anchor>9dff10bc1df035dc8856c4d3b0aef502</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetDynamicAmbientVersion</name>
      <anchor>6af1804c9626080845f4544b6b61c96f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFog</name>
      <anchor>cd8d75aa30c154e861633a10a32f3584</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLights</name>
      <anchor>e36d55cdd6b57528a6e94744a242107b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshes</name>
      <anchor>4e42a93965ed1c35036926ea6625ad4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshGenerator</name>
      <anchor>16b64e7b9e25413ae9f4c9dd1c50a823</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshGeneratorByName</name>
      <anchor>8e89bb1406959d4c505c7162519f748b</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshGeneratorCount</name>
      <anchor>c4421cd09f4bccb6e98aae5fca3c702f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPortalMeshes</name>
      <anchor>61e9a7508e4a9fbb456abad329a4323a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRecLevel</name>
      <anchor>f35b966b5def8a83628074c9fdf4fec3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderLoop</name>
      <anchor>afc7002d02b023a813a1594e2d60edd2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSectorCallback</name>
      <anchor>56b1269635770047897aa0e446ee9145</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSectorCallbackCount</name>
      <anchor>70d0bfd88a853633daf86c395d786e86</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSVContext</name>
      <anchor>73245444de621fa082f1bd025b9b67bb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibilityCuller</name>
      <anchor>73d8eeeb501ce328da2bf5ec5ef03424</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVisibleMeshes</name>
      <anchor>df1b5bca9ecb427b4473adab5d0adb27</anchor>
      <arglist>(iRenderView *)=0</arglist>
    </member>
    <member kind="function">
      <name>HasFog</name>
      <anchor>ba7fb0763e5e37f0ff4d7975615f2e0c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HitBeam</name>
      <anchor>1f9077b16a785db4db8176e0c9c36ed2</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, bool accurate=false)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeam</name>
      <anchor>27adf9112923e425b4492818621aa5b2</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;intersect, int *polygon_idx, bool accurate=false)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamPortals</name>
      <anchor>b5bd7bb8a6cb9a117ab3b266929dafb6</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>HitBeamPortals</name>
      <anchor>a3953330b03642f90db222296646501c</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, int *polygon_idx, iSector **final_sector=0)=0</arglist>
    </member>
    <member kind="function">
      <name>IncRecLevel</name>
      <anchor>c1083d1ffea7758027898aa94249f485</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsLightCullingEnabled</name>
      <anchor>a04c1b9638f387ef5165abd10161587f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>PrecacheDraw</name>
      <anchor>5530d3176f4d1b306f177de355b0254f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PrepareDraw</name>
      <anchor>72352a154e3c66aedce95465886a3f2c</anchor>
      <arglist>(iRenderView *rview)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>2cfe19e91ce3163cd6688ee135135c31</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveLightVisibleCallback</name>
      <anchor>f8ea8f5595004c060405c24490b08916</anchor>
      <arglist>(iLightVisibleCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMeshGenerator</name>
      <anchor>2e6e50cf9cfeec88e3b4ee0231cf5962</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMeshGenerators</name>
      <anchor>68b49ef326c76a19cb50b7b8a84869f6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSectorCallback</name>
      <anchor>98ede9be5ff621334de87e7e9a22c2d6</anchor>
      <arglist>(iSectorCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSectorMeshCallback</name>
      <anchor>af58d2f868d4e09b0d85938f8f836cd7</anchor>
      <arglist>(iSectorMeshCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDynamicAmbientLight</name>
      <anchor>e6b0b9c0e2f4d2a87d27d6f84e6631f1</anchor>
      <arglist>(const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFog</name>
      <anchor>5dbba0d2f2e31de4ea3ded8634457f3d</anchor>
      <arglist>(const csFog &amp;fog)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFog</name>
      <anchor>60f1c4665f14946550b90527308a9ed4</anchor>
      <arglist>(float density, const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightCulling</name>
      <anchor>9cf3e0c13b155828b7ecbb9671f580c4</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRenderLoop</name>
      <anchor>37277386f6b10ec40cc6ac31b0cdcd93</anchor>
      <arglist>(iRenderLoop *rl)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSectorCallback</name>
      <anchor>bef15c237a6055c508acb7937af4543e</anchor>
      <arglist>(iSectorCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVisibilityCullerPlugin</name>
      <anchor>6de240ef220d4f16db189e85d106f625</anchor>
      <arglist>(const char *name, iDocumentNode *culler_params=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ShineLights</name>
      <anchor>8bc37c560bfbc15e3239c5fde3d30595</anchor>
      <arglist>(iMeshWrapper *)=0</arglist>
    </member>
    <member kind="function">
      <name>ShineLights</name>
      <anchor>584bace18c68db2c7a2b4fbb681502fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnlinkObjects</name>
      <anchor>3820ed5b71d90a2a9a7c318263cf555b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSectorCallback</name>
    <base>iBase</base>
    <filename>structiSectorCallback.html</filename>
    <member kind="function">
      <name>Traverse</name>
      <anchor>4ef650f0c7c5b687db5783c0b6446a25</anchor>
      <arglist>(iSector *sector, iBase *context)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSectorIterator</name>
    <base>iBase</base>
    <filename>structiSectorIterator.html</filename>
    <member kind="function">
      <name>GetLastPosition</name>
      <anchor>c82c413ac665012991dd854ad62bd4cc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>f042abfd68549f92ab2b13023d57229b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>f359edbe26a248c2ff0e893e7944bedd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>a28f8db66e0e404e3722daaef5294b1e</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSectorList</name>
    <base>iBase</base>
    <filename>structiSectorList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>15ecbf45d547f70ad5fb30b6a21b9e02</anchor>
      <arglist>(iSector *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>f8e5e46b9a7a42fa970764eb9e749656</anchor>
      <arglist>(iSector *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>3a9f8c5dac3eee679819da1439bb8bf8</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>71e586708f0cb83c986c979740751024</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>c4558f370d5b3c9122540f6f3a898a0f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>790d11a65fde73fd59b4a2a323a7dabd</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>961642881d32fbca97a81e704ea4f239</anchor>
      <arglist>(iSector *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>5e376750d382c4dd402cdbe75bed2f11</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSectorMeshCallback</name>
    <base>iBase</base>
    <filename>structiSectorMeshCallback.html</filename>
    <member kind="function">
      <name>NewMesh</name>
      <anchor>8f4619936099c49a4b644f27d9044ac5</anchor>
      <arglist>(iSector *sector, iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMesh</name>
      <anchor>5a23f76808bd66c01e0602c96307b652</anchor>
      <arglist>(iSector *sector, iMeshWrapper *mesh)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSelfDestruct</name>
    <base>iBase</base>
    <filename>structiSelfDestruct.html</filename>
    <member kind="function">
      <name>SelfDestruct</name>
      <anchor>cbd9e2f83310f6e6a14317816d5179af</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequence</name>
    <base>iBase</base>
    <filename>structiSequence.html</filename>
    <member kind="function">
      <name>AddCondition</name>
      <anchor>72b9e0c68e2cf8dc0790dacaa43d7499</anchor>
      <arglist>(csTicks time, iSequenceCondition *condition, iSequence *trueSequence, iSequence *falseSequence, iBase *params=0, uint sequence_id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddLoop</name>
      <anchor>6235199c95de0e37a2eecbb7f6023ae4</anchor>
      <arglist>(csTicks time, iSequenceCondition *condition, iSequence *sequence, iBase *params=0, uint sequence_id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperation</name>
      <anchor>9815fcc0e9b612a268a16540d279c60b</anchor>
      <arglist>(csTicks time, iSequenceOperation *operation, iBase *params=0, uint sequence_id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRunSequence</name>
      <anchor>5b0a17f9d80269100f7c831ca532b5de</anchor>
      <arglist>(csTicks time, iSequence *sequence, iBase *params=0, uint sequence_id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>8c5472743b56446b8d0122306ad393fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFirstSequence</name>
      <anchor>cb02ed2752044b3957f40d2d661751f6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>a493f3372a7ab9c772c1c45c433f9489</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequenceCondition</name>
    <base>iBase</base>
    <filename>structiSequenceCondition.html</filename>
    <member kind="function">
      <name>Condition</name>
      <anchor>b8b850fab044aa0d87b6bdbc452b2057</anchor>
      <arglist>(csTicks dt, iBase *params)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequenceManager</name>
    <base>iBase</base>
    <filename>structiSequenceManager.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>3c4fbb6dfd2c4595855e28f6156f8d3c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DestroySequenceOperations</name>
      <anchor>0b52cc866aff696c92d21146ff7620c7</anchor>
      <arglist>(uint sequence_id)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDeltaTime</name>
      <anchor>2f965da6c1ef46a2e9af14c3206d8e60</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMainTime</name>
      <anchor>a8173c065798b268c177c832a923a3dd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUniqueID</name>
      <anchor>c64c2382abdc2009134659c62eaf4966</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>2867b0abc69581f0a486182fcbdc7ca9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsSuspended</name>
      <anchor>0a57cb7ab753f79e742fa7dad737ae5f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>NewSequence</name>
      <anchor>69d23730f8a8de4c409000a13862bc6a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Resume</name>
      <anchor>19a3f77ed55ce8ee5360441e3d41de66</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RunSequence</name>
      <anchor>39d91995c818b87014525ca400ce9e39</anchor>
      <arglist>(csTicks time, iSequence *sequence, iBase *params=0, uint sequence_id=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Suspend</name>
      <anchor>ccb1f6c8940aaa94285b63ced4a61a7e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>TimeWarp</name>
      <anchor>b6c715cefedcc2b77aa70a370f6c3586</anchor>
      <arglist>(csTicks time, bool skip)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequenceOperation</name>
    <base>iBase</base>
    <filename>structiSequenceOperation.html</filename>
    <member kind="function">
      <name>CleanupSequences</name>
      <anchor>7988ce03e8d1cb3c4babce0f576a612c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Do</name>
      <anchor>b83cb1989dc0fd8540dee3b15fad1141</anchor>
      <arglist>(csTicks dt, iBase *params)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequenceTimedOperation</name>
    <base>iBase</base>
    <filename>structiSequenceTimedOperation.html</filename>
    <member kind="function">
      <name>Do</name>
      <anchor>1df9231abc9807259ee9e411e44634ee</anchor>
      <arglist>(float time, iBase *params)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequenceTrigger</name>
    <base>iBase</base>
    <filename>structiSequenceTrigger.html</filename>
    <member kind="function">
      <name>AddConditionInSector</name>
      <anchor>f1fffdb88c93f18d048fdd9105e06565</anchor>
      <arglist>(iSector *sector, const csSphere &amp;sphere)=0</arglist>
    </member>
    <member kind="function">
      <name>AddConditionInSector</name>
      <anchor>16d86fe09ba73732459c59685ec9295f</anchor>
      <arglist>(iSector *sector, const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>AddConditionInSector</name>
      <anchor>2c765c98bfb022fa6e43993e8e53369c</anchor>
      <arglist>(iSector *sector)=0</arglist>
    </member>
    <member kind="function">
      <name>AddConditionLightChange</name>
      <anchor>97825c4fc19ae3cbc78c2cd2d6c6ccd2</anchor>
      <arglist>(iLight *whichlight, int oper, const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>AddConditionManual</name>
      <anchor>4fb694f70c28e0a592693e8f2ec600d6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>AddConditionMeshClick</name>
      <anchor>74bc5bd411fb06ccd2285fd200f10070</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>AddConditionSectorVisible</name>
      <anchor>d37cf60164f6a2377d477ef1fd436f9e</anchor>
      <arglist>(iSector *sector)=0</arglist>
    </member>
    <member kind="function">
      <name>CheckState</name>
      <anchor>2c35433b0e25ca78f6fe24e134f737ae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ClearConditions</name>
      <anchor>b9cb87fba261928d9206e46690594ac9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FireSequence</name>
      <anchor>9a2abd65343c3602c5c28148f9807ac5</anchor>
      <arglist>(csTicks delay, iSequenceWrapper *seq)=0</arglist>
    </member>
    <member kind="function">
      <name>ForceFire</name>
      <anchor>2a6c6a22e2ce637abe98817b09c9cc36</anchor>
      <arglist>(bool now=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFiredSequence</name>
      <anchor>895787031694765f163e24fa3793bdf0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetParameters</name>
      <anchor>7851ef026e16462e670586b494ee49d2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsEnabled</name>
      <anchor>51da26f932af441abf347f4c0e09023e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>093fd4049ff0eaf9a7828b108ed4607f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetEnabled</name>
      <anchor>dbd33886abf040f61afc6ef76195fdef</anchor>
      <arglist>(bool en)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParameters</name>
      <anchor>6c1dc310a479768354361748d3c56bf7</anchor>
      <arglist>(iEngineSequenceParameters *params)=0</arglist>
    </member>
    <member kind="function">
      <name>TestConditions</name>
      <anchor>17b8040a91d09d2d99f244a4e0249ce2</anchor>
      <arglist>(csTicks delay)=0</arglist>
    </member>
    <member kind="function">
      <name>Trigger</name>
      <anchor>4afb2059e2d153d4e8f5a6dcc147e340</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSequenceWrapper</name>
    <base>iBase</base>
    <filename>structiSequenceWrapper.html</filename>
    <member kind="function">
      <name>AddOperationCheckTrigger</name>
      <anchor>91c2505a88d78c4286f7b8a60196249d</anchor>
      <arglist>(csTicks time, iParameterESM *trigger, csTicks delay)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationFadeAmbient</name>
      <anchor>d79f10170309e3af1a046b3a7d0864eb</anchor>
      <arglist>(csTicks time, iParameterESM *sector, const csColor &amp;color, csTicks duration)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationFadeFog</name>
      <anchor>d7b0f28368d8a2f32fcfa62f2682ae31</anchor>
      <arglist>(csTicks time, iParameterESM *sector, const csColor &amp;color, float density, csTicks duration)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationFadeLight</name>
      <anchor>b11177e1b3d8f13627a09042dec234dd</anchor>
      <arglist>(csTicks time, iParameterESM *light, const csColor &amp;color, csTicks duration)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationFadeMeshColor</name>
      <anchor>084249a7de2faa72e54bc8701435d741</anchor>
      <arglist>(csTicks time, iParameterESM *mesh, const csColor &amp;color, csTicks duration)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationMoveDuration</name>
      <anchor>3f0d25b8a96fd9f15c3aa2f2aa670cd8</anchor>
      <arglist>(csTicks time, iParameterESM *mesh, const csVector3 &amp;offset, csTicks duration)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationRandomDelay</name>
      <anchor>360a53f3c8990bfc8e6b6d2499494997</anchor>
      <arglist>(csTicks time, int min, int max)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationRotateDuration</name>
      <anchor>8358dd58a7e8935b06793b2a3f172918</anchor>
      <arglist>(csTicks time, iParameterESM *mesh, int axis1, float tot_angle1, int axis2, float tot_angle2, int axis3, float tot_angle3, const csVector3 &amp;offset, csTicks duration)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetAmbient</name>
      <anchor>9e9286006f850b0f975bc978bec65e6c</anchor>
      <arglist>(csTicks time, iParameterESM *sector, const csColor &amp;color, iSharedVariable *colorvar)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetFog</name>
      <anchor>60afa54234e0a18775257dda7a715dfe</anchor>
      <arglist>(csTicks time, iParameterESM *sector, const csColor &amp;color, float density)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetLight</name>
      <anchor>7c8aeb27bab541d9d50ae1cd11aaf2f3</anchor>
      <arglist>(csTicks time, iParameterESM *light, const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetMaterial</name>
      <anchor>3055b2a391e9bd17af78731d76a66a13</anchor>
      <arglist>(csTicks time, iParameterESM *mesh, iParameterESM *mat)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetMeshColor</name>
      <anchor>504b5cbfd1158455f5483fc3a814176d</anchor>
      <arglist>(csTicks time, iParameterESM *mesh, const csColor &amp;color)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetPolygonMaterial</name>
      <anchor>ed7da5116e95fd3dfa80c8618da33a23</anchor>
      <arglist>(csTicks time, iParameterESM *polygon, iParameterESM *mat)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetVariable</name>
      <anchor>9dc39d7c3cf2a8d7c65d519493d50512</anchor>
      <arglist>(csTicks time, iSharedVariable *var, const csColor &amp;c)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetVariable</name>
      <anchor>8fcafa572c6c489140dfec50d41f0325</anchor>
      <arglist>(csTicks time, iSharedVariable *var, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetVariable</name>
      <anchor>ff235b5d98cf9c8bae5cee704b08757b</anchor>
      <arglist>(csTicks time, iSharedVariable *var, iSharedVariable *value, iSharedVariable *dvalue=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationSetVariable</name>
      <anchor>fca820f91473b057ff4e2accb396d1d0</anchor>
      <arglist>(csTicks time, iSharedVariable *var, float value, float dvalue=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationTestTrigger</name>
      <anchor>93a667f4592776e4a7111502feb589fe</anchor>
      <arglist>(csTicks time, iParameterESM *trigger, iSequence *trueSequence, iSequence *falseSequence)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOperationTriggerState</name>
      <anchor>9f2a5e388e6f94f4e82ee50202dea50a</anchor>
      <arglist>(csTicks time, iParameterESM *trigger, bool en)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateBaseParameterBlock</name>
      <anchor>f6410fadbdf2900ecc4e0c6249331491</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreateParameterBlock</name>
      <anchor>50a43927255cefabd26ff364c497f695</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBaseParameterBlock</name>
      <anchor>c3fb4b1040bbe847ce358841b36f5d67</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSequence</name>
      <anchor>6e898876dae16f7c03e9cfe5c2b1a22d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>5e5e74e5deb07d67e7b801f4980a5ede</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShader</name>
    <base>iShaderVariableContext</base>
    <filename>structiShader.html</filename>
    <member kind="function">
      <name>ActivatePass</name>
      <anchor>746c31e9dda53b8dffef8a5d7d9831e3</anchor>
      <arglist>(size_t ticket, size_t number)=0</arglist>
    </member>
    <member kind="function">
      <name>DeactivatePass</name>
      <anchor>de86803424d3e46e7dc53c955a398229</anchor>
      <arglist>(size_t ticket)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFileName</name>
      <anchor>3cbb631f99fba7d222dec476e482b230</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMetadata</name>
      <anchor>3b023b1f3c62c453a2cd4a2f8196331e</anchor>
      <arglist>(size_t ticket) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNumberOfPasses</name>
      <anchor>89a4bcd38e0c7a37bee9e39119a9fcd7</anchor>
      <arglist>(size_t ticket)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTicket</name>
      <anchor>09a0300c30a64436156b44fb0d5cd821</anchor>
      <arglist>(const csRenderMeshModes &amp;modes, const iShaderVarStack *stacks)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>ea8b04825736214e92deae7b3afaa0cd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetFileName</name>
      <anchor>b68b65351f3d165258a08c62be531665</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>SetupPass</name>
      <anchor>f1198e69735f523dec2ac125efc11fe8</anchor>
      <arglist>(size_t ticket, const csRenderMesh *mesh, csRenderMeshModes &amp;modes, const iShaderVarStack *stacks)=0</arglist>
    </member>
    <member kind="function">
      <name>TeardownPass</name>
      <anchor>6e9434bbb1d60930513d4537832a3cd3</anchor>
      <arglist>(size_t ticket)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderCompiler</name>
    <base>iBase</base>
    <filename>structiShaderCompiler.html</filename>
    <member kind="function">
      <name>CompileShader</name>
      <anchor>7a39e168847845b711bca3961f90d408</anchor>
      <arglist>(iDocumentNode *templ, int forcepriority=-1)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>2db225d5eb62c493b4095e1746fe7051</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPriorities</name>
      <anchor>3207172db1335b3261c092bbe8d67104</anchor>
      <arglist>(iDocumentNode *templ)=0</arglist>
    </member>
    <member kind="function">
      <name>IsTemplateToCompiler</name>
      <anchor>1bd83523f3333e55db521ce08d52c972</anchor>
      <arglist>(iDocumentNode *templ)=0</arglist>
    </member>
    <member kind="function">
      <name>ValidateTemplate</name>
      <anchor>1d360c0b0c8d49018f0024dc06fc0503</anchor>
      <arglist>(iDocumentNode *templ)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderDestinationResolver</name>
    <base>iBase</base>
    <filename>structiShaderDestinationResolver.html</filename>
    <member kind="function">
      <name>ResolveTU</name>
      <anchor>b4c0a277733c6364611237cc2f24f6a4</anchor>
      <arglist>(const char *binding)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderManager</name>
    <base>iShaderVariableContext</base>
    <filename>structiShaderManager.html</filename>
    <member kind="function">
      <name>GetActiveLights</name>
      <anchor>7dc75b039bd9b8b64d02d7293c34c251</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCompiler</name>
      <anchor>8348c5ffe614703d05ad41dba650d502</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShader</name>
      <anchor>c2d1494ef431710b7f9ccf30da3fb4c6</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShaders</name>
      <anchor>3ff7912e71d9fe5e089e3425fce47b06</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetShaderVariableStack</name>
      <anchor>0c405a373237a68b701ba109a94f98d1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTagOptions</name>
      <anchor>4f08bd7e8d6f41a1b962751c54c118ee</anchor>
      <arglist>(csStringID tag, csShaderTagPresence &amp;presence, int &amp;priority)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTags</name>
      <anchor>8dbad8eece62fdc2603a88d9407df75e</anchor>
      <arglist>(csShaderTagPresence presence, int &amp;count)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterCompiler</name>
      <anchor>2955a4c4a8fcadb4267f7fa77413983c</anchor>
      <arglist>(iShaderCompiler *compiler)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterShader</name>
      <anchor>ee2d13e2816763a3743d423d022aedb2</anchor>
      <arglist>(iShader *shader)=0</arglist>
    </member>
    <member kind="function">
      <name>SetActiveLights</name>
      <anchor>2712256781564c0dc3ca92a1da42d27d</anchor>
      <arglist>(const csArray&lt; iLight * &gt; &amp;lights)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTagOptions</name>
      <anchor>09375691e61c5ee6628be3cd8598f540</anchor>
      <arglist>(csStringID tag, csShaderTagPresence presence, int priority=0)=0</arglist>
    </member>
    <member kind="function">
      <name>UnregisterShader</name>
      <anchor>2399e0d727edc305bbada85895685d0b</anchor>
      <arglist>(iShader *shader)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderPriorityList</name>
    <base>iBase</base>
    <filename>structiShaderPriorityList.html</filename>
    <member kind="function">
      <name>GetCount</name>
      <anchor>866f600b5af6d8f142f524f528d49bdb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPriority</name>
      <anchor>f4899c076b85cc029350f29f97c9ad7a</anchor>
      <arglist>(size_t idx) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderProgram</name>
    <base>iBase</base>
    <filename>structiShaderProgram.html</filename>
    <member kind="function">
      <name>Activate</name>
      <anchor>6d5ed343c9a888be7ec600036346a0f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Compile</name>
      <anchor>41c0fa99f0e6d7ed5f7949548baa6c72</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Deactivate</name>
      <anchor>b2e04afaa2c4859c5efa411b0d5e45f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>73d9f47e533a25981ad5977f06da79f0</anchor>
      <arglist>(iShaderDestinationResolver *resolve, const char *program, csArray&lt; csShaderVarMapping &gt; &amp;mappings)=0</arglist>
    </member>
    <member kind="function">
      <name>Load</name>
      <anchor>59e6a433bb178b211b87267c841f71ef</anchor>
      <arglist>(iShaderDestinationResolver *resolve, iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetState</name>
      <anchor>d28d8c9b193d00034b54071217305fa4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetupState</name>
      <anchor>6c077d88f006da2be9d043f808588ff3</anchor>
      <arglist>(const csRenderMesh *mesh, csRenderMeshModes &amp;modes, const iShaderVarStack *stacks)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderProgramPlugin</name>
    <base>iBase</base>
    <filename>structiShaderProgramPlugin.html</filename>
  </compound>
  <compound kind="class">
    <name>iShaderVariableAccessor</name>
    <base>iBase</base>
    <filename>structiShaderVariableAccessor.html</filename>
    <member kind="function">
      <name>PreGetValue</name>
      <anchor>16924424479a6c2fd5645b3defd31d3a</anchor>
      <arglist>(csShaderVariable *variable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderVariableContext</name>
    <base>iBase</base>
    <filename>structiShaderVariableContext.html</filename>
    <member kind="function">
      <name>AddVariable</name>
      <anchor>6c9373f25e41b4b0a3ece1f42612662b</anchor>
      <arglist>(csShaderVariable *variable)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>ab67b7a6e185e0b2bfa78476ca8036dc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetShaderVariables</name>
      <anchor>5f4ad2febd6f8e0936865a2fbf9545c3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVariable</name>
      <anchor>420a6c2de50fe37f822d4ceb34e38503</anchor>
      <arglist>(csStringID name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVariableAdd</name>
      <anchor>0691ea994cf59d6b59696760d0ffc391</anchor>
      <arglist>(csStringID name)</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>b4ba5e2a32c84ffa0d8ee8e65f2ce2bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>PushVariables</name>
      <anchor>4ad04615ccb73366c32130b5f8bdb8cf</anchor>
      <arglist>(iShaderVarStack *stacks) const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveVariable</name>
      <anchor>d101477212ccf9b30a21d6c0c25e9720</anchor>
      <arglist>(csShaderVariable *variable)=0</arglist>
    </member>
    <member kind="function">
      <name>ReplaceVariable</name>
      <anchor>4f327328bffa8bd54703ad5436effb53</anchor>
      <arglist>(csShaderVariable *variable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShaderVarStack</name>
    <base>iArrayChangeAll&lt; csShaderVariable * &gt;</base>
    <filename>structiShaderVarStack.html</filename>
  </compound>
  <compound kind="class">
    <name>iShadowBlock</name>
    <base>iBase</base>
    <filename>structiShadowBlock.html</filename>
    <member kind="function">
      <name>AddAllShadows</name>
      <anchor>4bab86d1dbd4fd1b5b4fb753ce6c249e</anchor>
      <arglist>(iShadowBlockList *source)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRelevantShadows</name>
      <anchor>c0afe307536918139f035d97b93f1835</anchor>
      <arglist>(iShadowBlockList *source)=0</arglist>
    </member>
    <member kind="function">
      <name>AddRelevantShadows</name>
      <anchor>551592ac2688d70e9b947a9e546b4df1</anchor>
      <arglist>(iShadowBlock *source, csTransform *trans=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AddShadow</name>
      <anchor>07e348d489142cb3c990806537fe5d45</anchor>
      <arglist>(const csVector3 &amp;origin, void *userData, int num_verts, csPlane3 &amp;backplane)=0</arglist>
    </member>
    <member kind="function">
      <name>AddUniqueRelevantShadows</name>
      <anchor>6ee891af82319bb4d175a22743947765</anchor>
      <arglist>(iShadowBlockList *source)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteShadows</name>
      <anchor>934f5bf769bdbf87b142d90ea52fa96b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetBoundingBox</name>
      <anchor>1f3570685042f040d5342999dcaf88f1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadow</name>
      <anchor>6cd1b0471333a7e8d57189cf1a9d9e68</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadowCount</name>
      <anchor>894e26d1ece4518223cd5e6d3fe0b9fc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadowIterator</name>
      <anchor>3ffea49081e3da3057b84af74524ede2</anchor>
      <arglist>(bool reverse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Transform</name>
      <anchor>2b004307a1274e443d6a44a39f8974f0</anchor>
      <arglist>(csTransform *trans)=0</arglist>
    </member>
    <member kind="function">
      <name>UnlinkShadow</name>
      <anchor>299024bec4c70e9f02e4a351d0bdadeb</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShadowBlockList</name>
    <base>iBase</base>
    <filename>structiShadowBlockList.html</filename>
    <member kind="function">
      <name>DeleteAllShadows</name>
      <anchor>9dc1850939a80ffbb7860858c3cbe18e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>FromCurrentRegion</name>
      <anchor>6a932376491f6e3de5f7bda64de547c9</anchor>
      <arglist>(iShadowBlock *block)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFirstShadowBlock</name>
      <anchor>1f855bb4c212db37f860ab5083b87964</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLastShadowBlock</name>
      <anchor>3dee8ef1ff480af4fb1a999080d49714</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetNextShadowBlock</name>
      <anchor>389f3d4ff7bc67e2acb5c5f6aa97a857</anchor>
      <arglist>(iShadowBlock *s)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPreviousShadowBlock</name>
      <anchor>1033022e46a47259f114cd6d11e7243e</anchor>
      <arglist>(iShadowBlock *s)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadowIterator</name>
      <anchor>7d7a0e277baa5a485c2e7074204524d6</anchor>
      <arglist>(const csBox3 &amp;bbox, bool reverse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetShadowIterator</name>
      <anchor>14cac2f4a26f7866d56f9b2586305392</anchor>
      <arglist>(bool reverse=false)=0</arglist>
    </member>
    <member kind="function">
      <name>MarkNewRegion</name>
      <anchor>97d31f5dfb97e2bc705aaa96b974691f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>NewShadowBlock</name>
      <anchor>e116879ad69d13774111a405ff74c44a</anchor>
      <arglist>(int num_shadows=30)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveLastShadowBlock</name>
      <anchor>49ba3a96511b65eb6b2afc44dce4e08c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RestoreRegion</name>
      <anchor>61a23c38219a6564a9581b665383aa46</anchor>
      <arglist>(uint32 prev)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShadowCaster</name>
    <base>iBase</base>
    <filename>structiShadowCaster.html</filename>
    <member kind="function">
      <name>AppendShadows</name>
      <anchor>0146020a2077c5d37452f0314316f13a</anchor>
      <arglist>(iMovable *movable, iShadowBlockList *shadows, const csVector3 &amp;origin)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShadowIterator</name>
    <base>iBase</base>
    <filename>structiShadowIterator.html</filename>
    <member kind="function">
      <name>DeleteCurrent</name>
      <anchor>27cb354f9dfae655117a608a9dbb2da1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentShadowBlock</name>
      <anchor>a60ba990d8eaa324bdc649c102b851ed</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetNextShadowBlock</name>
      <anchor>c4514deacc6581cb81d5752e932272f3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUserData</name>
      <anchor>4dfcd3d23026bd201b89f3fb4e63867c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasNext</name>
      <anchor>741caa7243a516cb4154f9f5bec7e4e5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>IsRelevant</name>
      <anchor>01f05fa6f523b0bd0775e104793165e2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>MarkRelevant</name>
      <anchor>aeb5e2cd09c471bcd925925f4f1a966c</anchor>
      <arglist>(bool rel)=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>7a63e4cb07e4f05a1440454d27dd5251</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>82b8c267cc36e6a16a3b6ad967fd5e6c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iShadowReceiver</name>
    <base>iBase</base>
    <filename>structiShadowReceiver.html</filename>
    <member kind="function">
      <name>CastShadows</name>
      <anchor>161cd5d521eccaddfe965217ac9398ea</anchor>
      <arglist>(iMovable *movable, iFrustumView *fview)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSharedVariable</name>
    <base>iBase</base>
    <filename>structiSharedVariable.html</filename>
    <member kind="function">
      <name>SharedVariableType</name>
      <anchor>3d92773963c63daf5c1f3339c06549f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddListener</name>
      <anchor>36a80b83d9cc49b1866b839d29c4d5e6</anchor>
      <arglist>(iSharedVariableListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>4a4d99dab514db69f4ab42240e49e0a0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetColor</name>
      <anchor>5715316807d55507845988c7da140f6a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>43615a1af35703211ec643e39fa213e7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetString</name>
      <anchor>24e6178982c95369c6ebaccb396442ca</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetType</name>
      <anchor>0d5a4f68a8747f123c070ba09c50ee16</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVector</name>
      <anchor>a9cbb45ecbbaccb0e778165a8016fdaa</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>be48000128b6cd565a15c63ff53a71ca</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveListener</name>
      <anchor>7e844606f39bb5c9e5d9cf712ad57152</anchor>
      <arglist>(iSharedVariableListener *listener)=0</arglist>
    </member>
    <member kind="function">
      <name>Set</name>
      <anchor>3baa9f096dacfd96ff00bc964458755e</anchor>
      <arglist>(float val)=0</arglist>
    </member>
    <member kind="function">
      <name>SetColor</name>
      <anchor>f15cf6a1762900824eb83458c77c2e2d</anchor>
      <arglist>(const csColor &amp;col)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>e88c3d5680f2fc065b01c65dc21f77b7</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetString</name>
      <anchor>efe2441eb60bf05b534cfefa75de8efe</anchor>
      <arglist>(const char *str)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVector</name>
      <anchor>fafa43673f7ece9edf1da6023683346f</anchor>
      <arglist>(const csVector3 &amp;v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSharedVariableList</name>
    <base>iBase</base>
    <filename>structiSharedVariableList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>36e0243ffc5c709a5527030d080ab1ca</anchor>
      <arglist>(iSharedVariable *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>3e2421d19c513c4fad620ac830832ac4</anchor>
      <arglist>(iSharedVariable *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>d0a99f3250a957485b57b7fb03c1a8ab</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>609915394942bd97eb7f5f71f3e98c7e</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>a16eeaee214c03576cdb0ee7b34e4f73</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>New</name>
      <anchor>35b0f575df2458087392200647498540</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>117f163b849c0aefafbeba97fab86407</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>6867da1e525db6c23f88a167e7025812</anchor>
      <arglist>(iSharedVariable *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>d41383206cebf928c3f7d08f37088b1d</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSharedVariableListener</name>
    <base>iBase</base>
    <filename>structiSharedVariableListener.html</filename>
    <member kind="function">
      <name>VariableChanged</name>
      <anchor>016a6127e2af2027bbed498ece2a0b11</anchor>
      <arglist>(iSharedVariable *var)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSimpleFormerState</name>
    <base>iBase</base>
    <filename>structiSimpleFormerState.html</filename>
    <member kind="function">
      <name>GetFloatMap</name>
      <anchor>6efac6fb79dddf7b232d1da8cad11793</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetFloatMap</name>
      <anchor>46d0e2456fff4f07662cb9dd667dd1a1</anchor>
      <arglist>(csStringID type, iImage *map, float scale=1.0, float offset=0.0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHeightmap</name>
      <anchor>29c276c0aeae7df07d4b9822ce252da2</anchor>
      <arglist>(float *data, unsigned int width, unsigned int height)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHeightmap</name>
      <anchor>131d60fa12b436a239d69969eb1bc359</anchor>
      <arglist>(iImage *heightmap)=0</arglist>
    </member>
    <member kind="function">
      <name>SetIntegerMap</name>
      <anchor>8284c76a969e75d9f14fb6f97fd82abe</anchor>
      <arglist>(csStringID type, iImage *map, int scale=1, int offset=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialScale</name>
      <anchor>ed61c87910949486eceb5e74a6d3409e</anchor>
      <arglist>(csVector2 scale)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOffset</name>
      <anchor>f0db4577ead30269085d6c0e3aa78b58</anchor>
      <arglist>(csVector3 scale)=0</arglist>
    </member>
    <member kind="function">
      <name>SetScale</name>
      <anchor>ebe3fff01666944e178898d10311e37c</anchor>
      <arglist>(csVector3 scale)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeleton</name>
    <base>iBase</base>
    <filename>structiSkeleton.html</filename>
    <member kind="function">
      <name>AddUpdateCallback</name>
      <anchor>6857e30634688753f22f6e05de689002</anchor>
      <arglist>(iSkeletonUpdateCallback *update_callback)=0</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>216331e7ae965a91ea8c2a02f0738a8a</anchor>
      <arglist>(const char *scriptname)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearPendingScripts</name>
      <anchor>b4f2be7e56dd4233f1ac0ef6fe431a8e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Execute</name>
      <anchor>06e937fb06628c79b1e9c818b4f37ce4</anchor>
      <arglist>(const char *scriptname)=0</arglist>
    </member>
    <member kind="function">
      <name>FindBone</name>
      <anchor>c614677f519f8dd350e4b70893fdf5cd</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindBoneIndex</name>
      <anchor>cb3de3b6341fba41639dfba2effa994a</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindScript</name>
      <anchor>bfa1470cfce33cea0793958971148514</anchor>
      <arglist>(const char *scriptname)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>fd6a00557798803bf9070c3cca7e738e</anchor>
      <arglist>(const char *socketname)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBone</name>
      <anchor>5b666915049fab223421b6a171a4fcdb</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBonesCount</name>
      <anchor>eac9593c91b6060d50da3c76ac393598</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>8955c8c1d6be1c8ad58151c0975c0038</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>c08a7ce2fd56be9ae58cdec7339b334f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetScript</name>
      <anchor>19f890c17bd8c5e9263eea086b4816bb</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetScriptsCount</name>
      <anchor>40a49d63e6a83501ae0963106e24b277</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUpdateCallback</name>
      <anchor>c162ed6ac197508bd570e3877508a041</anchor>
      <arglist>(size_t callback_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetUpdateCallbacksCount</name>
      <anchor>9490b596c373a21db7779f17ef4f8c0b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveUpdateCallback</name>
      <anchor>672ba3c3b1e2dc5ecf957df3867c07c2</anchor>
      <arglist>(size_t callback_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>308edf9d3751d1517c62f14620ffccef</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetScriptCallback</name>
      <anchor>12d33ed507e4452f675e207c4dec5ccc</anchor>
      <arglist>(iSkeletonScriptCallback *cb)=0</arglist>
    </member>
    <member kind="function">
      <name>Stop</name>
      <anchor>f6e23baf67a8d4c63d45c5b89d586461</anchor>
      <arglist>(const char *scriptname)=0</arglist>
    </member>
    <member kind="function">
      <name>StopAll</name>
      <anchor>475697c78aafeb389482cbbceca193b9</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonBone</name>
    <base>iBase</base>
    <filename>structiSkeletonBone.html</filename>
    <member kind="function">
      <name>FindChild</name>
      <anchor>a571cd60755c7bbbff33e41e6dec23d3</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindChildIndex</name>
      <anchor>57f02796a55b89447201b28f59edcfa9</anchor>
      <arglist>(iSkeletonBone *child)=0</arglist>
    </member>
    <member kind="function">
      <name>GetChild</name>
      <anchor>33112e06533cb648f7fa35c70ee2d680</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetChildrenCount</name>
      <anchor>fae6ef2d4ba4189406a29a11fc9ded24</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>4bf127eb7a524fc623c900f5e2b2bf00</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullTransform</name>
      <anchor>c06bec888a5d097d44848cbe70511ebc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>843fc6777121ef653770ae3dccb79425</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParent</name>
      <anchor>505e7bc774fc6136d542e3b79149670c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSkinBox</name>
      <anchor>365775578740da1b74f98d3c1311bd34</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>20cf1d6ca683ee39de622af6bd55bde1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransformMode</name>
      <anchor>3b0e109fe97d04da1b7ddf595e55cf07</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUpdateCallback</name>
      <anchor>1fe41647e665b11ef0c00bda036f6766</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>fba50bb58b344622ac3ea098bc4d9e0f</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>82b09a468d365953554288d76e2114d4</anchor>
      <arglist>(iSkeletonBone *parent)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSkinBox</name>
      <anchor>41304270a269d79a44c20f5b1367b4b9</anchor>
      <arglist>(csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>3399a83d3fad410db3ab8b1d7981de20</anchor>
      <arglist>(const csReversibleTransform &amp;transform)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransformMode</name>
      <anchor>5c03cf2b034eeb210f8e5aac42d8c9b4</anchor>
      <arglist>(csBoneTransformType mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUpdateCallback</name>
      <anchor>df2e5311a58036cd69e1e637287cabbf</anchor>
      <arglist>(iSkeletonBoneUpdateCallback *callback)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonBoneFactory</name>
    <base>iBase</base>
    <filename>structiSkeletonBoneFactory.html</filename>
    <member kind="function">
      <name>FindChild</name>
      <anchor>a2b03a618388564b4e39976d06a83d3e</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindChildIndex</name>
      <anchor>78b58350bfcfde0ac3476978c635a6af</anchor>
      <arglist>(iSkeletonBoneFactory *child)=0</arglist>
    </member>
    <member kind="function">
      <name>GetChild</name>
      <anchor>4f451aeb9e0b5011b018540975db2f08</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetChildrenCount</name>
      <anchor>455d79a8a7b6e5dd58323c6096458dce</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullTransform</name>
      <anchor>b14eb5ba39539e7c9352730725cc0aaf</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>a703ec59725ed6eb4992ed4b8ddeb8a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetParent</name>
      <anchor>fac18fcbee4c2ecfa5c0c6487d724efd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRagdollInfo</name>
      <anchor>74c5c52e6ee0e3568f425d5d6de89f01</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSkinBox</name>
      <anchor>268cdc6b303dd2a9bae782a6d167d688</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>efc1a15a6df412f1a858790142d2db57</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>e79f409e941c0aefaf451bea3a9ce428</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>e2194792a8835dfa2ca1c6e7db67a977</anchor>
      <arglist>(iSkeletonBoneFactory *parent)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSkinBox</name>
      <anchor>ad4edcbc9b71402f94a4723ce0b56580</anchor>
      <arglist>(csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>3eb580471224a3bb764a0bb1d697fe58</anchor>
      <arglist>(const csReversibleTransform &amp;transform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonBoneRagdollInfo</name>
    <base>iBase</base>
    <filename>structiSkeletonBoneRagdollInfo.html</filename>
  </compound>
  <compound kind="class">
    <name>iSkeletonBoneUpdateCallback</name>
    <base>iBase</base>
    <filename>structiSkeletonBoneUpdateCallback.html</filename>
  </compound>
  <compound kind="class">
    <name>iSkeletonFactory</name>
    <base>iBase</base>
    <filename>structiSkeletonFactory.html</filename>
    <member kind="function">
      <name>CreateBone</name>
      <anchor>7fa6b8b686161cc82704ad8840a4b01d</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateScript</name>
      <anchor>6d36d0f47174fc1bc9e5fc621c999b34</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSocket</name>
      <anchor>95dfd4a35533604a3353914aea0a254f</anchor>
      <arglist>(const char *name, iSkeletonBoneFactory *bone)=0</arglist>
    </member>
    <member kind="function">
      <name>FindBone</name>
      <anchor>fe9bcfb7b41f4b3d1a97257268f8cb00</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindBoneIndex</name>
      <anchor>97fabdde44d4d01bc52ac60b2be3c54c</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindScript</name>
      <anchor>54459e29df65202c6c3799af468b557e</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>c17c47cd249ce9023b82dbeed4c44036</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBone</name>
      <anchor>83ac70be42d0cd47236854cbe4f393a7</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetBonesCount</name>
      <anchor>ce8e0f86219fe302f8433c4134215e5a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetGraveyard</name>
      <anchor>f44f686cf346baa5022b95499aebf1b0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>9d0f6b5892c6e24b0a5bee7a5f306128</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSocket</name>
      <anchor>87cf1f81b054679a2d18396906802831</anchor>
      <arglist>(int i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSocketsCount</name>
      <anchor>b0a83ef59620ede36ea1d9ae0bb3d3f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSocket</name>
      <anchor>5fbd2cd1b663ff918482096c1be344fd</anchor>
      <arglist>(int i)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>04d00f257c53cf691f8d3f2a19e2bc6e</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonGraveyard</name>
    <base>iBase</base>
    <filename>structiSkeletonGraveyard.html</filename>
    <member kind="function">
      <name>CreateFactory</name>
      <anchor>682989727e372b287485bedee5958969</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateSkeleton</name>
      <anchor>8ab2ba415f4c236e58d90deae4e343b0</anchor>
      <arglist>(iSkeletonFactory *fact, const char *name=0)=0</arglist>
    </member>
    <member kind="function">
      <name>FindFactory</name>
      <anchor>bcacad66ec0f17e4165bf62acfc1b653</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFactoriesCount</name>
      <anchor>d3813bc5ca9d1478cf70ef2d066c8d21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>LoadFactory</name>
      <anchor>d57e89cf38537b191e935aeaab94ec6f</anchor>
      <arglist>(const char *file_name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonScript</name>
    <base>iBase</base>
    <filename>structiSkeletonScript.html</filename>
    <member kind="function">
      <name>CreateFrame</name>
      <anchor>f0f118a6e0d0c1177bb1a5ec77760095</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindFrameIndex</name>
      <anchor>551b876c9d262e063f4523fd9a914faa</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFactor</name>
      <anchor>b3d506f9360f0956a14bfc1728eaad6c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrame</name>
      <anchor>77e259768002060d00780229b75e6102</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFramesCount</name>
      <anchor>64cc8f4f9296e8f79a571e7744126380</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLoop</name>
      <anchor>fe96d2a3eb8225ce0a75a71be1612ca0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>d15f89d898a9cea1541dbbb36a3b012a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSpeed</name>
      <anchor>57b760db284bc8dc941bbdf340b205a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTime</name>
      <anchor>1feca61c712bb3d46fb1d4fc997d869c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RecalcSpline</name>
      <anchor>225bf92a2b442158ef57d199c4952425</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveFrame</name>
      <anchor>08f6a31a8d33fb0451f13269b59c1bea</anchor>
      <arglist>(size_t i)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFactor</name>
      <anchor>54af063fdfe3dc4bbc8a2e115b66b78f</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLoop</name>
      <anchor>99137c4c0023e720f7f5818e7d185753</anchor>
      <arglist>(bool loop)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>1e1b1ae6edfaff1eb48ce1508b0c87fa</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSpeed</name>
      <anchor>a76a88fc664d06612110e870104788b6</anchor>
      <arglist>(float speed)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTime</name>
      <anchor>33f43cab9df57139a5e048ee4dd952e3</anchor>
      <arglist>(csTicks time)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonScriptCallback</name>
    <base>iBase</base>
    <filename>structiSkeletonScriptCallback.html</filename>
    <member kind="function">
      <name>Execute</name>
      <anchor>f44b928c7f7264559c73ce8948087bca</anchor>
      <arglist>(iSkeletonScript *script, size_t frame_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>OnFinish</name>
      <anchor>ed6bf2b8b1ed650e20ff7456b2933dda</anchor>
      <arglist>(iSkeletonScript *script)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonScriptKeyFrame</name>
    <base>iBase</base>
    <filename>structiSkeletonScriptKeyFrame.html</filename>
    <member kind="function">
      <name>AddTransform</name>
      <anchor>2a21d9a2c436cc10a44beb66360276e1</anchor>
      <arglist>(iSkeletonBoneFactory *bone, csReversibleTransform &amp;transform, bool relative=false)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDuration</name>
      <anchor>eea3888f0373baac8675d57f361763b0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyFrameData</name>
      <anchor>e105f05cbbce346722aa3d515cfa39f9</anchor>
      <arglist>(iSkeletonBoneFactory *bone_fact, csQuaternion &amp;rot, csVector3 &amp;pos, csQuaternion &amp;tangent, bool &amp;relative)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>a38fabf67a74710199e2a3c93ad9a191</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>5243357ae1e63c3a374fb2a5190adf53</anchor>
      <arglist>(iSkeletonBoneFactory *bone)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransformsCount</name>
      <anchor>336f2b33ad8cb43216ba2f802fae565a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetDuration</name>
      <anchor>933784e330b23c9d6fdaa9baff5696db</anchor>
      <arglist>(csTicks time)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>5e9cefe32fb886a56ea84fdae13eb1c2</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>da244061556658cd2e90e9423fe68082</anchor>
      <arglist>(iSkeletonBoneFactory *bone, csReversibleTransform &amp;transform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonSocket</name>
    <base>iBase</base>
    <filename>structiSkeletonSocket.html</filename>
    <member kind="function">
      <name>GetBone</name>
      <anchor>1e008a308f9fabedc8d69e93ed666cc6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFactory</name>
      <anchor>6a9a6f091c6869e120db4729589156f9</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullTransform</name>
      <anchor>deed22c0c4d9c01d89d92293573d1ed3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>48b676e44ecbe246c0d2677bcbe610ea</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSceneNode</name>
      <anchor>155675b1f49d56ed4e32d15e6354d595</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>d13a601a36a47041bda7d2c94a64e58a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetBone</name>
      <anchor>decbd94b5acc4275ce4269a92d2da96e</anchor>
      <arglist>(iSkeletonBone *bone)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>ebd6b4c7de93ba7ff2783e2836e0fd43</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSceneNode</name>
      <anchor>4d0d859a81c808a531cd2134ee23f576</anchor>
      <arglist>(iSceneNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>afba9adbda0222a083d537185c7e2383</anchor>
      <arglist>(const csReversibleTransform &amp;transform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonSocketFactory</name>
    <base>iBase</base>
    <filename>structiSkeletonSocketFactory.html</filename>
    <member kind="function">
      <name>GetBone</name>
      <anchor>556e21ff423ceefe7e783db085fdb122</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFullTransform</name>
      <anchor>5a3f6e4591ef19dc5c6d26e0349c2d40</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>3a6df303c1a2897196dd52b0c9119701</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>eb67ac12586746fedc2d6b11b06c2b0e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetBone</name>
      <anchor>f52dec138c6bc7944de6401fa6fccb38</anchor>
      <arglist>(iSkeletonBoneFactory *bone)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>079a1b2d5e2b7aaf12e9a49633bc1d5e</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>c5e103d080f89bee38783720f63bc2eb</anchor>
      <arglist>(const csReversibleTransform &amp;transform)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSkeletonUpdateCallback</name>
    <base>iBase</base>
    <filename>structiSkeletonUpdateCallback.html</filename>
    <member kind="function">
      <name>Execute</name>
      <anchor>9f82604a1af479163e926a7547ae2f21</anchor>
      <arglist>(iSkeleton *skeleton, const csTicks &amp;current_ticks)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysData</name>
    <base>iBase</base>
    <filename>structiSndSysData.html</filename>
    <member kind="function">
      <name>CreateStream</name>
      <anchor>9649a962f97c89be7b258132221aedb9</anchor>
      <arglist>(csSndSysSoundFormat *renderformat, int mode3d)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDataSize</name>
      <anchor>b4f0ff7f6a615d719dd9805e6e9d604a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDescription</name>
      <anchor>269a088f7de2a45ef0f642264361c305</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFormat</name>
      <anchor>08ea16b2b0fb87dc2b567c3ed83923bc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>1009e0db2f54977f926e7ca89e43c348</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>486e64102a45bfa7af5f4ca65976506e</anchor>
      <arglist>(iSndSysData, 0, 2, 0)</arglist>
    </member>
    <member kind="function">
      <name>SetDescription</name>
      <anchor>5b16ed0f929ce3e7045ceb24443fa397</anchor>
      <arglist>(const char *pDescription)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysEventRecorder</name>
    <base>iBase</base>
    <filename>structiSndSysEventRecorder.html</filename>
    <member kind="function">
      <name>RecordEvent</name>
      <anchor>fc9a739377b01e97ced0255e02ed2408</anchor>
      <arglist>(SndSysEventCategory, SndSysEventLevel, const char *Description,...)=0</arglist>
    </member>
    <member kind="function">
      <name>RecordEventV</name>
      <anchor>546fcfa85039f9014231ec4e67c22fd7</anchor>
      <arglist>(SndSysEventCategory, SndSysEventLevel, const char *Description, va_list)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>02f9fe30113326de1881a226dbd6dd82</anchor>
      <arglist>(iSndSysEventRecorder, 1, 0, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysListener</name>
    <base>iBase</base>
    <filename>structiSndSysListener.html</filename>
    <member kind="function">
      <name>GetDirection</name>
      <anchor>327e0daef96a31ccce146e851bfe946f</anchor>
      <arglist>(csVector3 &amp;Front, csVector3 &amp;Top)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDistanceFactor</name>
      <anchor>b78eb738cb9008f1d1b7d63a7c198dae</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>840efb5223b04101efb8f3d491b35c9d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRollOffFactor</name>
      <anchor>df2f7535137fe72edadbc98c840e5ed6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>a7b438341651f41bc9f377149eddf28f</anchor>
      <arglist>(iSndSysListener, 0, 0, 2)</arglist>
    </member>
    <member kind="function">
      <name>SetDirection</name>
      <anchor>e73df874e205fac1bc085b9efbcba181</anchor>
      <arglist>(const csVector3 &amp;Front, const csVector3 &amp;Top)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDistanceFactor</name>
      <anchor>205cbe65086c59021fb23f9fe9b5e540</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>3af592926139981a8950e46f05bbd66f</anchor>
      <arglist>(const csVector3 &amp;pos)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRollOffFactor</name>
      <anchor>1d237cc44ddd04ef5fddaa15fc8f5bea</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysLoader</name>
    <base>iBase</base>
    <filename>structiSndSysLoader.html</filename>
    <member kind="function">
      <name>LoadSound</name>
      <anchor>cf5c3cb32be18d8547f10ff2382c7819</anchor>
      <arglist>(iDataBuffer *buffer, const char *pDescription=0)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>bc63d716d291310f33bd2119f219c116</anchor>
      <arglist>(iSndSysLoader, 0, 3, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysManager</name>
    <base>iBase</base>
    <filename>structiSndSysManager.html</filename>
    <member kind="function">
      <name>CreateSound</name>
      <anchor>bdb4eb0e127b6ecb11a0579e356dc7b2</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSoundByName</name>
      <anchor>fbe96e58e35dd2a2945a59ba037c092e</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSound</name>
      <anchor>922735d07cc6ddb71201cfc106c5a971</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSoundCount</name>
      <anchor>3d881441567c90ccee1faa3813d34660</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSound</name>
      <anchor>5d4a9ce5ce0d9c053c6747741462f537</anchor>
      <arglist>(size_t idx)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSound</name>
      <anchor>09c171af13b47e55c57936086eaf0de7</anchor>
      <arglist>(iSndSysWrapper *snd)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSounds</name>
      <anchor>1fe5b91466d2e72a62ce6d6af4b4cd0c</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysRenderer</name>
    <base>iBase</base>
    <filename>structiSndSysRenderer.html</filename>
    <member kind="function">
      <name>CreateSource</name>
      <anchor>ed2a7ceb2d9091aadb5ad08071d368bc</anchor>
      <arglist>(iSndSysStream *stream)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateStream</name>
      <anchor>caa268b09a9445c2aba0930f77daadf9</anchor>
      <arglist>(iSndSysData *data, int mode3d)=0</arglist>
    </member>
    <member kind="function">
      <name>GetListener</name>
      <anchor>873692ff926d7a5f0cc7907362fd4813</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVolume</name>
      <anchor>d354568adb94ea5083376df6ee11e4ba</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterCallback</name>
      <anchor>2f23d0dafcf994412d42238a7d4fd9d8</anchor>
      <arglist>(iSndSysRendererCallback *pCallback)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveSource</name>
      <anchor>cfaa253caefe3d28d97e8b57467c2da9</anchor>
      <arglist>(iSndSysSource *source)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveStream</name>
      <anchor>f46d2b033aed3104f6b5ee9d6b64b087</anchor>
      <arglist>(iSndSysStream *stream)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>a62ab26e557a4c62ec04c05d1047b51e</anchor>
      <arglist>(iSndSysRenderer, 0, 2, 1)</arglist>
    </member>
    <member kind="function">
      <name>SetVolume</name>
      <anchor>62dc3ec887849261e9960074e227fcc9</anchor>
      <arglist>(float vol)=0</arglist>
    </member>
    <member kind="function">
      <name>UnregisterCallback</name>
      <anchor>9bf657f5ecd724dca5272ed1ff56e2ed</anchor>
      <arglist>(iSndSysRendererCallback *pCallback)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysRendererCallback</name>
    <base>iBase</base>
    <filename>structiSndSysRendererCallback.html</filename>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>2e6126070874e2583589bbc1f157d664</anchor>
      <arglist>(iSndSysRendererCallback, 0, 1, 0)</arglist>
    </member>
    <member kind="function">
      <name>SourceAddNotification</name>
      <anchor>b0ce2560be7efd19b583f083bc1869cd</anchor>
      <arglist>(iSndSysSource *pSource)=0</arglist>
    </member>
    <member kind="function">
      <name>SourceRemoveNotification</name>
      <anchor>f6808f7b7675bb9676281f0f274c81b5</anchor>
      <arglist>(iSndSysSource *pSource)=0</arglist>
    </member>
    <member kind="function">
      <name>StreamAddNotification</name>
      <anchor>133217a4f00122b82126841e80adabdb</anchor>
      <arglist>(iSndSysStream *pStream)=0</arglist>
    </member>
    <member kind="function">
      <name>StreamRemoveNotification</name>
      <anchor>8d76a0cd9aed3ff15737555199f4641b</anchor>
      <arglist>(iSndSysStream *pStream)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysRendererSoftware</name>
    <base>iBase</base>
    <filename>structiSndSysRendererSoftware.html</filename>
    <member kind="function">
      <name>AddOutputFilter</name>
      <anchor>0f4001a45bdd517080679a084355edf9</anchor>
      <arglist>(SndSysFilterLocation Location, iSndSysSoftwareOutputFilter *pFilter)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveOutputFilter</name>
      <anchor>1946cb5d31f51875dfe6ea9fcaeceeff</anchor>
      <arglist>(SndSysFilterLocation Location, iSndSysSoftwareOutputFilter *pFilter)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>a4a33a574fd8640fbf06c3c29fb2ba0c</anchor>
      <arglist>(iSndSysRendererSoftware, 0, 1, 1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSoftwareDriver</name>
    <base>iBase</base>
    <filename>structiSndSysSoftwareDriver.html</filename>
    <member kind="function">
      <name>Close</name>
      <anchor>8672b63ab959e11ac3cfdd3c3bdc3383</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>0e28e4cefd81d542c835e049f167b062</anchor>
      <arglist>(csSndSysRendererSoftware *renderer, csSndSysSoundFormat *requested_format)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>8b64c0dcc73b69b4121545db471e904b</anchor>
      <arglist>(iSndSysSoftwareDriver, 0, 2, 0)</arglist>
    </member>
    <member kind="function">
      <name>StartThread</name>
      <anchor>58b8ff222bd26c9a48f95e8645e1124c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>StopThread</name>
      <anchor>debfec9a334ac6dcec8c6291505f107b</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSoftwareFilter3D</name>
    <base>iBase</base>
    <filename>structiSndSysSoftwareFilter3D.html</filename>
    <member kind="function">
      <name>Apply</name>
      <anchor>1b62e07cc337ace50cfdac10dc452098</anchor>
      <arglist>(iSndSysSoftwareFilter3DProperties &amp;properties)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPtr</name>
      <anchor>98d70aa05f50b012237e9503d8d398a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>c61bd306c27b46f6c89cc5daf3d8b09e</anchor>
      <arglist>(iSndSysSoftwareFilter3D, 0, 1, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSoftwareFilter3DProperties</name>
    <filename>structiSndSysSoftwareFilter3DProperties.html</filename>
    <member kind="function">
      <name>buffer_samples</name>
      <anchor>89444178a6712de841e9ed6667e5b0b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>channel</name>
      <anchor>0cfc999ef6429d68ad98a7d963abb5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>clean_buffer</name>
      <anchor>c28b987ef095a0588442c31eccb9e6c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>closest_speaker_distance</name>
      <anchor>1ee8c5cb345342cb68ea7f4d887917f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>listener_parameters</name>
      <anchor>7ee1d6848f8bd77b8871fd78f4de6a19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>sound_format</name>
      <anchor>bc546aad5cdf2637a378607a97f85ef0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>source_parameters</name>
      <anchor>df50f4592c79f5b6b3b56654c0509d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>speaker_direction_cos</name>
      <anchor>3b17e63b28d7c57e0146d595f3e1ab8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>speaker_distance</name>
      <anchor>120b2a9ba6183c9af15e791f302af57d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>work_buffer</name>
      <anchor>5e78cedb36d2c72bd1470381ee0063a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSoftwareOutputFilter</name>
    <base>iBase</base>
    <filename>structiSndSysSoftwareOutputFilter.html</filename>
    <member kind="function">
      <name>DeliverData</name>
      <anchor>964f83ff9daf988448c053d40e999043</anchor>
      <arglist>(const csSoundSample *SampleBuffer, size_t Frames)=0</arglist>
    </member>
    <member kind="function">
      <name>FormatNotify</name>
      <anchor>97a74335a0e8bbce7ca69e33a3791dcc</anchor>
      <arglist>(const csSndSysSoundFormat *pSoundFormat)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>c6d7f3620c562e8b840ccb332f3249ec</anchor>
      <arglist>(iSndSysSoftwareOutputFilter, 0, 1, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSource</name>
    <base>iBase</base>
    <filename>structiSndSysSource.html</filename>
    <member kind="function">
      <name>AddOutputFilter</name>
      <anchor>2cd2c70891c9454c558b2921dbc83da6</anchor>
      <arglist>(SndSysFilterLocation Location, iSndSysSoftwareOutputFilter *pFilter)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPtr</name>
      <anchor>ebb47e91d376e6a997fde48f90c5efb5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStream</name>
      <anchor>9d1eed578947d1ac3a1df2236ca6ebd3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVolume</name>
      <anchor>7971c3feebb60c505967a314ce090eaa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveOutputFilter</name>
      <anchor>1ecfaa1fe0f14c9fcde841814ce3d81b</anchor>
      <arglist>(SndSysFilterLocation Location, iSndSysSoftwareOutputFilter *pFilter)=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>7441c047b4990c7956c6601ce25f5e53</anchor>
      <arglist>(iSndSysSource, 2, 0, 0)</arglist>
    </member>
    <member kind="function">
      <name>SetVolume</name>
      <anchor>f0fc98916ff90fbb56772ed8d8945530</anchor>
      <arglist>(float volume)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSourceSoftware</name>
    <base>iSndSysSource</base>
    <filename>structiSndSysSourceSoftware.html</filename>
    <member kind="function">
      <name>MergeIntoBuffer</name>
      <anchor>036cec3e3c94cbb0d5b6d47fc8e78186</anchor>
      <arglist>(csSoundSample *frame_buffer, size_t frame_count)=0</arglist>
    </member>
    <member kind="function">
      <name>ProcessOutputFilters</name>
      <anchor>6829bcef9b7d76b43dae2569341ab0e4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>0df12cc19fcdb0a24208bc89b42614c5</anchor>
      <arglist>(iSndSysSourceSoftware, 2, 0, 0)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysSourceSoftware3D</name>
    <base>iSndSysSourceSoftware</base>
    <filename>structiSndSysSourceSoftware3D.html</filename>
    <member kind="function">
      <name>GetDirection</name>
      <anchor>02d4b7d680c76777d27a6e1e439844c6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDirectionalRadiation</name>
      <anchor>3128def3ae32de24ebe145df7fe08da1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaximumDistance</name>
      <anchor>d1ea52a8b1056cf873ac46b89a2bb50e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMinimumDistance</name>
      <anchor>e454ca19b9c61840a5b81c010f2b217f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>a11fdc79aee9e45dcd654c3e18870f2c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>da92136a00ae0d896c8e83bfd2741438</anchor>
      <arglist>(iSndSysSourceSoftware3D, 2, 0, 0)</arglist>
    </member>
    <member kind="function">
      <name>SetDirection</name>
      <anchor>07bef279fb61a12620ebaefcdb5d85fc</anchor>
      <arglist>(csVector3 dir)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDirectionalRadiation</name>
      <anchor>9b4e88c26c6a2a7c030eb73b2e85c2d6</anchor>
      <arglist>(float rad)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaximumDistance</name>
      <anchor>ade044f239a6535a4926ab437d236848</anchor>
      <arglist>(float distance)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMinimumDistance</name>
      <anchor>75b262db0ef460d8b5f70d42d51a698a</anchor>
      <arglist>(float distance)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>fb7435ab41ff6a021877436919399ea7</anchor>
      <arglist>(csVector3 pos)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysStream</name>
    <base>iBase</base>
    <filename>structiSndSysStream.html</filename>
    <member kind="function">
      <name>AdvancePosition</name>
      <anchor>f1e3e9214dbf32b2a3c973173a88d68e</anchor>
      <arglist>(size_t frame_delta)=0</arglist>
    </member>
    <member kind="function">
      <name>Get3dMode</name>
      <anchor>40af86fd33958cf14e0ff1e494966ec5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAutoUnregister</name>
      <anchor>ba67efcf175ff16e94af86be47afc472</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAutoUnregisterRequested</name>
      <anchor>68af5f2a1f7e4bbbad3c260f8bf3ac78</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDataPointers</name>
      <anchor>19bec601b069a74920a2df68df96a808</anchor>
      <arglist>(size_t *position_marker, size_t max_requested_frames, void **buffer1, size_t *buffer1_frames, void **buffer2, size_t *buffer2_frames)=0</arglist>
    </member>
    <member kind="function">
      <name>GetDescription</name>
      <anchor>f5a3d327ccf46f56aa014e977dfac1ed</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>44e60d6dbbfb761a33527e1c786d9294</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLoopState</name>
      <anchor>c472f9baf3a13a3a5a3d3e17df247b6e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPauseState</name>
      <anchor>5a1468bfd07840c8dfa341821cd69ec4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPlayRatePercent</name>
      <anchor>bf70b7f3a8229af62d20d9538fb6842b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPosition</name>
      <anchor>c86197b837a2e53ccfd46a26948c2207</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRenderedFormat</name>
      <anchor>d66feda8245c8d13d6ea5803ed9883ef</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>InitializeSourcePositionMarker</name>
      <anchor>c46bf5f08884d66a679bc313300b75f5</anchor>
      <arglist>(size_t *position_marker)=0</arglist>
    </member>
    <member kind="function">
      <name>Pause</name>
      <anchor>3e92be14cdad9c61397d401abb0c5d56</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ProcessNotifications</name>
      <anchor>3749cf5a883a62772a4f833d5e34e0a5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterCallback</name>
      <anchor>d976380424b7d0bfe29708bf1fa81483</anchor>
      <arglist>(iSndSysStreamCallback *pCallback)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterFrameNotification</name>
      <anchor>4eff35dfab4aa95d24c37bb0eded202a</anchor>
      <arglist>(size_t frame_number)=0</arglist>
    </member>
    <member kind="function">
      <name>ResetPosition</name>
      <anchor>61bf6816d14a6648ad071031fba4e24b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>a13945464cdd96a0d247ebdabca34c50</anchor>
      <arglist>(iSndSysStream, 0, 2, 1)</arglist>
    </member>
    <member kind="function">
      <name>SetAutoUnregister</name>
      <anchor>b2202b3acd98660da78b398e7737cb54</anchor>
      <arglist>(bool autounreg)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLoopState</name>
      <anchor>d4b7bd25093db790232d998ea531a00b</anchor>
      <arglist>(int loopstate)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPlayRatePercent</name>
      <anchor>e3f0248eac62c91ab72f981bffd1a819</anchor>
      <arglist>(int percent)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPosition</name>
      <anchor>f783e03ac79634de917d8c19ef4e5aa3</anchor>
      <arglist>(size_t newposition)=0</arglist>
    </member>
    <member kind="function">
      <name>Unpause</name>
      <anchor>9ef483cfe6b45d306ab87549ae19b99e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>UnregisterCallback</name>
      <anchor>4d68fe9725aad5f598ac3abf5e37b716</anchor>
      <arglist>(iSndSysStreamCallback *pCallback)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysStreamCallback</name>
    <base>iBase</base>
    <filename>structiSndSysStreamCallback.html</filename>
    <member kind="function">
      <name>SCF_INTERFACE</name>
      <anchor>9639a6fefa638b7941e9f20cbf5d9bff</anchor>
      <arglist>(iSndSysStreamCallback, 0, 1, 0)</arglist>
    </member>
    <member kind="function">
      <name>StreamFrameNotification</name>
      <anchor>8da76d7d0c9eddce12f259fe568b0266</anchor>
      <arglist>(size_t frame_number)=0</arglist>
    </member>
    <member kind="function">
      <name>StreamLoopNotification</name>
      <anchor>490d19e88cd1b0a9a885a7018a05e9fa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>StreamPauseNotification</name>
      <anchor>361d050027df9f95b97a706526ea423d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>StreamUnpauseNotification</name>
      <anchor>5eea467a7dc9cd6931f5ece3df2eb812</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSndSysWrapper</name>
    <base>iBase</base>
    <filename>structiSndSysWrapper.html</filename>
    <member kind="function">
      <name>GetData</name>
      <anchor>2f7532afc55a16cfd65341ff5807e2a0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetStream</name>
      <anchor>f8d42953ee7a22c57731709a57cb2e55</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>64b7634212b7b50d252563cadf0dca80</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetData</name>
      <anchor>5f29a1ded133b7ac34933990559369fc</anchor>
      <arglist>(iSndSysData *data)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStream</name>
      <anchor>fa31f69ca256e649353bcb4e9744c68d</anchor>
      <arglist>(iSndSysStream *stream)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSprite2DFactoryState</name>
    <base>iBase</base>
    <filename>structiSprite2DFactoryState.html</filename>
    <member kind="function">
      <name>CreateUVAnimation</name>
      <anchor>8a07689d36a6e65865555a2df0ed42d3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUVAnimation</name>
      <anchor>bc8a26c293e9ee1ff3aa25e68ee1c6a8</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUVAnimation</name>
      <anchor>30e68fbb58c03b8ea2d460a8c62a0507</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUVAnimationCount</name>
      <anchor>1ebf54d13bcf22ebb5602b9ba4b32926</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasLighting</name>
      <anchor>2966e703c6374675a571acbcf6968372</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>RemoveUVAnimation</name>
      <anchor>502e2b0aa1f865f6cc2657bf74efd466</anchor>
      <arglist>(iSprite2DUVAnimation *anim)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLighting</name>
      <anchor>94375a2f3a89cd448abfc56deb4c0ed5</anchor>
      <arglist>(bool l)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSprite2DState</name>
    <base>iSprite2DFactoryState</base>
    <filename>structiSprite2DState.html</filename>
    <member kind="function">
      <name>CreateRegularVertices</name>
      <anchor>7df839efeaa99dbf6f170159cfb38182</anchor>
      <arglist>(int n, bool setuv)=0</arglist>
    </member>
    <member kind="function">
      <name>GetUVAnimation</name>
      <anchor>7b12f4254ea475d641be42f14fc149d1</anchor>
      <arglist>(int idx, int &amp;style, bool &amp;loop) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUVAnimation</name>
      <anchor>e0931f0a44951a457e6ac57f26a02ff1</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUVAnimation</name>
      <anchor>7ae4733ee58eb9f0debea30fd26c6d6f</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>58f8cbeae35835d23071b8576ecc81d1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PlayUVAnimation</name>
      <anchor>1d475615b950bb20f32a0684bdb8a8de</anchor>
      <arglist>(int idx, int style, bool loop)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUVAnimation</name>
      <anchor>8d745ff8db3fada21b99d02c604743e8</anchor>
      <arglist>(const char *name, int style, bool loop)=0</arglist>
    </member>
    <member kind="function">
      <name>StopUVAnimation</name>
      <anchor>a661948505328f29b9541d70ab6fb735</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSprite2DUVAnimation</name>
    <base>iBase</base>
    <filename>structiSprite2DUVAnimation.html</filename>
    <member kind="function">
      <name>CreateFrame</name>
      <anchor>64d438c46eeb342c9c1f880bca39df8f</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrame</name>
      <anchor>f98be628ce09c91a3422ed07b206ffe9</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrame</name>
      <anchor>16582f5f22d733d7401f82fe2c9d3b7f</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>99e6b07d24efed8ca7085e3ac1c026f4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>b8ffbe9d21370d3221ff568de7fc3489</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>MoveFrame</name>
      <anchor>9abb5d0fd3cdc9dd415464728ebafc99</anchor>
      <arglist>(int frame, int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveFrame</name>
      <anchor>a0ce8606892269d605b57e28504a8082</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>3b9b447adc59726fe98f58c62b01765e</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSprite2DUVAnimationFrame</name>
    <base>iBase</base>
    <filename>structiSprite2DUVAnimationFrame.html</filename>
    <member kind="function">
      <name>GetDuration</name>
      <anchor>efc344bbac774b86d00862084f6fee9d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>f807732f5121087043894a6857c9e11d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetUVCoo</name>
      <anchor>629b63e2fadc846142ce7173f27de214</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUVCoo</name>
      <anchor>58c81c0a0f1996d54ebf1dff956c8602</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetUVCount</name>
      <anchor>6b50e4ff7f9706e4dbc31f9dca53bbf5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveUV</name>
      <anchor>de7a3a30ebb414156466a7a5c893fa25</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDuration</name>
      <anchor>d0d8f78a936d91f90b677c1d7b1a837a</anchor>
      <arglist>(int duration)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFrameData</name>
      <anchor>dcaf8665094b027c2670bfc6cfaf887e</anchor>
      <arglist>(const char *name, int duration, int num, float *uv)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>b2d4e7909b99ffad1731280e70bc1db0</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUV</name>
      <anchor>723fe62add35db56721e7049b4481b2d</anchor>
      <arglist>(int idx, float u, float v)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSprite3DFactoryState</name>
    <base>iBase</base>
    <filename>structiSprite3DFactoryState.html</filename>
    <member kind="function">
      <name>AddAction</name>
      <anchor>01069f0c1da4ea688b72b97fc640f369</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>AddFrame</name>
      <anchor>0408a0a508eb2b0439ea74c10879a193</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>AddSocket</name>
      <anchor>f5e6702f4559f664af252a277824b5a3</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>AddTriangle</name>
      <anchor>aff49928764e3dab400f97b9043fdcf4</anchor>
      <arglist>(int a, int b, int c)=0</arglist>
    </member>
    <member kind="function">
      <name>AddVertices</name>
      <anchor>d92c64d94113d29a5d8d281b067193ee</anchor>
      <arglist>(int num)=0</arglist>
    </member>
    <member kind="function">
      <name>EnableTweening</name>
      <anchor>e55678e2c847fc53442ba557d10f1891</anchor>
      <arglist>(bool en)=0</arglist>
    </member>
    <member kind="function">
      <name>FindAction</name>
      <anchor>0857060e18ada48d0be21974c1611b38</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindFrame</name>
      <anchor>30e10eb4cb0b8c8091c3d45f9b422121</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>28005b6a544647644449e5cfb4de7d04</anchor>
      <arglist>(iMeshWrapper *mesh) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>1297a02bb96c527e3b8ebb3e6e14ea17</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetAction</name>
      <anchor>fc352c722f68ade88598b12bee3376e8</anchor>
      <arglist>(int No) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetActionCount</name>
      <anchor>cd341a04820f158b0429c8924f9bbbf7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFirstAction</name>
      <anchor>f8f3233319f60b5abeb198ce4394b7ac</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFrame</name>
      <anchor>cf5758e7532e209e2f15de3e21c80ae4</anchor>
      <arglist>(int f) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>19536010457ce71cb8ce569d5400fafb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightingQuality</name>
      <anchor>c78e782e6c0c7d8b5b47b5d6c38a1ff5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightingQualityConfig</name>
      <anchor>90c8123600d424da374501159a46f773</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLodLevelConfig</name>
      <anchor>c65b98d4d98f285c2b6fdcedd6996e60</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNormal</name>
      <anchor>6f65ab92628aedae0352069da64b7b95</anchor>
      <arglist>(int frame, int vertex) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNormals</name>
      <anchor>e747c7b09acd7104420d502a21c74bf4</anchor>
      <arglist>(int frame) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSocket</name>
      <anchor>933db382be4e8fe79f88ff36793dd88b</anchor>
      <arglist>(int f) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSocketCount</name>
      <anchor>ab271c40fa97212260673e956b6afc7b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTexel</name>
      <anchor>3cf138d9843f4487d92a34868e8ed7c9</anchor>
      <arglist>(int frame, int vertex) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTexels</name>
      <anchor>4ce4e806055d2aa240ba58cffb088cc9</anchor>
      <arglist>(int frame) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangle</name>
      <anchor>f923572f3778245e41bd4c15c16062a1</anchor>
      <arglist>(int x) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleCount</name>
      <anchor>8cdf6be1ac4abb7030f068875ab94322</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangles</name>
      <anchor>0e639dc72f8f85aad5292f7bf72aa1b6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>ac57e9296f6b2672e025c6e632b60e53</anchor>
      <arglist>(int frame, int vertex) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>d0f5c57f0a6cad9dd69801d90adba427</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>d5b5fad16bc12d9e6e31b472dd3a0dca</anchor>
      <arglist>(int frame) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsTweeningEnabled</name>
      <anchor>aa60e86e9ac076e93e35e604d56f464e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>MergeNormals</name>
      <anchor>67d07689d5fa427ae1598e3a5ecb2516</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>MergeNormals</name>
      <anchor>86035974c9894d4bb64e02a233ef055b</anchor>
      <arglist>(int base)=0</arglist>
    </member>
    <member kind="function">
      <name>MergeNormals</name>
      <anchor>0c05d41d54bf122dfea06ee41c2d87ab</anchor>
      <arglist>(int base, int frame)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightingQuality</name>
      <anchor>abdc8e9cdfd56cb1ea38c902b907b111</anchor>
      <arglist>(int qual)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightingQualityConfig</name>
      <anchor>8c9ba02c0d60526d1f20cda22734f0ec</anchor>
      <arglist>(int qual)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLodLevelConfig</name>
      <anchor>042a8e8e92327e57f75eb4910e72feec</anchor>
      <arglist>(int config_flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetNormal</name>
      <anchor>11fba76e42e27e82af9c6083e46bdf46</anchor>
      <arglist>(int frame, int vertex, const csVector3 &amp;Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetNormals</name>
      <anchor>3690100ed95893fed3be7c7e5e8ed068</anchor>
      <arglist>(csVector3 const *norms, int frame)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTexel</name>
      <anchor>22fa5bbd696cee11641b359d42ca29d0</anchor>
      <arglist>(int frame, int vertex, const csVector2 &amp;Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTexels</name>
      <anchor>e5bd0e3b4f787c26cda603c7aafb59d0</anchor>
      <arglist>(csVector2 const *tex, int frame)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTriangleCount</name>
      <anchor>e455cf731f3a66a85fbfeff6b16a4ba6</anchor>
      <arglist>(int count)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTriangles</name>
      <anchor>e5052870c1130e8c33c80a9f8391ee52</anchor>
      <arglist>(csTriangle const *trigs, int count)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVertex</name>
      <anchor>15247846fa84d50c0dfa5292491011b5</anchor>
      <arglist>(int frame, int vertex, const csVector3 &amp;Value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVertices</name>
      <anchor>f531b9c998f974d13f05eae85904d9a0</anchor>
      <arglist>(csVector3 const *vert, int frame)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSprite3DState</name>
    <base>iBase</base>
    <filename>structiSprite3DState.html</filename>
    <member kind="function">
      <name>EnableTweening</name>
      <anchor>04b59a3bbedebe1c8398fb90c5f574f7</anchor>
      <arglist>(bool en)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>bc54eb503c20e07138812cef8a474a28</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>a609ba0277bdef4d2a1008bd4b8e9531</anchor>
      <arglist>(iMeshWrapper *mesh) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurAction</name>
      <anchor>c355b5c90a671bd7bb4c564a56613543</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCurFrame</name>
      <anchor>c20e17c5c7b4cbd636f4c19b82bacba6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>59ae625ed953735af7e030098c729deb</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightingQuality</name>
      <anchor>2b4f30d2327aaa744ffb780c20b500e0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLightingQualityConfig</name>
      <anchor>397c88f2912c1827178e97f1e459151f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLodLevelConfig</name>
      <anchor>abaa81f34b39bfde7ecad1e3c826b42b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>3acd4e3aa8955c10e6adf70ebc2c4cb1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetReverseAction</name>
      <anchor>95f07c9d1972afcd0b75d74015e223a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsLighting</name>
      <anchor>13beb65607c68ddd741f945eb645ff9a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsLodEnabled</name>
      <anchor>c4044db8b20dae41a6d8b6244e32a05e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsTweeningEnabled</name>
      <anchor>c68bc001cd3578b26074e49926ed30e0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>PropagateAction</name>
      <anchor>7fe2441bd9a8c3d10c1a3ebb966ce4c1</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAction</name>
      <anchor>7e565179376964039b5ab11e782e2c82</anchor>
      <arglist>(int index, bool loop=true, float speed=1)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAction</name>
      <anchor>4b0d9695cf0f4206fd8f00b9b11bb266</anchor>
      <arglist>(const char *name, bool loop=true, float speed=1)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFrame</name>
      <anchor>a86a71fdc8dea37867e40275395f8212</anchor>
      <arglist>(int f)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLighting</name>
      <anchor>2f42e07b016184ce5366051e4b703755</anchor>
      <arglist>(bool l)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLightingQualityConfig</name>
      <anchor>7b0d2d62912721a523236aa1e70ad1c7</anchor>
      <arglist>(int config_flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLocalLightingQuality</name>
      <anchor>c1cc04a1c72b532f40d6e16fd2a610e2</anchor>
      <arglist>(int lighting_quality)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLodLevelConfig</name>
      <anchor>f06df0fb63889ba88754f961b206c194</anchor>
      <arglist>(int config_flag)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>7ef155eb3691ac41fa903b2c747a883e</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOverrideAction</name>
      <anchor>5979edbeda9ea282cf915754cd0fa47f</anchor>
      <arglist>(int index, float speed=1)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOverrideAction</name>
      <anchor>279709306f8a7d73884f18f2fa65a2ce</anchor>
      <arglist>(const char *name, float speed=1)=0</arglist>
    </member>
    <member kind="function">
      <name>SetReverseAction</name>
      <anchor>a7695d886e63bfe83a09df5b939b3830</anchor>
      <arglist>(bool reverse)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSingleStepAction</name>
      <anchor>9e8430cbbd189c9ba5ba40d4821df10b</anchor>
      <arglist>(bool singlestep)=0</arglist>
    </member>
    <member kind="function">
      <name>UnsetTexture</name>
      <anchor>0f4a7e5d65d8fc24ff5728425db8a339</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSpriteAction</name>
    <base>iBase</base>
    <filename>structiSpriteAction.html</filename>
    <member kind="function">
      <name>AddFrame</name>
      <anchor>54ac2bed5f4e3380b019e218cbe63842</anchor>
      <arglist>(iSpriteFrame *frame, int delay, float displacement)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrame</name>
      <anchor>e52d3cfc6ae34d12f5fa001fcd8ef284</anchor>
      <arglist>(int f)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameCount</name>
      <anchor>41ab190feeb5574b5e238e1f240fee04</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameDelay</name>
      <anchor>a08bebbe4f5e2ce6fc0a6a72d9807e97</anchor>
      <arglist>(int f)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFrameDisplacement</name>
      <anchor>1cd5417c666c0f595f96f3128eae25a6</anchor>
      <arglist>(int f)=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>dc6515595612f080e02e55e02e94347e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetNextFrame</name>
      <anchor>8efc8d0c3f085df2208fc66c0b70bff4</anchor>
      <arglist>(int f)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>a6abdb9b3b1c1ec7a70be3feeabbac05</anchor>
      <arglist>(char const *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSpriteCal3DFactoryState</name>
    <base>iBase</base>
    <filename>structiSpriteCal3DFactoryState.html</filename>
    <member kind="function">
      <name>AddCoreMaterial</name>
      <anchor>018798fba6b374800419e05bc30059fe</anchor>
      <arglist>(iMaterialWrapper *mat)=0</arglist>
    </member>
    <member kind="function">
      <name>AddMorphAnimation</name>
      <anchor>8d0087c6f57f4dd48168fa192a0c1326</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>AddMorphTarget</name>
      <anchor>77a1c0567cee8b66af6db775b815d6fb</anchor>
      <arglist>(int morphanimation_index, const char *mesh_name, const char *morphtarget_name)=0</arglist>
    </member>
    <member kind="function">
      <name>AddSocket</name>
      <anchor>09d9b8459a3e275e94d06d7e1d64de87</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>BindMaterials</name>
      <anchor>291540e54cdd3f185ad121697e9a34bc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CalculateAllBoneBoundingBoxes</name>
      <anchor>38a8d5377a7635dc06b1bc23824da677</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Create</name>
      <anchor>41ddc479608341a129d540057cc07b5c</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMeshName</name>
      <anchor>994a58268fd30d7f6822d1532f5b12f9</anchor>
      <arglist>(const char *meshName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindMorphAnimationName</name>
      <anchor>cf1af3b3204f8710c2e99b7e52c93c79</anchor>
      <arglist>(const char *meshName)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>b69aebd8478eab79676e53085942a971</anchor>
      <arglist>(iMeshWrapper *mesh) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>f7a72e51546eaec00f5d4df73cf4d83d</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCal3DCoreModel</name>
      <anchor>f30e4b77917acc0636229c6896cae71c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultMaterial</name>
      <anchor>490e7e849fb65a5aa8bb1a3bf433af8b</anchor>
      <arglist>(const char *meshName)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshCount</name>
      <anchor>59c661dacef0e3e641d6d5504a8e3308</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshName</name>
      <anchor>9f82a9ddd58e8745f215520d929fb2c5</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMorphAnimationCount</name>
      <anchor>eba4a74009d80f9e8631cfb29592d5bb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMorphAnimationName</name>
      <anchor>e045e77a262f66a7207953eeef9b60d5</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMorphTargetCount</name>
      <anchor>949971cf2026ff06fecac08592e08b42</anchor>
      <arglist>(int mesh_id)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSocket</name>
      <anchor>027e62ee297701a08d043923a1db69a6</anchor>
      <arglist>(int f) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSocketCount</name>
      <anchor>085d52f8c14390e546c79fe10f6ea4bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsMeshDefault</name>
      <anchor>9e65f70f6d400f716f68bfccb3e762ce</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadCoreAnimation</name>
      <anchor>c6a127146394f5b7464990756e818c00</anchor>
      <arglist>(iVFS *vfs, const char *filename, const char *name, int type, float base_velocity, float min_velocity, float max_velocity, int min_interval, int max_interval, int idle_pct, bool lock)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadCoreMesh</name>
      <anchor>54b3f8e103b009861543a3ba219bfe91</anchor>
      <arglist>(iVFS *vfs, const char *filename, const char *name, bool attach, iMaterialWrapper *defmat)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadCoreMorphTarget</name>
      <anchor>2e7e3f9e8b96ceb188fcfab4f16ecab8</anchor>
      <arglist>(iVFS *vfs, int mesh_index, const char *filename, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadCoreSkeleton</name>
      <anchor>d066e0596f6d36a14e50fe7ad86af22a</anchor>
      <arglist>(iVFS *vfs, const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterAnimCallback</name>
      <anchor>562565977a59eef72d46632066124575</anchor>
      <arglist>(const char *anim, CalAnimationCallback *callback, float min_interval)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAnimCallback</name>
      <anchor>98852ec2f62c8cb61cb38768f25c66af</anchor>
      <arglist>(const char *anim, CalAnimationCallback *callback)=0</arglist>
    </member>
    <member kind="function">
      <name>ReportLastError</name>
      <anchor>e23d722258abe753b5b08073d68721b4</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RescaleFactory</name>
      <anchor>9339e3fa5c01f476dbef4c4e474e07d1</anchor>
      <arglist>(float factor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetBasePath</name>
      <anchor>5c6a8aeaa3d05e3492422d7523dd9c0c</anchor>
      <arglist>(const char *path)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLoadFlags</name>
      <anchor>7c225c3fbc2dc73435f28fd36802b2f7</anchor>
      <arglist>(int flags)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSpriteCal3DSocket</name>
    <base>iSpriteSocket</base>
    <filename>structiSpriteCal3DSocket.html</filename>
    <member kind="function">
      <name>AttachSecondary</name>
      <anchor>607993f4220acbb33a6698d230b69bd8</anchor>
      <arglist>(iMeshWrapper *, csReversibleTransform)=0</arglist>
    </member>
    <member kind="function">
      <name>DetachSecondary</name>
      <anchor>922ece2b163fc55f5a623ee6acc29dec</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>DetachSecondary</name>
      <anchor>4beaecc156a7ff945839a985735b1849</anchor>
      <arglist>(const char *mesh_name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSecondary</name>
      <anchor>7cd851b2a4b2f525288aef6982dfc6ba</anchor>
      <arglist>(const char *mesh_name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshIndex</name>
      <anchor>cfcccf8df26389cae6218ae753c220e5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSecondaryCount</name>
      <anchor>26dd8b922281ba7d96b92a2535599469</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSecondaryMesh</name>
      <anchor>5fbf212a3ba579cbf7640c6c5d9fb324</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSecondaryTransform</name>
      <anchor>b0d9befa165036a2208ae5db67ea881d</anchor>
      <arglist>(size_t index)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSubmeshIndex</name>
      <anchor>1673e10d578f38a79892faa5e18e6b11</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTransform</name>
      <anchor>139d65e4ce8cbb59ee4956ec64c7e85f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetMeshIndex</name>
      <anchor>b20748624852199b5cdc70982df27607</anchor>
      <arglist>(int m_index)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSecondaryTransform</name>
      <anchor>7cb1dafcfd7f2878a199470bf1846a07</anchor>
      <arglist>(size_t index, csReversibleTransform)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSubmeshIndex</name>
      <anchor>5735a7254fb7332abdb2eb90335b0529</anchor>
      <arglist>(int subm_index)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTransform</name>
      <anchor>7423f898a893da50f49c63edf2a2faa1</anchor>
      <arglist>(const csReversibleTransform &amp;trans)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSpriteCal3DState</name>
    <base>iBase</base>
    <filename>structiSpriteCal3DState.html</filename>
    <member kind="function">
      <name>@72</name>
      <anchor>ddf4f773d1b50b6b9c0473df95461c60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddAnimCycle</name>
      <anchor>90410191d214a43b06e72ea988afecd9</anchor>
      <arglist>(int idx, float weight, float delay)=0</arglist>
    </member>
    <member kind="function">
      <name>AddAnimCycle</name>
      <anchor>62a9b15d68e2f7be563aa4bff759f5d4</anchor>
      <arglist>(const char *name, float weight, float delay)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachCoreMesh</name>
      <anchor>5fd8136d1a8c3955c1938eaa9e1f7ff6</anchor>
      <arglist>(int mesh_id, iMaterialWrapper *iMatWrap=0)=0</arglist>
    </member>
    <member kind="function">
      <name>AttachCoreMesh</name>
      <anchor>5060cd906d98944909f2c5ed51ecf8d5</anchor>
      <arglist>(const char *meshname)=0</arglist>
    </member>
    <member kind="function">
      <name>BlendMorphTarget</name>
      <anchor>323a39fe4c904c1d2e5edf6a8b8f1e70</anchor>
      <arglist>(int morph_animation_id, float weight, float delay)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearAllAnims</name>
      <anchor>24153ef0c4dcb74734fc2214e50c971c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ClearAnimCycle</name>
      <anchor>03b83b00a8b0b970dee8492486d284e5</anchor>
      <arglist>(const char *name, float delay)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearAnimCycle</name>
      <anchor>b51cc85390a82992f8b5796acde2d501</anchor>
      <arglist>(int idx, float delay)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearMorphTarget</name>
      <anchor>75f86819f0e84788abfcafb7e2a66ce0</anchor>
      <arglist>(int morph_animation_id, float delay)=0</arglist>
    </member>
    <member kind="function">
      <name>DetachCoreMesh</name>
      <anchor>20531903c2559d854e80c4aa09b777d2</anchor>
      <arglist>(int mesh_id)=0</arglist>
    </member>
    <member kind="function">
      <name>DetachCoreMesh</name>
      <anchor>0266bfbee2bf470a4c083e37eafb9038</anchor>
      <arglist>(const char *meshname)=0</arglist>
    </member>
    <member kind="function">
      <name>FindAnim</name>
      <anchor>737375a5cd381c2153d0a6f1e2a6d9e0</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>5d28b241512ea1fdcd236f8aeeb9500e</anchor>
      <arglist>(const char *name) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindSocket</name>
      <anchor>a71003dc31829e9eef67698b4ad30c08</anchor>
      <arglist>(iMeshWrapper *mesh) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetActiveAnimCount</name>
      <anchor>fee2b096ae25f268808eeff0bb809852</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetActiveAnims</name>
      <anchor>e4cd10ac8471ac93055847284b02fe47</anchor>
      <arglist>(csSpriteCal3DActiveAnim *buffer, size_t max_length)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimationDuration</name>
      <anchor>60a9156819c5f6f01a5c3ac001f49779</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimationTime</name>
      <anchor>9d1105569a85e3361093e9cdad6ab7d0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimCount</name>
      <anchor>515b44b975f6aeebba56d066a9b7d938</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimName</name>
      <anchor>52d8d446625ece257dbc13407e2b8611</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAnimType</name>
      <anchor>feed57174030d1d09392084b6f9789b3</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCal3DModel</name>
      <anchor>29273572b279362d4594b15752ad9afa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCoreMeshShaderVarContext</name>
      <anchor>5f2d1e4020c79686025ce2ede9fdba1e</anchor>
      <arglist>(const char *meshName)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTimeFactor</name>
      <anchor>f1f35b61d306fb6d0adb70855fa63dc0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetActiveAnims</name>
      <anchor>9c79cff83b066c162e7025d275c80aae</anchor>
      <arglist>(const csSpriteCal3DActiveAnim *buffer, size_t anim_count)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimAction</name>
      <anchor>dc1b100569b8a1c36b6e625d5cf014de</anchor>
      <arglist>(int idx, float delayIn, float delayOut)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimAction</name>
      <anchor>b218299f41564a42a7b9f78697d4cbdc</anchor>
      <arglist>(const char *name, float delayIn, float delayOut)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimationTime</name>
      <anchor>0f17cb69b3c8a85988eeb6f42dbc2d23</anchor>
      <arglist>(float animationTime)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimCycle</name>
      <anchor>bb3f33573639afcb9e16f8cc9fb2895f</anchor>
      <arglist>(int idx, float weight)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimCycle</name>
      <anchor>9141a64978424b91af38149f40562087</anchor>
      <arglist>(const char *name, float weight)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAnimTimeUpdateHandler</name>
      <anchor>463b26b65618df436ef13ee718fea3e1</anchor>
      <arglist>(iAnimTimeUpdateHandler *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDefaultIdleAnim</name>
      <anchor>6bd5cc46711471023cea0149aa96ca87</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLOD</name>
      <anchor>a477896cc2f64d4b9cc277ad6a200b5e</anchor>
      <arglist>(float lod)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterial</name>
      <anchor>4e344c90229d6b457f8cd5ca4c52e0b6</anchor>
      <arglist>(const char *mesh_name, iMaterialWrapper *mat)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTimeFactor</name>
      <anchor>f66d8ed78975947b1ff4d15f0581f2e4</anchor>
      <arglist>(float timeFactor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUserData</name>
      <anchor>201bbcffcb42363867663facea2c24e3</anchor>
      <arglist>(void *data)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVelocity</name>
      <anchor>e0409a4ef4991e26b35a26263c706210</anchor>
      <arglist>(float vel, csRandomGen *rng=0)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSpriteFrame</name>
    <base>iBase</base>
    <filename>structiSpriteFrame.html</filename>
    <member kind="function">
      <name>GetName</name>
      <anchor>335bed32b96c52b7353b4be442d6431d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>912c8dfe0e65b00e83e7ed4c01d3cc34</anchor>
      <arglist>(char const *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSpriteSocket</name>
    <base>iBase</base>
    <filename>structiSpriteSocket.html</filename>
    <member kind="function">
      <name>GetMeshWrapper</name>
      <anchor>ccdb40ee1a0b87ccea864c010ea9e927</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>427abf5ddb91a4df27462faeb35152d3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTriangleIndex</name>
      <anchor>d52bf08876ed41950a34f5483521f4a8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetMeshWrapper</name>
      <anchor>2a9722a6467d9ad53aa2754706919242</anchor>
      <arglist>(iMeshWrapper *mesh)=0</arglist>
    </member>
    <member kind="function">
      <name>SetName</name>
      <anchor>2cb7aa677b85bea4dbb2d4660e4a6c89</anchor>
      <arglist>(char const *)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTriangleIndex</name>
      <anchor>4b971fa642278446e856b66ac1962065</anchor>
      <arglist>(int tri_index)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iStandardReporterListener</name>
    <base>iBase</base>
    <filename>structiStandardReporterListener.html</filename>
    <member kind="function">
      <name>GetDebugFile</name>
      <anchor>82bdaa6db9ede4d4894f9cdae33b8c84</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveMessages</name>
      <anchor>24e580956ddca9f43ea28c838fd9fb1e</anchor>
      <arglist>(int severity, bool remove)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDebugFile</name>
      <anchor>d639337d27f4ed45940b6fa3c3c085a6</anchor>
      <arglist>(const char *filename, bool append=false)=0</arglist>
    </member>
    <member kind="function">
      <name>SetDefaults</name>
      <anchor>c1454a53534c5cee569b5179980c5dc8</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetMessageDestination</name>
      <anchor>1cce7f274ddbc457314156c7948ff2cf</anchor>
      <arglist>(int severity, bool do_stdout, bool do_stderr, bool do_console, bool do_alert, bool do_debug, bool do_popup=false)=0</arglist>
    </member>
    <member kind="function">
      <name>SetNativeWindowManager</name>
      <anchor>105ea697713e2d403d1ad44d80320606</anchor>
      <arglist>(iNativeWindowManager *wm)=0</arglist>
    </member>
    <member kind="function">
      <name>SetOutputConsole</name>
      <anchor>102dc3c7deec10e4a4b74c38dac03e77</anchor>
      <arglist>(iConsoleOutput *console)=0</arglist>
    </member>
    <member kind="function">
      <name>SetReporter</name>
      <anchor>ec99db96c4b429d699a31b93b2c231cc</anchor>
      <arglist>(iReporter *rep)=0</arglist>
    </member>
    <member kind="function">
      <name>ShowMessageID</name>
      <anchor>4973040e680ac9e048187d3d1e8fcb34</anchor>
      <arglist>(int severity, bool showid)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iStreamDataCallback</name>
    <base>iBase</base>
    <filename>structiStreamDataCallback.html</filename>
    <member kind="function">
      <name>DataReady</name>
      <anchor>ce2b8f4f6b5c7b55c14c28b9425cdc32</anchor>
      <arglist>(iDataBuffer *data)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iStreamSource</name>
    <base>iBase</base>
    <filename>structiStreamSource.html</filename>
    <member kind="function">
      <name>QueryBuffer</name>
      <anchor>4c61c2eb0e488a4fb7f93928b1138888</anchor>
      <arglist>(const char *id, iStreamDataCallback *callback)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveBuffer</name>
      <anchor>91900d67152284b6af3b01beae753f92</anchor>
      <arglist>(const char *id, iDataBuffer *buffer)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iString</name>
    <base>iBase</base>
    <filename>structiString.html</filename>
    <member kind="function">
      <name>Append</name>
      <anchor>abc755335df6635e72aa6b1c30efcb5c</anchor>
      <arglist>(const iString *Str, size_t Count=(size_t)-1)=0</arglist>
    </member>
    <member kind="function">
      <name>Append</name>
      <anchor>e055fa1d0307874e02f3f9c36d11e723</anchor>
      <arglist>(const char *Str, size_t Count=(size_t)-1)=0</arglist>
    </member>
    <member kind="function">
      <name>Clear</name>
      <anchor>f69fb824e112c5259027dccbdd880573</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Clone</name>
      <anchor>4c43904fce1fe9862b096b00153ba281</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Compare</name>
      <anchor>083d4efc376c21039df973010f0bd6db</anchor>
      <arglist>(const iString *Str) const =0</arglist>
    </member>
    <member kind="function">
      <name>CompareNoCase</name>
      <anchor>eb9e3eff117b5cba3db704e6b258f71a</anchor>
      <arglist>(const iString *Str) const =0</arglist>
    </member>
    <member kind="function">
      <name>Downcase</name>
      <anchor>80455dc99087c820610b6603dc066851</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>4d59ea18156a41ee338751bbddb93063</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>3402e6294ec7339f201591fbd9b0260d</anchor>
      <arglist>(const char *search, size_t pos=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindFirst</name>
      <anchor>1019101394669173ef37e20439d73acc</anchor>
      <arglist>(const char c, size_t p=(size_t)-1) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindLast</name>
      <anchor>0c494ebc6e74c89ad4bb59821232cb04</anchor>
      <arglist>(const char c, size_t p=(size_t)-1) const =0</arglist>
    </member>
    <member kind="function">
      <name>Format</name>
      <anchor>22359fa73fe1bb3e07eb747ce56f6869</anchor>
      <arglist>(const char *format,...)=0</arglist>
    </member>
    <member kind="function">
      <name>FormatV</name>
      <anchor>b6869ad4b59789f5247afb255d4cdcc9</anchor>
      <arglist>(const char *format, va_list args)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAt</name>
      <anchor>04ce763f7281b25a72909fbe74c0444f</anchor>
      <arglist>(size_t n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCapacity</name>
      <anchor>10cc4fecc697efb1271488e3ed3e382f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>65f6ceef9e82c286afd201ceba4c40fd</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetData</name>
      <anchor>7f60de0d77b660881ffceb9b3a7c080c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetGrowsBy</name>
      <anchor>484d4249e0b4f8a474f81fe4e566e601</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>b716081108324542a10f3193205baeb3</anchor>
      <arglist>(size_t Pos, iString const *Str)=0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>8ef2056f7333757c715a741e4eeb39f1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>675c584cd36211cc61a721a4aba24e1f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>operator char const *</name>
      <anchor>6306686a4a7afab5dc860e5aa339c914</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>operator!=</name>
      <anchor>5a2022e4ecb51110ae85ad18ad0e78be</anchor>
      <arglist>(const iString &amp;Str) const =0</arglist>
    </member>
    <member kind="function">
      <name>operator+</name>
      <anchor>2bd3eac0180b2795bc9e949924934588</anchor>
      <arglist>(const iString &amp;iStr) const =0</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>fcf96d5b7cc9437db9fff6d73a92e5b7</anchor>
      <arglist>(const char *iStr)=0</arglist>
    </member>
    <member kind="function">
      <name>operator+=</name>
      <anchor>ca1ce34729c9c5f5f87e5651358d0fb4</anchor>
      <arglist>(const iString &amp;iStr)=0</arglist>
    </member>
    <member kind="function">
      <name>operator==</name>
      <anchor>6e01a318e2f516f3a117466749ae6c1a</anchor>
      <arglist>(const iString &amp;Str) const =0</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>3d6afcf6647796beb5ffcfddf663a4d7</anchor>
      <arglist>(size_t n) const =0</arglist>
    </member>
    <member kind="function">
      <name>operator[]</name>
      <anchor>d7be85ec8345c6d24672f68fab54da6e</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>Overwrite</name>
      <anchor>2e48e1cef04cf9219ab1cee17ed1bb2f</anchor>
      <arglist>(size_t Pos, iString const *Str)=0</arglist>
    </member>
    <member kind="function">
      <name>Reclaim</name>
      <anchor>4a0b3a5ac7e1fa9e557a82a2048855c1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>56ec8f6b92596ad02592092563e6adb8</anchor>
      <arglist>(const char *str, size_t count=(size_t)-1)=0</arglist>
    </member>
    <member kind="function">
      <name>Replace</name>
      <anchor>46f8bb3eacb44e2c2766dc186f62538e</anchor>
      <arglist>(const iString *str, size_t count=(size_t)-1)=0</arglist>
    </member>
    <member kind="function">
      <name>ReplaceAll</name>
      <anchor>b6f7e821c3e12194b60f110b5c8b4038</anchor>
      <arglist>(const char *search, const char *replacement)=0</arglist>
    </member>
    <member kind="function">
      <name>SetAt</name>
      <anchor>c8e84f39b34c626c2a32450306365f76</anchor>
      <arglist>(size_t n, char iChar)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCapacity</name>
      <anchor>d345cc8e9e26522768f30b993d55519f</anchor>
      <arglist>(size_t NewSize)=0</arglist>
    </member>
    <member kind="function">
      <name>SetGrowsBy</name>
      <anchor>67c1e58aaacfaec8112b4a1de9a2b9ad</anchor>
      <arglist>(size_t)=0</arglist>
    </member>
    <member kind="function">
      <name>ShrinkBestFit</name>
      <anchor>416840b184caf9c030582d663e793a2b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Slice</name>
      <anchor>661cbed557193f210c5f640136884634</anchor>
      <arglist>(size_t start, size_t len) const =0</arglist>
    </member>
    <member kind="function">
      <name>SubString</name>
      <anchor>c6969d095ee0033e6072fd4d4226a2aa</anchor>
      <arglist>(iString *sub, size_t start, size_t len) const =0</arglist>
    </member>
    <member kind="function">
      <name>Truncate</name>
      <anchor>d239e95f431b72266848fae23df85a1d</anchor>
      <arglist>(size_t Len)=0</arglist>
    </member>
    <member kind="function">
      <name>Upcase</name>
      <anchor>b8b46e78ed67e5b4661b70fcff6d1fb2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iStringArray</name>
    <base>iBase</base>
    <filename>structiStringArray.html</filename>
    <member kind="function">
      <name>Contains</name>
      <anchor>e9924a83631f00424f31de559e4e7b65</anchor>
      <arglist>(const char *str, bool case_sensitive=true) const =0</arglist>
    </member>
    <member kind="function">
      <name>DeleteAll</name>
      <anchor>c193bb89513b5dafe4ae4da10cac496d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteIndex</name>
      <anchor>e90334de48b8483d18d7686a5ebefddc</anchor>
      <arglist>(size_t n)=0</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>58eacffb0f3c4533010d8b549da6caaa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>b0cee0dffbbd33f1459c102e8b294179</anchor>
      <arglist>(const char *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindCaseInsensitive</name>
      <anchor>d4e860b88c8756f36cbe91528613b90b</anchor>
      <arglist>(const char *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindSortedKey</name>
      <anchor>9c7f5be432c2517639c8e1b085023f8f</anchor>
      <arglist>(const char *value) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>1e9876f90c61e37c678f970e23dd2f29</anchor>
      <arglist>(size_t n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>cec78f975c64e4ea4a28cb321752b997</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Insert</name>
      <anchor>1e7de475b450888cb75b06a61a1aaf3f</anchor>
      <arglist>(size_t n, char const *value)=0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>0f158a14100b56e742318c0cc4f9c9df</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Length</name>
      <anchor>d19c0843fa56c0d8d938d1f77fc123be</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Pop</name>
      <anchor>59152da1df4932560868c73583ab5a9e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Push</name>
      <anchor>7ecf61b001d175e91287fed7fc9e1a80</anchor>
      <arglist>(const char *value)=0</arglist>
    </member>
    <member kind="function">
      <name>Sort</name>
      <anchor>d8cf28fbb87797e4fcf0a34b3e66f8b6</anchor>
      <arglist>(bool case_sensitive=true)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iStringSet</name>
    <base>iBase</base>
    <filename>structiStringSet.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>b90a738afe4c5bbfb280c22e20ed7ca2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>513b3c0d990d394f248a77719bbb6fc7</anchor>
      <arglist>(csStringID) const =0</arglist>
    </member>
    <member kind="function">
      <name>Contains</name>
      <anchor>19b0071e7b53a8027c43be59cdf48b2e</anchor>
      <arglist>(char const *) const =0</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>52e7a49fd14d75dfeed46c3a7ee5ea5d</anchor>
      <arglist>(csStringID)=0</arglist>
    </member>
    <member kind="function">
      <name>Delete</name>
      <anchor>db90162a2e4cae9ede542ddc2894ec64</anchor>
      <arglist>(char const *)=0</arglist>
    </member>
    <member kind="function">
      <name>Empty</name>
      <anchor>1f9880315761dce30f8ef89d674a4a7e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>b8fdaa470a66e00516565aa44d9ba355</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsEmpty</name>
      <anchor>581f182dff1d5341c1425e777ee28edf</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>49cbbab4a65ec9c3b36dca6a17531abd</anchor>
      <arglist>(csStringID) const =0</arglist>
    </member>
    <member kind="function">
      <name>Request</name>
      <anchor>d899101bd07fd4d4c018edc61794a85a</anchor>
      <arglist>(const char *)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSuperLightmap</name>
    <base>iBase</base>
    <filename>structiSuperLightmap.html</filename>
    <member kind="function">
      <name>Dump</name>
      <anchor>98ebe23d9dfd4ac443af6fc21186538a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterLightmap</name>
      <anchor>09faecd6f015089814c7454cfd1d5d66</anchor>
      <arglist>(int left, int top, int width, int height)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iSyntaxService</name>
    <base>iBase</base>
    <filename>structiSyntaxService.html</filename>
    <member kind="function">
      <name>HandlePortalParameter</name>
      <anchor>3f4d9f81da75a29a201d00e29c33fe48</anchor>
      <arglist>(iDocumentNode *child, iLoaderContext *ldr_context, uint32 &amp;flags, bool &amp;mirror, bool &amp;warp, int &amp;msv, csMatrix3 &amp;m, csVector3 &amp;before, csVector3 &amp;after, iString *destSector, bool &amp;handled, bool &amp;autoresolve)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseAlphaMode</name>
      <anchor>699bfef331fc02eb67aaa222d1b42485</anchor>
      <arglist>(iDocumentNode *node, iStringSet *strings, csAlphaMode &amp;alphaMode, bool allowAutoMode=true)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseBool</name>
      <anchor>26b79a1f65e3b2a27a064d2757a487f6</anchor>
      <arglist>(iDocumentNode *node, bool &amp;result, bool def_result)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseBoolAttribute</name>
      <anchor>13910de5004d00631956a48bf9bf7fb3</anchor>
      <arglist>(iDocumentNode *node, const char *attrname, bool &amp;result, bool def_result, bool required)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseBox</name>
      <anchor>42daed9641b18833547e05d3dfd8ae94</anchor>
      <arglist>(iDocumentNode *node, csOBB &amp;b)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseBox</name>
      <anchor>e2139402c339b15c10eab4016e8d1f27</anchor>
      <arglist>(iDocumentNode *node, csBox3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseColor</name>
      <anchor>20b31bedd2459d7d80c6837ab5e40236</anchor>
      <arglist>(iDocumentNode *node, csColor4 &amp;c)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseColor</name>
      <anchor>9d3af5a7430272ba632325930786c7cc</anchor>
      <arglist>(iDocumentNode *node, csColor &amp;c)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseGradient</name>
      <anchor>da756af4b03e86f0bfdb5830e95dc8a6</anchor>
      <arglist>(iDocumentNode *node, iGradient *gradient)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseKey</name>
      <anchor>cde9ac22bc766fb65672756d3f7bff00</anchor>
      <arglist>(iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseKey</name>
      <anchor>2ce388a3bc8a092df8fe8e17aeb49d38</anchor>
      <arglist>(iDocumentNode *node, iKeyValuePair *&amp;keyvalue)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseMatrix</name>
      <anchor>d48fa0ad6d71f83629c66344b0db9cb3</anchor>
      <arglist>(iDocumentNode *node, csMatrix3 &amp;m)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseMixmode</name>
      <anchor>3c63b9e67d4e4e634180bd811f7dcf94</anchor>
      <arglist>(iDocumentNode *node, uint &amp;mixmode, bool allowFxMesh=false)=0</arglist>
    </member>
    <member kind="function">
      <name>ParsePlane</name>
      <anchor>4a3d911b7f5bf7c7b3a4d298090b8ae2</anchor>
      <arglist>(iDocumentNode *node, csPlane3 &amp;p)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseRenderBuffer</name>
      <anchor>355be4379220b85e6c7a46cfc907cfbf</anchor>
      <arglist>(iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseShaderRef</name>
      <anchor>ba6dbfd74f065465c1c0e0b92040f59c</anchor>
      <arglist>(iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseShaderVar</name>
      <anchor>993d56b97b72309a1ffd460c9556bdc3</anchor>
      <arglist>(iDocumentNode *node, csShaderVariable &amp;var)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseShaderVarExpr</name>
      <anchor>373ef94d03698511577759f857a029ab</anchor>
      <arglist>(iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseVector</name>
      <anchor>7b0724b7f43a1071ad4ee36bfb815fdb</anchor>
      <arglist>(iDocumentNode *node, csVector2 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseVector</name>
      <anchor>f8a2189b309d61f34b71943a7a16fac5</anchor>
      <arglist>(iDocumentNode *node, csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseZMode</name>
      <anchor>f3e60c6f270b287f5444fd6427e82571</anchor>
      <arglist>(iDocumentNode *node, csZBufMode &amp;zmode, bool allowZmesh=false)=0</arglist>
    </member>
    <member kind="function">
      <name>Report</name>
      <anchor>9a6ec73e44aa4fe45b861683123398be</anchor>
      <arglist>(const char *msgid, int severity, iDocumentNode *errornode, const char *msg,...)=0</arglist>
    </member>
    <member kind="function">
      <name>ReportBadToken</name>
      <anchor>845013d982cc5d6473189961fe9bb068</anchor>
      <arglist>(iDocumentNode *badtokennode)=0</arglist>
    </member>
    <member kind="function">
      <name>ReportError</name>
      <anchor>d64705cd4031b0eb6884b7746c6f3616</anchor>
      <arglist>(const char *msgid, iDocumentNode *errornode, const char *msg,...)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteAlphaMode</name>
      <anchor>16063ec36c7c85614303617e0b217853</anchor>
      <arglist>(iDocumentNode *node, iStringSet *strings, const csAlphaMode &amp;alphaMode)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteBool</name>
      <anchor>759073f00aa3f22df3afbfbcffd26916</anchor>
      <arglist>(iDocumentNode *node, const char *name, bool value, bool default_value)</arglist>
    </member>
    <member kind="function">
      <name>WriteBool</name>
      <anchor>575cd70fbf3a61e2d9defca9caf256ce</anchor>
      <arglist>(iDocumentNode *node, const char *name, bool value)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteBox</name>
      <anchor>9472ce231f68f91270f5e56377f55e77</anchor>
      <arglist>(iDocumentNode *node, const csOBB &amp;b)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteBox</name>
      <anchor>2265ca987f0e97a6e44b2a0f0b0692d6</anchor>
      <arglist>(iDocumentNode *node, const csBox3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteColor</name>
      <anchor>55688934c02e2179fcd7f91acf763c6d</anchor>
      <arglist>(iDocumentNode *node, const csColor4 &amp;c)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteColor</name>
      <anchor>d2520d057b9ed5d8f63ed01a50774777</anchor>
      <arglist>(iDocumentNode *node, const csColor &amp;c)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteGradient</name>
      <anchor>653982549db497f1b732231f075ed79c</anchor>
      <arglist>(iDocumentNode *node, iGradient *gradient)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteKey</name>
      <anchor>1ad6cf4f8218f4fa2365f6e5c0089f6b</anchor>
      <arglist>(iDocumentNode *node, iKeyValuePair *keyvalue)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteMatrix</name>
      <anchor>317b9a9eeee21a8e7b1a117a4c4082f9</anchor>
      <arglist>(iDocumentNode *node, const csMatrix3 &amp;m)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteMixmode</name>
      <anchor>99cd86ac7cfe0548f5cad80b8612eacc</anchor>
      <arglist>(iDocumentNode *node, uint mixmode, bool allowFxMesh)=0</arglist>
    </member>
    <member kind="function">
      <name>WritePlane</name>
      <anchor>6989282389596502e7593c00695758e4</anchor>
      <arglist>(iDocumentNode *node, const csPlane3 &amp;p)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteRenderBuffer</name>
      <anchor>1f6addd867f50c662c5d43e9509e3494</anchor>
      <arglist>(iDocumentNode *node, iRenderBuffer *buffer)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteShaderVar</name>
      <anchor>b391cfc2fb4ed514790b7f497b48fdf0</anchor>
      <arglist>(iDocumentNode *node, csShaderVariable &amp;var)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteVector</name>
      <anchor>7db5df6665d9d81c5acae5da2a400a7c</anchor>
      <arglist>(iDocumentNode *node, const csVector2 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteVector</name>
      <anchor>044e2ccb27920a0a65c431e8cb942819</anchor>
      <arglist>(iDocumentNode *node, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteZMode</name>
      <anchor>771af92abbe894c2fafecc04772801e7</anchor>
      <arglist>(iDocumentNode *node, csZBufMode zmode, bool allowZmesh)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTerraFormer</name>
    <base>iBase</base>
    <filename>structiTerraFormer.html</filename>
    <member kind="function">
      <name>GetIntegerMapSize</name>
      <anchor>b633ddb581019186d6d3cd2f38e06fb9</anchor>
      <arglist>(csStringID type)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSampler</name>
      <anchor>bb285d17f95b42f7d4f1de86ed2f77c6</anchor>
      <arglist>(csBox2 region, unsigned int resx, unsigned int resy=0)=0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>7427abca5e20db09805b940c515f5662</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SampleFloat</name>
      <anchor>abf2fa836114d3ffc57e5b18bace0bcc</anchor>
      <arglist>(csStringID type, float x, float z, float &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SampleInteger</name>
      <anchor>a446b3ba91f735f18c51992f1da4d238</anchor>
      <arglist>(csStringID type, float x, float z, int &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SampleVector2</name>
      <anchor>ddf4c500363a8ccc719e019dd66f11f6</anchor>
      <arglist>(csStringID type, float x, float z, csVector2 &amp;value)=0</arglist>
    </member>
    <member kind="function">
      <name>SampleVector3</name>
      <anchor>c8911b3a4c04810965bc5589f1a4856e</anchor>
      <arglist>(csStringID type, float x, float z, csVector3 &amp;value)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTerrainFactoryState</name>
    <base>iBase</base>
    <filename>structiTerrainFactoryState.html</filename>
    <member kind="function">
      <name>SaveState</name>
      <anchor>31a7bfa60b58cd2465dbc3510b08a743</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSamplerRegion</name>
      <anchor>88d5f1284224c1d615ee3e7adfa738be</anchor>
      <arglist>(const csBox2 &amp;region)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTerraFormer</name>
      <anchor>f8e6ef21a36272194f8364412af623e2</anchor>
      <arglist>(iTerraFormer *form)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTerrainObjectState</name>
    <base>iBase</base>
    <filename>structiTerrainObjectState.html</filename>
    <member kind="function">
      <name>CollisionDetect</name>
      <anchor>cece8ffc2dcd7458a5fdd341816602f2</anchor>
      <arglist>(iMovable *m, csTransform *p)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCastShadows</name>
      <anchor>5153800085d50c2d0b59635d737cea8d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetLODValue</name>
      <anchor>a09ec6f694cb539fd9cfb9a6950883af</anchor>
      <arglist>(const char *parameter) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialMapFile</name>
      <anchor>8c9001dd1487ccfa67d300b4b6d81c24</anchor>
      <arglist>(int &amp;width, int &amp;height, bool &amp;raw)=0</arglist>
    </member>
    <member kind="function">
      <name>GetStaticLighting</name>
      <anchor>db93b58c32238f27002c68b23678ce3c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SaveState</name>
      <anchor>c543bdd9649d97478b3233fdc741b390</anchor>
      <arglist>(const char *filename)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCastShadows</name>
      <anchor>f3a5be3939e0779414c1711ee6d8bbeb</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetLODValue</name>
      <anchor>beaa14b5bd6e7891647eea81bb24acbb</anchor>
      <arglist>(const char *parameter, float value)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialAlphaMaps</name>
      <anchor>237d3c0b0cd2708b1ab61789e169fee6</anchor>
      <arglist>(const csArray&lt; csArray&lt; char &gt; &gt; &amp;data, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialMap</name>
      <anchor>26bdbe507f56e3aa0c045d721cd07c29</anchor>
      <arglist>(const csArray&lt; char &gt; &amp;data, int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialMapFile</name>
      <anchor>90700c53106c168a7216c0a9805a1518</anchor>
      <arglist>(const char *file, int width, int height, bool raw=false)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMaterialPalette</name>
      <anchor>0f62a5a4b01bf992675c44d1e70a103e</anchor>
      <arglist>(const csArray&lt; iMaterialWrapper * &gt; &amp;pal)=0</arglist>
    </member>
    <member kind="function">
      <name>SetStaticLighting</name>
      <anchor>a9fdf8fab6009b2969402372a19e871a</anchor>
      <arglist>(bool enable)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTerraSampler</name>
    <base>iBase</base>
    <filename>structiTerraSampler.html</filename>
    <member kind="function">
      <name>Cleanup</name>
      <anchor>76cd679d4324fd353f3714899974bb84</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaterialPalette</name>
      <anchor>8bb1a6d7397e199334692a57d382303d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRegion</name>
      <anchor>106829cd15993fb0f1809e3fe5bd3fa3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetResolution</name>
      <anchor>828366416605a3f62bd8b959420540e2</anchor>
      <arglist>(uint &amp;resx, uint &amp;resz) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVersion</name>
      <anchor>ef438df3926069d71a12f16f93d0f222</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SampleFloat</name>
      <anchor>2af3d3a59423408c66dbf0a515da2dfb</anchor>
      <arglist>(csStringID type)=0</arglist>
    </member>
    <member kind="function">
      <name>SampleInteger</name>
      <anchor>7fda35d639d4d2dfd272608d4be26337</anchor>
      <arglist>(csStringID type)=0</arglist>
    </member>
    <member kind="function">
      <name>SampleVector2</name>
      <anchor>cd944b5a12e7369b4ea8b0fd62fcb7d3</anchor>
      <arglist>(csStringID type)=0</arglist>
    </member>
    <member kind="function">
      <name>SampleVector3</name>
      <anchor>45c268a085fbf472806153e6a4b1d61a</anchor>
      <arglist>(csStringID type)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureCallback</name>
    <base>iBase</base>
    <filename>structiTextureCallback.html</filename>
    <member kind="function">
      <name>UseTexture</name>
      <anchor>8bdb0a52721b5d6a51756dc7b337e859</anchor>
      <arglist>(iTextureWrapper *wrap)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureFactory</name>
    <base>iBase</base>
    <filename>structiTextureFactory.html</filename>
    <member kind="function">
      <name>Generate</name>
      <anchor>7c46696b69853cf523c5cce08ed76903</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>4b8b42f1e3d37542af2061a37c16cf20</anchor>
      <arglist>(int &amp;w, int &amp;h)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureType</name>
      <anchor>02a9606c2ed029f1f0415184356ae645</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetSize</name>
      <anchor>c26695ed44b73d9cfd03c1bea631904f</anchor>
      <arglist>(int w, int h)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureHandle</name>
    <base>iBase</base>
    <filename>structiTextureHandle.html</filename>
    <member kind="function">
      <name>@84</name>
      <anchor>f8068466c68f4e5e6c6fa401c59122cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TextureBlitDataFormat</name>
      <anchor>6761ec16c57b70ba89dc4401fd095414</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GBA8888</name>
      <anchor>6761ec16c57b70ba89dc4401fd0954146146a90f722098d73f2752ad335a72a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>GRA8888</name>
      <anchor>6761ec16c57b70ba89dc4401fd0954142f6487333942268571ffb264296a066f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Blit</name>
      <anchor>dc814d2a029f9153c0bc0bd5bcbc9aca</anchor>
      <arglist>(int x, int y, int width, int height, unsigned char const *data, TextureBlitDataFormat format=RGBA8888)=0</arglist>
    </member>
    <member kind="function">
      <name>GetAlphaMap</name>
      <anchor>72afd50341c75cc40c2da1fc0f9bbb4e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetAlphaType</name>
      <anchor>a6a4fd4b56d5937f19af604722a22cd4</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>ad35aa4282b4c59c40e790c499339e8f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetImageName</name>
      <anchor>5c224dfb2d50110d1b837fe8e39e0b88</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>cfe9e382ada756fed2f2a755e89bef89</anchor>
      <arglist>(uint8 &amp;red, uint8 &amp;green, uint8 &amp;blue) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>52d20b447c014d36787bd22e04d9c5b7</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetOriginalDimensions</name>
      <anchor>be99b70b5af0283af51e2bd7a04368b4</anchor>
      <arglist>(int &amp;mw, int &amp;mh, int &amp;md)=0</arglist>
    </member>
    <member kind="function">
      <name>GetOriginalDimensions</name>
      <anchor>fa2ac6954bdeb8c99e1a1519235f9c33</anchor>
      <arglist>(int &amp;mw, int &amp;mh)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPrivateObject</name>
      <anchor>efb30308e917cd492f53ddbc5cffe671</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRendererDimensions</name>
      <anchor>e8a9690621542b96b7e1e9e3b2dfcce3</anchor>
      <arglist>(int &amp;mw, int &amp;mh, int &amp;md)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRendererDimensions</name>
      <anchor>329227bace4cb6387a254c11e36c674d</anchor>
      <arglist>(int &amp;mw, int &amp;mh)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureClass</name>
      <anchor>a97e5c07fac8363ca9d43cec4925cfe5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureTarget</name>
      <anchor>c561bfec07ac72a26cfbae652612f91e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Precache</name>
      <anchor>61eac8b0b581eddceea99472fda15054</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAlphaType</name>
      <anchor>09c835ee1f126786443d9fb6a67a9580</anchor>
      <arglist>(csAlphaMode::AlphaType alphaType)=0</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>888d80cba9174c17f7fb39f319fa2599</anchor>
      <arglist>(uint8 red, uint8 green, uint8 blue)=0</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>d24caa35c6cb13be24f717f71e6c7a2d</anchor>
      <arglist>(bool Enable)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTextureClass</name>
      <anchor>8483e794ab875f777c0477dbdcffc6c1</anchor>
      <arglist>(const char *className)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureList</name>
    <base>iBase</base>
    <filename>structiTextureList.html</filename>
    <member kind="function">
      <name>Add</name>
      <anchor>d69829e0ab17a82641036d42ec02aeaf</anchor>
      <arglist>(iTextureWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>Find</name>
      <anchor>a8087318e337bb00f0f3d4f49dcf6f37</anchor>
      <arglist>(iTextureWrapper *obj) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindByName</name>
      <anchor>4e78c7b3d36ce1f0d27d81ccda66f24f</anchor>
      <arglist>(const char *Name) const =0</arglist>
    </member>
    <member kind="function">
      <name>Get</name>
      <anchor>f9693ebed133137f64f7bfad30d72573</anchor>
      <arglist>(int n) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCount</name>
      <anchor>ce0f9b9d4bbb9a2d9ac8b4f5f4116d90</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>NewTexture</name>
      <anchor>bc0fafcf2620b968ede889bef03fd306</anchor>
      <arglist>(iTextureHandle *ith)=0</arglist>
    </member>
    <member kind="function">
      <name>NewTexture</name>
      <anchor>e3f43c9df12b3d9412d1810dd3399ef8</anchor>
      <arglist>(iImage *image)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>f33e099323a88059e708cadf166ef434</anchor>
      <arglist>(int n)=0</arglist>
    </member>
    <member kind="function">
      <name>Remove</name>
      <anchor>7710740c54d82cd8f6cc5bf3034aba26</anchor>
      <arglist>(iTextureWrapper *obj)=0</arglist>
    </member>
    <member kind="function">
      <name>RemoveAll</name>
      <anchor>434a7dc6cca9c0cf8bdd2a6011339ee2</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureLoaderContext</name>
    <base>iBase</base>
    <filename>structiTextureLoaderContext.html</filename>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>6690d0b711dbd28f06870335de7f9bc5</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetImage</name>
      <anchor>cc5f0d5fafc8a90b1744d729bdb312f1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetName</name>
      <anchor>2cb82f027e1d241c0bd39ec8237cc2ad</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetSize</name>
      <anchor>5a9a34ecbe833233d0a9d7d5ccc760a7</anchor>
      <arglist>(int &amp;w, int &amp;h)=0</arglist>
    </member>
    <member kind="function">
      <name>HasFlags</name>
      <anchor>e8b0a17d6e064356f5cdc5a59fda3cfc</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasImage</name>
      <anchor>b4b4f2ef5dfde63b257053eb828f42e2</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>HasSize</name>
      <anchor>0e7082a4a64b62619dbd63ea114915ef</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureManager</name>
    <base>iBase</base>
    <filename>structiTextureManager.html</filename>
    <member kind="function">
      <name>CreateSuperLightmap</name>
      <anchor>1d1a6355bdd5457832d4258d9222e903</anchor>
      <arglist>(int width, int height)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMaxTextureSize</name>
      <anchor>00d44347aa287c0f1cf7612174de2011</anchor>
      <arglist>(int &amp;w, int &amp;h, int &amp;aspect)=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureFormat</name>
      <anchor>61e0b4374dca9dc81597d64744a81611</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterTexture</name>
      <anchor>e07268d345e28a8d7ec339b8f904e243</anchor>
      <arglist>(iImage *image, int flags)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureType</name>
    <base>iBase</base>
    <filename>structiTextureType.html</filename>
    <member kind="function">
      <name>NewFactory</name>
      <anchor>df8198802213766512a1e3c44cfeaf95</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTextureWrapper</name>
    <base>iBase</base>
    <filename>structiTextureWrapper.html</filename>
    <member kind="function">
      <name>Clone</name>
      <anchor>ebc01f6640795c4980c965e38801a6b1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFlags</name>
      <anchor>1e37840dcc2a7f4b6d79c00d5173f15b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetImageFile</name>
      <anchor>b8c697a9960353b745709bbe85a21e30</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetKeyColor</name>
      <anchor>d91ee4a434fdf5e2ca580bd3422b2948</anchor>
      <arglist>(int &amp;red, int &amp;green, int &amp;blue) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureClass</name>
      <anchor>d78f219a8de0a4ee5505120058f7464c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetTextureHandle</name>
      <anchor>ca59c07c6940a87f2e0b391301c47cc6</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetUseCallback</name>
      <anchor>dc7920ee050a3f8ff1988f5db95d1a4f</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsVisitRequired</name>
      <anchor>374c31c9d69abee73fd9ceaf9276843a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>KeepImage</name>
      <anchor>42510e74e93538025de6091954487aa2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>QueryObject</name>
      <anchor>8aa2446686b55919befc96c7a51a027e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>1d4fd86958694b7c85a9be694b8a1ab4</anchor>
      <arglist>(iTextureManager *txtmng)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFlags</name>
      <anchor>1fe83d06ab826f32e8aea5911549cd5f</anchor>
      <arglist>(int flags)=0</arglist>
    </member>
    <member kind="function">
      <name>SetImageFile</name>
      <anchor>bf0962e18366efa58edf7acb6cd32653</anchor>
      <arglist>(iImage *Image)=0</arglist>
    </member>
    <member kind="function">
      <name>SetKeepImage</name>
      <anchor>9d1952a383ac5634d0e56ddbfa0eeae2</anchor>
      <arglist>(bool k)=0</arglist>
    </member>
    <member kind="function">
      <name>SetKeyColor</name>
      <anchor>63a9cfd4939494c40e908b684b8242e7</anchor>
      <arglist>(int red, int green, int blue)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTextureClass</name>
      <anchor>1fe4b555d5aadc2d1f8be0b6dcd15ebc</anchor>
      <arglist>(const char *className)=0</arglist>
    </member>
    <member kind="function">
      <name>SetTextureHandle</name>
      <anchor>d1962411c49598cd50d312bc3e6e88a4</anchor>
      <arglist>(iTextureHandle *tex)=0</arglist>
    </member>
    <member kind="function">
      <name>SetUseCallback</name>
      <anchor>8f27793f26952956583720ec75731a65</anchor>
      <arglist>(iTextureCallback *callback)=0</arglist>
    </member>
    <member kind="function">
      <name>Visit</name>
      <anchor>ac1820b7b5160323bddb9982c110eea3</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iThingEnvironment</name>
    <base>iBase</base>
    <filename>structiThingEnvironment.html</filename>
    <member kind="function">
      <name>Clear</name>
      <anchor>3a881e7ff1f7a6061d4b2804523b44ff</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetDefaultLightmapCellSize</name>
      <anchor>7471de2f8dbc90ac2585fc1c212461e2</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightmapCellSize</name>
      <anchor>718c9b6ac800cf94b74ba2e428a3fcc0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>SetLightmapCellSize</name>
      <anchor>4d9a6f2515dd9bc2106e299fbe9394ed</anchor>
      <arglist>(int Size)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iThingFactoryState</name>
    <base>iBase</base>
    <filename>structiThingFactoryState.html</filename>
    <member kind="function">
      <name>AddEmptyPolygon</name>
      <anchor>b690d2f74ebcb327688c2aa6c1b95414</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>AddInsideBox</name>
      <anchor>e67a3148c38b0894d67c9ce1233d6d65</anchor>
      <arglist>(const csVector3 &amp;bmin, const csVector3 &amp;bmax)=0</arglist>
    </member>
    <member kind="function">
      <name>AddOutsideBox</name>
      <anchor>2b55c3fd2e0f413bb2fbd12518cecb85</anchor>
      <arglist>(const csVector3 &amp;bmin, const csVector3 &amp;bmax)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPolygon</name>
      <anchor>5313717282b385729b6464aafd27ad0a</anchor>
      <arglist>(int num,...)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPolygon</name>
      <anchor>7bbca8871ce7ed9a85ca0d6e9b7a895d</anchor>
      <arglist>(csVector3 *vertices, int num)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPolygonVertex</name>
      <anchor>688ca825213920d1909c3469dcc61f65</anchor>
      <arglist>(const csPolygonRange &amp;range, int vt)=0</arglist>
    </member>
    <member kind="function">
      <name>AddPolygonVertex</name>
      <anchor>b1dde02003de8b3ca0d90a0ad2553c84</anchor>
      <arglist>(const csPolygonRange &amp;range, const csVector3 &amp;vt)=0</arglist>
    </member>
    <member kind="function">
      <name>AddQuad</name>
      <anchor>c1929d42ac17fb2526f8fa0ef158b774</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3, const csVector3 &amp;v4)=0</arglist>
    </member>
    <member kind="function">
      <name>AddTriangle</name>
      <anchor>ca8cdb92b550a8981c638ce4706e7927</anchor>
      <arglist>(const csVector3 &amp;v1, const csVector3 &amp;v2, const csVector3 &amp;v3)=0</arglist>
    </member>
    <member kind="function">
      <name>CompressVertices</name>
      <anchor>8faa18b1b64fd34115174e703adac632</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreatePolygonHandle</name>
      <anchor>24b669ebb0cb6002c192362e3264ece8</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateVertex</name>
      <anchor>ca266e218a1432ef9a5ef968a40983b5</anchor>
      <arglist>(const csVector3 &amp;vt)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteVertex</name>
      <anchor>c84fad9d2502cf40da0428505b6bd82a</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteVertices</name>
      <anchor>25c2ee0e7025d643d67e0f70f95f0685</anchor>
      <arglist>(int from, int to)=0</arglist>
    </member>
    <member kind="function">
      <name>FindPolygonByName</name>
      <anchor>0dcfefb5551a26a95d9c8f44ea3a95f7</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCosinusFactor</name>
      <anchor>081e567b148271c7c499fac5fd3af495</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetLightmapLayout</name>
      <anchor>f15d59c15b7f0a6be246d7063d6f63d6</anchor>
      <arglist>(int polygon_idx, size_t &amp;slm, csRect &amp;slmSubRect, float *slmCoord)=0</arglist>
    </member>
    <member kind="function">
      <name>GetNormals</name>
      <anchor>778d9b7839341ad53590dfbb53b10c80</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonCount</name>
      <anchor>c04a24183471d684c5515c2e82ed9d7c</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonFlags</name>
      <anchor>feb7d017deb6cd6ce18ea04f87d9a622</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonMaterial</name>
      <anchor>1b9c9ba1eb73c11026f33f712416a6b4</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonName</name>
      <anchor>beca44381e78caf2a6b0332cd01ce647</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonObjectPlane</name>
      <anchor>e6d67c5dd4011d30be5151885f8283ac</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonTextureMapping</name>
      <anchor>12876bfa62f9642c4a22ab0c0c4a96a5</anchor>
      <arglist>(int polygon_idx, csMatrix3 &amp;m, csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonVertex</name>
      <anchor>98df348d1cf9cba97e3d465265b05dd3</anchor>
      <arglist>(int polygon_idx, int vertex_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonVertexCount</name>
      <anchor>845f0112dda03278a812fbf0ce5e53e0</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonVertexIndices</name>
      <anchor>c4d48d0780be1e112ba4aab24c473f54</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetSmoothingFlag</name>
      <anchor>a2e73872af04ec5c54d3babc3a2c858d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertex</name>
      <anchor>a1873a0fd7ae88f2090873976b6303c7</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexCount</name>
      <anchor>49070a402854cf8f48e999fc87d4a2b6</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVertices</name>
      <anchor>71110e5dc3620f4f8525af770baea100</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>IsPolygonTextureMappingEnabled</name>
      <anchor>1f06dd5bd26d152b7fcaf97ddedd5963</anchor>
      <arglist>(int polygon_idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>IsPolygonTransparent</name>
      <anchor>c285950cf84f32090c5547c1cc0a2b3d</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>PointOnPolygon</name>
      <anchor>74453e1bfbfe89a83e6e1b5dc5fe833c</anchor>
      <arglist>(int polygon_idx, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>RemovePolygon</name>
      <anchor>bfec158dc6b52a6ae3312f46610885a9</anchor>
      <arglist>(int idx)=0</arglist>
    </member>
    <member kind="function">
      <name>RemovePolygons</name>
      <anchor>f7d0c13e10cf27e1fff40fd04958a45a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ResetPolygonFlags</name>
      <anchor>61f76fe818ab455c32f2320811f610f0</anchor>
      <arglist>(const csPolygonRange &amp;range, uint32 flags)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCosinusFactor</name>
      <anchor>38d032906ee6fec3f52ad19f73c35408</anchor>
      <arglist>(float cosfact)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonFlags</name>
      <anchor>404b8b7220038e30ea28d2ed2a37d6cd</anchor>
      <arglist>(const csPolygonRange &amp;range, uint32 mask, uint32 flags)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonFlags</name>
      <anchor>eb47d2dc6c88001b0b1ff4a47159b7c8</anchor>
      <arglist>(const csPolygonRange &amp;range, uint32 flags)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonMaterial</name>
      <anchor>fc4bb06a10556b414b4e2cc3aa13ce8f</anchor>
      <arglist>(const csPolygonRange &amp;range, iMaterialWrapper *material)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonName</name>
      <anchor>648dab4cfacc7cef54b488a9d9f6e8dc</anchor>
      <arglist>(const csPolygonRange &amp;range, const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMapping</name>
      <anchor>f9a010127ed1f40ea92a84a7aa8bebaa</anchor>
      <arglist>(const csPolygonRange &amp;range, float len)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMapping</name>
      <anchor>80a25ce718de599d049c408ccb01d176</anchor>
      <arglist>(const csPolygonRange &amp;range, const csVector3 &amp;v_orig, const csVector3 &amp;v1, float len1, const csVector3 &amp;v2, float len2)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMapping</name>
      <anchor>6b32da7de12aff147e26f09e0dab11f6</anchor>
      <arglist>(const csPolygonRange &amp;range, const csVector3 &amp;v_orig, const csVector3 &amp;v, float len)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMapping</name>
      <anchor>e654fcb46086d9b5890bdfaf65e9baf3</anchor>
      <arglist>(const csPolygonRange &amp;range, const csVector3 &amp;p1, const csVector2 &amp;uv1, const csVector3 &amp;p2, const csVector2 &amp;uv2, const csVector3 &amp;p3, const csVector2 &amp;uv3)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMapping</name>
      <anchor>1603ee6c389f5fc9ff30c53990802f84</anchor>
      <arglist>(const csPolygonRange &amp;range, const csVector2 &amp;uv1, const csVector2 &amp;uv2, const csVector2 &amp;uv3)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMapping</name>
      <anchor>21acd302a8564bb55749e9458ded7bf2</anchor>
      <arglist>(const csPolygonRange &amp;range, const csMatrix3 &amp;m, const csVector3 &amp;v)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonTextureMappingEnabled</name>
      <anchor>a048fcf1e5a1b574c9212ef41bded194</anchor>
      <arglist>(const csPolygonRange &amp;range, bool enabled)=0</arglist>
    </member>
    <member kind="function">
      <name>SetPolygonVertexIndices</name>
      <anchor>2e413defc63d70df2f829ebaf325e3db</anchor>
      <arglist>(const csPolygonRange &amp;range, int num, int *indices)=0</arglist>
    </member>
    <member kind="function">
      <name>SetSmoothingFlag</name>
      <anchor>eec46df82c054b1026a6ef52658523dd</anchor>
      <arglist>(bool smoothing)=0</arglist>
    </member>
    <member kind="function">
      <name>SetVertex</name>
      <anchor>bfcf9049be84eb95b38d681dcc254173</anchor>
      <arglist>(int idx, const csVector3 &amp;vt)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iThingState</name>
    <base>iBase</base>
    <filename>structiThingState.html</filename>
    <member kind="function">
      <name>ClearReplacedMaterials</name>
      <anchor>e6be96b517f1fcac42eb8a4b70d6b6a1</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>CreatePolygonHandle</name>
      <anchor>45db8c0af1a30e76ce951fd4d3835ac6</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetMixMode</name>
      <anchor>cec3362549cba31dc31dca81ae96c33e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMovingOption</name>
      <anchor>d496f45889815176c74fb47a2873a903</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonLightmap</name>
      <anchor>6797b37b30740d0dec4f2cee389720cd</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonPDLight</name>
      <anchor>156927f077264e2b2f0060b998a3e2eb</anchor>
      <arglist>(int polygon_idx, size_t pdlight_index, csRef&lt; iImage &gt; &amp;map, iLight *&amp;light)=0</arglist>
    </member>
    <member kind="function">
      <name>GetPolygonWorldPlane</name>
      <anchor>69f598e322c126c196b3537b966addb5</anchor>
      <arglist>(int polygon_idx)=0</arglist>
    </member>
    <member kind="function">
      <name>GetReplacedMaterial</name>
      <anchor>9cc2b03bfd914f09cd0d729f2f21a9e7</anchor>
      <arglist>(iMaterialWrapper *oldMat)=0</arglist>
    </member>
    <member kind="function">
      <name>GetVertexW</name>
      <anchor>1f6f5796cc92ef11335bbf8506f7f1c0</anchor>
      <arglist>(int idx) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetVerticesW</name>
      <anchor>8a0ecd537444489e57d416fba0e75c31</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Prepare</name>
      <anchor>763857816204a22efdee7b9b4c69ad03</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>ReplaceMaterial</name>
      <anchor>66e43371fb866d81529590e53a570132</anchor>
      <arglist>(iMaterialWrapper *oldmat, iMaterialWrapper *newmat)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMixMode</name>
      <anchor>c15eb7dfa4e3df139feb089535768779</anchor>
      <arglist>(uint mode)=0</arglist>
    </member>
    <member kind="function">
      <name>SetMovingOption</name>
      <anchor>d870063248501edee17e9052b70ca42c</anchor>
      <arglist>(int opt)=0</arglist>
    </member>
    <member kind="function">
      <name>Unprepare</name>
      <anchor>4df18bd24a5294fd4156e255f5fd51d8</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iTimerEvent</name>
    <base>iBase</base>
    <filename>structiTimerEvent.html</filename>
    <member kind="function">
      <name>Perform</name>
      <anchor>78b1f3b9b9f698d193c1eb1fba972d40</anchor>
      <arglist>(iTimerEvent *ev)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iUserRenderBufferIterator</name>
    <base>iBase</base>
    <filename>structiUserRenderBufferIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>1f4c47e50ac10d6af9a2356b9e56ebb0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>211415540d7b78b26f85ffc469c38b01</anchor>
      <arglist>(csRef&lt; iRenderBuffer &gt; *buf=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>0253749b8244cc5d6025f176180ec170</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVerbosityManager</name>
    <base>iBase</base>
    <filename>structiVerbosityManager.html</filename>
    <member kind="function">
      <name>CheckFlag</name>
      <anchor>3e5a6462792ef969735fc19eaecedd8f</anchor>
      <arglist>(char const *major, char const *minor) const =0</arglist>
    </member>
    <member kind="function">
      <name>Enabled</name>
      <anchor>f88d1b1d4e4502498610b3d913b32a3d</anchor>
      <arglist>(char const *flag=0, bool fuzzy=true) const =0</arglist>
    </member>
    <member kind="function">
      <name>Parse</name>
      <anchor>90255f0c679a9bdaa76d17d67262f11a</anchor>
      <arglist>(char const *flags)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVertexLightCalculator</name>
    <filename>structiVertexLightCalculator.html</filename>
    <member kind="function">
      <name>~iVertexLightCalculator</name>
      <anchor>eb75f4f79d3cfa0f02d6f214a4cd7ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>CalculateLighting</name>
      <anchor>d83d81813c8eaa97643c03317e53b5e3</anchor>
      <arglist>(const csLightProperties &amp;light, const csVector3 &amp;eyePos, float shininess, size_t numvert, iRenderBuffer *vb, iRenderBuffer *nb, iRenderBuffer *litColor, iRenderBuffer *specColor=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>CalculateLightingAdd</name>
      <anchor>100ed4b7f74265ce7b5f86461b135568</anchor>
      <arglist>(const csLightProperties &amp;light, const csVector3 &amp;eyePos, float shininess, size_t numvert, iRenderBuffer *vb, iRenderBuffer *nb, iRenderBuffer *litColor, iRenderBuffer *specColor=0) const =0</arglist>
    </member>
    <member kind="function">
      <name>CalculateLightingMul</name>
      <anchor>4ba960a22f9b704ff499f5f70d73e8da</anchor>
      <arglist>(const csLightProperties &amp;light, const csVector3 &amp;eyePos, float shininess, size_t numvert, iRenderBuffer *vb, iRenderBuffer *nb, iRenderBuffer *litColor, iRenderBuffer *specColor=0) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVFS</name>
    <base>iBase</base>
    <filename>structiVFS.html</filename>
    <member kind="function">
      <name>ChDir</name>
      <anchor>e64c50718db8f5ad41d53363fb5c7f62</anchor>
      <arglist>(const char *Path)=0</arglist>
    </member>
    <member kind="function">
      <name>ChDirAuto</name>
      <anchor>ae2aa2b5133872ad0b99e36777a14613</anchor>
      <arglist>(const char *path, const csStringArray *paths=0, const char *vfspath=0, const char *filename=0)=0</arglist>
    </member>
    <member kind="function">
      <name>DeleteFile</name>
      <anchor>0216e54878a64b2e0f06326dbccdce8d</anchor>
      <arglist>(const char *FileName)=0</arglist>
    </member>
    <member kind="function">
      <name>Exists</name>
      <anchor>32e2f393865506f11b19602d6a8317b0</anchor>
      <arglist>(const char *Path) const =0</arglist>
    </member>
    <member kind="function">
      <name>ExpandPath</name>
      <anchor>4554c5c58b71bf9a8e847a321cc9d5e1</anchor>
      <arglist>(const char *Path, bool IsDir=false) const =0</arglist>
    </member>
    <member kind="function">
      <name>FindFiles</name>
      <anchor>15ea59531827a8713158ce0d86d6af51</anchor>
      <arglist>(const char *Path) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetCwd</name>
      <anchor>6463219ef5fd533383d9887d3dee4970</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetFileSize</name>
      <anchor>6185ce7a8cb8ed32c2651dff76e4a1ca</anchor>
      <arglist>(const char *FileName, size_t &amp;oSize)=0</arglist>
    </member>
    <member kind="function">
      <name>GetFileTime</name>
      <anchor>649ecd5c1666845a587a26108570b4e8</anchor>
      <arglist>(const char *FileName, csFileTime &amp;oTime) const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMounts</name>
      <anchor>1fb70e1f2ffcfddf95421643dabd34bb</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetRealMountPaths</name>
      <anchor>0d9e9847b2f485237455a48f8ae9a0b5</anchor>
      <arglist>(const char *VirtualPath)=0</arglist>
    </member>
    <member kind="function">
      <name>GetRealPath</name>
      <anchor>7351c1bf1ed9cf7b9aa17b0ad716468a</anchor>
      <arglist>(const char *FileName)=0</arglist>
    </member>
    <member kind="function">
      <name>LoadMountsFromFile</name>
      <anchor>295be4436c5c9851e3c29b1dcf0632a1</anchor>
      <arglist>(iConfigFile *file)=0</arglist>
    </member>
    <member kind="function">
      <name>Mount</name>
      <anchor>9b7868aa50296cc265f2155db59d949f</anchor>
      <arglist>(const char *VirtualPath, const char *RealPath)=0</arglist>
    </member>
    <member kind="function">
      <name>MountRoot</name>
      <anchor>f21bcf2a97b88d09abe77a724e044b77</anchor>
      <arglist>(const char *VirtualPath)=0</arglist>
    </member>
    <member kind="function">
      <name>Open</name>
      <anchor>6d46cd7b7eefd7c4e8e7281394baf581</anchor>
      <arglist>(const char *FileName, int Mode)=0</arglist>
    </member>
    <member kind="function">
      <name>PopDir</name>
      <anchor>d3724c40aa44864cfd3ed8c12417552b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>PushDir</name>
      <anchor>539171b809a9a4f12dd7be330d0d36f0</anchor>
      <arglist>(char const *Path=0)=0</arglist>
    </member>
    <member kind="function">
      <name>ReadFile</name>
      <anchor>093140ef4e298090bc80a09794a2adbc</anchor>
      <arglist>(const char *FileName, bool nullterm=true)=0</arglist>
    </member>
    <member kind="function">
      <name>SaveMounts</name>
      <anchor>8d6c1e1b5017fb7f08ae2a35c9a67879</anchor>
      <arglist>(const char *FileName)=0</arglist>
    </member>
    <member kind="function">
      <name>SetFileTime</name>
      <anchor>24c2110148f811cd6293c066e33ebbbd</anchor>
      <arglist>(const char *FileName, const csFileTime &amp;iTime)=0</arglist>
    </member>
    <member kind="function">
      <name>SymbolicLink</name>
      <anchor>5369f998bd4365de414def1ff3761424</anchor>
      <arglist>(const char *Target, const char *Link=0, int priority=0)=0</arglist>
    </member>
    <member kind="function">
      <name>Sync</name>
      <anchor>9864dda3ba04d3485d01e188fc4ec306</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Unmount</name>
      <anchor>437201152b29b7cd2c33ee0bd8d18911</anchor>
      <arglist>(const char *VirtualPath, const char *RealPath)=0</arglist>
    </member>
    <member kind="function">
      <name>WriteFile</name>
      <anchor>c8e6f08e3297b4da1a7e3771996eba32</anchor>
      <arglist>(const char *Name, const char *Data, size_t Size)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iView</name>
    <base>iBase</base>
    <filename>structiView.html</filename>
    <member kind="function">
      <name>AddViewVertex</name>
      <anchor>f06b0e34324e2fe0ee57ba1e418dbfc6</anchor>
      <arglist>(int x, int y)=0</arglist>
    </member>
    <member kind="function">
      <name>ClearView</name>
      <anchor>1c947f5e0306a47b5dc7a48974831d65</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Draw</name>
      <anchor>01c040b1dd37d8a0e195b61a53f0d3df</anchor>
      <arglist>(iMeshWrapper *mesh=0)=0</arglist>
    </member>
    <member kind="function">
      <name>GetCamera</name>
      <anchor>9d0bccdf359e51077468bcd929627b7a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetClipper</name>
      <anchor>7bb214e5083edfccefe2f19f115a05d0</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetContext</name>
      <anchor>2c826360a161a73ae4418c5eccf2b857</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetEngine</name>
      <anchor>bc815079d4f0b00cd08b02941671b31e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RestrictClipperToScreen</name>
      <anchor>5340f3e10c24d18c3c88d4a512ea479f</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetAutoResize</name>
      <anchor>0614c7de334babdbf08121a480ed808f</anchor>
      <arglist>(bool state)=0</arglist>
    </member>
    <member kind="function">
      <name>SetCamera</name>
      <anchor>3213f8ad4cd0b268566e73f37d542284</anchor>
      <arglist>(iCamera *c)=0</arglist>
    </member>
    <member kind="function">
      <name>SetContext</name>
      <anchor>41c3eac39303750637157a0b239a07ff</anchor>
      <arglist>(iGraphics3D *ig3d)=0</arglist>
    </member>
    <member kind="function">
      <name>SetEngine</name>
      <anchor>2da26d335048be1cac26ac7a863b8d7a</anchor>
      <arglist>(iEngine *e)=0</arglist>
    </member>
    <member kind="function">
      <name>SetRectangle</name>
      <anchor>8197b24651ab35bf48fe82c3e97d2afb</anchor>
      <arglist>(int x, int y, int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>UpdateClipper</name>
      <anchor>cb04858acb838eb8d970bc70c5fefc57</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVirtualClock</name>
    <base>iBase</base>
    <filename>structiVirtualClock.html</filename>
    <member kind="function">
      <name>Advance</name>
      <anchor>4161e1243c51c8ff8c62f2162090de6e</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCurrentTicks</name>
      <anchor>e88f428c90216917a6067308e9e14543</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetElapsedTicks</name>
      <anchor>91f5577310ab1322c2656fde94ab76da</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Resume</name>
      <anchor>65382fc97aecd537a1244583b0d63854</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Suspend</name>
      <anchor>fa6e3792650452fec39e45d468959c92</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVisibilityCuller</name>
    <base>iBase</base>
    <filename>structiVisibilityCuller.html</filename>
    <member kind="function">
      <name>CastShadows</name>
      <anchor>10dfd2c7cb565500a07af26d3bff71f0</anchor>
      <arglist>(iFrustumView *fview)=0</arglist>
    </member>
    <member kind="function">
      <name>IntersectSegment</name>
      <anchor>94f88404a89678d152256d40d45dfa4f</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, csVector3 &amp;isect, float *pr=0, iMeshWrapper **p_mesh=0, int *poly_idx=0, bool accurate=true)=0</arglist>
    </member>
    <member kind="function">
      <name>IntersectSegment</name>
      <anchor>897ff1c31c766d9fc139e934132cd201</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end, bool accurate=false)=0</arglist>
    </member>
    <member kind="function">
      <name>IntersectSegmentSloppy</name>
      <anchor>5a45089074cdf23bf2f4bdc656b1a217</anchor>
      <arglist>(const csVector3 &amp;start, const csVector3 &amp;end)=0</arglist>
    </member>
    <member kind="function">
      <name>ParseCullerParameters</name>
      <anchor>df625d287371fad6dea9b8fcb6944308</anchor>
      <arglist>(iDocumentNode *node)=0</arglist>
    </member>
    <member kind="function">
      <name>PrecacheCulling</name>
      <anchor>11b9eafd09f419254a0f20489afc27fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>RegisterVisObject</name>
      <anchor>8c96f1babf2e01bfbd3ef96ee47bcb46</anchor>
      <arglist>(iVisibilityObject *visobj)=0</arglist>
    </member>
    <member kind="function">
      <name>Setup</name>
      <anchor>07a0e0256194f61b96b0f0d2b90c77f9</anchor>
      <arglist>(const char *name)=0</arglist>
    </member>
    <member kind="function">
      <name>UnregisterVisObject</name>
      <anchor>a02d95359099fca6e6a8bb2ef63e20dd</anchor>
      <arglist>(iVisibilityObject *visobj)=0</arglist>
    </member>
    <member kind="function">
      <name>VisTest</name>
      <anchor>6776e3c60ba0e0d113056c4829bb6e33</anchor>
      <arglist>(csPlane3 *plane, int num_planes, iVisibilityCullerListener *viscallback)=0</arglist>
    </member>
    <member kind="function">
      <name>VisTest</name>
      <anchor>0f87043f7ad9b26ef156c1fdc2fb8e65</anchor>
      <arglist>(csPlane3 *plane, int num_planes)=0</arglist>
    </member>
    <member kind="function">
      <name>VisTest</name>
      <anchor>a3db85d020439ec63952e587498ed183</anchor>
      <arglist>(const csSphere &amp;sphere, iVisibilityCullerListener *viscallback)=0</arglist>
    </member>
    <member kind="function">
      <name>VisTest</name>
      <anchor>52a874a1161fd6e2d74d66e57b16691c</anchor>
      <arglist>(const csSphere &amp;sphere)=0</arglist>
    </member>
    <member kind="function">
      <name>VisTest</name>
      <anchor>c80663e3538b5f3ca9a1a693332d885a</anchor>
      <arglist>(const csBox3 &amp;box)=0</arglist>
    </member>
    <member kind="function">
      <name>VisTest</name>
      <anchor>b967bd11db489f4cbcc1d99f8abe59a4</anchor>
      <arglist>(iRenderView *irview, iVisibilityCullerListener *viscallback)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVisibilityCullerListener</name>
    <base>iBase</base>
    <filename>structiVisibilityCullerListener.html</filename>
    <member kind="function">
      <name>ObjectVisible</name>
      <anchor>d662139cfaa77dcfe6dfd1f90d957cca</anchor>
      <arglist>(iVisibilityObject *visobject, iMeshWrapper *mesh, uint32 frustum_mask)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVisibilityObject</name>
    <base>iBase</base>
    <filename>structiVisibilityObject.html</filename>
    <member kind="function">
      <name>GetCullerFlags</name>
      <anchor>cc0dcbf6bacf04dee327aa3d5214e898</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetMeshWrapper</name>
      <anchor>e372954a163379ab43dc71169b3d547d</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetMovable</name>
      <anchor>9e0b3f844147c87b56d3bf944d4eea7b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetObjectModel</name>
      <anchor>11860dcf9e8f8da8fc54112ae6057a00</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iVisibilityObjectIterator</name>
    <base>iBase</base>
    <filename>structiVisibilityObjectIterator.html</filename>
    <member kind="function">
      <name>HasNext</name>
      <anchor>b2ff0f9a6b0bc515d0cdb2dfe3325f64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>Next</name>
      <anchor>250c597e8b0911d43a04d693ac74a3fe</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>Reset</name>
      <anchor>e4e9848b7e3fb7b1239dcbb23f552ced</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iWin32Assistant</name>
    <base>iBase</base>
    <filename>structiWin32Assistant.html</filename>
    <member kind="function">
      <name>AlertV</name>
      <anchor>d9e0df6860e451ca4603451f06c22e28</anchor>
      <arglist>(HWND window, int type, const char *title, const char *okMsg, const char *msg, va_list args)=0</arglist>
    </member>
    <member kind="function">
      <name>CreateCSWindow</name>
      <anchor>3758913fdb866c99534a8e2c99f8198b</anchor>
      <arglist>(iGraphics2D *canvas, DWORD exStyle, DWORD style, int x, int y, int w, int h)=0</arglist>
    </member>
    <member kind="function">
      <name>DisableConsole</name>
      <anchor>aa2b8582d8646ba72840c421094e129d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>GetCmdShow</name>
      <anchor>2d818d3dab7b6a25614365bf40609b64</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetInstance</name>
      <anchor>d3f0facf39fe1f85a60dbc319fb14050</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>GetIsActive</name>
      <anchor>d08239ff3b5949a2cb6376f3cbf0e327</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <name>HasOwnMessageLoop</name>
      <anchor>50c6b6b0a33668451fb53924051a3637</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetCursor</name>
      <anchor>763027a10691f3e567ef25c882c235ef</anchor>
      <arglist>(int cursor)=0</arglist>
    </member>
    <member kind="function">
      <name>SetHCursor</name>
      <anchor>0c9abca22c89367345b585fceb8df22c</anchor>
      <arglist>(HCURSOR cursor)=0</arglist>
    </member>
    <member kind="function">
      <name>UseOwnMessageLoop</name>
      <anchor>f068ad77bed294617c837d3dda4aafb7</anchor>
      <arglist>(bool ownmsgloop)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iWin32Canvas</name>
    <base>iBase</base>
    <filename>structiWin32Canvas.html</filename>
    <member kind="function">
      <name>GetWindowHandle</name>
      <anchor>9854d959d31b1074d98604a13d1a15dd</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>iWxWindow</name>
    <base>iBase</base>
    <filename>structiWxWindow.html</filename>
    <member kind="function">
      <name>GetWindow</name>
      <anchor>e67ccb3cab95c48c9ae749da7b74a095</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <name>SetParent</name>
      <anchor>20275381c2a63e69c6436fc9dbf241e1</anchor>
      <arglist>(wxWindow *parent)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KDHELP64</name>
    <filename>structKDHELP64.html</filename>
    <member kind="function">
      <name>FramePointer</name>
      <anchor>1e7d6a63716f32612780de8735c5fc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KeUserCallbackDispatcher</name>
      <anchor>a3655cef50eca774695982dae5951590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KiCallUserMode</name>
      <anchor>d0bd1a9c0db9757a390dc082c435e6ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>NextCallback</name>
      <anchor>f1af7206d226422189f3a2adeb7c5523</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Reserved</name>
      <anchor>1daefdedbc66269620dc14174fb4a705</anchor>
      <arglist>[8]</arglist>
    </member>
    <member kind="function">
      <name>SystemRangeStart</name>
      <anchor>e247b21c8b9b86d65f9bcb77bf7a0244</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThCallbackBStore</name>
      <anchor>ef8692e8ed7dd7d13c785d7011fe8e5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThCallbackStack</name>
      <anchor>ff280f15b72e1f9a6b956fb92bf71454</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Thread</name>
      <anchor>ae6e4399ac48ad323a6bcff4579e8913</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_CALLBACK_INFORMATION</name>
    <filename>structMINIDUMP__CALLBACK__INFORMATION.html</filename>
    <member kind="function">
      <name>CallbackParam</name>
      <anchor>149d8e8fc9e0e06a7c04b4159ddb62b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CallbackRoutine</name>
      <anchor>1fb79df6d6cba0f87cb274c4088eb8d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_CALLBACK_INPUT</name>
    <filename>structMINIDUMP__CALLBACK__INPUT.html</filename>
    <member kind="function">
      <name>CallbackType</name>
      <anchor>5853718dd0eaa10934c54231420c054d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProcessHandle</name>
      <anchor>f2b4910263c7ba52bca1d089200ebb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ProcessId</name>
      <anchor>d0304c796514f6274c2a0f212f6a9675</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IncludeModule</name>
      <anchor>997c2d7ae0dca88e0182533f0cfda0e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IncludeThread</name>
      <anchor>bc89e7b6e741f8bdafbf219073a23389</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Module</name>
      <anchor>9d63a72ec99975320ef4b2ef57849429</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Thread</name>
      <anchor>f2c693f6a26a5b389c957a3f7e6fec7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadEx</name>
      <anchor>084ef2080069d85709d9eaddda84f9e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_CALLBACK_OUTPUT</name>
    <filename>structMINIDUMP__CALLBACK__OUTPUT.html</filename>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_DIRECTORY</name>
    <filename>structMINIDUMP__DIRECTORY.html</filename>
    <member kind="function">
      <name>Location</name>
      <anchor>7e0e309a9e7c63c1205843a34fa0006a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StreamType</name>
      <anchor>e0b169797746112a76a4c1bd3d614d6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_EXCEPTION_INFORMATION</name>
    <filename>structMINIDUMP__EXCEPTION__INFORMATION.html</filename>
    <member kind="function">
      <name>ClientPointers</name>
      <anchor>3032244fb07171891df5eebf245cd539</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ExceptionPointers</name>
      <anchor>fc570ad0997005d5c12170a2a9576a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadId</name>
      <anchor>9021423abb1b3f2bf01760f608ea149c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_HEADER</name>
    <filename>structMINIDUMP__HEADER.html</filename>
    <member kind="function">
      <name>CheckSum</name>
      <anchor>8e886d1bf1d2ccbfba8e47527f373bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Flags</name>
      <anchor>06ec9f25046973a839d4ae1fca754642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>NumberOfStreams</name>
      <anchor>ca7691ba2432f73044fac615c2809bd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Signature</name>
      <anchor>0279f710fbc05b6aeb9d4e9e948412b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StreamDirectoryRva</name>
      <anchor>358ff966d767731da4e66c2488b5e18d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Version</name>
      <anchor>c31cfc9f341a8087133ceca640d2a28c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Reserved</name>
      <anchor>ed9825160ebef1bbf7769e79ede46aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TimeDateStamp</name>
      <anchor>508bfe50a8f1f0c37cda842304d23d5c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_INCLUDE_MODULE_CALLBACK</name>
    <filename>structMINIDUMP__INCLUDE__MODULE__CALLBACK.html</filename>
    <member kind="function">
      <name>BaseOfImage</name>
      <anchor>7f45265383fc92b5b74140f1b32c49d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_INCLUDE_THREAD_CALLBACK</name>
    <filename>structMINIDUMP__INCLUDE__THREAD__CALLBACK.html</filename>
    <member kind="function">
      <name>ThreadId</name>
      <anchor>a5ba21281fbf8ddfe602aa2d73072ba4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_LOCATION_DESCRIPTOR</name>
    <filename>structMINIDUMP__LOCATION__DESCRIPTOR.html</filename>
    <member kind="function">
      <name>DataSize</name>
      <anchor>822571a90c88de58c9feb020802baa87</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Rva</name>
      <anchor>70dcb1b534a4fe401e7177ca098b38ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_MEMORY_DESCRIPTOR</name>
    <filename>structMINIDUMP__MEMORY__DESCRIPTOR.html</filename>
    <member kind="function">
      <name>Memory</name>
      <anchor>4ee410c410207ff4a18fddd82127a7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StartOfMemoryRange</name>
      <anchor>cbb4412931c511406c0c2a230bf73904</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_MEMORY_LIST</name>
    <filename>structMINIDUMP__MEMORY__LIST.html</filename>
    <member kind="function">
      <name>NumberOfMemoryRanges</name>
      <anchor>2d2c0ce9850dd41f5d488e2e923624c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_MODULE_CALLBACK</name>
    <filename>structMINIDUMP__MODULE__CALLBACK.html</filename>
    <member kind="function">
      <name>BaseOfImage</name>
      <anchor>3874d962ad1f90e83802c9bd207cfd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CheckSum</name>
      <anchor>7157618e023037dcec496f3731f4e557</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CvRecord</name>
      <anchor>89bdad12cecded98cfee540d760c8076</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FullPath</name>
      <anchor>ad856d49b8221e22a1e1609a062cb5cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MiscRecord</name>
      <anchor>f019d4f81f64a30b1b3c9c55098046f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfCvRecord</name>
      <anchor>48595c46dafb07932f13516c95790bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfImage</name>
      <anchor>bbf69c71cb173f957fbe5d3814e600ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfMiscRecord</name>
      <anchor>e72a946e014c6936447df307ca11946c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TimeDateStamp</name>
      <anchor>4adb84db887e67a349e1594e7d048bbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>VersionInfo</name>
      <anchor>9acc871e03122d8e0f7a6a6291ef8015</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_THREAD_CALLBACK</name>
    <filename>structMINIDUMP__THREAD__CALLBACK.html</filename>
    <member kind="function">
      <name>Context</name>
      <anchor>74ce05151e351eeb4584b6fd9615aa71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfContext</name>
      <anchor>578573bd2b2f41b43337ae0477fdb813</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StackBase</name>
      <anchor>a0d6e6f94d30630803053eba4141f47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StackEnd</name>
      <anchor>05e3240ba10a2acbfe6c365dc45fa4c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadHandle</name>
      <anchor>eafe66d4c5be22d303b52af0c3f98d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadId</name>
      <anchor>bfdb81f6c1e565052fb2ef085b367bbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_THREAD_EX_CALLBACK</name>
    <filename>structMINIDUMP__THREAD__EX__CALLBACK.html</filename>
    <member kind="function">
      <name>BackingStoreBase</name>
      <anchor>9b510353037054617799c53b47dba071</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BackingStoreEnd</name>
      <anchor>26e051994b3afa67e6e457aa8f6d5642</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Context</name>
      <anchor>a5c23a927c7c3d89cf89818ce642dd0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfContext</name>
      <anchor>45d9fb3beff7a97a299a78f8a0ce85ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StackBase</name>
      <anchor>d54abadad9c505039430c94e4ccf8bb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>StackEnd</name>
      <anchor>e2376ed8238c6adf0291ee680426e705</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadHandle</name>
      <anchor>29ce1b77be02a8fdabe9f3eee142b1f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ThreadId</name>
      <anchor>ef944781aecd85c72a4bf68b930c554d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_USER_STREAM</name>
    <filename>structMINIDUMP__USER__STREAM.html</filename>
    <member kind="function">
      <name>Buffer</name>
      <anchor>599c66a209bf47ff01f2f2a23bfc78b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>BufferSize</name>
      <anchor>749af3c7543580d6cf2e07f8ed6deccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Type</name>
      <anchor>f6715dcffbd70066b185d3df066a1f33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MINIDUMP_USER_STREAM_INFORMATION</name>
    <filename>structMINIDUMP__USER__STREAM__INFORMATION.html</filename>
    <member kind="function">
      <name>UserStreamArray</name>
      <anchor>51a85e3350ede1c4280559d7de01d66c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>UserStreamCount</name>
      <anchor>a1bd74949e87684b39794cfaa11d9e0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>scfFakeInterface::InterfaceTraits</name>
    <filename>structscfFakeInterface_1_1InterfaceTraits.html</filename>
    <member kind="function">
      <name>InterfaceTraits::InterfaceType</name>
      <anchor>9bc7e49e548e7664e48428b69dde947c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>InterfaceTraits::GetName</name>
      <anchor>16da55e8cac5a025c1b86bfa3966a9c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>InterfaceTraits::GetVersion</name>
      <anchor>1fa621640d42623179f7ffd4e8c31ded</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>STACKFRAME64</name>
    <filename>structSTACKFRAME64.html</filename>
    <member kind="function">
      <name>AddrBStore</name>
      <anchor>48444c2b9d9e30cddee0a2afdfef1da7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddrFrame</name>
      <anchor>416cffd9393a7835024b2c917e3f7252</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddrPC</name>
      <anchor>5db70ac370696158a092d8e6075c62b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddrReturn</name>
      <anchor>c32c815f8858e5a7c8c4d16d0d71492a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>AddrStack</name>
      <anchor>24a96f690e6f08366b8190fe7b1513cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Far</name>
      <anchor>365a573575cb22a3d5a91e4e329db77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>FuncTableEntry</name>
      <anchor>7756ed0364b9d8cf4af22ee3b57008b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>KdHelp</name>
      <anchor>1f1fd493ab2e017b2c52755984daae37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Params</name>
      <anchor>0f3330bae3990250817ff856beffb0bb</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="function">
      <name>Reserved</name>
      <anchor>ab414f19e2d9cbc993efc911adb48273</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function">
      <name>Virtual</name>
      <anchor>ddae3e5cefe726b9a7a04b23ac76e3e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SYMBOL_INFO</name>
    <filename>structSYMBOL__INFO.html</filename>
    <member kind="function">
      <name>Address</name>
      <anchor>2bcdc4763f21a358d67d5b8f65cf59bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Flags</name>
      <anchor>57df38283f07c819b5e613c44feecaab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MaxNameLen</name>
      <anchor>c90a497d0ad03612ead319c8f654e7f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ModBase</name>
      <anchor>19090276bc1644b1e6f6d65bfbf7354d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Name</name>
      <anchor>cf29b734ea07aa1992d832c8a315d722</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="function">
      <name>NameLen</name>
      <anchor>aea37d2a1476b5f71739767119915e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>c655a4797d1a9e683ec5b0e36d055d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Reserved</name>
      <anchor>39208817e1387c20c94629d233e4616f</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>Reserved2</name>
      <anchor>bbed2255c03ddcb7d637d7c05765099c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Scope</name>
      <anchor>b3d3fb7fbd5fd1727c2f8bb4d0fe392b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Size</name>
      <anchor>b41631269a521410f42ace0cf31e8af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfStruct</name>
      <anchor>cf842ad50f4e964b7d453b90e73bc2bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Tag</name>
      <anchor>6033e467f60e86fefdfe99521c4f01bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeIndex</name>
      <anchor>358a4881be3116293ed9d6f1e7bb12a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>d3c21bb24528b999f925acc3d2eaa51d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SYMBOL_INFOW</name>
    <filename>structSYMBOL__INFOW.html</filename>
    <member kind="function">
      <name>Address</name>
      <anchor>46ffd71bfddf55ec6d9abb2cb6b2543d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Flags</name>
      <anchor>c64e5157dbb027ee17c931b3cee0884f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>MaxNameLen</name>
      <anchor>9ba4e92d1b042e03eb3cb8a7da51d48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ModBase</name>
      <anchor>f42a93232a294a0b6fc8c32dde145bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Name</name>
      <anchor>b4ce7e301a487234429574cff3ba7853</anchor>
      <arglist>[1]</arglist>
    </member>
    <member kind="function">
      <name>NameLen</name>
      <anchor>9fb3f64035105dcf1f850759cd6b300c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Register</name>
      <anchor>de0c010ccd306b09201d9c9c4ab8353f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Reserved</name>
      <anchor>0f04a1d2fcbc67024a52ba22d149e166</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>Reserved2</name>
      <anchor>d4ace7384d5727a8deb8ff0547949a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Scope</name>
      <anchor>3ff150dd7b56b2045847000c0d1651ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Size</name>
      <anchor>0bcc991843375281c315219c9976ca90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>SizeOfStruct</name>
      <anchor>a820fe2fd7f27c6e5af963493b4c2d21</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Tag</name>
      <anchor>6518de25381042e162e50018cc71f0c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>TypeIndex</name>
      <anchor>8ff784c5434c897ffd2585b8969e6fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>Value</name>
      <anchor>ff89ee67216690ecb0170b802d8f2ba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZIP_central_directory_file_header</name>
    <filename>structZIP__central__directory__file__header.html</filename>
    <member kind="function">
      <name>compression_method</name>
      <anchor>cad717065b1346fe68cddceb6dd39e91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>crc32</name>
      <anchor>4c26a4928697ac69f28cf447e39f8d81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csize</name>
      <anchor>016d7635b5e6119763d388cfa53d5b1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>disk_number_start</name>
      <anchor>b9edaa7fe905e820981b0d22d4c4cab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>external_file_attributes</name>
      <anchor>e5ed1d96f700b2ed9f8c7dc4ac5d1bfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extra_field_length</name>
      <anchor>e6022b345338b1a893156a340ba22cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>file_comment_length</name>
      <anchor>015bb4827ea1a7ad1448f47540553351</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>filename_length</name>
      <anchor>b68d9c0d297c4543683071e256f547b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>general_purpose_bit_flag</name>
      <anchor>4d01b2d5eeb5e24501bab3fa07e78566</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>internal_file_attributes</name>
      <anchor>0ebddc8104e8354efa479ef35eb4b05f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>last_mod_file_date</name>
      <anchor>4b809e6b16db01a42dfb4f729b77327f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>last_mod_file_time</name>
      <anchor>4d2b9db93f0c608c1b9e9125f44e10e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>relative_offset_local_header</name>
      <anchor>083c4c43dda0c292bc72faded303bdac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ucsize</name>
      <anchor>2ab48142fe710aec36e373db958c4b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>version_made_by</name>
      <anchor>f50148d394f2a6280998a2de92a7d932</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>version_needed_to_extract</name>
      <anchor>5a4bf031e53aefa99fd445776465dd08</anchor>
      <arglist>[2]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZIP_end_central_dir_record</name>
    <filename>structZIP__end__central__dir__record.html</filename>
    <member kind="function">
      <name>num_disk_start_cdir</name>
      <anchor>53987029546602e4c248d60af069ca32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>num_entries_centrl_dir_ths_disk</name>
      <anchor>ecb130abf0370120f4d4702d54f3c7f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>number_this_disk</name>
      <anchor>8b0fe9ae124213e7d3da387a8253d4a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>offset_start_central_directory</name>
      <anchor>2d4366e898a3d1cbebd62cb0919564a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>size_central_directory</name>
      <anchor>fc794c45a4defdf3b36c9ad99eaaa602</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>total_entries_central_dir</name>
      <anchor>82e04ff37550d3d0d46d1f4da3a8db1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>zipfile_comment_length</name>
      <anchor>40e1aa24a60f23d8e532b6d7e89e62e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ZIP_local_file_header</name>
    <filename>structZIP__local__file__header.html</filename>
    <member kind="function">
      <name>compression_method</name>
      <anchor>8b7282a380a258e529c55c1ff9ba6e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>crc32</name>
      <anchor>8fc290ba8bd791b10e75ec909160bd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csize</name>
      <anchor>d825a8cd806b3d8aaeba59949f790b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>extra_field_length</name>
      <anchor>367b941713be47b9bd844904df26554a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>filename_length</name>
      <anchor>13348f2c730141936a981983cdc63208</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>general_purpose_bit_flag</name>
      <anchor>649f48885fc176892d9252e366f9b7b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>last_mod_file_date</name>
      <anchor>01731e20604591ed1f0b68a39ab361bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>last_mod_file_time</name>
      <anchor>0e2c776b1ba5e288f8b4f32f4a14c68a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ucsize</name>
      <anchor>8c5377452691cebfc9f90bb65bd148eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>version_needed_to_extract</name>
      <anchor>94d026278bee5fd08abc4019f4d0cfb4</anchor>
      <arglist>[2]</arglist>
    </member>
    <member kind="function">
      <name>csSubRect</name>
      <anchor>g0838117dc05d2d4f8ce68a2a5b8964ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csExpandPath</name>
      <anchor>g28a74023caee3364f9a5595b0b2da4e9</anchor>
      <arglist>(const char *path)</arglist>
    </member>
    <member kind="function">
      <name>csFindSystemRoots</name>
      <anchor>g4cd5c27ae8eaeb5aa2248278e8f08412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <name>csGetAppDir</name>
      <anchor>g54de2486e8bda87b5950a8243b774bb0</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>csGetAppPath</name>
      <anchor>g9f7acd23fb780e1f486156037123e119</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>csGetResourceDir</name>
      <anchor>gfcc8478ac659f3ad6cd3202357f645a3</anchor>
      <arglist>(const char *argv0)</arglist>
    </member>
    <member kind="function">
      <name>INIT_MIN_DEPTH</name>
      <anchor>83b5e428618bba6f3dfda02333e9245c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>INIT_MIN_DEPTH_CMP</name>
      <anchor>2e0a38b07c25c81326fa6dc462cf8cbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>csTileCol</name>
      <anchor>gb6d30c9dd13c542edf1c21a298f40003</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>@57</name>
      <anchor>fa9be5679ab03d785820f2474c5ccc6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>IsReferenceHelper1</name>
      <anchor>b65655a7933d347195888daeb43f5d3c</anchor>
      <arglist>(Wrap&lt; T &gt;)</arglist>
    </member>
    <member kind="function">
      <name>csCheckVerbosity</name>
      <anchor>95c0408d02224ae155a808a0553accf3</anchor>
      <arglist>(int argc, char const *const argv[], char const *major, char const *minor)</arglist>
    </member>
    <member kind="function">
      <name>csCheckVerbosity</name>
      <anchor>2bf95fe6fd6735c3ff499e6a9d9303a7</anchor>
      <arglist>(int argc, char const *const argv[], char const *flag=0, bool fuzzy=true)</arglist>
    </member>
    <member kind="function">
      <name>csParseVerbosity</name>
      <anchor>98f924184ed38cf8146d85057ce01fac</anchor>
      <arglist>(int argc, char const *const argv[])</arglist>
    </member>
    <member kind="function">
      <name>csCheckPlatformVFSVar</name>
      <anchor>493c449478380a1b5d98276b3e0bda00</anchor>
      <arglist>(const char *VarName)</arglist>
    </member>
    <member kind="function">
      <name>csExpandPlatformFilename</name>
      <anchor>b07edc56c05fda771a15635e2149e6b1</anchor>
      <arglist>(const char *inputFilename, char *outputFilename)</arglist>
    </member>
    <member kind="function">
      <name>cswinWindowsVersion</name>
      <anchor>16a1c5efc03239aecb5214b99309df55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>swinWin9x</name>
      <anchor>16a1c5efc03239aecb5214b99309df556b1d5ba8a3706a5b2a7127ba5e3e126e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>swinWinNT</name>
      <anchor>16a1c5efc03239aecb5214b99309df5554f693caa0040150e6bc66bd8a1f8db9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>swinWin2K</name>
      <anchor>16a1c5efc03239aecb5214b99309df55744f8e588f03038f85fc667b8c1358bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>swinWinXP</name>
      <anchor>16a1c5efc03239aecb5214b99309df55a1e4e2fd45e72b4f065aa2f497c484a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>cswinAnsiToWide</name>
      <anchor>7f0e9f222c995d12f48ddacb34b24a2b</anchor>
      <arglist>(const char *ansi, UINT codePage=CP_ACP)</arglist>
    </member>
    <member kind="function">
      <name>cswinGetErrorMessage</name>
      <anchor>6ca98256f702495006bae3b9ca73e25f</anchor>
      <arglist>(HRESULT code)</arglist>
    </member>
    <member kind="function">
      <name>cswinGetErrorMessageW</name>
      <anchor>c368fa0a2e9eaa4d95bec024e57fe7a2</anchor>
      <arglist>(HRESULT code)</arglist>
    </member>
    <member kind="function">
      <name>cswinIsWinNT</name>
      <anchor>b47782b09f200ef769700a23f9164361</anchor>
      <arglist>(cswinWindowsVersion *version=0)</arglist>
    </member>
    <member kind="function">
      <name>cswinWideToAnsi</name>
      <anchor>6f1d85bec42493623550c9d0247871bc</anchor>
      <arglist>(const wchar_t *wide, UINT codePage=CP_ACP)</arglist>
    </member>
    <member kind="function">
      <name>Byte</name>
      <anchor>8390de1c62e036e839ec8150711d6539</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_COMPRESSED_SIZE</name>
      <anchor>a16c09f511808fc64d2374ea7e2320c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_COMPRESSION_METHOD</name>
      <anchor>8503788ab3cafc4030faf9d8dad04f1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_CRC32</name>
      <anchor>bfea10bfd3bfb8260467051076fb9a63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_DISK_NUMBER_START</name>
      <anchor>136e34b9b1ddfb33b2109d8e6914ebbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_EXTERNAL_FILE_ATTRIBUTES</name>
      <anchor>2821b3ba01557001df3439b9380ffd3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_EXTRA_FIELD_LENGTH</name>
      <anchor>4129dadbcd6a9b00ea8412e17138c451</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_FILE_COMMENT_LENGTH</name>
      <anchor>b5572876807f26a5db21633705c2118b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_FILENAME_LENGTH</name>
      <anchor>e136bc37fb58b707cea7c40c9488b45f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_GENERAL_PURPOSE_BIT_FLAG</name>
      <anchor>13dab2c5cc8578996536d30187fca912</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_INTERNAL_FILE_ATTRIBUTES</name>
      <anchor>6c29c98c64b20b1f71339fad073cf06d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_LAST_MOD_FILE_DATE</name>
      <anchor>c7fafdc02411eb1e85f70b3755db2ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_LAST_MOD_FILE_TIME</name>
      <anchor>c2c2e038ac3dde03ef9ff5c35a815618</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_RELATIVE_OFFSET_LOCAL_HEADER</name>
      <anchor>50ac816d443bb29faffdf5926ddc22e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_UNCOMPRESSED_SIZE</name>
      <anchor>efc16b71378f681f1c82157dea15cf74</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_VERSION_MADE_BY_0</name>
      <anchor>c51ae62384aa335f4930582d5084eb24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_VERSION_MADE_BY_1</name>
      <anchor>0a538c41a817989614bc1d7bfcae22ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_VERSION_NEEDED_TO_EXTRACT_0</name>
      <anchor>d48ca26c0406c58591ff5199ec9c8aa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>C_VERSION_NEEDED_TO_EXTRACT_1</name>
      <anchor>32b4ddb27a1ba236852911028c883147</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CENTRAL_HDR_SIG</name>
      <anchor>04f26e4a953480fdbe82633ac4fe0f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>CRCVAL_INITIAL</name>
      <anchor>0543d764bda17ce8a415569130e05803</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>DEF_WBITS</name>
      <anchor>ef084f32d9ca8b9273a1c826b89b979a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_NUM_DISK_WITH_START_CENTRAL_DIR</name>
      <anchor>e97b5ff080b8705550e0f7627d84ddec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_NUM_ENTRIES_CENTRL_DIR_THS_DISK</name>
      <anchor>e3e33d37dfcdf5eade23b8185599dfbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_NUMBER_THIS_DISK</name>
      <anchor>7d9501bec46434a9c252abedfd5562b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_OFFSET_START_CENTRAL_DIRECTORY</name>
      <anchor>fc074e439521787cfe61bcab251567ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_SIZE_CENTRAL_DIRECTORY</name>
      <anchor>dc8f36595bd7d797a947f328c58f44f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_TOTAL_ENTRIES_CENTRAL_DIR</name>
      <anchor>82379ff0170d62845b84407336e0b5c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>E_ZIPFILE_COMMENT_LENGTH</name>
      <anchor>63cb3d0335bd174afd8f4e8c5b771a33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>END_CENTRAL_SIG</name>
      <anchor>5b0e2db196de031f57a159083d991643</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>EXTD_LOCAL_SIG</name>
      <anchor>e8c7389005afd27d374969b5d7a7f7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_COMPRESSED_SIZE</name>
      <anchor>f901928aef73fb5c4ae9f066f2a8afc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_COMPRESSION_METHOD</name>
      <anchor>ce64f0beaf598d4d8098d151734e12e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_CRC32</name>
      <anchor>e867604d651255bd8ccf22803752fcba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_EXTRA_FIELD_LENGTH</name>
      <anchor>789f71a148d8747a31228d155efad610</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_FILENAME_LENGTH</name>
      <anchor>6b8e079716ed3d3f92dd02d84f1c7b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_GENERAL_PURPOSE_BIT_FLAG</name>
      <anchor>b0a237b4af7078c094b687476ac98d45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_LAST_MOD_FILE_DATE</name>
      <anchor>a82bbfe780b09b201257f152f6a41164</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_LAST_MOD_FILE_TIME</name>
      <anchor>d97b9b694ec18d5e8fa369c3ef72f695</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_UNCOMPRESSED_SIZE</name>
      <anchor>bf4cbca2bec1d7494b0913555d5af63b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_VERSION_NEEDED_TO_EXTRACT_0</name>
      <anchor>b24720c639896e12de7514f94fd004c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>L_VERSION_NEEDED_TO_EXTRACT_1</name>
      <anchor>997f6698ee3a584b24786f3bccd75e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>LOCAL_HDR_SIG</name>
      <anchor>ae7baa7fd099cf360bd9b250e97ddf51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZIP_CENTRAL_DIRECTORY_FILE_HEADER_SIZE</name>
      <anchor>8b0a515996c32ee0d7d197dae1d67225</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZIP_DEFLATE</name>
      <anchor>650e6157b7e982fa00d213b024da4929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZIP_END_CENTRAL_DIR_RECORD_SIZE</name>
      <anchor>713e57d9aaab9eb35e118dfa2807b0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZIP_LOCAL_FILE_HEADER_SIZE</name>
      <anchor>bd2897fce494641089c0f369d5224553</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ZIP_STORE</name>
      <anchor>f66f562d6264ecad7e5283ba7693876c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>u32</name>
      <anchor>0bb0c4c53d0a5ea2c01d0bb363b56722</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>uch</name>
      <anchor>dc2a2d08cde0d9a02c8d8dc8a3414e8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <name>ush</name>
      <anchor>f687042e0e2c8c946cbf60f9e4242b50</anchor>
      <arglist></arglist>
    </member>
  </compound>
</tagfile>
