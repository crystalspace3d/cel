#----------------------------------------------------------------------------
# *** Application rules ***

rule Header
{
# nothing yet...
}

rule Application
{
  MSVCApplication $(<) : $(>) ;

  local _i _sources ;
  
  for _i in $(>)
  {
    switch $(_i:S)
    {
      case .h : Header $(<) : $(_i) ;
      
      case * : _sources += $(_i) ;
    }
  }
  
  ApplicationFromObjects $(<) : $(_sources:S=$(SUFOBJ)) : $(3) : $(4) ;
  Objects $(_sources) ;
}
rule ApplicationFromObjects
{
	local _t _s ;

	_s = [ FGristFiles $(>) ] ;
	_t = [ FAppendSuffix $(<) : $(SUFEXE) ] ;

	# so 'jam foo' works when it's really foo.exe
	if $(_t) != $(<)
	{
		Depends $(<) : $(_t) ;
		NotFile $(<) ;
	}

	# make compiled sources a dependency of target
	Depends exe : $(_t) ;
	Depends $(_t) : $(_s) ;
	if $(LOCATE_TARGETS)
	{
		MakeLocate $(_t) : $(LOCATE_TARGET) ;
	}
	else
	{
		MakeLocate $(_t) : $(BUILDTOP) ;
	}

	NEEDLIBS on $(_t) += $(4) ;
	NotFile ($4) ;
	
	# construct Install Targets
	InstallApplication $(_t) ;

	# construct Clean Targets
	Clean clean : $(_t) ;
	Clean $(<)clean : $(_t) $(_s) ;

	# Invoke Link rule
	Link $(_t) : $(_s) ;
}

#----------------------------------------------------------------------------
# *** Plugin rules ***

switch $(OS)
{
case NT :
        SUFDLL ?= .dll ;
case MINGW32 :
        SUFDLL ?= .dll ;
case MACOSX :
	SUFDLL ?= .csplugin ;
}
#unix default
SUFDLL ?= .so ;

rule LinkPluginLibraries
{
  local _t = [ FAppendSuffix $(<) : $(SUFDLL) ] ;

  Depends $(_t) : $(>:S=$(SUFLIB)) ;
  NEEDLIBS on $(_t) += $(>:S=$(SUFLIB)) ;
}

rule Plugin
{
  local _i _sources ;

  MSVCPlugin $(<) : $(>) ;

  for _i in $(>)
  {
    switch $(_i:S)
    {
      case .h : Header $(_i) ;

      case * : _sources += $(_i) ;
    }
  }
  
  PluginFromObjects $(<) : $(_sources:S=$(SUFOBJ)) : $(3) : $(4) ;
  Objects $(_sources) ;
}
rule PluginFromObjects
{
        local _t _s ; 

        _s = [ FGristFiles $(>) ] ;
        _t = [ FAppendSuffix $(<) : $(SUFDLL) ] ;


	# XXX: Disabled for now because this goes wrong when using subdirs
	# and a dir in the root directory has the same name as the
	# target :-/

        #if $(_t) != $(<)
        #{
        #        Depends $(<) : $(_t) ;
        #        NotFile $(<) ;
        #}
        Depends $(_t) : $(_s) ;
        Depends all : $(_t) ;
	if $(LOCATE_TARGETS)
	{
		MakeLocate $(_t) : $(LOCATE_TARGET) ;
	}
	else
	{
		MakeLocate $(_t) : $(BUILDTOP) ;
	}

	ADDLIBS on $(_t) += $(4) ;

	# Construct Install Target
	InstallPlugin $(_t) ;

	# Construct Clean Target
        Clean clean : $(_t) ;
	Clean $(<)clean : $(_t) $(_s) ;

	# Invoke Link rule
	NAME on $(_t) = $(<) ;
        LinkPlugin $(_t) : $(_s) ;
}

if $(OS) = "NT"
{
    actions LinkPlugin bind NEEDLIBS
    {
	echo EXPORTS > deffile.tmp
	echo $(NAME)_scfInitialize >> deffile.tmp
	echo $(NAME)_scfFinalize >> deffile.tmp
        dllwrap --def deffile.tmp --no-export-all-symbols --dllname $(NAME) -o $(<) $(>) $(NEEDLIBS) $(ADDLIBS) $(LINKLIBS) -mwindows -mconsole
	rm -f deffile.tmp
    }
}
else if $(OS) = "MACOSX"
{
    actions LinkPlugin
    {
	$(LINK) -v -bundle -o $(<) $(>) $(ADDLIBS) $(LINKLIBS)
    }
}
else
{
    actions LinkPlugin bind NEEDLIBS
    {
	$(LINK) -shared -Wl,-soname -Wl,$(<) -o $(<) $(>) $(NEEDLIBS) $(ADDLIBS) $(LINKLIBS)
    }
}

