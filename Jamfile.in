TOP ?= "@top_srcdir@" ;
BUILDTOP ?= "@top_builddir@" ;

SubDir TOP ;

IncludeDir ;
IncludeDir include ;
IncludeDir $(BUILDTOP) : : ignoresubdir ;

# Construct a distclean target
CleanDir clean : out ;

Clean distclean : configure.lineno config.status config.status.lineno
		  config.log config.cache aclocal.m4
		  Jamconfig Jamfile ;
CleanDir distclean : autom4te.cache ;
Depends distclean : clean ;
Help distclean : "Remove configuration information and built targets" ;

Clean maintainerclean : configure aclocal.m4 config.h.in ;
Depends maintainerclean : distclean ;

# Enable msvcgen
MsvcGenConfig PYTHON.AVAILABLE : yes ;
MsvcGenConfig PYTHON.CFLAGS : "/D \"SWIG_GLOBAL\"" ;
MsvcGenConfig PYTHON.LFLAGS ;
MsvcGenConfig PYTHON.LIBS ;
MsvcGenConfig CRYSTAL.AVAILABLE : yes ;
MsvcGenConfig CRYSTAL.CFLAGS ;
MsvcGenConfig CRYSTAL.LFLAGS ;
MsvcGenConfig CRYSTAL.LIBS : 
  "libcstool.lib libcsgfx.lib libcsgeom.lib libcsutil.lib" ;
MsvcGenConfig CRYSTAL.CFLAGS.DEBUG ;
MsvcGenConfig CRYSTAL.LFLAGS.DEBUG ;
MsvcGenConfig CRYSTAL.LIBS.DEBUG : 
  "libcstool_d.lib libcsgfx_d.lib libcsgeom_d.lib libcsutil_d.lib" ;
MsvcGenSubDir TOP msvc : 6 ;
MsvcGenSubDir TOP msvc : 7 ;
MsvcGenTemplateDir TOP mk msvcgen template ;
MsvcGenWorkspace cel ;

# include subdirectories
SubInclude TOP docs ;
SubInclude TOP include ;
SubInclude TOP libs ;
SubInclude TOP plugins ;
SubInclude TOP apps ;

# generate cel-config
rule CelConfigGen
{
  SEARCH on $(>) = $(SUBDIR) ;
  MakeLocate $(<) : $(LOCATE.TARGETS) ;
  Depends $(<) : $(>) ;
  Clean clean : $(<) ;
}

rule CelLocalLinkName
{
  local lflag = $(<) ;
  local Lflag = $(LOCATE.OBJECTS)/libs/$(<) ;
  exportsummary += $(lflag) ;
  exportsummary += $(Lflag) ;
}

exportlibs ?= "celtool" ;

rule CollectLinkOptions
{
  for entry in $(exportlibs)
  {
    CelLocalLinkName $(entry) ;
  }
}

CollectLinkOptions ;

actions CelConfigGen
{
  cat > $(<) << __END__
#!/bin/sh

prefix="$(INSTALLDIR.PREFIX)"
exec_prefix="\${prefix}"
version="$(PACKAGE_VERSION)"

exportsummary=" $(exportsummary) "
# test for release/source directory
if test -e "\${CEL}/include/physicallayer/pl.h"; then
  includedir="\${CEL}/include"
else
  includedir="\${CEL}/include"
  includedir="$(INSTALLDIR.INCLUDE)"
fi

if test "x $(INSTALLDIR.PLUGIN) " = "x  "; then
  plugindir="\${CEL}"
else
  plugindir="\${CEL}"
  plugindir="$(INSTALLDIR.PLUGIN)"
fi

cflags="-I\${includedir}"
libs="$(exportlibs)"

__END__
  cat $(>) >> $(<)
  chmod +x $(<)
}

CelConfigGen cel-config : cel-config.template ;
Depends cel-config : Jamfile Jamconfig ;
Depends all : cel-config ;
Depends install_bin :
  [ DoInstall cel-config : $(bindir) : $(INSTALL_PROGRAM) ] ;

# deprecated...
SEARCH on cel.cex = $(SUBDIR) ;
Depends install_bin : [ DoInstall cel.cex : $(bindir) : $(INSTALL_PROGRAM) ] ;
