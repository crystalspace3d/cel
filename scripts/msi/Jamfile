SubDir TOP scripts msi ;

# @@@ Not quite the same ...
MSM_VERSION ?= $(PACKAGE_VERSION) ;
MSM_ARCH = $(CS_COMPILER_NAME_AND_VERSION) ;

MSI_VERSION_MAJORMINOR ?= $(PACKAGE_VERSION_LIST[1]).$(PACKAGE_VERSION_LIST[2]) ;

# Package version.
# This will become the MSI package version "build" number.
MSI_VERSION_PACKAGE = 4 ;

# @@@ FIXME PATHS: they behave counterintuitively as they're treated as
# relative to out/msi/ instead the top build dir
CRYSTAL.MSM_PATH_DEFAULT = "$(CRYSTAL.INCLUDE_DIR)/../out/msi" ;
CRYSTAL.WXI_PATH_DEFAULT = "$(CRYSTAL.INCLUDE_DIR)/../scripts/msi" ;
WIN32LIBS.MSM_PATH_DEFAULT = "$(CRYSTAL.INCLUDE_DIR)/../win32libs/mergemodules" ;

INCL_CEL_RUNTIME = $(SUBDIR)/cel-feature-runtime.wxi $(SUBDIR)/cel-directory-runtime.wxi ;
Includes cel-celstart.wxs : $(INCL_CEL_RUNTIME) ;

# Architecture-independent
MSIMergeModuleFromList cel.doc : doc-manual doc-api : $(MSM_VERSION) : doc-manual:manual doc-api:api ;
MSIMergeModuleFromList cel.data.demo : data-demo : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.data.runtime : data-runtime : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.include : headers : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.vfs : vfs : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.python : python-bindings : $(MSM_VERSION) ;
MakeLocate cel.register.msm : $(LOCATE.MSM) ;
MSIMergeModule cel.register.msm : cel.register.wxs ;

# Architecture-dependent
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).include : headers-platform : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).lib : libs-shared : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).link : libs-static : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).executable.runtime : plugin plugin-python : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).executable.demo : app-demo : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).executable.celstart : app-celstart : $(MSM_VERSION) ;
MSIMergeModuleFromList cel.arch.$(MSM_ARCH).python : python-modules : $(MSM_VERSION) ;

# Safeguard
MSI_UPGRADE_CODES_FOR_VERSION = 2.0 ;
if "$(MSI_UPGRADE_CODES_FOR_VERSION)" != "$(MSI_VERSION_MAJORMINOR)"
{
  Exit "CEL version was changed, please set new MSI upgrade codes" ;
}

MSI_UPGRADE_CODE.cel.celstart.GCC_3.4 = 666969f5-e086-4a9d-81cc-5bdaabc95909 ;

rule GetMsiRelatedPath
{
  local env = $(1) ;
  local target = $(2) ;
  if ! $($(env))
  {
    $(env) = $($(env)_DEFAULT) ;

    local w = $(env).warning ;
    MakeLocate $(w) : $(LOCATE.MSI) ;
    ENV on $(w) = $(env) ;
    GUESS on $(w) = $($(env)) ;
    WarnMsiPathNotSet $(w) ;
    Depends $(target) : $(w) ;
    Clean clean : $(w) ;
  }
  return $($(env)) ;
}

actions WarnMsiPathNotSet
{
  echo "*** $(ENV) not set; defaulting to: $(GUESS)" >&2
  echo "*** If default is undesirable, assign $(ENV) Jam variable." >&2
  echo "dummy file" > $(1)
}

rule GetCSMSMPath { return [ GetMsiRelatedPath CRYSTAL.MSM_PATH : $(1) ] ; }

rule GetCSWXIPath { return [ GetMsiRelatedPath CRYSTAL.WXI_PATH : $(1) ] ; }

rule GetWin32LibsMSMPath { return [ GetMsiRelatedPath WIN32LIBS.MSM_PATH : $(1) ] ; }

rule MakeMSIsForArchAndKind
{
  local arch = $(1) ;
  local kind = $(2) ;
  local msi = cel-$(kind)-$(arch).msi ;
  local cs_msms = [ GetCSMSMPath $(msi) ] ;
  local cs_wxis = [ GetCSWXIPath $(msi) ] ;
  local win32libs_msms = [ GetWin32LibsMSMPath $(msi) ] ;

  MakeLocate $(msi) : $(LOCATE.MSI) ;
  MSIPackage $(msi) : cel-$(kind).wxs :
    "CEL_MSM_PATH=$(LOCATE.MSM)"
    "CRYSTAL_MSM_PATH=$(cs_msms)"
    "CRYSTAL_WXINCLUDE=$(cs_wxis)"
    "WIN32LIBS_MSM_PATH=$(win32libs_msms)"
    "ARCH=$(arch)" "TOP=$(TOP)"
    "UPGRADE_CODE=$(MSI_UPGRADE_CODE.cel.$(kind).$(arch))" 
    "VERSION_MAJORMINOR=$(MSI_VERSION_MAJORMINOR)"
    "VERSION_PACKAGE=$(MSI_VERSION_PACKAGE)" :
    cel-$(kind)-$(arch) ;
  #Depends cel-$(arch).msi : mergemodules ;
  Depends msis-$(kind) : $(msi) ;
  Depends msis-$(arch) : $(msi) ;
  Depends msis : $(msi) ;
}

rule MakeMSIsForArch
{
  local arch = $(1) ;
  MakeMSIsForArchAndKind $(arch) : celstart ;
}

MakeMSIsForArch $(MSM_ARCH) ;
