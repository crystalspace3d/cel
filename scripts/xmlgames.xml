<world>
    <textures>
        <texture name="picture1">
	    <file>/cellib/images/to_the_tavern.jpg</file>
	    <keepimage />
        </texture>
        <texture name="leaves">
	    <file>/cellib/images/leaves.png</file>
	    <keepimage />
        </texture>
        <texture name="light_wood">
	    <file>/cellib/images/light_wood.png</file>
	    <keepimage />
        </texture>
        <texture name="dark_wood">
	    <file>/cellib/images/dark_wood.png</file>
	    <keepimage />
        </texture>
        <texture name="sand_stone">
	    <file>/cellib/images/sand_stone.png</file>
	    <keepimage />
        </texture>
        <texture name="marble">
	    <file>/cellib/images/marble.png</file>
	    <keepimage />
        </texture>
        <texture name="chocolate">
	    <file>/cellib/images/chocolate.png</file>
	    <keepimage />
        </texture>
        <texture name="slanted_stone">
	    <file>/cellib/images/slanted_stone.png</file>
	    <keepimage />
        </texture>
        <texture name="hero">
	    <file>/cellib/images/hero.png</file>
	    <transparent red="1" green="1" blue="1" />
	    <keepimage />
        </texture>
        <texture name="monster">
	    <file>/cellib/images/monster.png</file>
	    <transparent red="1" green="1" blue="1" />
	    <keepimage />
        </texture>
        <texture name="apple">
	    <file>/cellib/images/apple.png</file>
	    <transparent red="0" green="0" blue="0" />
	    <keepimage />
        </texture>
        <texture name="pear">
	    <file>/cellib/images/pear.png</file>
	    <transparent red="0" green="0" blue="0" />
	    <keepimage />
        </texture>
        <texture name="banana">
	    <file>/cellib/images/banana.png</file>
	    <transparent red="0" green="0" blue="0" />
	    <keepimage />
        </texture>
        <texture name="mushroom">
	    <file>/cellib/images/mushroom.png</file>
	    <transparent red="0" green="0" blue="0" />
	    <keepimage />
        </texture>
        <texture name="diamond">
	    <file>/cellib/images/diamond.png</file>
	    <transparent red="0" green="0" blue="0" />
	    <keepimage />
        </texture>
    </textures>
    <materials>
	<material name="picture1"> <texture>picture1</texture> </material>
        <material name="leaves"> <texture>leaves</texture> </material>
        <material name="light_wood"> <texture>light_wood</texture> </material>
        <material name="dark_wood"> <texture>dark_wood</texture> </material>
        <material name="sand_stone"> <texture>sand_stone</texture> </material>
        <material name="marble"> <texture>marble</texture> </material>
        <material name="chocolate"> <texture>chocolate</texture> </material>
        <material name="slanted_stone"> <texture>slanted_stone</texture> </material>
        <material name="hero"> <texture>hero</texture> </material>
        <material name="monster"> <texture>monster</texture> </material>
        <material name="apple"> <texture>apple</texture> </material>
        <material name="pear"> <texture>pear</texture> </material>
        <material name="banana"> <texture>banana</texture> </material>
        <material name="mushroom"> <texture>mushroom</texture> </material>
        <material name="diamond"> <texture>diamond</texture> </material>
    </materials>
    <sounds>
        <sound name="boing"> <file>/cellib/sounds/boing_x.wav</file> </sound>
        <sound name="click"> <file>/cellib/sounds/click_x.wav</file> </sound>
        <sound name="yay"> <file>/cellib/sounds/yay_x.wav</file> </sound>
        <sound name="clang"> <file>/cellib/sounds/clang_x.wav</file> </sound>
        <sound name="bloop"> <file>/cellib/sounds/bloop_x.wav</file> </sound>
    </sounds>
    <settings>
        <clearscreen>yes</clearscreen>
        <clearzbuf>yes</clearzbuf>
    </settings>
    <plugins>
        <plugin name="celentity">cel.addons.celentity</plugin>
        <plugin name="xmlscripts">cel.addons.xmlscripts</plugin>
    </plugins>

    <addon plugin="xmlscripts">
        <pcfactory>cel.pcfactory.mesh</pcfactory>
        <pcfactory>cel.pcfactory.solid</pcfactory>
        <pcfactory>cel.pcfactory.gravity</pcfactory>
        <pcfactory>cel.pcfactory.movable</pcfactory>
        <pcfactory>cel.pcfactory.billboard</pcfactory>
        <pcfactory>cel.pcfactory.properties</pcfactory>
        <pcfactory>cel.pcfactory.timer</pcfactory>
        <pcfactory>cel.pcfactory.inventory</pcfactory>
        <pcfactory>cel.pcfactory.pckeyinput</pcfactory>

	<!-- *****************************************************
	  - This script handles the menu system of xmlgames.
	  -  ***************************************************** -->
	<script name="menu">
	    <!--
	      - Initialization.
	      -->
	    <event name="init">
	        <print value="'Start initializing menu...'" />

		<!-- Puzzle game button -->
		<var name="material" value="picture1" />
		<createentity name="puzzle_button" behaviour="game_button" />
		<default propclass="pc(puzzle_button,pcbillboard)" />
	        <property id="propid(x)" value="10000" />
	        <property id="propid(y)" value="10000" />
		<var entity="puzzle_button" name="game" value="puzzle_main" />

		<!-- Maze game button -->
		<var name="material" value="apple" />
		<createentity name="maze_button" behaviour="game_button" />
		<default propclass="pc(maze_button,pcbillboard)" />
	        <property id="propid(x)" value="10000" />
	        <property id="propid(y)" value="70000" />
		<var entity="maze_button" name="game" value="maze_main" />

		<!-- Boulderdash game button -->
		<var name="material" value="slanted_stone" />
		<createentity name="bdash_button" behaviour="game_button" />
		<default propclass="pc(bdash_button,pcbillboard)" />
	        <property id="propid(x)" value="10000" />
	        <property id="propid(y)" value="130000" />
		<var entity="bdash_button" name="game" value="bdash_main" />
	    </event>

	    <!--
	      - Call this event to start a game. This will destroy the menu
	      - and create the game entity. Needs the ?game variable to be
	      - set to the name of the game (the button will do that).
	      -->
	    <event name="startgame">
	        <print value="'Start destroying menu...'" />
	        <destroyentity name="puzzle_button" />
	        <destroyentity name="maze_button" />
	        <destroyentity name="bdash_button" />
		<createentity name="?game" behaviour="?game" />
	    </event>
	</script>

	<!-- *****************************************************
	  - Generic back button handler for returning to the main menu.
	  - Users of this behaviour should set the 'game_entity' variable
	  - of the entity which controls this script to the entity controlling
	  - the game. It will call 'destroy' on that entity as soon as
	  - the button is clicked.
	  -  ***************************************************** -->
        <script name="back_button">
	    <!--
	      - Initialize the back button.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
	        <createpropclass name="pcproperties" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="picture1" />
	        <property id="propid(materialname)" value="picture1" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="20000" />
	        <property id="propid(height)" value="20000" />
	        <property id="propid(x)" value="295000" />
	        <property id="propid(y)" value="100" />
	    </event>

	    <!--
	      - Go to the main menu.
	      -->
	    <event name="pcbillboard_select">
		<call event="destroygame" />
		<call entity="menu" event="init" />
		<destroyentity name="?game_entity" />
	    </event>

	    <!--
	      - Destroy all resources created by the current game.
	      -->
	    <event name="destroygame">
	        <print value="'Start destroying game...'" />
		<inventory propclass="pc(?game_entity,pcinventory)" />
		<while eval="inventory_count()>0" >
		    <var name="child" value="inventory_get(0)" />
		    <print value="'    destroy '+?child" />
		    <inventory_rem child="?child" />
		    <destroyentity name="?child" />
		</while>
	    </event>

	</script>

	<!-- *****************************************************
	  - This script handles the button for a game.
	  - Needs the ?menu.material variable for the material of
	  - the button.
	  -  ***************************************************** -->
	<script name="game_button">
	    <!--
	      - Initialization.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
	        <createpropclass name="pcproperties" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="picture1" />
	        <property id="propid(materialname)" value="?menu.material" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="50000" />
	        <property id="propid(height)" value="50000" />
	    </event>

	    <!--
	      - Select this button. Fire up the 'puzzle' game.
	      -->
	    <event name="pcbillboard_select">
	    	<sound name="boing" loop="false" />
		<var entity="menu" name="game" value="?game" />
	        <call entity="menu" event="startgame" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script is the superclass of moving objects. You cannot
	  - use this script standalone.
	  - This script uses the following variables:
	  -    ?x,?y: block position of object
	  -    ?speed: speed of movement
	  -    ?dim: dimension of objects.
	  -  ***************************************************** -->
	<script name="movingobject">
	    <!--
	      - Initialize. Needs parameter ?material for the material name,
	      - ?x, ?y for the position, and ?dim for the dimension of the
	      - objects.
	      -->
	    <event name="init">
	        <createpropclass name="pctimer" />
	        <createpropclass name="pcbillboard" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="?material" />
	        <property id="propid(materialname)" value="?material" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="false" />
	        <property id="propid(restack)" value="false" />
	        <property id="propid(width)" value="?dim" />
	        <property id="propid(height)" value="?dim" />
	        <property id="propid(x)" value="?x*?dim" />
	        <property id="propid(y)" value="?y*?dim" />
		<var name="moving" value="false" />
	    </event>

	    <!--
	      - Routine to calculate ?dx and ?dy based on ?dxdy.
	      -->
	    <event name="calcdxdy">
		<!-- Set ?dx and ?dy based on the four possible outcomes -->
		<if eval="?dxdy&2">
		    <true>
		        <var name="dx" value="0" />
		        <var name="dy" value="if(?dxdy&1,1,-1)" />
		    </true>
		    <false>
		        <var name="dx" value="if(?dxdy&1,1,-1)" />
		        <var name="dy" value="0" />
		    </false>
		</if>
	    </event>

	    <!--
	      - Do the actual move. Subscripts can override this to
	      - do additional stuff like check for collisions and so on.
	      - Uses ?xx and ?yy parameters.
	      -->
	    <event name="actualmove">
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(x)" value="?xx" />
	        <property id="propid(y)" value="?yy" />
	    </event>

	    <!--
	      - Do the move transition of this object.
	      - Uses ?srcx,?srcy, ?dstx,?dsty, and ?delta.
	      -->
	    <event name="pctimer_wakeupframe">
	        <if eval="?moving">
	            <var name="xx" value="intpol(?delta,?srcx,?dstx)" />
	            <var name="yy" value="intpol(?delta,?srcy,?dsty)" />
		    <call event="actualmove" />
		    <if eval="?delta>=1">
		        <true>
			    <var name="moving" value="false" />
			    <default propclass="pc(pcbillboard)" />
			    <property id="propid(x)" value="?dstx" />
			    <property id="propid(y)" value="?dsty" />
			    <call event="endmove" />
		        </true>
		        <false>
			    <var name="delta"
			    	value="?delta+?speed*param(parid(elapsedticks))" />
		        </false>
		    </if>
		</if>
	    </event>

	    <!--
	      - End movement.
	      -->
	    <event name="endmove">
		<action propclass="pc(pctimer)" id="propid(Clear)" />
	    </event>

	    <!--
	      - Start a movement in ?dx,?dy direction.
	      -->
	    <event name="startmove">
		<var name="srcx" value="?x*?dim" />
		<var name="srcy" value="?y*?dim" />
		<var name="x" value="?x+?dx" />
		<var name="y" value="?y+?dy" />
		<var name="dstx" value="?x*?dim" />
		<var name="dsty" value="?y*?dim" />
		<var name="delta" value="0.0" />
		<var name="moving" value="true" />
		<action propclass="pc(pctimer)" id="propid(WakeUpFrame)" />
	    </event>
	</script>

	<!-- *****************************************************
	  -  *****************************************************
	  - This is the puzzle game script.
	  -  *****************************************************
	  -  ***************************************************** -->
	<script name="puzzle_main">
	    <!--
	      - Initialize the puzzle game.
	      - The main puzzle entity maintains various variables to
	      - keep board state:
	      -    - grid<x>_<y>: an 2D array containing the name of the tile entity
	      -      at location x,y. Or '' if this is the empty tile.
	      -    - emptyx, emptyy: the location of the empty tile.
	      -    - allowmove: if true the player can move tiles.
	      -    - shuffle_count: if greater than 0 then we are randomizing the board.
	      -    - speed: a float indicating the speed with which tiles should move.
	      -    - dimension: the board size.
	      -    - tiledim: size of one tile.
	      -    - tiledimuv: size of one tile in texture coordinates.
	      -->
	    <event name="init">
	        <createpropclass name="pcinventory" />

		<!-- Set some defaults -->
		<!--
		<var name="dimension" value="4" />
		<var name="tiledim" value="70000" />
		<var name="tiledimuv" value=".25" />
		<var name="shuffle_count" value="30" />
		-->
		<var name="dimension" value="5" />
		<var name="tiledim" value="56000" />
		<var name="tiledimuv" value=".2" />
		<var name="shuffle_count" value="50" />

		<!-- Create the menu back button -->
		<createentity name="back_button" behaviour="back_button" />
		<var entity="back_button" name="game_entity" value="ent()" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="back_button" />

		<!-- Create the tiles of the board -->
	        <var name="uvtl" value="[0,0]" />
		<for var="y" start="0" end="?dimension-1">
		    <for var="x" start="0" end="?dimension-1" exec="inittile" />
	        </for>

		<!-- Clear the item at 0,0. This is the empty tile -->
		<property propclass="pc(p0_0,pcbillboard)"
			id="propid(visible)" value="false" />
		<property propclass="pc(p0_0,pcbillboard)"
			id="propid(clickable)" value="false" />
	        <var name="'grid'+0+'_'+0" value="''" />
	        <var name="emptyx" value="0" />
	        <var name="emptyy" value="0" />

		<var name="speed" value="0.03" />
		<var name="allowmove" value="false" />
		<!-- Start randomizing -->
		<var name="prev_dxdy" value="1" />
		<call event="fast_shuffle" />
	    </event>

	    <!--
	      - Initialize one tile. This will create the entity representing
	      - the tile and it will set it at the right position on the puzzle
	      - board.
	      - This event uses ?x and ?y which should be set outside this routine.
	      - It also uses ?uvtl for the texture mapping coordinates.
	      -->
	    <event name="inittile">
	        <var name="ent" value="'p'+?x+'_'+?y" />
		<print value="'Creating '+?ent" />
		<createentity name="?ent" behaviour="moving_tile" />
		<var name="ent" value="ent(?ent)" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="?ent" />
		<default propclass="pc(?ent,pcbillboard)" />
	        <property id="propid(x)" value="1000+?tiledim*?x" />
	        <property id="propid(y)" value="1000+?tiledim*?y" />
		<var name="tl" value="[?x,?y]*?tiledimuv" />
	        <property id="propid(uv_topleft)" value="?tl" />
	        <property id="propid(uv_botright)" value="?tl+[?tiledimuv,?tiledimuv]" />
		<!-- Set the 2d grid to contain the current entity -->
	        <var name="'grid'+?x+'_'+?y" value="?ent" />
	    </event>

	    <!--
	      - This routine is responsible for initiating a random move to
	      - randomize the board. The tile that moved will itself call this
	      - routine again if ?shuffle_count > 0. This routine will make sure
	      - that a tile doesn't move to where it was before. It uses
	      - ?prev_dxdy to do that.
	      -->
	    <event name="fast_shuffle">
	    	<!-- Try one of the four possible directions -->
	        <var name="dxdy" value="int(rand(4.0))" />
		<!-- If the direction is the opposite of the previous direction
		     we change it -->
		<var name="dxdy"
		    value="if(?prev_dxdy==(?dxdy^1),(?dxdy+1)%4,?dxdy)" />
		<var name="prev_dxdy" value="?dxdy" />
		<!-- Set ?dx and ?dy based on the four possible outcomes -->
		<if eval="?dxdy&2">
		    <true>
		        <var name="dx" value="0" />
		        <var name="dy" value="if(?dxdy&1,1,-1)" />
		    </true>
		    <false>
		        <var name="dx" value="if(?dxdy&1,1,-1)" />
		        <var name="dy" value="0" />
		    </false>
		</if>
		<!-- Location of the tile we want to move -->
		<var name="bx" value="?emptyx+?dx" />
		<var name="by" value="?emptyy+?dy" />
		<!-- Check if this is a valid location. If so we move it -->
		<if eval="?bx < ?dimension && ?bx >= 0 && ?by < ?dimension && ?by >= 0">
		    <true>
		        <var name="ent" value="?('grid'+?bx+'_'+?by)" />
		        <var entity="?ent" name="dx" value="-?dx" />
		        <var entity="?ent" name="dy" value="-?dy" />
			<call entity="?ent" event="move" />
		    </true>
		    <false>
		    	<!-- Try again -->
		        <call event="fast_shuffle" />
		    </false>
		</if>
	    </event>

	    <!--
	      - Start the game for real.
	      -->
	    <event name="start_game">
		<var name="speed" value="0.01" />
	        <var name="allowmove" value="true" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script handles all operations on a tile in the puzzle game.
	  -  ***************************************************** -->
        <script name="moving_tile">
	    <!--
	      - Initialize this tile.
	      - It assumes ?puzzle_main.x and ?puzzle_main.y are set to the
	      - location of the tile.
	      -->
	    <event name="init">
	    	<!-- Create timer so we can do smooth movement of this tile -->
	        <createpropclass name="pctimer" />
	        <createpropclass name="pcbillboard" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="picture1" />
	        <property id="propid(materialname)" value="picture1" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="true" />
	        <property id="propid(restack)" value="true" />
	        <property id="propid(width)" value="?puzzle_main.tiledim" />
	        <property id="propid(height)" value="?puzzle_main.tiledim" />
		<var name="rightx" value="?puzzle_main.x" />
		<var name="righty" value="?puzzle_main.y" />
		<var name="curx" value="?rightx" />
		<var name="cury" value="?righty" />
	    </event>

	    <!--
	      - If this tile is moving then this event will be triggered
	      - every frame. Here we check how much time has elapsed and
	      - move the tile accordingly. If the tile has reached its
	      - destination then we call 'stoptimer'.
	      - The global ?puzzle_main.speed variable is used to control
	      - movement speed.
	      -->
	    <event name="pctimer_wakeupframe">
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(x)"
			value="1000+intpol(?delta,?intx1,?intx2)*?puzzle_main.tiledim" />
	        <property id="propid(y)"
			value="1000+intpol(?delta,?inty1,?inty2)*?puzzle_main.tiledim" />
		<if eval="?delta>=1" true="stoptimer" />
		<var name="delta" value="?delta+?puzzle_main.speed*
			param(parid(elapsedticks))" />
	    </event>

	    <!--
	      - The tile has moved its destination. Stop the timer.
	      - If we are in shuffle mode (i.e. randomizing the board) then
	      - we signal the main 'puzzle_main' entity to start moving another
	      - tile. Otherwise we set ?puzzle_main.allowmove to true so that
	      - the player can move another tile.
	      -->
	    <event name="stoptimer">
		<action propclass="pc(pctimer)" id="propid(Clear)" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(x)" value="1000+?curx*?puzzle_main.tiledim" />
	        <property id="propid(y)" value="1000+?cury*?puzzle_main.tiledim" />
		<if eval="?puzzle_main.shuffle_count>0">
		    <true>
		        <var entity="puzzle_main" name="shuffle_count"
				value="?puzzle_main.shuffle_count-1" />
		        <call entity="puzzle_main" event="fast_shuffle" />
		    </true>
		    <false>
		    	<call entity="puzzle_main" event="start_game" />
		    </false>
		</if>
	    </event>

	    <!--
	      - Initiate the move of this tile to the location specified
	      - by local variables ?dx and ?dy. Doing this will disable
	      - other moves.
	      -->
	    <event name="move">
		<var entity="puzzle_main" name="allowmove" value="false" />
		<var entity="puzzle_main" name="emptyx" value="?curx" />
		<var entity="puzzle_main" name="emptyy" value="?cury" />
		<var name="intx1" value="float(?curx)" />
		<var name="inty1" value="float(?cury)" />
		<!-- Make current grid item empty -->
	        <var entity="puzzle_main" name="'grid'+?curx+'_'+?cury"
			value="''" />
		<var name="curx" value="?curx+?dx" />
		<var name="cury" value="?cury+?dy" />
		<!-- Fill new grid item with current entity -->
	        <var entity="puzzle_main" name="'grid'+?curx+'_'+?cury"
			value="ent()" />
		<var name="intx2" value="float(?curx)" />
		<var name="inty2" value="float(?cury)" />
		<var name="delta" value="0.0" />
		<action propclass="pc(pctimer)" id="propid(WakeUpFrame)" />
	    </event>

	    <!--
	      - Select this tile. If movement is allowed then this will
	      - check if the empty location is next to this block and if
	      - so it will call 'move' to initiate the movement.
	      -->
	    <event name="pcbillboard_select">
	        <if eval="?puzzle_main.allowmove">
		    <var name="dx" value="?puzzle_main.emptyx-?curx" />
		    <var name="dy" value="?puzzle_main.emptyy-?cury" />
		    <if eval="(abs(?dx)==1&&?dy==0)||(abs(?dy)==1&&?dx==0)">
	    	        <sound name="click" loop="false" />
			<call event="move"/>
		    </if>
		</if>
	    </event>
	</script>

	<!-- *****************************************************
	  -  *****************************************************
	  - This is the maze game script.
	  -  *****************************************************
	  -  ***************************************************** -->
	<script name="maze_main">
	    <event name="init">
	        <print value="MAZE"/>
	        <createpropclass name="pcinventory" />
	        <createpropclass name="pctimer" />

		<!-- Set some defaults -->
		<var name="dimension" value="16" />
		<var name="blockdim" value="18000" />
		<var name="herospeed" value="0.03" />
		<var name="monsterspeed" value="0.003" />
		<var name="fruitspeed" value="0.002" />
		<var name="fruitmax" value="5" />
		<var name="fruitcnt" value="0" />
		<var name="monstercnt" value="2" />

		<!-- Create the menu back button -->
		<createentity name="back_button" behaviour="back_button" />
		<var entity="back_button" name="game_entity" value="ent()" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="back_button" />

		<!--  Create the maze -->
		<var name="row0"  value="'BBBBBBBBBBBBBBBB'" />
		<var name="row1"  value="'B      B       B'" />
		<var name="row2"  value="'B BBBB B BBBBB B'" />
		<var name="row3"  value="'B B    B B   B B'" />
		<var name="row4"  value="'B B B BB B B B B'" />
		<var name="row5"  value="'B B B B    BBB B'" />
		<var name="row6"  value="'B   B B B      B'" />
		<var name="row7"  value="'BBBBB   B BBBBBB'" />
		<var name="row8"  value="'B     BBB B    B'" />
		<var name="row9"  value="'B BBBBB   BB B B'" />
		<var name="row10" value="'B B     B  B B B'" />
		<var name="row11" value="'B BB BB BB B B B'" />
		<var name="row12" value="'B B   B B    B B'" />
		<var name="row13" value="'B BBBBB B BBBB B'" />
		<var name="row14" value="'B       B      B'" />
		<var name="row15" value="'BBBBBBBBBBBBBBBB'" />
		<for var="y" start="0" end="?dimension-1">
		    <var name="row" value="?(row+?y)" />
		    <for var="x" start="0" end="?dimension-1">
		        <var name="maze+?x+'_'+?y" value="strsub(?row,?x,1)" />
		        <if eval="?(maze+?x+'_'+?y)=='B'" true="initblock" />
		    </for>
		</for>

		<createentity name="hero" behaviour="maze_hero" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="hero" />
		<for var="i" start="1" end="?monstercnt">
		    <createentity name="monster+?i" behaviour="monster" />
		    <var name="bb_monster+?i" value="pc(monster+?i,pcbillboard)" />
		    <inventory propclass="pc(pcinventory)" />
		    <inventory_add child="monster+?i" />
		</for>

		<!-- Every second we check if we need to create a piece of fruit -->
		<var name="fruitidx" value="0" />
		<action propclass="pc(pctimer)" id="propid(WakeUp)">
		    <par id="parid(time)" value="1000" />
		    <par id="parid(repeat)" value="true" />
		</action>
	    </event>

	    <!--
	      - Initialize one block. This will create the entity representing
	      - the block and it will set it at the right position on the puzzle
	      - board.
	      - This event uses ?x and ?y which should be set outside this routine.
	      -->
	    <event name="initblock">
	        <var name="ent" value="'p'+?x+'_'+?y" />
		<print value="'Creating '+?ent" />
		<createentity name="?ent" behaviour="maze_block" />
		<var name="ent" value="ent(?ent)" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="?ent" />
	    </event>

	    <!--
	      - Create a new piece of fruit.
	      - Uses ?fruitidx to have unique entity names for fruit.
	      - Also uses ?fruitmax and ?fruitcnt to make sure there is
	      - not too much fruit on screen.
	      -->
	    <event name="pctimer_wakeup">
	        <if eval="?fruitcnt<?fruitmax && rand(8)>5">
		    <createentity name="fruit+?fruitidx" behaviour="fruit" />
		    <inventory propclass="pc(pcinventory)" />
		    <inventory_add child="fruit+?fruitidx" />
		    <var name="fruitidx" value="?fruitidx+1" />
		    <var name="fruitcnt" value="?fruitcnt+1" />
		</if>
	    </event>
	</script>

	<!-- *****************************************************
	  - This is a superscript for automatic moving objects in the
	  - maze game.
	  -  ***************************************************** -->
	<script name="automovingobject">
	    <superscript name="movingobject" />

	    <!--
	      - Initialize this moving object.
	      -->
	    <event name="init">
		<super />
	    	<!-- Init to one of the four possible directions -->
	        <var name="dxdy" value="int(rand(4.0))" />
		<call event="calcdxdy" />

		<action propclass="pc(pctimer)" id="propid(WakeUpFrame)" />
	    </event>

	    <!--
	      - Check if a move is possible and perform the move
	      - if so. Uses ?dx and ?dy to get the move direction and
	      - ?x and ?y for current position. If it can't move
	      - in some direction it will change direction.
	      -->
	    <event name="pctimer_wakeupframe">
	        <super />
	        <if eval="?moving">
		    <stop />
		</if>
		<!-- Check if there is a free block sideways. If so we have a random
		     chance of trying that direction -->
		<if eval="rand(5)>3">
		    <var name="t" value="?maze_main.(maze+(?x+?dy)+'_'+(?y+?dx))==' '" />
		    <if eval="?t">
		        <true>
		            <!-- Swap dx and dy to turn left or right -->
			    <var name="s" value="?dx" />
			    <var name="dx" value="?dy" />
			    <var name="dy" value="?s" />
		        </true>
			<false>
		    	    <var name="t" value="?maze_main.(maze+(?x-?dy)+'_'+(?y-?dx))==' '" />
			    <if eval="?t">
		                <!-- Swap dx and dy to turn left or right -->
			        <var name="s" value="-?dx" />
			        <var name="dx" value="-?dy" />
			        <var name="dy" value="?s" />
			    </if>
			</false>
		    </if>
		</if>
		<!-- If our current direction is free we proceed in that direction.
		     Else we try out a random new direction -->
		<if eval="?maze_main.(maze+(?x+?dx)+'_'+(?y+?dy))==' '">
		    <true>
		        <call event="startmove" />
		    </true>
		    <false>
			<var name="dxdy" value="int(rand(4.0))" />
			<call event="calcdxdy" />
		    </false>
		</if>
	    </event>
	</script>

	<!-- *****************************************************
	  - This script controls the behaviour of a piece of fruit.
	  -  ***************************************************** -->
	<script name="fruit">
	    <superscript name="automovingobject" />

	    <!--
	      - Initialize a piece of fruit.
	      -->
	    <event name="init">
	    	<!-- Random start location -->
		<switch eval="int(rand(3))">
		    <case value="0">
			<var name="x" value="14" />
			<var name="y" value="14" />
		    </case>
		    <case value="1">
			<var name="x" value="1" />
			<var name="y" value="14" />
		    </case>
		    <case value="2">
			<var name="x" value="14" />
			<var name="y" value="1" />
		    </case>
		</switch>
		<var name="dim" value="?maze_main.blockdim" />
		<!-- Random fruit material -->
		<switch eval="int(rand(4))">
		    <case value="0"> <var name="material" value="banana" /> </case>
		    <case value="1"> <var name="material" value="pear" /> </case>
		    <case value="2"> <var name="material" value="apple" /> </case>
		    <case value="3"> <var name="material" value="mushroom" /> </case>
		</switch>
		<var name="speed" value="?maze_main.fruitspeed" />
		<super />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script controls the behaviour of a monster.
	  -  ***************************************************** -->
	<script name="monster">
	    <superscript name="automovingobject" />

	    <!--
	      - Initialize a monster.
	      -->
	    <event name="init">
		<var name="x" value="14" />
		<var name="y" value="14" />
		<var name="dim" value="?maze_main.blockdim" />
		<var name="material" value="monster" />
		<var name="speed" value="?maze_main.monsterspeed" />
		<super />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script controls the behaviour of our hero.
	  -  ***************************************************** -->
	<script name="maze_hero">
	    <superscript name="movingobject" />

	    <!--
	      - Initialize our hero.
	      -->
	    <event name="init">
		<var name="x" value="1" />
		<var name="y" value="1" />
		<var name="dim" value="?maze_main.blockdim" />
		<var name="material" value="hero" />
		<var name="speed" value="?maze_main.herospeed" />
		<super />
	        <createpropclass name="pckeyinput" />
		<default propclass="pc(pckeyinput)" />
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="right" />
		    <par id="parid(command)" value="right" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="left" />
		    <par id="parid(command)" value="left" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="up" />
		    <par id="parid(command)" value="up" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="down" />
		    <par id="parid(command)" value="down" />
		</action>
	    </event>

	    <!--
	      - Override from superscript so that we can check collision
	      - here.
	      -->
	    <event name="actualmove">
	        <super />
		<for var="i" start="1" end="?maze_main.monstercnt">
		    <var name="pc" value="?maze_main.(bb_monster+?i)" />
		    <if eval="property(?pc,propid(visible))==true">
		        <if eval="bb_testcollide(?pc)">
			    <sound name="bloop" loop="false" />
			    <property propclass="?pc" id="propid(visible)" value="false" />
			</if>
		    </if>
		</for>
	    </event>

	    <!--
	      - Check if a move is possible and perform the move
	      - if so. Uses ?dx and ?dy to get the move direction and
	      - ?x and ?y for current position.
	      -->
	    <event name="checkmove">
	        <if eval="?moving">
		    <stop />
		</if>
		<if eval="?maze_main.(maze+(?x+?dx)+'_'+(?y+?dy))==' '">
		    <call event="startmove" />
		</if>
	    </event>

	    <!--
	      - Movement events.
	      -->
	    <event name="pckeyinput_right1">
	    	<var name="dx" value="1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_left1">
	    	<var name="dx" value="-1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_down1">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="1" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_up1">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="-1" />
		<call event="checkmove" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script handles all operations on a block in the maze game.
	  -  ***************************************************** -->
        <script name="maze_block">
	    <!--
	      - Initialize this block.
	      - It assumes ?maze_main.x and ?maze_main.y are set to the
	      - x,y index of the block.
	      - Also uses ?maze_main.blockdim.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="block" />
	        <property id="propid(materialname)" value="slanted_stone" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="false" />
	        <property id="propid(restack)" value="false" />
	        <property id="propid(width)" value="500+?maze_main.blockdim" />
	        <property id="propid(height)" value="500+?maze_main.blockdim" />
	        <property id="propid(x)" value="?maze_main.x*?maze_main.blockdim" />
	        <property id="propid(y)" value="?maze_main.y*?maze_main.blockdim" />
	    </event>
	</script>

	<!-- *****************************************************
	  -  *****************************************************
	  - This is the boulderdash game script.
	  -  *****************************************************
	  -  ***************************************************** -->
	<script name="bdash_main">
	    <event name="init">
	        <print value="BOULDERDASH"/>
	        <createpropclass name="pcinventory" />
	        <createpropclass name="pctimer" />

		<!-- Set some defaults -->
		<var name="dimension" value="64" />
		<var name="blockdim" value="19200" />
		<var name="herospeed" value="0.03" />
		<var name="boardspeed" value="0.003" />
		<var name="fallspeed" value="0.0006" />

		<!-- Size of the visible area in blocks -->
		<var name="vis" value="307200/?blockdim" />

		<!-- Create the menu back button -->
		<createentity name="back_button" behaviour="back_button" />
		<var entity="back_button" name="game_entity" value="ent()" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_add child="back_button" />

		<!-- Create a table of materials per block type -->
		<var name="'material_ '" value="''" />
		<var name="'material_H'" value="''" />	<!-- Special value for hero -->
		<var name="'material_B'" value="slanted_stone" />
		<var name="'material_#'" value="sand_stone" />
		<var name="'material_X'" value="diamond" />
		<!-- Create a table of behaviours per block type -->
		<var name="'behaviour_ '" value="''" />
		<var name="'behaviour_H'" value="''" />	<!-- Special value for hero -->
		<var name="'behaviour_B'" value="bdash_nonmovable" />
		<var name="'behaviour_#'" value="bdash_nonmovable" />
		<var name="'behaviour_X'" value="bdash_movable" />
		<!-- Create a table of 'falloff' setting per block type -->
		<var name="'falloff_ '" value="false" />
		<var name="'falloff_H'" value="false" />
		<var name="'falloff_B'" value="true" />
		<var name="'falloff_#'" value="false" />
		<var name="'falloff_X'" value="true" />

		<!--  Create the maze -->
		<var name="row0"  value="'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'" />
		<var name="row1"  value="'B #XXX#                                                        B'" />
		<var name="row2"  value="'B #XXX#                                                        B'" />
		<var name="row3"  value="'B #XXX#                                                        B'" />
		<var name="row4"  value="'B #XXX#       #####                                            B'" />
		<var name="row5"  value="'B #####       #####                                            B'" />
		<var name="row6"  value="'B         XH X#####                                            B'" />
		<var name="row7"  value="'B  #    BBBBBBBB###              X   X     X                   B'" />
		<var name="row8"  value="'B    B         B                ### ###   ###                  B'" />
		<var name="row9"  value="'B              B                                               B'" />
		<var name="row10" value="'B#########     B                 #   B     #                   B'" />
		<var name="row11" value="'B#########     B                                               B'" />
		<var name="row12" value="'B#########     B                                               B'" />
		<var name="row13" value="'B              B                   #       B                   B'" />
		<var name="row14" value="'B              B                       B  #                    B'" />
		<var name="row15" value="'B              B                                               B'" />
		<var name="row16" value="'B              B             B      #     #                    B'" />
		<var name="row17" value="'B                            B    X   X                        B'" />
		<var name="row18" value="'B                            B    B   #                        B'" />
		<var name="row19" value="'B                            B                                 B'" />
		<var name="row20" value="'B                            B                                 B'" />
		<var name="row21" value="'B                            B                                 B'" />
		<var name="row22" value="'B                            B                                 B'" />
		<var name="row23" value="'B       B                    B                                 B'" />
		<var name="row24" value="'B       B                    B                                 B'" />
		<var name="row25" value="'B       B                    B                                 B'" />
		<var name="row26" value="'B       B                                                      B'" />
		<var name="row27" value="'B       B                                                      B'" />
		<var name="row28" value="'B       B                                                      B'" />
		<var name="row29" value="'B       B                                                      B'" />
		<var name="row30" value="'B       B                                                      B'" />
		<var name="row31" value="'BBBBBBBBB                                                      B'" />
		<var name="row32" value="'B                                                              B'" />
		<var name="row33" value="'B                                                              B'" />
		<var name="row34" value="'B                                                              B'" />
		<var name="row35" value="'B                                                              B'" />
		<var name="row36" value="'B                                                              B'" />
		<var name="row37" value="'B                                                              B'" />
		<var name="row38" value="'B                                                              B'" />
		<var name="row39" value="'B                                                              B'" />
		<var name="row40" value="'B                                                              B'" />
		<var name="row41" value="'B                                                              B'" />
		<var name="row42" value="'B                                                              B'" />
		<var name="row43" value="'B                                                              B'" />
		<var name="row44" value="'B                                                              B'" />
		<var name="row45" value="'B                                                              B'" />
		<var name="row46" value="'B                                                              B'" />
		<var name="row47" value="'B                                                              B'" />
		<var name="row48" value="'B                                                              B'" />
		<var name="row49" value="'B                                                              B'" />
		<var name="row50" value="'B                                                              B'" />
		<var name="row51" value="'B                                                              B'" />
		<var name="row52" value="'B                                                              B'" />
		<var name="row53" value="'B                                                              B'" />
		<var name="row54" value="'B                                                              B'" />
		<var name="row55" value="'B                                                              B'" />
		<var name="row56" value="'B                                                              B'" />
		<var name="row57" value="'B                                                              B'" />
		<var name="row58" value="'B                                                              B'" />
		<var name="row59" value="'B                                                              B'" />
		<var name="row60" value="'B                                                              B'" />
		<var name="row61" value="'B                                                              B'" />
		<var name="row62" value="'B                                                              B'" />
		<var name="row63" value="'BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'" />
		<for var="y" start="0" end="?dimension-1">
		    <var name="row" value="?(row+?y)" />
		    <for var="x" start="0" end="?dimension-1">
		        <var name="blocktype" value="strsub(?row,?x,1)" />
		        <var name="maze+?x+'_'+?y" value="?blocktype" />
		        <call event="initblock" />
		    </for>
		</for>

		<!-- Current position of game layer -->
		<var name="layer_movetox" value="(?vis/2-?hero_start_x)*?bdash_main.blockdim" />
		<var name="layer_movetoy" value="(?vis/2-?hero_start_y)*?bdash_main.blockdim" />
		<var name="layer_x" value="?layer_movetox" />
		<var name="layer_y" value="?layer_movetoy" />
		<bb_movelayer layer="game" x="?layer_x" y="?layer_y" />
		<action propclass="pc(pctimer)" id="propid(WakeUpFrame)" />
	    </event>

	    <!--
	      - Initialize one block. This will create the entity representing
	      - the block and it will set it at the right position on the puzzle
	      - board.
	      - This event uses ?x and ?y which should be set outside this routine.
	      - This event also uses ?blocktype and the ?material_ and ?behaviour_ arrays.
	      - This event will correctly handle the special 'H' block type (for hero)
	      - and set the hero start location (?hero_start_x and ?hero_start_y).
	      -->
	    <event name="initblock">
	    	<if eval="?blocktype == 'H'">
		    <var name="hero_start_x" value="?x" />
		    <var name="hero_start_y" value="?y" />
		    <createentity name="hero" behaviour="bdash_hero" />
		    <inventory propclass="pc(pcinventory)" />
		    <inventory_add child="hero" />
		    <var name="mazeent+?x+'_'+?y" value="ent(hero)" />
		    <stop />
		</if>
	    	<if eval="?blocktype != ' '">
	            <var name="ent" value="'p'+?x+'_'+?y" />
		    <createentity name="?ent" behaviour="?(behaviour_+?blocktype)" />
		    <var name="ent" value="ent(?ent)" />
		    <var name="mazeent+?x+'_'+?y" value="?ent" />
		    <inventory propclass="pc(pcinventory)" />
		    <inventory_add child="?ent" />
		    <stop />
	    	</if>
		<var name="mazeent+?x+'_'+?y" value="''" />
	    </event>

	    <!--
	      - Routine used by the checkmove events in the bdash_hero
	      - script to clear a block. Uses ?mazepos for the position
	      - of the block to clear. This routine does not do the
	      - falling object test because it is supposed to be used when
	      - the hero will move to the cleared block.
	      -->
	    <event name="clearblock_nocheck">
	        <var name="maze+?mazepos" value="' '" />
		<var name="ent" value="?(mazeent+?mazepos)" />
		<inventory propclass="pc(pcinventory)" />
		<inventory_rem child="?ent" />
		<destroyentity name="?ent" />
		<var name="mazeent+?mazepos" value="''" />
	    </event>

	    <!--
	      - Routine used by the checkmove events in the bdash_hero
	      - script to set a block. Uses ?x and ?y for the position
	      - of the block and ?blocktype for the block letter.
	      - It also uses ?entity to set the entity at the block.
	      -->
	    <event name="setblock">
	    	<var name="mazepos" value="?x+'_'+?y" />
	        <var name="maze+?mazepos" value="?blocktype" />
		<var name="mazeent+?mazepos" value="?entity" />
		<if eval="?blocktype == ' '">
		    <call event="checkfall" />
	    	</if>
	    </event>

	    <!--
	      - Check if the block above ?x,?y can fall down and if so
	      - make sure it will fall down. It will also check if
	      - blocks left or right of ?x,?y are on a 'falloff' block
	      - and in that case it will also let those drop.
	      - Note: this routine will use 'falldown' event in the
	      - behaviour of the block. It expects that 'falldown' event
	      - to set the 'fallen' variable to true if it really starts
	      - falling down.
	      -->
	    <event name="checkfall">
	    	<!-- First check if the block above us can fall down -->
	    	<var name="mazepos" value="?x+'_'+(?y-1)" />
		<var name="ent" value="?(mazeent+?mazepos)" />
		<if eval="?ent != ''">
		    <true>
		        <var entity="?ent" name="dx" value="0" />
		        <var entity="?ent" name="dy" value="1" />
		        <call entity="?ent" event="falldown" />
		    </true>
		    <false>
		        <!-- Then we check if the block at -1,-1 from us can fall down -->
	    	        <var name="mazepos" value="(?x-1)+'_'+(?y-1)" />
		        <var name="ent" value="?(mazeent+?mazepos)" />
		        <if eval="?ent != ''">
	    	            <var name="mazepos" value="(?x-1)+'_'+?y" />
		            <var name="below_block" value="?(maze+?mazepos)" />
		            <if eval="?(falloff_+?below_block)">
		                <var entity="?ent" name="dx" value="1" />
		                <var entity="?ent" name="dy" value="1" />
		                <call entity="?ent" event="falldown" />
		            </if>
		        </if>
	    	        <var name="mazepos" value="(?x+1)+'_'+(?y-1)" />
		        <var name="ent" value="?(mazeent+?mazepos)" />
		        <if eval="?ent != ''">
	    	            <var name="mazepos" value="(?x+1)+'_'+?y" />
		            <var name="below_block" value="?(maze+?mazepos)" />
		            <if eval="?(falloff_+?below_block)">
		                <var entity="?ent" name="dx" value="-1" />
		                <var entity="?ent" name="dy" value="1" />
		                <call entity="?ent" event="falldown" />
		            </if>
		        </if>
		    </false>
		</if>
	    	<var name="mazepos" value="?x+'_'+(?y+1)" />
		<var name="ent" value="?(mazeent+?mazepos)" />
		<if eval="?ent == ''">
	    	    <var name="mazepos" value="(?x-1)+'_'+?y" />
		    <var name="ent" value="?(mazeent+?mazepos)" />
		    <if eval="?ent != ''">
	    	        <var name="mazepos" value="(?x-1)+'_'+(?y+1)" />
		        <var name="below_block" value="?(maze+?mazepos)" />
		        <if eval="?(falloff_+?below_block)">
		            <var entity="?ent" name="dx" value="1" />
		            <var entity="?ent" name="dy" value="1" />
		            <call entity="?ent" event="falldown" />
		        </if>
		    </if>
	    	    <var name="mazepos" value="(?x+1)+'_'+?y" />
		    <var name="ent" value="?(mazeent+?mazepos)" />
		    <if eval="?ent != ''">
	    	        <var name="mazepos" value="(?x+1)+'_'+(?y+1)" />
		        <var name="below_block" value="?(maze+?mazepos)" />
		        <if eval="?(falloff_+?below_block)">
		            <var entity="?ent" name="dx" value="-1" />
		            <var entity="?ent" name="dy" value="1" />
		            <call entity="?ent" event="falldown" />
		        </if>
		    </if>
	    	</if>
	    </event>

	    <!--
	      - Same as checkfall but also makes sure the block
	      - at ?x,?y is really empty. If the block at ?x,?y
	      - has 'falloff' property then we also proceed.
	      -->
	    <event name="ifempty_checkfall">
	    	<var name="mazepos" value="?x+'_'+?y" />
		<if eval="?(mazeent+?mazepos) == ''">
		    <call event="checkfall" />
	    	</if>
		<var name="below_block" value="?(maze+?mazepos)" />
		<if eval="?(falloff_+?below_block)">
	    	    <var name="mazepos" value="(?x-1)+'_'+?y" />
		    <if eval="?(mazeent+?mazepos) == ''">
		    	<var name="x" value="(?x-1)" />
		        <call event="checkfall" />
			<stop />
	    	    </if>
	    	    <var name="mazepos" value="(?x+1)+'_'+?y" />
		    <if eval="?(mazeent+?mazepos) == ''">
		    	<var name="x" value="(?x+1)" />
		        <call event="checkfall" />
	    	    </if>
		</if>
	    </event>

	    <!--
	      - Move the board slowly so the hero is centered.
	      -->
	    <event name="pctimer_wakeupframe">
		<var name="delta" value="?boardspeed*param(parid(elapsedticks))" />
		<var name="layer_x" value="intpol(?delta,?layer_x,?layer_movetox)" />
		<var name="layer_y" value="intpol(?delta,?layer_y,?layer_movetoy)" />
		<bb_movelayer layer="game" x="?layer_x" y="?layer_y" />
	    </event>

	</script>

	<!-- *****************************************************
	  - This script controls the behaviour of our hero.
	  -  ***************************************************** -->
	<script name="bdash_hero">
	    <superscript name="movingobject" />

	    <!--
	      - Initialize our hero.
	      - Uses ?bdash_main.hero_start_x and ?bdash_main.hero_start_y for
	      - the hero start location.
	      -->
	    <event name="init">
		<var name="x" value="?bdash_main.hero_start_x" />
		<var name="y" value="?bdash_main.hero_start_y" />
		<var name="dim" value="?bdash_main.blockdim" />
		<var name="material" value="hero" />
		<var name="speed" value="?bdash_main.herospeed" />
		<super />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(layer)" value="game" />
	        <createpropclass name="pckeyinput" />
		<default propclass="pc(pckeyinput)" />
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="right" />
		    <par id="parid(command)" value="right" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="left" />
		    <par id="parid(command)" value="left" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="up" />
		    <par id="parid(command)" value="up" />
		</action>
		<action id="propid(Bind)">
		    <par id="parid(trigger)" value="down" />
		    <par id="parid(command)" value="down" />
		</action>
	    </event>

	    <!--
	      - Override from superscript so that we can check collision
	      - here.
	      -->
	    <event name="actualmove">
	        <super />
		<var entity="bdash_main" name="layer_movetox" value="(?bdash_main.vis/2-?x)*?bdash_main.blockdim" />
		<var entity="bdash_main" name="layer_movetoy" value="(?bdash_main.vis/2-?y)*?bdash_main.blockdim" />
	    </event>

	    <!--
	      - Routine used by the checkmove events below to clear a block.
	      - This version does not force a falling object check because
	      - it is supposed to be used when the player moves to the clear
	      - block.
	      - Uses ?mazepos for the position of the block to clear.
	      -->
	    <event name="clearblock_nocheck">
	        <var entity="bdash_main" name="mazepos" value="?mazepos" />
		<call entity="bdash_main" event="clearblock_nocheck" />
	    </event>

	    <!--
	      - Start moving the hero. This will set the block at
	      - ?x+?dx,?y+?dy to 'H'.
	      -->
	    <event name="startmove">
	    	<var name="oldx" value="?x" />
	    	<var name="oldy" value="?y" />
		<var entity="bdash_main" name="blocktype" value="'H'" />
		<var entity="bdash_main" name="x" value="?x+?dx" />
		<var entity="bdash_main" name="y" value="?y+?dy" />
		<var entity="bdash_main" name="entity" value="ent()" />
		<call entity="bdash_main" event="setblock" />
	        <super />
	    </event>

	    <!--
	      - Our hero has stopped moving. This is called by the superscript
	      - and we use this to clear the block where the hero started from.
	      -->
	    <event name="endmove">
	    	<super />
		<var entity="bdash_main" name="blocktype" value="' '" />
		<var entity="bdash_main" name="x" value="?oldx" />
		<var entity="bdash_main" name="y" value="?oldy" />
		<var entity="bdash_main" name="entity" value="''" />
		<call entity="bdash_main" event="setblock" />
	    </event>

	    <!--
	      - Check if a move is possible and perform the move
	      - if so. Uses ?dx and ?dy to get the move direction and
	      - ?x and ?y for current position.
	      - This routine will fire one of the 'checkmove_' events below
	      - depending on the contents of the block we move too.
	      -->
	    <event name="checkmove">
	        <if eval="?moving">
		    <stop />
		</if>
	    	<var name="mazepos" value="(?x+?dx)+'_'+(?y+?dy)" />
		<call event="checkmove_+?bdash_main.(maze+?mazepos)" />
	    </event>

	    <event name="checkmove_ ">
		<call event="startmove" />
	    </event>
	    <event name="checkmove_#">
	    	<call event="clearblock_nocheck" />
		<call event="startmove" />
	    </event>
	    <event name="checkmove_B">
	    </event>
	    <event name="checkmove_X">
		<sound name="bloop" loop="false" />
	    	<call event="clearblock_nocheck" />
		<call event="startmove" />
	    </event>

	    <!--
	      - This block doesn't support falling down.
	      -->
	    <event name="falldown">
	    	<var entity="bdash_main" name="fallen" value="false" />
	    </event>

	    <!--
	      - Movement events.
	      -->
	    <event name="pckeyinput_right1">
	    	<var name="dx" value="1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_left1">
	    	<var name="dx" value="-1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_down1">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="1" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_up1">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="-1" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_right_">
	    	<var name="dx" value="1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_left_">
	    	<var name="dx" value="-1" />
	    	<var name="dy" value="0" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_down_">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="1" />
		<call event="checkmove" />
	    </event>
	    <event name="pckeyinput_up_">
	    	<var name="dx" value="0" />
	    	<var name="dy" value="-1" />
		<call event="checkmove" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script handles all operations on a non-movable block in the
	  - boulderdash game.
	  -  ***************************************************** -->
        <script name="bdash_nonmovable">
	    <!--
	      - Initialize this block.
	      - It assumes ?bdash_main.x and ?bdash_main.y are set to the
	      - x,y index of the block. And it also assumes ?bdash_main.blocktype
	      - is set. It also uses the ?bdash_main.material_ array.
	      - Also uses ?bdash_main.blockdim.
	      -->
	    <event name="init">
	        <createpropclass name="pcbillboard" />
	        <createpropclass name="pcproperties" />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(name)" value="block" />
	        <property id="propid(materialname)" value="?bdash_main.(material_+?bdash_main.blocktype)" />
	        <property id="propid(movable)" value="false" />
	        <property id="propid(clickable)" value="false" />
	        <property id="propid(restack)" value="false" />
	        <property id="propid(width)" value="640+?bdash_main.blockdim" />
	        <property id="propid(height)" value="640+?bdash_main.blockdim" />
	        <property id="propid(x)" value="?bdash_main.x*?bdash_main.blockdim" />
	        <property id="propid(y)" value="?bdash_main.y*?bdash_main.blockdim" />
	        <property id="propid(layer)" value="game" />
	    </event>

	    <!--
	      - This block doesn't support falling down.
	      -->
	    <event name="falldown">
	    	<var entity="bdash_main" name="fallen" value="false" />
	    </event>
	</script>

	<!-- *****************************************************
	  - This script handles all operations on a movable block in the
	  - boulderdash game.
	  -  ***************************************************** -->
        <script name="bdash_movable">
	    <superscript name="movingobject" />

	    <!--
	      - Initialize this block.
	      - It assumes ?bdash_main.x and ?bdash_main.y are set to the
	      - x,y index of the block. And it also assumes ?bdash_main.blocktype
	      - is set. It also uses the ?bdash_main.material_ array.
	      - Also uses ?bdash_main.blockdim.
	      -->
	    <event name="init">
	        <var name="x" value="?bdash_main.x" />
	        <var name="y" value="?bdash_main.y" />
		<!-- @@@ Should add +640 but movingobject doesn't support this -->
		<var name="dim" value="?bdash_main.blockdim" />
	        <var name="blocktype" value="?bdash_main.blocktype" />
	        <var name="material" value="?bdash_main.(material_+?blocktype)" />
		<var name="speed" value="?bdash_main.fallspeed" />
		<super />
		<default propclass="pc(pcbillboard)" />
	        <property id="propid(layer)" value="game" />
	    </event>

	    <event name="startmove">
	    	<var name="oldx" value="?x" />
	    	<var name="oldy" value="?y" />
		<var entity="bdash_main" name="blocktype" value="?blocktype" />
		<var entity="bdash_main" name="x" value="?x+?dx" />
		<var entity="bdash_main" name="y" value="?y+?dy" />
		<var entity="bdash_main" name="entity" value="ent()" />
		<call entity="bdash_main" event="setblock" />
		<super />
	    </event>
	    <event name="endmove">
		<super />
		<var entity="bdash_main" name="blocktype" value="' '" />
		<var entity="bdash_main" name="x" value="?oldx" />
		<var entity="bdash_main" name="y" value="?oldy" />
		<var entity="bdash_main" name="entity" value="''" />
		<call entity="bdash_main" event="setblock" />
		<var entity="bdash_main" name="x" value="?x" />
		<var entity="bdash_main" name="y" value="?y+1" />
		<call entity="bdash_main" event="ifempty_checkfall" />
	    </event>

	    <!--
	      - This block supports falling down. Uses ?dx and ?dy for
	      - the flal direction.
	      -->
	    <event name="falldown">
	        <if eval="?moving">
		    <stop />
		</if>
		<call event="startmove" />
	    	<var entity="bdash_main" name="fallen" value="true" />
	    </event>
	</script>


    </addon>

    <addon plugin="celentity" entityname="menu">
        <behaviour name="menu" />
    </addon>
</world>

