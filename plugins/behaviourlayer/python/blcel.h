/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_blcelc_WRAP_H_
#define SWIG_blcelc_WRAP_H_

#include <map>
#include <string>


struct SwigDirector_PcCommonFactory : public PcCommonFactory, public Swig::Director {

public:
    SwigDirector_PcCommonFactory(PyObject *self);
    virtual ~SwigDirector_PcCommonFactory();
    virtual char const *GetName() const;
    virtual iCelPropertyClass *CreateScriptPropertyClass(char const *name);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class PcCommonFactory doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[2];
#endif

};


class SwigDirector_pyPcCommon : public pyPcCommon, public Swig::Director {

public:
    SwigDirector_pyPcCommon(PyObject *self, iObjectRegistry *object_reg);
    virtual ~SwigDirector_pyPcCommon();
    virtual void SetEntity(iCelEntity *entity);
    virtual bool SetProperty(csStringID id, long value);
    virtual bool SetProperty(csStringID id, float value);
    virtual bool SetProperty(csStringID id, bool value);
    virtual bool SetProperty(csStringID id, char const *value);
    virtual bool SetProperty(csStringID id, csVector2 const &value);
    virtual bool SetProperty(csStringID id, csVector3 const &value);
    virtual bool SetProperty(csStringID id, csColor const &value);
    virtual bool SetProperty(csStringID id, iCelPropertyClass *value);
    virtual bool SetProperty(csStringID id, iCelEntity *entity);
    virtual bool SetProperty(csStringID id, iBase *ibase);
    virtual celDataType GetPropertyOrActionType(csStringID id);
    virtual bool IsPropertyReadOnly(csStringID arg0);
    virtual long GetPropertyLongByID(csStringID id);
    virtual float GetPropertyFloatByID(csStringID id);
    virtual bool GetPropertyBoolByID(csStringID id);
    virtual char const *GetPropertyStringByID(csStringID id);
    virtual bool GetPropertyVectorByID(csStringID id, csVector2 &v);
    virtual bool GetPropertyVectorByID(csStringID id, csVector3 &v);
    virtual bool GetPropertyColorByID(csStringID id, csColor &v);
    virtual iCelPropertyClass *GetPropertyPClassByID(csStringID id);
    virtual iCelEntity *GetPropertyEntityByID(csStringID id);
    virtual iBase *GetPropertyIBaseByID(csStringID id);
    virtual bool PerformAction(csStringID actionID, iCelParameterBlock *params, celData &ret);
    virtual size_t GetPropertyAndActionCount();
    virtual csStringID GetPropertyOrActionID(size_t arg0);
    virtual char const *GetPropertyOrActionDescription(csStringID arg0);
    virtual void TickEveryFrame();
    virtual void TickOnce();
    virtual void MessageDispatcherRemoved(iMessageDispatcher *dispatcher);
    virtual bool SetPropertyIndexed(int arg0, long arg1);
    virtual bool SetPropertyIndexed(int arg0, float arg1);
    virtual bool SetPropertyIndexed(int arg0, bool arg1);
    virtual bool SetPropertyIndexed(int arg0, char const *arg1);
    virtual bool SetPropertyIndexed(int arg0, csVector2 const &arg1);
    virtual bool SetPropertyIndexed(int arg0, csVector3 const &arg1);
    virtual bool SetPropertyIndexed(int arg0, csColor const &arg1);
    virtual bool SetPropertyIndexed(int arg0, iCelPropertyClass *pclass);
    virtual bool SetPropertyIndexed(int arg0, iCelEntity *entity);
    virtual bool SetPropertyIndexed(int arg0, iBase *ibase);
    virtual bool GetPropertyIndexed(int arg0, long &l);
    virtual bool GetPropertyIndexed(int arg0, float &f);
    virtual bool GetPropertyIndexed(int arg0, bool &b);
    virtual bool GetPropertyIndexed(int arg0, char const *&arg1);
    virtual bool GetPropertyIndexed(int arg0, csVector2 &arg1);
    virtual bool GetPropertyIndexed(int arg0, csVector3 &arg1);
    virtual bool GetPropertyIndexed(int arg0, csColor &arg1);
    virtual bool GetPropertyIndexed(int arg0, iCelPropertyClass *&arg1);
    virtual bool GetPropertyIndexed(int arg0, iCelEntity *&arg1);
    virtual bool GetPropertyIndexed(int arg0, iBase *&arg1);
    virtual bool PerformActionIndexed(int arg0, iCelParameterBlock *arg1, celData &ret);


/* Internal Director utilities */
public:
    bool swig_get_inner(const char* name) const {
      std::map<std::string, bool>::const_iterator iv = inner.find(name);
      return (iv != inner.end() ? iv->second : false);
    }

    void swig_set_inner(const char* name, bool val) const
    { inner[name] = val;}

private:
    mutable std::map<std::string, bool> inner;


#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
/* VTable implementation */
    PyObject *swig_get_method(size_t method_index, const char *method_name) const {
      PyObject *method = vtable[method_index];
      if (!method) {
        swig::PyObject_var name = PyString_FromString(method_name);
        method = PyObject_GetAttr(swig_get_self(), name);
        if (method == NULL) {
          std::string msg = "Method in class pyPcCommon doesn't exist, undefined ";
          msg += method_name;
          Swig::DirectorMethodException::raise(msg.c_str());
        }
        vtable[method_index] = method;
      };
      return method;
    }
private:
    mutable swig::PyObject_var vtable[51];
#endif

};


#endif
