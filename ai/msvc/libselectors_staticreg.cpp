// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_selectors[] =
"<?xml version=\"1.0\"?>"
"<!-- selectors.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>cel.selectors.default</name>"
"        <implementation>celDefaultSelector</implementation>"
"        <description>CEL Selector: Executes children in order until one succeeds</description>"
"      </class>"
"    "
"      <class>"
"        <name>cel.selectors.sequential</name>"
"        <implementation>celSequentialSelector</implementation>"
"        <description>CEL Selector: Executes children in order until one fails</description>"
"      </class>"
"      "
"      <class>"
"        <name>cel.selectors.random</name>"
"        <implementation>celRandomSelector</implementation>"
"        <description>CEL Selector: Executes a randomly chosen child</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef celDefaultSelector_FACTORY_REGISTER_DEFINED 
  #define celDefaultSelector_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celDefaultSelector) 
  #endif
  #ifndef celSequentialSelector_FACTORY_REGISTER_DEFINED 
  #define celSequentialSelector_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celSequentialSelector) 
  #endif
  #ifndef celRandomSelector_FACTORY_REGISTER_DEFINED 
  #define celRandomSelector_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(celRandomSelector) 
  #endif

class selectors
{
SCF_REGISTER_STATIC_LIBRARY(selectors,metainfo_selectors)
  #ifndef celDefaultSelector_FACTORY_REGISTERED 
  #define celDefaultSelector_FACTORY_REGISTERED 
    celDefaultSelector_StaticInit celDefaultSelector_static_init__; 
  #endif
  #ifndef celSequentialSelector_FACTORY_REGISTERED 
  #define celSequentialSelector_FACTORY_REGISTERED 
    celSequentialSelector_StaticInit celSequentialSelector_static_init__; 
  #endif
  #ifndef celRandomSelector_FACTORY_REGISTERED 
  #define celRandomSelector_FACTORY_REGISTERED 
    celRandomSelector_StaticInit celRandomSelector_static_init__; 
  #endif
public:
 selectors();
};
selectors::selectors() {}

}
