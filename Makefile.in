#======================================================================
# This is a generic makefile that has to be used together with the
# 'cs-config' utility that can be generated by Crystal Space.
#
# To use this you first have to generate a config file by doing:
#       make csconfig
# in the Crystal Space directory. Then copy the generated cs-config
# script (which will be in the CS root initially) to your project
# directory.
#
# You also have to edit this makefile so it is suitable for your project.
# You probably want to change at least:
#       EXECUTABLE for the name of the executable
#       OBJSRC for the location of the sources
#       LINKFLAGS for all the libraries that your application needs
#
# If you want to compile plugins as well, edit:
#       PLUGIN for the name of the plugin
#       PLUGIN.OBJSRC for the location of the plugin sources
#       PLUGIN.LINKFLAGS for the libraries that the plugin needs
#
# If you installed Crystal Space (usually /usr/local/crystal) then
# this makefile should already work. If not you need to set the CRYSTAL
# environment variable to point to the Crystal Space directory.
#
# This makefile supports the following targets: all, clean, depend.
#======================================================================

SRCDIR = @top_srcdir@

ifeq (,$(SRCDIR))
SRCDIR = .
endif
ifeq (,$(OUT))
OUT= .
endif

#------
# Master module list
#------
MODULE_LIST = \
    BLTEST \
    BLPYTHON \
    PFTEST \
    PFMESH \
    PFMOVE \
    PFTOOLS \
    PFENG \
    PFINV \
    PFINPUT \
    STDPL \
    CPERSIST \
    CELTEST \
    CELPYTHON

#------
# Basenames of built resources
#------
N_BLTEST=bltest
N_BLPYTHON=blpython
N_PFTEST=pftest
N_PFMESH=pfmesh
N_PFMOVE=pfmove
N_PFTOOLS=pftools
N_PFENG=pfengine
N_PFINV=pfinv
N_PFINPUT=pfinput
N_STDPL=stdphyslayer
N_CPERSIST=cpersist
N_CELTEST=celtest
N_CELPYTHON=celpyth

#------
# Target types
#------
T_BLTEST=plugin
T_BLPYTHON=plugin
T_PFTEST=plugin
T_PFMESH=plugin
T_PFMOVE=plugin
T_PFTOOLS=plugin
T_PFENG=plugin
T_PFINV=plugin
T_PFINPUT=plugin
T_STDPL=plugin
T_CPERSIST=plugin
T_CELTEST=appgui
T_CELPYTHON=appgui

#------
# Names of targets
#------
BLTEST=$(OUT)/$(N_BLTEST)$(DLL)
BLPYTHON=$(OUT)/$(N_BLPYTHON)$(DLL)
PFTEST=$(OUT)/$(N_PFTEST)$(DLL)
PFMESH=$(OUT)/$(N_PFMESH)$(DLL)
PFMOVE=$(OUT)/$(N_PFMOVE)$(DLL)
PFTOOLS=$(OUT)/$(N_PFTOOLS)$(DLL)
PFENG=$(OUT)/$(N_PFENG)$(DLL)
PFINV=$(OUT)/$(N_PFINV)$(DLL)
PFINPUT=$(OUT)/$(N_PFINPUT)$(DLL)
STDPL=$(OUT)/$(N_STDPL)$(DLL)
CPERSIST=$(OUT)/$(N_CPERSIST)$(DLL)
CELTEST=$(OUT)/$(N_CELTEST)$(EXE)
CELPYTHON=$(OUT)/$(N_CELPYTHON)$(EXE)

#------
# Location of sources and object files
#------
CPERSIST_SRC=$(wildcard $(SRCDIR)/plugins/persist/classic/*.cpp)
CPERSIST_INC=$(wildcard $(SRCDIR)/plugins/persist/classic/*.h)
CPERSIST_INF=$(SRCDIR)/plugins/persist/classic/cpersist.csplugin
CPERSIST_INF_OUT=$(OUT)/cpersist.csplugin
CPERSIST_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(CPERSIST_SRC))))
STDPL_SRC=$(wildcard $(SRCDIR)/plugins/stdphyslayer/*.cpp)
STDPL_INC=$(wildcard $(SRCDIR)/plugins/stdphyslayer/*.h)
STDPL_INF=$(SRCDIR)/plugins/stdphyslayer/stdphyslayer.csplugin
STDPL_INF_OUT=$(OUT)/stdphyslayer.csplugin
STDPL_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(STDPL_SRC))))
BLTEST_SRC=$(wildcard $(SRCDIR)/plugins/behaviourlayer/test/*.cpp)
BLTEST_INC=$(wildcard $(SRCDIR)/plugins/behaviourlayer/test/*.h)
BLTEST_INF=$(SRCDIR)/plugins/behaviourlayer/test/bltest.csplugin
BLTEST_INF_OUT=$(OUT)/bltest.csplugin
BLTEST_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(BLTEST_SRC))))
BLPYTHON_SRC=$(wildcard $(SRCDIR)/plugins/behaviourlayer/python/*.cpp)
BLPYTHON_INC=$(wildcard $(SRCDIR)/plugins/behaviourlayer/python/*.h)
BLPYTHON_INF=$(SRCDIR)/plugins/behaviourlayer/python/plpython.csplugin
BLPYTHON_INF_OUT=$(OUT)/plpython.csplugin
BLPYTHON_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(BLPYTHON_SRC))))
PFTEST_SRC=$(wildcard $(SRCDIR)/plugins/propclass/test/*.cpp plugins/propclass/common/*.cpp)
PFTEST_INC=$(wildcard $(SRCDIR)/plugins/propclass/test/*.h plugins/propclass/common/*.h)
PFTEST_INF=$(SRCDIR)/plugins/propclass/test/pftest.csplugin
PFTEST_INF_OUT=$(OUT)/pftest.csplugin
PFTEST_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFTEST_SRC))))
PFMESH_SRC=$(wildcard $(SRCDIR)/plugins/propclass/mesh/*.cpp plugins/propclass/common/*.cpp)
PFMESH_INC=$(wildcard $(SRCDIR)/plugins/propclass/mesh/*.h plugins/propclass/common/*.h)
PFMESH_INF=$(SRCDIR)/plugins/propclass/mesh/pfmesh.csplugin
PFMESH_INF_OUT=$(OUT)/pfmesh.csplugin
PFMESH_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFMESH_SRC))))
PFMOVE_SRC=$(wildcard $(SRCDIR)/plugins/propclass/move/*.cpp plugins/propclass/common/*.cpp)
PFMOVE_INC=$(wildcard $(SRCDIR)/plugins/propclass/move/*.h plugins/propclass/common/*.h)
PFMOVE_INF=$(SRCDIR)/plugins/propclass/move/pfmove.csplugin
PFMOVE_INF_OUT=$(OUT)/pfmove.csplugin
PFMOVE_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFMOVE_SRC))))
PFTOOLS_SRC=$(wildcard $(SRCDIR)/plugins/propclass/tools/*.cpp plugins/propclass/common/*.cpp)
PFTOOLS_INC=$(wildcard $(SRCDIR)/plugins/propclass/tools/*.h plugins/propclass/common/*.h)
PFTOOLS_INF=$(SRCDIR)/plugins/propclass/tools/pftools.csplugin
PFTOOLS_INF_OUT=$(OUT)/pftools.csplugin
PFTOOLS_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFTOOLS_SRC))))
PFENG_SRC=$(wildcard $(SRCDIR)/plugins/propclass/engine/*.cpp plugins/propclass/common/*.cpp)
PFENG_INC=$(wildcard $(SRCDIR)/plugins/propclass/engine/*.h plugins/propclass/common/*.h)
PFENG_INF=$(SRCDIR)/plugins/propclass/engine/pfengine.csplugin
PFENG_INF_OUT=$(OUT)/pfengine.csplugin
PFENG_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFENG_SRC))))
PFINV_SRC=$(wildcard $(SRCDIR)/plugins/propclass/inv/*.cpp plugins/propclass/common/*.cpp)
PFINV_INC=$(wildcard $(SRCDIR)/plugins/propclass/inv/*.h plugins/propclass/common/*.h)
PFINV_INF=$(SRCDIR)/plugins/propclass/inv/pfinv.csplugin
PFINV_INF_OUT=$(OUT)/pfinv.csplugin
PFINV_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFINV_SRC))))
PFINPUT_SRC=$(wildcard $(SRCDIR)/plugins/propclass/input/*.cpp plugins/propclass/common/*.cpp)
PFINPUT_INC=$(wildcard $(SRCDIR)/plugins/propclass/input/*.h plugins/propclass/common/*.h)
PFINPUT_INF=$(SRCDIR)/plugins/propclass/input/pfinput.csplugin
PFINPUT_INF_OUT=$(OUT)/pfinput.csplugin
PFINPUT_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(PFINPUT_SRC))))
CELTEST_SRC=$(wildcard $(SRCDIR)/apps/celtest/*.cpp)
CELTEST_INC=$(wildcard $(SRCDIR)/apps/celtest/*.h)
CELTEST_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(CELTEST_SRC))))
CELPYTHON_SRC=$(wildcard $(SRCDIR)/apps/celpython/*.cpp)
CELPYTHON_INC=$(wildcard $(SRCDIR)/apps/celpython/*.h)
CELPYTHON_OBJS=$(addprefix $(OUT)/,$(addsuffix .o, $(basename $(CELPYTHON_SRC))))

#------
# Tools to use
#------
ifndef CXX
CXX=g++
endif
ifndef LINK
LINK=$(CXX)
endif
RM=rm -rf
CP=cp

#------
# Abstractions
#------
LFLAGS.L = -L
LFLAGS.l = -l
CFLAGS.D = -D
CFLAGS.I = -I

#------
# Flags for compiler and linker.
# Make sure to update the required libraries for your own project
#------
CSCONFIG.MAK=csconfig.mak
-include $(CSCONFIG.MAK)

ifeq ($(LINK.PLUGIN),)
  LINK.PLUGIN=$(LINK)
endif
CSDIR := $(shell ./cs-config --prefix)
CEL_INCLUDES=-I. -Iinclude
CFLAGS := $(shell ./cs-config --cflags) $(CEL_INCLUDES) -DCEL_DEBUG
CXXFLAGS := $(shell ./cs-config --cxxflags) $(CEL_INCLUDES) -I$(PYTHON_INCDIR) -DCEL_DEBUG

CPERSIST_LINKFLAGS = $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
STDPL_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
BLTEST_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
BLPYTHON_LINKFLAGS := $(shell ./cs-config --libs python cstool csutil cssys csgfx csgeom)
BLPYTHON_CXXFLAGS := $(shell ./cs-config --cxxflags python cstool csutil cssys csgfx csgeom) $(CEL_INCLUDES)
PFTEST_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
PFMESH_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
PFMOVE_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
PFTOOLS_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
PFENG_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
PFINV_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
PFINPUT_LINKFLAGS :=  $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
CELTEST_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)
CELPYTHON_LINKFLAGS := $(shell ./cs-config --libs cstool csutil cssys csgfx csgeom)

#------
# Rules
#------
.PHONY: all depend clean distclean
.SUFFIXES: .cpp
DO.SHARED.PLUGIN.CORE=$(LINK.PLUGIN) $(LFLAGS.DLL) -o $@ $^ $(PLUGIN.POSTFLAGS)
DO.PLUGIN = \
  $(DO.SHARED.PLUGIN.PREAMBLE) \
  $(DO.SHARED.PLUGIN.CORE) \
  $(DO.SHARED.PLUGIN.POSTAMBLE)
DO.EXEC = $(LINK) -o $@ $^ $(LFLAGS.EXE) $(LIBS.EXE.PLATFORM)

.cpp.o: $<
	$(CXX) $(CXXFLAGS) -o $@ -c $<

all: $(CSCONFIG.MAK) \
    $(CPERSIST) $(CPERSIST_INF_OUT) \
    $(STDPL) $(STDPL_INF_OUT) \
    $(BLTEST) $(BLTEST_INF_OUT) \
    $(PFTEST) $(PFTEST_INF_OUT) \
    $(PFMESH) $(PFMESH_INF_OUT) \
    $(PFMOVE) $(PFMOVE_INF_OUT) \
    $(PFTOOLS) $(PFTOOLS_INF_OUT) \
    $(PFENG) $(PFENG_INF_OUT) \
    $(PFINV) $(PFINV_INF_OUT) \
    $(PFINPUT) $(PFINPUT_INF_OUT) \
    $(BLPYTHON) $(BLPYTHON_INF_OUT) \
    $(CELTEST) \
    $(CELPYTHON)

$(CPERSIST): $(CPERSIST_OBJS)
	$(DO.PLUGIN) $(CPERSIST_LINKFLAGS)

$(CPERSIST_INF_OUT): $(CPERSIST_INF)
	$(CP) $(CPERSIST_INF) $(CPERSIST_INF_OUT)

$(STDPL): $(STDPL_OBJS)
	$(DO.PLUGIN) $(STDPL_LINKFLAGS)

$(STDPL_INF_OUT): $(STDPL_INF)
	$(CP) $(STDPL_INF) $(STDPL_INF_OUT)

$(BLTEST): $(BLTEST_OBJS)
	$(DO.PLUGIN) $(BLTEST_LINKFLAGS)

$(BLTEST_INF_OUT): $(BLTEST_INF)
	$(CP) $(BLTEST_INF) $(BLTEST_INF_OUT)

$(BLPYTHON_OBJS): %.o: %.cpp
	$(CXX) $(BLPYTHON_CXXFLAGS) -o $*.o -c $*.cpp
	
$(BLPYTHON): $(BLPYTHON_OBJS)
	$(DO.PLUGIN) $(BLPYTHON_LINKFLAGS)

$(BLPYTHON_INF_OUT): $(BLPYTHON_INF)
	$(CP) $(BLPYTHON_INF) $(BLPYTHON_INF_OUT)

$(PFTEST): $(PFTEST_OBJS)
	$(DO.PLUGIN) $(PFTEST_LINKFLAGS)

$(PFTEST_INF_OUT): $(PFTEST_INF)
	$(CP) $(PFTEST_INF) $(PFTEST_INF_OUT)

$(PFMESH): $(PFMESH_OBJS)
	$(DO.PLUGIN) $(PFMESH_LINKFLAGS)

$(PFMESH_INF_OUT): $(PFMESH_INF)
	$(CP) $(PFMESH_INF) $(PFMESH_INF_OUT)

$(PFMOVE): $(PFMOVE_OBJS)
	$(DO.PLUGIN) $(PFMOVE_LINKFLAGS)

$(PFMOVE_INF_OUT): $(PFMOVE_INF)
	$(CP) $(PFMOVE_INF) $(PFMOVE_INF_OUT)

$(PFTOOLS): $(PFTOOLS_OBJS)
	$(DO.PLUGIN) $(PFTOOLS_LINKFLAGS)

$(PFTOOLS_INF_OUT): $(PFTOOLS_INF)
	$(CP) $(PFTOOLS_INF) $(PFTOOLS_INF_OUT)

$(PFENG): $(PFENG_OBJS)
	$(DO.PLUGIN) $(PFENG_LINKFLAGS)

$(PFENG_INF_OUT): $(PFENG_INF)
	$(CP) $(PFENG_INF) $(PFENG_INF_OUT)

$(PFINV): $(PFINV_OBJS)
	$(DO.PLUGIN) $(PFINV_LINKFLAGS)

$(PFINV_INF_OUT): $(PFINV_INF)
	$(CP) $(PFINV_INF) $(PFINV_INF_OUT)

$(PFINPUT): $(PFINPUT_OBJS)
	$(DO.PLUGIN) $(PFINPUT_LINKFLAGS)

$(PFINPUT_INF_OUT): $(PFINPUT_INF)
	$(CP) $(PFINPUT_INF) $(PFINPUT_INF_OUT)

$(CELTEST): $(CELTEST_OBJS)
	$(DO.EXEC) $(CELTEST_LINKFLAGS)

$(CELPYTHON): $(CELPYTHON_OBJS)
	$(DO.EXEC) $(CELPYTHON_LINKFLAGS)

clean:
	$(RM) *.def msvcfrag* \
	$(BLPYTHON) $(BLPYTHON_OBJS) $(BLPYTHON_INF_OUT) \
	$(BLTEST) $(BLTEST_OBJS) $(BLTEST_INF_OUT) \
	$(CPERSIST) $(CPERSIST_OBJS) $(CPERSIST_INF_OUT) \
	$(PFENG) $(PFENG_OBJS) $(PFENG_INF_OUT) \
	$(PFINPUT) $(PFINPUT_OBJS) $(PFINPUT_INF_OUT) \
	$(PFINV) $(PFINV_OBJS) $(PFINV_INF_OUT) \
	$(PFMESH) $(PFMESH_OBJS) $(PFMESH_INF_OUT) \
	$(PFMOVE) $(PFMOVE_OBJS) $(PFMOVE_INF_OUT) \
	$(PFTEST) $(PFTEST_OBJS) $(PFTEST_INF_OUT) \
	$(PFTOOLS) $(PFTOOLS_OBJS) $(PFTOOLS_INF_OUT) \
	$(STDPL) $(STDPL_OBJS) $(STDPL_INF_OUT) \
	$(CELPYTHON) $(CELPYTHON_OBJS) \
	$(CELTEST) $(CELTEST_OBJS)
ifneq (.,$(OUT))
	$(RM) $(OUT)
endif

distclean: clean
	$(RM) Jamconfig Makefile config.* csconfig.mak

#------
# Run swig for the blpython plugin.
#------
blpythonswig:
	swig -python -I$(CSDIR)/include -I$(CSDIR)/include/ivaria -c++ -shadow \
		-o plugins/behaviourlayer/python/blcel.cpp plugins/behaviourlayer/python/blpython.i
	mv plugins/behaviourlayer/python/blcelc.py scripts

#------
# Create dependencies
#------
depend: $(CSCONFIG.MAK)
	gcc -M $(CPERSIST_SRC) $(CXXFLAGS) > makefile.dep
	gcc -M $(CXXFLAGS) $(STDPL_SRC) > makefile.dep
	gcc -M $(CXXFLAGS) $(BLTEST_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(BLPYTHON_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFTEST_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFMESH_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFMOVE_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFTOOLS_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFENG_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFINV_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(PFINPUT_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(CELTEST_SRC) >> makefile.dep
	gcc -M $(CXXFLAGS) $(CELPYHON_SRC) >> makefile.dep

#------
# Re-create the config flags include file
#------
$(CSCONFIG.MAK): ./cs-config
	./cs-config --makevars > $(CSCONFIG.MAK)

#------
# MSVC project file generation
#------
MSVCGEN_PROJ_EXT_6=dsp
MSVCGEN_PROJ_EXT_7=vcproj
MSVCGEN_WS_EXT_6=dsw
MSVCGEN_WS_EXT_7=sln
MSVCGEN_EXTRA_OPTS_6=
MSVCGEN_EXTRA_OPTS_7=--xml-protect

define MSVCGEN_PROJ
$(RM) $(SRCDIR)/msvc/$(N_$(r)).$(MSVCGEN_PROJ_EXT_$(MSVCGEN_VER))
perl $(SRCDIR)/mk/msvcgen/msvcgen.pl \
--quiet \
--project \
--project-extension=$(MSVCGEN_PROJ_EXT_$(MSVCGEN_VER)) \
--name=$(N_$(r)) \
--strip-root=$(SRCDIR)/ \
--template=$(T_$(r)) \
--template-dir=$(SRCDIR)/mk/msvcgen/template$(MSVCGEN_VER) \
--output=$(SRCDIR)/msvc/$(N_$(r)).$(MSVCGEN_PROJ_EXT_$(MSVCGEN_VER)) \
--fragment=$(OUT)/msvcfrag$(MSVCGEN_VER)/$(N_$(r)).frag \
$(foreach m,$($(r)_INF),--meta-file=$m) \
$(MSVCGEN_EXTRA_OPTS_$(MSVCGEN_VER)) \
$($(r)_SRC) $($(r)_INC)

endef

define MSVCGEN_WRKSPC
$(RM) $(SRCDIR)/cel.$(MSVCGEN_WS_EXT_$(MSVCGEN_VER))
perl $(SRCDIR)/mk/msvcgen/msvcgen.pl \
--quiet \
--workspace \
--workspace-extension=$(MSVCGEN_WS_EXT_$(MSVCGEN_VER)) \
--template-dir=$(SRCDIR)/mk/msvcgen/template$(MSVCGEN_VER) \
--output=$(SRCDIR)/cel.$(MSVCGEN_WS_EXT_$(MSVCGEN_VER)) \
$(MSVCGEN_EXTRA_OPTS_$(MSVCGEN_VER)) \
$(foreach f,$(MODULE_LIST),$(OUT)/msvcfrag$(MSVCGEN_VER)/$(N_$(f)).frag)

endef

.PHONY: msvcgen
msvcgen:
	$(MAKE) -f Makefile MSVCGEN_VER=6 do_msvcgen
	$(MAKE) -f Makefile MSVCGEN_VER=7 do_msvcgen

.PHONY: do_msvcgen
do_msvcgen:
	if test \! -d $(OUT)/msvcfrag$(MSVCGEN_VER) ; then mkdir $(OUT)/msvcfrag$(MSVCGEN_VER) ; fi
	$(foreach r,$(MODULE_LIST),$(MSVCGEN_PROJ))
	$(MSVCGEN_WRKSPC)

#------
# Include dependencies
#------
-include makefile.dep
